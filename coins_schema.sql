--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: coins; Type: DATABASE; Schema: -; Owner: postgres
--

CREATE DATABASE coins WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8';


ALTER DATABASE coins OWNER TO postgres;

\connect coins

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: casdba; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA casdba;


ALTER SCHEMA casdba OWNER TO postgres;

--
-- Name: dtdba; Type: SCHEMA; Schema: -; Owner: ni_developers
--

CREATE SCHEMA dtdba;


ALTER SCHEMA dtdba OWNER TO ni_developers;

--
-- Name: dxdba; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA dxdba;


ALTER SCHEMA dxdba OWNER TO postgres;

--
-- Name: mrsdba; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA mrsdba;


ALTER SCHEMA mrsdba OWNER TO postgres;

--
-- Name: mydba; Type: SCHEMA; Schema: -; Owner: niternal
--

CREATE SCHEMA mydba;


ALTER SCHEMA mydba OWNER TO niternal;

--
-- Name: nifdba; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA nifdba;


ALTER SCHEMA nifdba OWNER TO postgres;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: adminpack; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS adminpack WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION adminpack; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION adminpack IS 'administrative functions for PostgreSQL';


--
-- Name: tablefunc; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS tablefunc WITH SCHEMA public;


--
-- Name: EXTENSION tablefunc; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION tablefunc IS 'functions that manipulate whole tables, including crosstab';


SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_response_type; Type: TYPE; Schema: mrsdba; Owner: ni_developers
--

CREATE TYPE mrs_response_type AS (
	question_id character varying(20),
	question_instance numeric(3,0),
	response_value character varying,
	response_value_description character varying
);


ALTER TYPE mrs_response_type OWNER TO ni_developers;

SET search_path = casdba, pg_catalog;

--
-- Name: CAS_REVOKE_STUDY_ROLE_F(character varying, numeric, character varying, numeric); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION "CAS_REVOKE_STUDY_ROLE_F"(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

 /**
  * Revoke role priv from user for the
  * specified application.
  */
 DELETE FROM cas_study_user_role_privs
  WHERE study_id=p_study_id
    AND username=p_username
    AND role_id=p_role_id;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'study user role privilege does not exist';
 END IF;



 RETURN '1';
end;
$$;


ALTER FUNCTION casdba."CAS_REVOKE_STUDY_ROLE_F"(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) OWNER TO postgres;

--
-- Name: cas_activate_user_f(character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_activate_user_f(p_dbtrans_username_pt character varying, p_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

 /**
  * Activate the user by setting the active_flag='Y'.  Make sure
  * that the user is inactive.
  */

 UPDATE cas_users
    SET active_flag='Y'
  WHERE username=p_username;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Username does not exist';
 END IF;

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */

 INSERT INTO cas_users_hist (
  username,
  label,
  active_flag,
  acct_exp_date,
  password_exp_date,
  site_id,
  mod_user,
  mod_date
 )
 SELECT username,
        label,
        active_flag,
        acct_exp_date,
        password_exp_date,
        site_id,
        p_dbtrans_username_pt,
        now()
   FROM cas_users
  WHERE username=p_username;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Username does not exist';
 ELSE
  RETURN '1';
 END IF;

end;
$$;


ALTER FUNCTION casdba.cas_activate_user_f(p_dbtrans_username_pt character varying, p_username character varying) OWNER TO postgres;

--
-- Name: cas_add_app_f(character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_add_app_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 v_app_id       numeric(4);
BEGIN
 -- Get next application id from sequence
 BEGIN
  SELECT nextval('casdba.casapps_appid_seq')
    INTO v_app_id;
 EXCEPTION
  WHEN OTHERS THEN
   RAISE EXCEPTION  'Sequence casapps_appid_seq is invalid';
 END;

 -- Load application data

 INSERT INTO casdba.cas_apps (
  app_id,
  label,
  description
 )
 VALUES (
  v_app_id,
  p_label,
  p_description
 );

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */

 INSERT INTO casdba.cas_apps_hist (
  app_id,
  label,
  description,
  mod_user,
  mod_date
 )
 VALUES (
  v_app_id,
  p_label,
  p_description,
  p_dbtrans_username_pt,
  now()
 );

 RETURN v_app_id;
end;
$$;


ALTER FUNCTION casdba.cas_add_app_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) OWNER TO postgres;

--
-- Name: cas_add_ip_location_f(character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying); Type: FUNCTION; Schema: casdba; Owner: ni_developers
--

CREATE FUNCTION cas_add_ip_location_f(p_ip_addr character varying, p_country_code character varying, p_country character varying, p_region_code character varying, p_region character varying, p_city character varying, p_latitude numeric, p_longitude numeric, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_ip_id    integer;
   BEGIN

   INSERT INTO cas_ip_locations (
      ip_addr,
      country_code,
      country,
      region_code,
      region,
      city,
      latitude,
      longitude
   ) VALUES (
      p_ip_addr,
      p_country_code,
      p_country,
      p_region_code,
      p_region,
      p_city,
      p_latitude,
      p_longitude
   )
   RETURNING ip_id
   INTO v_ip_id;

   INSERT INTO cas_ip_locations_hist (
      ip_id,
      ip_addr,
      country_code,
      country,
      region_code,
      region,
      city,
      latitude,
      longitude,
      mod_user,
      mod_date
   ) VALUES (
      v_ip_id,
      p_ip_addr,
      p_country_code,
      p_country,
      p_region_code,
      p_region,
      p_city,
      p_latitude,
      p_longitude,
      p_mod_user,
      NOW()
   );

   RETURN v_ip_id;
END;
$$;


ALTER FUNCTION casdba.cas_add_ip_location_f(p_ip_addr character varying, p_country_code character varying, p_country character varying, p_region_code character varying, p_region character varying, p_city character varying, p_latitude numeric, p_longitude numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: cas_add_login_records_f(character varying, timestamp without time zone, character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_add_login_records_f(username_f character varying, login_time_f timestamp without time zone, ip_addr_f character varying, error_code_f character varying, success_f character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare id_f numeric;
begin
select nextval('casdba.cas_login_records_counter') into id_f;
insert into casdba.cas_login_records (
	id,
	username,
	login_time,
	ip_addr,
	error_code,
	success)
values(
	id_f,
	username_f,
	login_time_f,
	ip_addr_f,
	error_code_f,
	success_f);

return '1';

end;$$;


ALTER FUNCTION casdba.cas_add_login_records_f(username_f character varying, login_time_f timestamp without time zone, ip_addr_f character varying, error_code_f character varying, success_f character varying) OWNER TO postgres;

--
-- Name: cas_add_portal_info_f(numeric, numeric); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_add_portal_info_f(app_id_f numeric, study_id_f numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$BEGIN

	insert into casdba.cas_portal_info (app_id, study_id) 
	values (app_id_f, study_id_f);

	return app_id_f;
END;
$$;


ALTER FUNCTION casdba.cas_add_portal_info_f(app_id_f numeric, study_id_f numeric) OWNER TO postgres;

--
-- Name: cas_add_role_f(character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_add_role_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 v_role_id    casdba.cas_roles.role_id%TYPE;
BEGIN
 -- Get next role id from sequence
 BEGIN
  SELECT nextval('casroles_roleid_seq')
    INTO v_role_id;
 EXCEPTION
  WHEN OTHERS THEN
   RAISE EXCEPTION'Sequence casroles_roleid_seq is invalid';
 END;

 -- Load role data
 INSERT INTO cas_roles (
  role_id,
  label,
  description
 )
 VALUES (
  v_role_id,
  p_label,
  p_description
 );

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */
 INSERT INTO cas_roles_hist (
  role_id,
  label,
  description,
  mod_user,
  mod_date
 )
 VALUES (
  v_role_id,
  p_label,
  p_description,
  p_dbtrans_username_pt,
  now()
 );

 RETURN '1';
end;
$$;


ALTER FUNCTION casdba.cas_add_role_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) OWNER TO postgres;

--
-- Name: cas_add_site_f(character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: ni_developers
--

CREATE FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
         v_site_id              cas_sites.site_id%TYPE;   
         v_ursi_prefix          cas_sites.ursi_prefix%TYPE;
         v_exists               BOOLEAN;
      BEGIN

      -- get next site id:
      LOOP
         SELECT nextval('cas_siteid_seq') INTO v_site_id;

         SELECT 
            (case when count(1)>0 then true else false end) into v_exists
         FROM casdba.cas_sites_vw where site_id = v_site_id;

         -- if we found a legit new site_id, then continue on
         IF not v_exists THEN 
            EXIT;
         END IF;

      END LOOP;

      -- generate an ursi prefix:
      LOOP
         SELECT 'M' || trim(to_char(nextval('cas_ursi_prefix_seq'),'000')) INTO v_ursi_prefix;

         SELECT 
            (case when count(1)>0 then true else false end) into v_exists
         FROM casdba.cas_sites_vw where ursi_prefix = v_ursi_prefix;

         -- if we found a legit new ursi_prefix, then continue on
         IF not v_exists THEN 
            EXIT;
         END IF;

      END LOOP;

      -- Load application data
      INSERT INTO cas_sites (
         site_id,
         label,
         description,
         ursi_prefix
      )
      VALUES (
         v_site_id,
         p_label,
         p_description,
         v_ursi_prefix
      );

      INSERT INTO cas_sites_config (
         site_id
      )
      VALUES (
         v_site_id
      );

      /**
      * Load data into history tables.  This is the preferred way over
      * the use of triggers.
      */

      INSERT INTO cas_sites_hist (
         site_id,
         label,
         description,
         ursi_prefix,
         mod_user,
         mod_date
      )
      VALUES (
         v_site_id,
         p_label,
         p_description,
         v_ursi_prefix,
         p_dbtrans_username_pt,
         now()
      );

      INSERT INTO cas_sites_config_hist (
         site_id,
         mod_user,
         mod_date
      )
      VALUES (
         v_site_id,
         p_dbtrans_username_pt,
         now()
      );

      RETURN v_site_id;
      END;
      $$;


ALTER FUNCTION casdba.cas_add_site_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) OWNER TO ni_developers;

--
-- Name: cas_add_site_f(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: ni_developers
--

CREATE FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 v_site_id              cas_sites.site_id%TYPE;   -- PK for cas_sites
BEGIN

 -- Load application data
 INSERT INTO cas_sites (
  site_id,
  label,
  description,
  ursi_prefix
 )
 VALUES (
  p_site_id,
  p_label,
  p_description,
  p_ursi_prefix
 );
 
 INSERT INTO cas_sites_config (
  site_id
 )
 VALUES (
  p_site_id
 );

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */

 INSERT INTO cas_sites_hist (
  site_id,
  label,
  description,
  ursi_prefix,
  mod_user,
  mod_date
 )
 VALUES (
  p_site_id,
  p_label,
  p_description,
  p_ursi_prefix,
  p_dbtrans_username_pt,
  now()
 );
 
 INSERT INTO cas_sites_config_hist (
  site_id,
  mod_user,
  mod_date
 )
 VALUES (
  p_site_id,
  p_dbtrans_username_pt,
  now()
 );

 RETURN '1';
end;
$$;


ALTER FUNCTION casdba.cas_add_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) OWNER TO ni_developers;

--
-- Name: cas_add_user_f(character varying, character varying, character varying, character varying, timestamp without time zone, timestamp without time zone, character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_add_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_password_hash character varying, p_label character varying, p_acct_exp_date timestamp without time zone, p_pwd_exp_date timestamp without time zone, p_site_id character varying, p_is_site_admin character varying, p_email character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

      BEGIN

      -- Load new user information
      INSERT INTO cas_users (                                                                 
      username,                                                                               
      password_hash,
      label, 
      acct_exp_date,
      password_exp_date, 
      active_flag,                                                                            
      site_id,
      is_site_admin,
      email
      )                                                                                       
      VALUES (                                                                                
      p_username,                                                                             
      p_password_hash,
      p_label,
      p_acct_exp_date,
      p_pwd_exp_date, 
      'Y',
      p_site_id,
      p_is_site_admin,
      p_email
      );

      /**
      * Load data into history tables.  This is the preferred way over                        
      * the use of triggers.                                                                  
      */                                            
      INSERT INTO cas_users_hist (
      username,                                                                               
      label,
      acct_exp_date,
      password_exp_date,
      active_flag,
      site_id,
      is_site_admin,
      email,
      mod_user,
      mod_date
      )
      VALUES (
      p_username,
      p_label,
      p_acct_exp_date,
      p_pwd_exp_date,
      'Y',
      p_site_id,
      p_is_site_admin,
      p_email,
      p_dbtrans_username_pt,
      now()
      );

      RETURN '1';
      END;
      $$;


ALTER FUNCTION casdba.cas_add_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_password_hash character varying, p_label character varying, p_acct_exp_date timestamp without time zone, p_pwd_exp_date timestamp without time zone, p_site_id character varying, p_is_site_admin character varying, p_email character varying) OWNER TO postgres;

--
-- Name: cas_add_user_field_f(character varying, character varying, boolean, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_add_user_field_f(p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 V_USER_FIELD_ID NUMERIC;
BEGIN

   SELECT nextval('casdba.cas_user_fields_counter') 
      into v_user_field_id;

   insert into casdba.cas_user_fields(
      USER_FIELD_ID,
      SITE_ID,
      LABEL,
      IS_EXPIRATION_DATE)
   values(
      V_USER_FIELD_ID,
      P_SITE_ID,
      P_LABEL,
      P_IS_EXPIRATION_DATE);

   insert into casdba.cas_user_fields_hist(
      USER_FIELD_ID,
      SITE_ID,
      LABEL,
      IS_EXPIRATION_DATE,
      MOD_USER,
      MOD_DATE)
   values(
      V_USER_FIELD_ID,
      P_SITE_ID,
      P_LABEL,
      P_IS_EXPIRATION_DATE,
      dbtrans_username_pt,
      now());

   return '1';
   
END;
$$;


ALTER FUNCTION casdba.cas_add_user_field_f(p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: cas_add_user_field_value_f(numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_add_user_field_value_f(p_user_field_id numeric, p_username character varying, p_value character varying, dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 V_USER_FIELD_value_ID NUMERIC;
BEGIN

   SELECT nextval('casdba.cas_user_field_values_counter') 
      into v_user_field_value_id;

   insert into casdba.cas_user_field_values(
      USER_FIELD_VALUE_ID,
      USER_FIELD_ID,
      USERNAME,
      VALUE) 
   values(
      V_USER_FIELD_VALUE_ID,
      P_USER_FIELD_ID,
      P_USERNAME,
      P_VALUE);

   insert into casdba.cas_user_field_values_hist(
      USER_FIELD_VALUE_ID,
      USER_FIELD_ID,
      USERNAME,
      VALUE, 
      MOD_USER,
      MOD_DATE)
   values(
      V_USER_FIELD_VALUE_ID,
      P_USER_FIELD_ID,
      P_USERNAME,
      P_VALUE, 
      dbtrans_username_pt,
      now());

   return '1';
   
END;
$$;


ALTER FUNCTION casdba.cas_add_user_field_value_f(p_user_field_id numeric, p_username character varying, p_value character varying, dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: cas_auth_user_f(character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_auth_user_f(p_username character varying, p_password character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 v_active_flag    cas_users.active_flag%TYPE;       -- Users active status
 v_acct_exp_date  cas_users.acct_exp_date%TYPE;     -- Account expiration date
 v_pwd_exp_date   cas_users.password_exp_date%TYPE; -- Password expiration date
BEGIN

 /**
  * Check if username/password match.  If not, then
  * raise exception.  If so, then get user attributes
  */

 BEGIN
  SELECT active_flag, acct_exp_date, password_exp_date
    INTO STRICT v_active_flag, v_acct_exp_date, v_pwd_exp_date
    FROM cas_users_vw
   WHERE username=p_username
     AND password=p_password;
 
 EXCEPTION WHEN NO_DATA_FOUND THEN
   RAISE EXCEPTION '%', 'Invalid user/password combination';
 END;

  /**
   * Analyze user attributes
   *
   * 1.  Determine if the user account is inactive
   * 2.  Determine if the user account is expired
   * 3.  Determine if the password is expired
   *
   * Raise exception if any of the above is true
   */
 IF v_active_flag = 'N' THEN
  RAISE EXCEPTION '%','Account is disabled';
 ELSIF v_acct_exp_date < now() THEN
  RAISE EXCEPTION '%','Account has expired';
 ELSIF v_pwd_exp_date < now() THEN
  RAISE EXCEPTION  '%','Password has expired';
 ELSE
  RETURN '1'; --User is authenticated if none of the conditions above are true
 END IF; -- IF v_active_flag = ''N''

end;
$$;


ALTER FUNCTION casdba.cas_auth_user_f(p_username character varying, p_password character varying) OWNER TO postgres;

--
-- Name: cas_copy_user_privs_f(character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_copy_user_privs_f(p_from character varying, p_to character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

         BEGIN

            -- back up app privs:
            INSERT INTO casdba.cas_app_user_role_privs_hist (app_id, username, role_id, granted_date, mod_user, mod_date, mod_deletion)
            select app_id, username, role_id, granted_date, p_dbtrans_username_pt, now(), true
            FROM casdba.cas_app_user_role_privs
            WHERE username = p_to;

            -- back up study privs:
            INSERT INTO casdba.cas_study_user_role_privs_hist (study_id, username, role_id, granted_date, mod_user, mod_date, mod_deletion)
            select study_id, username, role_id, granted_date, p_dbtrans_username_pt, now(), true
            FROM casdba.cas_study_user_role_privs
            WHERE username = p_to;

            -- back up site and is_site_admin:
            INSERT INTO casdba.cas_users_hist (username,label,site_id,is_site_admin,mod_user,mod_date)
            select username,label,site_id,is_site_admin,p_dbtrans_username_pt,now()
            FROM casdba.cas_users 
            WHERE label=p_to;

            -- delete privs
            delete from casdba.cas_app_user_role_privs where username = (select username from casdba.cas_users where label = p_to limit 1);
            delete from casdba.cas_study_user_role_privs where username = (select username from casdba.cas_users where label = p_to limit 1);

            -- copy app privs:
            insert into casdba.cas_app_user_role_privs(app_id,username,role_id,granted_date)
            select app_id,
            (select username from casdba.cas_users where label = p_to limit 1),
            role_id,
            now()
            from casdba.cas_app_user_role_privs where username=(select username from casdba.cas_users where label = p_from limit 1);

            -- copy study privs:
            insert into casdba.cas_study_user_role_privs(study_id,username,role_id,granted_date)
            select study_id,
            (select username from casdba.cas_users where label = p_to limit 1),
            role_id,
            now()
            from casdba.cas_study_user_role_privs where username=(select username from casdba.cas_users where label = p_from limit 1);

            -- copy site and site_admin: 
            update casdba.cas_users
            set site_id = (select site_id from casdba.cas_users where label = p_from limit 1),
            is_site_admin = (select is_site_admin from casdba.cas_users where label = p_from limit 1)
            where label=p_to;

         IF NOT FOUND  THEN
         RAISE EXCEPTION  'User does not exist.';
         END IF;

         RETURN '1';

         end;
         $$;


ALTER FUNCTION casdba.cas_copy_user_privs_f(p_from character varying, p_to character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: cas_deactivate_user_f(character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_deactivate_user_f(p_dbtrans_username_pt character varying, p_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

 /**
  * Deactivate the user by setting the active_flag
  * to N.  Raise exception if the user is currently inactive.
  */
 UPDATE cas_users
    SET active_flag='N'
  WHERE username=p_username;

 IF NOT FOUND THEN
  RAISE EXCEPTION '%','Username does not exist';
 END IF;

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */

 INSERT INTO cas_users_hist (
  username,
  label,
  active_flag,
  acct_exp_date,
  password_exp_date,
  site_id,
  mod_user,
  mod_date
 )
 SELECT username,
        label,
        active_flag,
        acct_exp_date,
        password_exp_date,
        site_id,
        p_dbtrans_username_pt,
        now()
   FROM cas_users
  WHERE username=p_username;

 IF NOT FOUND THEN
  RAISE EXCEPTION '%','Username does not exist';
 ELSE
  RETURN '1';
 END IF;
END;$$;


ALTER FUNCTION casdba.cas_deactivate_user_f(p_dbtrans_username_pt character varying, p_username character varying) OWNER TO postgres;

--
-- Name: cas_get_siteid_f(character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_get_siteid_f(p_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   siteid CAS_SITES.SITE_ID%TYPE; 
   vUsername varchar(12);
BEGIN

     
          SELECT SITE_ID INTO siteid
          FROM CAS_USERS_VW  C
          WHERE C.USERNAME=p_username;
  
RETURN siteid;

EXCEPTION WHEN NO_DATA_FOUND THEN 
        RAISE EXCEPTION 'Username % does not exist.';
        RETURN 'notfound';
end;
$$;


ALTER FUNCTION casdba.cas_get_siteid_f(p_username character varying) OWNER TO postgres;

--
-- Name: cas_grant_app_role_f(character varying, numeric, character varying, numeric); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_grant_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

 DECLARE
  v_exist   numeric(1);
 BEGIN
  SELECT 1
    INTO v_exist
    FROM casdba.cas_app_user_role_privs
   WHERE app_id = p_app_id
     AND role_id = p_role_id
     AND username = p_username;
  IF v_exist = 1 THEN
   RAISE EXCEPTION 'app user role privelege already exists';
  END IF;
 EXCEPTION
  WHEN NO_DATA_FOUND THEN
   null;
 END;

 /**
  * Grant role access to the user for the specified app
  */
 INSERT INTO casdba.cas_app_user_role_privs (
  app_id,
  username,
  role_id,
  granted_date
 )
 VALUES (
  p_app_id,
  p_username,
  p_role_id,
  now()
 );

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */
 INSERT INTO casdba.cas_app_user_role_privs_hist (
  app_id,
  username,
  role_id,
  granted_date,
  mod_user,
  mod_date
 )
 VALUES (
  p_app_id,
  p_username,
  p_role_id,
  now(),
  p_dbtrans_username_pt,
  now()
  );

 RETURN '1';
end;
$$;


ALTER FUNCTION casdba.cas_grant_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) OWNER TO postgres;

--
-- Name: cas_grant_study_role_f(character varying, numeric, character varying, numeric); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_grant_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
 DECLARE
    v_exist   numeric(1);
BEGIN

 BEGIN
  SELECT 1
    INTO v_exist
    FROM cas_study_user_role_privs
   WHERE study_id = p_study_id
     AND role_id = p_role_id
     AND username = p_username;
  IF v_exist = 1 THEN
   RETURN '1';
  END IF;
 EXCEPTION
  WHEN NO_DATA_FOUND THEN
   null;
 END;

 /**
  * Grant role access to the user for the specified study
  */
 INSERT INTO cas_study_user_role_privs (
  study_id,
  username,
  role_id,
  granted_date
 )
 VALUES (
  p_study_id,
  p_username,
  p_role_id,
  now()
 );

INSERT INTO cas_study_user_role_privs_hist (
  study_id,
  username,
  role_id,
  granted_date,
  mod_user,
  mod_date,
  mod_deletion
 )
 VALUES (
  p_study_id,
  p_username,
  p_role_id,
  now(),
  p_dbtrans_username_pt,
  now(),
  false
 );


 RETURN '1';
END;
$$;


ALTER FUNCTION casdba.cas_grant_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) OWNER TO postgres;

--
-- Name: cas_olin_replicate_raters_f(); Type: FUNCTION; Schema: casdba; Owner: ni_developers
--

CREATE FUNCTION cas_olin_replicate_raters_f() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   result int;
BEGIN
 
insert into MRSDBA.mrs_person_role_details

select person_id, role_id, alias_id, study_id, nextval('mrsdba.MRSPERODE_PRDID_SEQ') as seq, is_hidden
from (
select olinraters.person_id, 2 as role_id,max(olinraters.alias_id) as alias_id, s.study_id, olinraters.is_hidden
from
(
      SELECT distinct PERSON_ID, ALIAS_ID, IS_HIDDEN
      FROM MRSDBA.MRS_PERSON_ROLE_DETAILS prd, (
        select study_id from mrsdba.mrs_studies where pi_id in (
            select person_id from mrsdba.mrs_persons where site_id='50'
          )) os
      where prd.study_id=os.study_id
      AND prd.role_id=2
) olinraters, 
(select study_id from mrsdba.mrs_studies where pi_id in (
select person_id from mrsdba.mrs_persons where site_id='50'
)) s
where (olinraters.person_id, '2',s.study_id)
not in (select person_id, role_id, study_id from mrsdba.mrs_person_role_details
        where study_id in (
        select study_id from mrsdba.mrs_studies where pi_id in (
            select person_id from mrsdba.mrs_persons where site_id='50'
          ))


)
group by person_id, role_id, study_id, is_hidden
) as uqroles;


GET DIAGNOSTICS result = ROW_COUNT;
RETURN result;
end;
$$;


ALTER FUNCTION casdba.cas_olin_replicate_raters_f() OWNER TO ni_developers;

--
-- Name: cas_olin_study_privs_f(); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_olin_study_privs_f() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   result int;
BEGIN

 
INSERT INTO CASDBA.CAS_STUDY_USER_ROLE_PRIVS
SELECT u.username, S.STUDY_ID, '42',now() FROM CASDBA.CAS_USERS U, mrs_study_ids_vw S
WHERE U.site_id = '50'
AND (U.USERNAME, S.STUDY_ID) NOT IN (
                        SELECT U.USERNAME, U.STUDY_ID FROM CASDBA.CAS_STUDY_USER_ROLE_PRIVS U WHERE
                        ROLE_ID='42'
                        AND U.STUDY_ID IN 
                        (   select STUDY_ID from mrs_study_ids_vw where pi_ID in 
                                 (SELECT PERSON_ID FROM MRS_PI_VW WHERE SITE_ID='50') and s.study_id <> 535 /* This study is to be hidden per Beth Turner */ )
                                  Or 
                            ( s.study_id in ( 348, 1043, 468, 346, 1030, 347, 371, 1031, 1034) )
                        
                     )
AND 
( ( S.PI_ID IN (SELECT PERSON_ID FROM MRS_PI_VW WHERE SITE_ID='50') and s.study_id <> 535 /* This study is to be hidden per Beth Turner */ )

  or 
  ( s.study_id in ( 348, 1043, 468, 346, 1030, 347, 371, 1031, 1034) )
);

GET DIAGNOSTICS result = ROW_COUNT;
RETURN result;
end;
$$;


ALTER FUNCTION casdba.cas_olin_study_privs_f() OWNER TO postgres;

--
-- Name: cas_reset_acct_exp_date_f(character varying, character varying, timestamp with time zone); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_reset_acct_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_acct_exp_date timestamp with time zone) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

 /**
  * Reset the account expiration date for the
  * specified user.
  */
 UPDATE cas_users
    SET acct_exp_date = p_acct_exp_date
  WHERE username = p_username;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Username does not exist';
 END IF;

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */
 INSERT INTO cas_users_hist (
  username,
  label,
  active_flag,
  acct_exp_date,
  password_exp_date,
  site_id,
  mod_user,
  mod_date
 )
 SELECT username,
        label,
        active_flag,
        acct_exp_date,
        password_exp_date,
        site_id,
        p_dbtrans_username_pt,
        now()
   FROM cas_users
  WHERE username=p_username;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Username does not exist';
 ELSE
  RETURN '1';
 END IF;
END;
$$;


ALTER FUNCTION casdba.cas_reset_acct_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_acct_exp_date timestamp with time zone) OWNER TO postgres;

--
-- Name: cas_reset_password_f(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: ni_developers
--

CREATE FUNCTION cas_reset_password_f(p_username character varying, p_password_hash character varying, p_password_reset_key character varying, p_user_entered character varying) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        BEGIN
            PERFORM password_reset_key FROM cas_users
            WHERE password_reset_key = p_password_reset_key
            AND username = p_username;

            IF NOT FOUND THEN
               RETURN FALSE;
            END IF;

            UPDATE cas_users
            SET password_hash = p_password_hash,
               password_reset_key = NULL
            WHERE username = p_username;

            INSERT INTO cas_users_hist (
                password_hash,
                password_reset_key,
                mod_user,
                mod_date
            )
            VALUES (
                p_password_hash,
                NULL,
                p_user_entered,
                now()
            );

            RETURN TRUE;
        END;
    $$;


ALTER FUNCTION casdba.cas_reset_password_f(p_username character varying, p_password_hash character varying, p_password_reset_key character varying, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: cas_reset_pwd_exp_date_f(character varying, character varying, timestamp without time zone); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_reset_pwd_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_pwd_exp_date timestamp without time zone) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

 /**
  * Reset the password expiration date for the specified user
  */
 UPDATE cas_users
    SET password_exp_date = p_pwd_exp_date
  WHERE username = p_username;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Username does not exist';
 END IF;

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */
 INSERT INTO cas_users_hist (
  username,
  label,
  active_flag,
  acct_exp_date,
  password_exp_date,
  site_id,
  mod_user,
  mod_date
 )
 SELECT username,
        label,
        active_flag,
        acct_exp_date,
        password_exp_date,
        site_id,
        p_dbtrans_username_pt,
        now()
   FROM cas_users
  WHERE username=p_username;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Username does not exist';
 ELSE
  RETURN '1';
 END IF;
END;
$$;


ALTER FUNCTION casdba.cas_reset_pwd_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_pwd_exp_date timestamp without time zone) OWNER TO postgres;

--
-- Name: cas_revoke_app_role_f(character varying, numeric, character varying, numeric); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_revoke_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */
 INSERT INTO cas_app_user_role_privs_hist (
  app_id,
  username,
  role_id,
  granted_date,
  mod_user,
  mod_date,
  mod_deletion
 )
 select 
  app_id,
  username,
  role_id,
  granted_date,
  p_dbtrans_username_pt,
  now(),
  true
  FROM cas_app_user_role_privs
  WHERE app_id=p_app_id
    AND username=p_username
    AND role_id=p_role_id;
 
 
 /**
  * Revoke role priv from user for the
  * specified application.
  */
 DELETE FROM cas_app_user_role_privs
  WHERE app_id=p_app_id
    AND username=p_username
    AND role_id=p_role_id;

 IF  NOT FOUND  THEN
  RAISE NOTICE 'App user role privilege does not exist';
 END IF;


 RETURN '1';

end;
$$;


ALTER FUNCTION casdba.cas_revoke_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) OWNER TO postgres;

--
-- Name: cas_revoke_study_role_f(character varying, numeric, character varying, numeric); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_revoke_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
 BEGIN


 INSERT INTO cas_study_user_role_privs_hist 
       (username, study_id, role_id, granted_date, mod_user,
        mod_date, mod_deletion)
 SELECT username, study_id, role_id, granted_date, p_dbtrans_username_pt,
        now(), true
   FROM cas_study_user_role_privs
  WHERE study_id=p_study_id
    AND username=p_username
    AND role_id=p_role_id;
   
 /**
  * Revoke role priv from user for the
  * specified application.
  */
 DELETE FROM cas_study_user_role_privs
  WHERE study_id=p_study_id
    AND username=p_username
    AND role_id=p_role_id;

 IF NOT FOUND THEN
  RETURN '1';
 END IF;



 RETURN '1';

EXCEPTION
 WHEN OTHERS THEN
  RAISE EXCEPTION '%',SQLERRM;
END ;
$$;


ALTER FUNCTION casdba.cas_revoke_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) OWNER TO postgres;

--
-- Name: cas_set_password_hash_f(character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: ni_developers
--

CREATE FUNCTION cas_set_password_hash_f(p_username character varying, p_password_hash character varying, p_mod_user character varying) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    UPDATE cas_users
    SET
        password_hash = p_password_hash
    WHERE username = p_username;

    INSERT INTO cas_users_hist (
        password_hash,
        username,
        mod_date,
        mod_user
    )
    VALUES (
        p_password_hash,
        p_username,
        now(),
        p_mod_user
    );

    RETURN TRUE;
END;
$$;


ALTER FUNCTION casdba.cas_set_password_hash_f(p_username character varying, p_password_hash character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: cas_set_password_reset_key_f(character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: ni_developers
--

CREATE FUNCTION cas_set_password_reset_key_f(p_username character varying, p_password_reset_key character varying, p_mod_user character varying) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        BEGIN
            PERFORM password_reset_key FROM cas_users
            WHERE password_reset_key = p_password_reset_key;

            IF NOT FOUND THEN
               UPDATE cas_users
               SET password_reset_key = p_password_reset_key
               WHERE username = p_username;
   
               INSERT INTO cas_users_hist (
                   username,
                   password_reset_key,
                   mod_user,
                   mod_date
               )
               VALUES (
                   p_username,
                   p_password_reset_key,
                   p_mod_user,
                   now()
               );
   
               RETURN TRUE;
            ELSE
               RETURN FALSE;
            END IF;
        END;
    $$;


ALTER FUNCTION casdba.cas_set_password_reset_key_f(p_username character varying, p_password_reset_key character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: cas_update_app_f(character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_update_app_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_label character varying, p_description character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

 /**
  * Update the application with a new description
  */
 UPDATE cas_apps
    SET label = p_label
        ,description = p_description
  WHERE app_id = p_app_id;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Application does not exist';
 END IF;

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */
 INSERT INTO cas_apps_hist (
  app_id,
  label,
  description,
  mod_user,
  mod_date
 )
 SELECT app_id,
        label,
        description,
        p_dbtrans_username_pt,
        now()
   FROM cas_apps
  WHERE app_id = p_app_id;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Application does not exist';
 ELSE
  RETURN '1';
 END IF;

end;
$$;


ALTER FUNCTION casdba.cas_update_app_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_label character varying, p_description character varying) OWNER TO postgres;

--
-- Name: cas_update_coins_metrics_table_f(); Type: FUNCTION; Schema: casdba; Owner: ni_developers
--

CREATE FUNCTION cas_update_coins_metrics_table_f() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            BEGIN

            DELETE FROM cas_coins_metrics;

            INSERT INTO cas_coins_metrics (studies, sites, assessments, scans, instruments, participants, unique_participant_enrollments, dx_parent_studies, dx_studies, dx_subjects, dx_asmts, dx_scans)
            SELECT 
               (SELECT COUNT(DISTINCT study_id) FROM mrs_studies WHERE label NOT ILIKE ('%test%') AND label NOT LIKE ('MCICShare') OR label LIKE ('Faux_PI')) AS studies,
               (SELECT COUNT(DISTINCT site_id) FROM cas_sites) AS sites,
               (SELECT COUNT(DISTINCT asmt.assessment_id) FROM (
                  -- First only grab assessments that do NOT belong to any of the excluded studies
                  SELECT DISTINCT assessment_id FROM mrs_asmts_owners_vw WHERE study_id NOT IN (
                     SELECT study_id FROM mrs_studies WHERE label ILIKE ('%test%') OR label LIKE ('MCICShare') OR label LIKE ('Faux_PI')
                  )
                  UNION
                  SELECT DISTINCT assessment_id FROM mrs_asmts_studies_vw WHERE study_id NOT IN (
                     SELECT study_id FROM mrs_studies WHERE label ILIKE ('%test%') OR label LIKE ('MCICShare') OR label LIKE ('Faux_PI')
                  )
               ) asmt
               INNER JOIN mrs_assessments ma ON asmt.assessment_id = ma.assessment_id
               -- Second, make sure that none of these assessments belong to instruments that are obviously test instruments
               WHERE ma.instrument_id NOT IN (
                  15683,18003,18123,17483,17823,20683,20663,18823,21123,21183,21043,943,239,942,3442,3462,4323,4424,4462,5043,5243,6323,7063,11303,11323,11343,11523,11603,12443,12523,12423,12763,12663,12543,13363,13823,13843,14623,15023,15043,16203,13343
               )
               AND entry_code = 'C'
               AND dataentry_type_id = 1
               ) AS assessments,
               (SELECT COUNT(DISTINCT scan_id) FROM mrs_scan_sessions WHERE study_id NOT IN (
                   SELECT study_id FROM mrs_studies WHERE label ILIKE ('%test%') OR label LIKE ('MCICShare') OR label LIKE ('Faux_PI')
               )) AS scans,
               (SELECT COUNT(DISTINCT instrument_id) FROM mrs_instruments
               WHERE instrument_id NOT IN (
                  -- Remove instruments that are unique to the excluded studies
                  SELECT instrument_id
                  FROM mrs_instruments_studies WHERE instrument_id IN (
                     SELECT instrument_id FROM mrs_instruments_studies WHERE study_id IN (
                        SELECT study_id FROM mrs_studies WHERE label ILIKE ('%test%') OR label LIKE ('MCICShare') OR label LIKE ('Faux_PI')
                     )
                  ) 
                  GROUP BY instrument_id 
                  HAVING COUNT(instrument_id) = 1
               )
               --remove instruments that are obviously test instruments
               AND instrument_id NOT IN (
                  15683,18003,18123,17483,17823,20683,20663,18823,21123,21183,21043,943,239,942,3442,3462,4323,4424,4462,5043,5243,6323,7063,11303,11323,11343,11523,11603,12443,12523,12423,12763,12663,12543,13363,13823,13843,14623,15023,15043,16203,13343
               )) AS instruments,
               (SELECT COUNT(DISTINCT usid) FROM mrs_subject_details_active_vw WHERE study_id NOT IN (
                  SELECT study_id FROM mrs_studies WHERE label ILIKE ('%test%') OR label LIKE ('MCICShare') OR label LIKE ('Faux_PI')
               )) AS participants,
               (SELECT COUNT(*) FROM (
                  SELECT DISTINCT usid, study_id FROM mrs_subject_details_active_vw WHERE study_id NOT IN (
                     SELECT study_id FROM mrs_studies WHERE label ILIKE ('%test%') OR label LIKE ('MCICShare') OR label LIKE ('Faux_PI')
                  )
               ) uniq_part_enr ) AS unique_participant_enrollments,
               (SELECT COUNT(DISTINCT parent_study_id) FROM dx_studies_mv) AS dx_parent_studies,
               (SELECT COUNT(DISTINCT study_id) FROM dx_studies_mv) AS dx_studies,
               (SELECT COUNT (DISTINCT usid) FROM mrs_subject_type_details_vw WHERE anonymization_id IN (
                  SELECT DISTINCT anonymization_id FROM dx_subjects_mv
               )) AS dx_subjects,
               (SELECT COUNT(DISTINCT assessment_id) FROM dx_asmts_mv) AS dx_asmts,
               (SELECT COUNT(DISTINCT scan_id) FROM dx_series_mv) AS dx_scans;
           
            RETURN '1';

            END;
            $$;


ALTER FUNCTION casdba.cas_update_coins_metrics_table_f() OWNER TO ni_developers;

--
-- Name: cas_update_role_f(character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_update_role_f(p_dbtrans_username_pt character varying, p_role_id numeric, p_label character varying, p_description character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

 /**
  * Update the description for the specified role
  */
 UPDATE cas_roles
    SET label = p_label
        ,description = p_description
  WHERE role_id = p_role_id;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Role does not exist';
 END IF;

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */
 INSERT INTO cas_roles_hist (
  role_id,
  label,
  description,
  mod_user,
  mod_date
 )
 SELECT role_id,
        label,
        description,
        p_dbtrans_username_pt,
        now()
   FROM cas_roles
  WHERE role_id = p_role_id;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Role does not exist';
 ELSE
  RETURN '1';
 END IF;

end;
$$;


ALTER FUNCTION casdba.cas_update_role_f(p_dbtrans_username_pt character varying, p_role_id numeric, p_label character varying, p_description character varying) OWNER TO postgres;

--
-- Name: cas_update_site_config_f(character varying, boolean, boolean, character varying, character varying, character varying, character varying, character varying, character varying, character varying, boolean, text, text, character varying, boolean, boolean, boolean, boolean, boolean, boolean, character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: ni_developers
--

CREATE FUNCTION cas_update_site_config_f(p_site_id character varying, p_enable_radiology_reviews boolean, p_enable_billing boolean, p_default_area_code character varying, p_default_city character varying, p_default_state character varying, p_imaging_storage_mount_point character varying, p_imaging_lost_and_found_directory character varying, p_directory_name_convention character varying, p_administrator_contact character varying, p_send_expiration_emails boolean, p_expiration_email_message text, p_new_user_welcome_msg text, p_expiration_summary_recipients character varying, p_send_inst_notifications boolean, p_enable_pi_unlock_inst boolean, p_share_miss_asmt_reason boolean, p_enable_study_change_reason boolean, p_enable_auto_backfill boolean, p_enable_subject_autocomplete boolean, p_site_logo character varying, p_site_css_url character varying, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      BEGIN

       UPDATE cas_sites_config
          SET enable_radiology_reviews = p_enable_radiology_reviews,
              enable_billing = p_enable_billing,
              default_area_code = p_default_area_code, 
              default_city = p_default_city, 
              default_state = p_default_state, 
              imaging_storage_mount_point = p_imaging_storage_mount_point, 
              imaging_lost_and_found_directory = p_imaging_lost_and_found_directory, 
              directory_name_convention = p_directory_name_convention, 
              administrator_contact = p_administrator_contact, 
              send_expiration_emails = p_send_expiration_emails, 
              expiration_email_message = p_expiration_email_message,
              new_user_welcome_msg = p_new_user_welcome_msg, 
              expiration_summary_recipients = p_expiration_summary_recipients,
              send_inst_notifications = p_send_inst_notifications,
              enable_pi_unlock_inst = p_enable_pi_unlock_inst, 
              share_miss_asmt_reason = p_share_miss_asmt_reason, 
              enable_study_change_reason = p_enable_study_change_reason,
              enable_auto_backfill = p_enable_auto_backfill,
              enable_subject_autocomplete = p_enable_subject_autocomplete,
              site_logo = p_site_logo,
				site_css_url = p_site_css_url
          WHERE site_id = p_site_id;

       IF  NOT FOUND  THEN
        RAISE EXCEPTION 'Site % does not exist',p_site_id;
       END IF;


       INSERT INTO cas_sites_config_hist (
        site_id,
        enable_radiology_reviews,
        enable_billing,
        default_area_code, 
        default_city, 
        default_state, 
        imaging_storage_mount_point, 
        imaging_lost_and_found_directory, 
        directory_name_convention, 
        administrator_contact, 
        send_expiration_emails, 
        expiration_email_message,
        new_user_welcome_msg, 
        expiration_summary_recipients,
        send_inst_notifications,
        enable_pi_unlock_inst, 
        share_miss_asmt_reason, 
        enable_study_change_reason,
        enable_auto_backfill,
        enable_subject_autocomplete,
        site_logo,
		site_css_url,
        mod_user,
        mod_date
       )
       SELECT 
        site_id,
        enable_radiology_reviews,
        enable_billing,
        default_area_code, 
        default_city, 
        default_state, 
        imaging_storage_mount_point, 
        imaging_lost_and_found_directory, 
        directory_name_convention, 
        administrator_contact, 
        send_expiration_emails, 
        expiration_email_message,
        new_user_welcome_msg, 
        expiration_summary_recipients,
        send_inst_notifications,
        enable_pi_unlock_inst, 
        share_miss_asmt_reason, 
        enable_study_change_reason,
        enable_auto_backfill,
        enable_subject_autocomplete,
        site_logo,
		site_css_url,
        p_dbtrans_username,
        now()
       FROM cas_sites_config
       WHERE site_id = p_site_id;

       IF  NOT FOUND  THEN
        RAISE EXCEPTION 'Site % does not exist', p_site_id;
       ELSE
        RETURN '1';
       END IF;

      end;
      $$;


ALTER FUNCTION casdba.cas_update_site_config_f(p_site_id character varying, p_enable_radiology_reviews boolean, p_enable_billing boolean, p_default_area_code character varying, p_default_city character varying, p_default_state character varying, p_imaging_storage_mount_point character varying, p_imaging_lost_and_found_directory character varying, p_directory_name_convention character varying, p_administrator_contact character varying, p_send_expiration_emails boolean, p_expiration_email_message text, p_new_user_welcome_msg text, p_expiration_summary_recipients character varying, p_send_inst_notifications boolean, p_enable_pi_unlock_inst boolean, p_share_miss_asmt_reason boolean, p_enable_study_change_reason boolean, p_enable_auto_backfill boolean, p_enable_subject_autocomplete boolean, p_site_logo character varying, p_site_css_url character varying, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: cas_update_site_f(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_update_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

 /**
  * Update the application with a new description
  */
 UPDATE cas_sites
    SET description = p_description
        ,label = p_label
        ,ursi_prefix = p_ursi_prefix
  WHERE site_id = p_site_id;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Site % does not exist',p_site_id;
 END IF;

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */
 INSERT INTO cas_sites_hist (
  site_id,
  label,
  description,
  ursi_prefix,
  mod_user,
  mod_date
 )
 SELECT site_id,
        label,
        description,
        ursi_prefix,
        p_dbtrans_username_pt,
        now()
   FROM cas_sites
  WHERE site_id = p_site_id;

 IF  NOT FOUND  THEN
  RAISE EXCEPTION 'Site % does not exist', p_site_id;
 ELSE
  RETURN '1';
 END IF;

end;
$$;


ALTER FUNCTION casdba.cas_update_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) OWNER TO postgres;

--
-- Name: cas_update_user_email_f(character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_update_user_email_f(username_f character varying, email_f character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin
	/* No need to check username since it's been check when user logged in*/
	update casdba.cas_users set email=email_f where username=username_f;

	return '1';
end;$$;


ALTER FUNCTION casdba.cas_update_user_email_f(username_f character varying, email_f character varying) OWNER TO postgres;

--
-- Name: cas_update_user_f(character varying, character varying, character varying, character varying, character varying, character varying, boolean); Type: FUNCTION; Schema: casdba; Owner: ni_developers
--

CREATE FUNCTION cas_update_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_label character varying, p_site_id character varying, p_is_site_admin character varying, p_email character varying, p_email_unsubscribed boolean) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_is_site_admin cas_users.is_site_admin%TYPE;
      BEGIN

       /**
        * Update the application with a new description
        */
       IF p_is_site_admin IS NOT NULL and p_is_site_admin != '' THEN
          UPDATE cas_users
             SET label = p_label,
                 site_id = p_site_id,
                 is_site_admin = p_is_site_admin,
                 email = p_email,
                 email_unsubscribed = p_email_unsubscribed
           WHERE username = p_username;
       ELSE
          UPDATE cas_users
             SET label = p_label,
                 site_id = p_site_id,
                 email = p_email,
                 email_unsubscribed = p_email_unsubscribed
           WHERE username = p_username;
       END IF;
       
       IF  NOT FOUND  THEN
           RAISE EXCEPTION 'Username does not exist';
       END IF;

       /**
        * Load data into history tables.  This is the preferred way over
        * the use of triggers.
        */
       INSERT INTO cas_users_hist (
           username,
           label,
           active_flag,
           acct_exp_date,
           password_exp_date,
           site_id,
           is_site_admin,
           email,
           email_unsubscribed,
           mod_user,
           mod_date
       )
       SELECT
           username,
           label,
           active_flag,
           acct_exp_date,
           password_exp_date,
           site_id,
           is_site_admin,
           email,
           email_unsubscribed,
           p_dbtrans_username_pt,
           NOW()
       FROM cas_users
       WHERE username = p_username;

       IF  NOT FOUND  THEN
           RAISE EXCEPTION 'Username does not exist';
       ELSE
           RETURN '1';
       END IF;

      END;
      $$;


ALTER FUNCTION casdba.cas_update_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_label character varying, p_site_id character varying, p_is_site_admin character varying, p_email character varying, p_email_unsubscribed boolean) OWNER TO ni_developers;

--
-- Name: cas_update_user_field_f(numeric, character varying, character varying, boolean, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_update_user_field_f(p_user_field_id numeric, p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   update casdba.cas_user_fields
   set SITE_ID = p_site_id,
       LABEL = p_label,
       IS_EXPIRATION_DATE = p_is_expiration_date
   where USER_FIELD_ID = p_USER_field_id;

   insert into casdba.cas_user_fields_hist(
      USER_FIELD_ID,
      SITE_ID,
      LABEL,
      IS_EXPIRATION_DATE,
      MOD_USER,
      MOD_DATE)
   values(
      P_USER_FIELD_ID,
      P_SITE_ID,
      P_LABEL,
      P_IS_EXPIRATION_DATE,
      dbtrans_username_pt,
      now());

   return '1';
   
END;
$$;


ALTER FUNCTION casdba.cas_update_user_field_f(p_user_field_id numeric, p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: cas_update_user_field_value_f(numeric, character varying, character varying); Type: FUNCTION; Schema: casdba; Owner: postgres
--

CREATE FUNCTION cas_update_user_field_value_f(p_user_field_value_id numeric, p_value character varying, dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   update casdba.cas_user_field_values
   set value = p_value
   where user_field_value_id = p_user_field_value_id; 

   insert into casdba.cas_user_field_values_hist(
      user_field_value_id,
      value,
      MOD_USER,
      MOD_DATE)
   values(
      P_USER_FIELD_VALUE_ID,
      P_VALUE,
      dbtrans_username_pt,
      now());

   return '1';
   
END;
$$;


ALTER FUNCTION casdba.cas_update_user_field_value_f(p_user_field_value_id numeric, p_value character varying, dbtrans_username_pt character varying) OWNER TO postgres;

SET search_path = dxdba, pg_catalog;

--
-- Name: dx_add_capsule_processing_temp_f(character varying, character varying, numeric, numeric, numeric); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_capsule_processing_temp_f(p_file_path character varying, p_session_order character varying, p_source_id numeric, p_file_id numeric, p_series_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO dx_capsule_processing_temp (
      source_id, file_id, file_path, session_order, series_id
   )
   VALUES (
      p_source_id, p_file_id, p_file_path, p_session_order, p_series_id
   );

   -- DON'T enter into hist table because this causes bloat and is not useful

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_add_capsule_processing_temp_f(p_file_path character varying, p_session_order character varying, p_source_id numeric, p_file_id numeric, p_series_id numeric) OWNER TO ni_developers;

--
-- Name: dx_add_data_capsule_downloads_f(numeric, character varying, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_capsule_downloads_f(file_id_f numeric, user_name_f character varying, start_time_f timestamp without time zone, expected_finish_time_f timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare
   download_id_f numeric;
BEGIN
   select nextval('dx_data_capsule_downloads_counter') into download_id_f;
   
   --delete old download records one day ago for fast select access
   --may change 'one day' to other time (one hour?) later
   delete from dx_data_capsule_downloads 
   where now() - expected_finish_time > interval '1 day';

   insert into dx_data_capsule_downloads (
      download_id,
      file_id,
      user_name,
      start_time,
      expected_finish_time)
   values(
      download_id_f,
      file_id_f,
      user_name_f,
      start_time_f,
      expected_finish_time_f);

   insert into dx_data_capsule_downloads_hist (
      download_id,
      file_id,
      user_name,
      start_time,
      expected_finish_time)
   values(
      download_id_f,
      file_id_f,
      user_name_f,
      start_time_f,
      expected_finish_time_f);
   return download_id_f;
end;$$;


ALTER FUNCTION dxdba.dx_add_data_capsule_downloads_f(file_id_f numeric, user_name_f character varying, start_time_f timestamp without time zone, expected_finish_time_f timestamp without time zone) OWNER TO ni_developers;

--
-- Name: dx_add_data_capsule_f(numeric, character varying, timestamp without time zone); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_capsule_f(p_source_id numeric, p_path character varying, p_created_time timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE 
   v_data_capsule_id dx_ex_situ_data_capsules.data_capsule_id%TYPE;
BEGIN
   SELECT NEXTVAL('dxdba.dx_data_capsule_counter') INTO v_data_capsule_id;

   INSERT INTO dxdba.dx_ex_situ_data_capsules(
      data_capsule_id,
      path,
      created_time
   ) VALUES (
      v_data_capsule_id,
      p_path,
      p_created_time
   );

   INSERT INTO dxdba.dx_ex_situ_data_capsules_hist(
      data_capsule_id,
      source_id,
      path,
      created_time
   ) VALUES (
      v_data_capsule_id,
      p_source_id,
      p_path,
      p_created_time
   );

   PERFORM dxdba.dx_add_data_capsule_link_f(p_source_id, v_data_capsule_id, 'dx_add_data_capsule_f');
   
   RETURN v_data_capsule_id;
END;
$$;


ALTER FUNCTION dxdba.dx_add_data_capsule_f(p_source_id numeric, p_path character varying, p_created_time timestamp without time zone) OWNER TO ni_developers;

--
-- Name: dx_add_data_capsule_file_f(numeric, character varying, numeric, timestamp without time zone, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_capsule_file_f(p_data_capsule_id numeric, p_file_name_f character varying, p_file_size_mb numeric, p_created_time timestamp without time zone, p_random_code character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE 
   v_file_id                dx_ex_situ_data_capsule_files.file_id%TYPE;
   v_current_file_number    integer;
   v_file_name_displayed    text;
   v_modality_id            numeric;
   v_leading_zeros          text;
BEGIN
   SELECT NEXTVAL('dxdba.dx_data_capsule_file_counter') 
   INTO v_file_id;

   SELECT COUNT(data_capsule_id)+1 
   INTO v_current_file_number 
   FROM dx_ex_situ_data_capsule_files 
   WHERE data_capsule_id = p_data_capsule_id;

   SELECT DISTINCT modality_id
   INTO v_modality_id
   FROM dx_data_request_source_components 
   WHERE source_id IN (
      SELECT source_id 
      FROM dx_data_source_capsule_link 
      WHERE data_capsule_id = p_data_capsule_id
      LIMIT 1
   );

   IF v_current_file_number < 10
   THEN 
      v_leading_zeros := '00';
   ELSEIF v_current_file_number < 100
   THEN
      v_leading_zeros := '0';
   ELSE
      v_leading_zeros := '';
   END IF;
   
   IF v_modality_id = 1
   THEN
      v_file_name_displayed := 'scan_data' || v_leading_zeros || v_current_file_number || '.zip';
   ELSEIF v_modality_id = 112
   THEN
      v_file_name_displayed := 'assessment_data.zip';
   ELSE
      RAISE EXCEPTION 'ERROR: Unknown modality id: %', v_modality_id;
   END IF;

   INSERT INTO dxdba.dx_ex_situ_data_capsule_files(
      file_id,
      data_capsule_id,
      file_name,
      file_size_mb,
      created_time,
      random_code,
      file_name_displayed
   ) VALUES (
      v_file_id,
      p_data_capsule_id,
      p_file_name_f,
      p_file_size_mb,
      p_created_time,
      p_random_code,
      v_file_name_displayed
   );

   INSERT INTO dxdba.dx_ex_situ_data_capsule_files_hist(
      file_id,
      data_capsule_id,
      file_name,
      file_size_mb,
      created_time,
      random_code,
      file_name_displayed,
      mod_user,
      mod_date
   ) VALUES (
      v_file_id,
      p_data_capsule_id,
      p_file_name_f,
      p_file_size_mb,
      p_created_time,
      p_random_code,
      v_file_name_displayed,
      'dx_add_data_capsule_file_f',
      NOW()
   );
   
   RETURN v_file_id;
END;
$$;


ALTER FUNCTION dxdba.dx_add_data_capsule_file_f(p_data_capsule_id numeric, p_file_name_f character varying, p_file_size_mb numeric, p_created_time timestamp without time zone, p_random_code character varying) OWNER TO ni_developers;

--
-- Name: dx_add_data_capsule_link_f(numeric, numeric, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_capsule_link_f(p_source_id numeric, p_data_capsule_id numeric, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO dxdba.dx_data_source_capsule_link (
      source_id,
      data_capsule_id
   ) VALUES (
      p_source_id,
      p_data_capsule_id
   );

   INSERT INTO dxdba.dx_data_source_capsule_link_hist (
      source_id,
      data_capsule_id,
      mod_user,
      mod_date
   ) VALUES (
      p_source_id,
      p_data_capsule_id,
      p_mod_user,
      NOW()
   );
   
   RETURN 1;

END;
$$;


ALTER FUNCTION dxdba.dx_add_data_capsule_link_f(p_source_id numeric, p_data_capsule_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_add_data_capsule_modification_f(text, character varying, text, numeric, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_capsule_modification_f(p_affected_ids text, p_action_type character varying, p_message text, p_modality_id numeric, p_transaction_username character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE
               v_modification_id numeric;
            BEGIN
               INSERT INTO dx_data_capsule_modification_queue
               (affected_ids, action_type, modality_id, message)
               VALUES
               (p_affected_ids,p_action_type,p_modality_id,p_message);

               SELECT lastval() INTO v_modification_id;

               INSERT INTO dx_data_capsule_modification_queue_hist
               (modification_id, affected_ids, action_type, modality_id, message, mod_user, mod_date)
               SELECT
               modification_id,affected_ids, action_type, modality_id, message, p_transaction_username, now()
               FROM dx_data_capsule_modification_queue
               WHERE modification_id = v_modification_id;

               RETURN v_modification_id;

            END;
        $$;


ALTER FUNCTION dxdba.dx_add_data_capsule_modification_f(p_affected_ids text, p_action_type character varying, p_message text, p_modality_id numeric, p_transaction_username character varying) OWNER TO ni_developers;

--
-- Name: dx_add_data_capsule_request_to_queue_f(numeric, timestamp without time zone); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_capsule_request_to_queue_f(source_id_f numeric, data_capsule_request_time_f timestamp without time zone) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$BEGIN

         insert into dxdba.dx_data_capsule_creation_queue (
            source_id,
            data_capsule_request_time)
         values(
            source_id_f,
            data_capsule_request_time_f);

         insert into dxdba.dx_data_capsule_creation_queue_hist (
            source_id,
            data_capsule_request_time)
         values(
            source_id_f,
            data_capsule_request_time_f);

         return '1';
      END;$$;


ALTER FUNCTION dxdba.dx_add_data_capsule_request_to_queue_f(source_id_f numeric, data_capsule_request_time_f timestamp without time zone) OWNER TO ni_developers;

--
-- Name: dx_add_data_request_f(text, numeric, text, numeric); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_request_f(p_username text, p_delivery_venue numeric, p_label text, p_cloned_from_id numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
                  DECLARE 
                     v_data_request_id numeric;
                  BEGIN
         
                     select nextval('dxdba.dx_req_counter') 
                     into v_data_request_id;
         
                     insert into dxdba.dx_data_requests_hist(
                        data_request_id,
                        requester_username,
                        delivery_venue,
                        label,
                        cloned_from_id,
                        date_updated,
                        mod_user,
                        mod_date)
                     values(
                        v_data_request_id,
                        p_username,
                        p_delivery_venue,
                        p_label,
                        p_cloned_from_id,
                        now(),
                        p_username,
                        now());
         
                     insert into dxdba.dx_data_requests(
                        data_request_id,
                        requester_username,
                        delivery_venue,
                        label,
                        cloned_from_id,
                        date_updated)
                     values(
                        v_data_request_id,
                        p_username,
                        p_delivery_venue,
                        p_label,
                        p_cloned_from_id,
                        now());
         
                     return v_data_request_id;
                     
                  END;
         
                  $$;


ALTER FUNCTION dxdba.dx_add_data_request_f(p_username text, p_delivery_venue numeric, p_label text, p_cloned_from_id numeric) OWNER TO ni_developers;

--
-- Name: dx_add_data_request_source_components_f(numeric, numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_request_source_components_f(p_source_id numeric, p_modality_id numeric, p_anonymization_id character varying, p_id_column_value character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO dx_data_request_source_components_hist (
      source_id, modality_id, anonymization_id, id_column_value, approval_date, response_user, mod_user, mod_date
   ) 
   VALUES (
      p_source_id, p_modality_id, p_anonymization_id, p_id_column_value, now(), p_mod_user, p_mod_user, now()
   );

   INSERT INTO dx_data_request_source_components (
      source_id, modality_id, anonymization_id, id_column_value, approval_date, response_user
   ) 
   VALUES (
      p_source_id, p_modality_id, p_anonymization_id, p_id_column_value, now(), p_mod_user
   );

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_add_data_request_source_components_f(p_source_id numeric, p_modality_id numeric, p_anonymization_id character varying, p_id_column_value character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_add_data_request_source_f(numeric, numeric, text); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_request_source_f(p_data_request_id numeric, p_study_id numeric, p_dbtrans_username text) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE 
         v_source_id numeric;
         BEGIN

         select nextval('dxdba.dx_req_src_counter') 
         into v_source_id;

         insert into dxdba.dx_data_request_sources_hist(
         source_id,
         data_request_id,
         study_id,
         mod_user,
         mod_date)
         values(
         v_source_id,
         p_data_request_id,
         p_study_id,
         p_dbtrans_username,
         now());

         insert into dxdba.dx_data_request_sources(
         source_id,
         data_request_id,
         study_id)
         values(
         v_source_id,
         p_data_request_id,
         p_study_id);


         return v_source_id;

         END;

         $$;


ALTER FUNCTION dxdba.dx_add_data_request_source_f(p_data_request_id numeric, p_study_id numeric, p_dbtrans_username text) OWNER TO ni_developers;

--
-- Name: dx_add_data_request_template_filter_f(integer, numeric, text, text, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_request_template_filter_f(p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE
            
            v_filter_id numeric;
            v_filter_statistics numeric;
            v_modality_id numeric;
            v_attribute_column_name character varying;
            v_request_submitted timestamp without time zone;
            v_request_id numeric;

            BEGIN
               WITH RECURSIVE tmp_groups_vw 
               (group_id, parent_group_id, data_request_id) AS (
                  SELECT g.group_id, g.parent_group_id, g.data_request_id 
                  FROM dx_data_request_template_groups_vw g 
                  WHERE g.group_id = p_group_id
                  UNION 
                  SELECT g2.group_id, g2.parent_group_id, g2.data_request_id
                  FROM dx_data_request_template_groups_vw g2 
                  INNER JOIN tmp_groups_vw tmp 
                  ON tmp.parent_group_id = g2.group_id
               )
               SELECT date_submitted, r.data_request_id
               INTO v_request_submitted, v_request_id
               FROM dx_data_requests r
               INNER JOIN tmp_groups_vw g
               ON g.data_request_id = r.data_request_id;


               IF v_request_submitted IS NULL THEN
     
                  INSERT INTO dxdba.dx_data_request_template_filters(
                  group_id,
                  attribute_id,
                  attribute_value,
                  attribute_value_label)
                  VALUES(
                  p_group_id,
                  p_attribute_id,
                  p_attribute_value,
                  p_attribute_value_label);
                  
                  v_filter_id := LASTVAL();

                  INSERT INTO dxdba.dx_data_request_template_filters_hist(
                     filter_id,
                     group_id,
                     attribute_id,
                     attribute_value,
                     attribute_value_label,
                     mod_user,
                     mod_date)
                  VALUES(
                     v_filter_id,
                     p_group_id,
                     p_attribute_id, 
                     p_attribute_value, 
                     p_attribute_value_label, 
                     p_dbtrans_username,
                     now());

                  SELECT modality_id, attribute_column_name
                  INTO 
                  v_modality_id, v_attribute_column_name
                  FROM 
                  dx_source_attributes_vw
                  WHERE 
                  attribute_id = p_attribute_id;

                  IF p_attribute_value_label = 'USER_INPUT'
                  THEN
                     v_filter_statistics = 0;
                  ELSE
                     SELECT count
                     INTO v_filter_statistics
                     FROM dx_options_mv
                     WHERE attribute_id = p_attribute_id
                     AND option_id = p_attribute_value;
                  END IF;

                  RETURN v_filter_id||':'||v_filter_statistics;
               ELSE
                  RAISE EXCEPTION 'Cannot add a filter to a submitted request: %', ('Group_id = '||p_group_id||' Request = '||v_request_id||' submitted: '||(v_request_submitted::text));
               END IF;

               END;
      
               $$;


ALTER FUNCTION dxdba.dx_add_data_request_template_filter_f(p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: dx_add_data_request_template_group_f(numeric, integer, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_request_template_group_f(p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE
            
            v_group_id numeric;
            v_rows_inserted numeric;
            v_request_submitted timestamp without time zone;
            v_request_id numeric;

            BEGIN
               IF p_data_request_id != 0 THEN
                  SELECT date_submitted, data_request_id 
                  INTO v_request_submitted, v_request_id
                  FROM dx_data_requests_vw
                  WHERE data_request_id = p_data_request_id;
               ELSE
                  WITH RECURSIVE tmp_groups_vw 
                  (group_id, parent_id, data_request_id) AS (
                     SELECT g.group_id, g.parent_group_id, g.data_request_id 
                     FROM dx_data_request_template_groups_vw g 
                     WHERE g.group_id = p_parent_group_id
                     UNION 
                     SELECT g2.group_id, g2.parent_group_id, g2.data_request_id
                     FROM dx_data_request_template_groups_vw g2 
                     INNER JOIN tmp_groups_vw tmp 
                     ON g2.parent_group_id = tmp.group_id
                  )
                  SELECT date_submitted, r.data_request_id
                  INTO v_request_submitted, v_request_id
                  FROM dx_data_requests r
                  INNER JOIN tmp_groups_vw g
                  ON g.data_request_id = r.data_request_id;
               END IF;
                
               IF v_request_submitted IS NULL THEN
           
                  INSERT INTO dxdba.dx_data_request_template_groups(
                     data_request_id,
                     parent_group_id,
                     conjunction_type)
                  VALUES(
                     NULLIF(p_data_request_id,0),
                     NULLIF(p_parent_group_id,0),
                     p_conjunction_type);
                  
                  v_group_id := LASTVAL();

                  INSERT INTO dxdba.dx_data_request_template_groups_hist(
                     group_id,
                     data_request_id,
                     parent_group_id,
                     conjunction_type,
                     mod_user,
                     mod_date)
                  VALUES(
                     v_group_id,
                     NULLIF(p_data_request_id,0),
                     NULLIF(p_parent_group_id,0),
                     p_conjunction_type,
                     p_dbtrans_username,
                     now());

                  RETURN v_group_id;
               ELSE
                  RAISE EXCEPTION 'Cannot add a group to a submitted request: %', (' Request = '||v_request_id||' submitted: '||(v_request_submitted::text));
               END IF;

               END;
      
               $$;


ALTER FUNCTION dxdba.dx_add_data_request_template_group_f(p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: dx_add_data_source_capsule_link_f(numeric, numeric); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_data_source_capsule_link_f(source_id_f numeric, data_capsule_id_f numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin

         insert into dxdba.dx_data_source_capsule_link (
            source_id,
            data_capsule_id
         ) values (
            source_id_f,
            data_capsule_id_f
         );

         insert into dxdba.dx_ex_situ_data_capsules_hist (
            source_id,
            data_capsule_id
         ) values (
            source_id_f,
            data_capsule_id_f
         );

         return data_capsule_id_f;
      end;$$;


ALTER FUNCTION dxdba.dx_add_data_source_capsule_link_f(source_id_f numeric, data_capsule_id_f numeric) OWNER TO ni_developers;

--
-- Name: dx_add_msg_f(numeric, text, text, boolean); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_msg_f(p_source_id numeric, p_username text, p_content text, p_send_email boolean) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

                     DECLARE
                        v_message_id numeric;
                     BEGIN

                        select nextval('dxdba.dx_msg_counter') 
                        into v_message_id;

                        insert into dxdba.dx_messages(
                           message_id,
                           source_id,
                           username,
                           content,
                           send_email,
                           date)
                        values(
                           v_message_id,
                           p_source_id,
                           p_username,
                           p_content,
                           p_send_email,
                           now()
                        );

                        return v_message_id;
                        
                     END;

                     $$;


ALTER FUNCTION dxdba.dx_add_msg_f(p_source_id numeric, p_username text, p_content text, p_send_email boolean) OWNER TO ni_developers;

--
-- Name: dx_add_or_update_series_anonymized_file_path_f(numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_or_update_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
DECLARE
   v_archive_cnt                integer;
   v_anonymized_cnt             integer;
   v_ext                        text;
   v_anon_no_ext                character varying;
   v_dx_number                  text;
   v_anon_no_ext_no_dx_number   character varying;
   v_increment                  integer;
   v_leading_zeros              character varying;
   v_anonymized_file_path       character varying;
   v_return                     text;
BEGIN

   -- check if archive_file_path exists in dx_series_anonymized_file_paths
   SELECT COUNT(*)
   INTO v_archive_cnt
   FROM dx_series_anonymized_file_paths
   WHERE archive_file_path = p_archive_file_path;

   -- check if anonymized_file_path exists in dx_series_anonymized_file_paths
   SELECT COUNT(*)
   INTO v_anonymized_cnt
   FROM dx_series_anonymized_file_paths
   WHERE anonymized_file_path = p_anonymized_file_path;

   IF v_archive_cnt = 0 AND v_anonymized_cnt = 0
   THEN
      -- We are adding the archive_file_path and anonymized_file_path for the first time
      INSERT INTO dx_series_anonymized_file_paths (
         series_id, archive_file_path, anonymized_file_path, date_last_accessed
      )
      VALUES (
         p_series_id, p_archive_file_path, p_anonymized_file_path, now()
      );

      -- return the original user input anonymized_file_path
      RETURN p_anonymized_file_path;

   ELSEIF v_archive_cnt = 0 AND v_anonymized_cnt = 1
   THEN
      -- We are adding the archive_file_path for the first time.  BUT, the anonymized_file_path
      -- has a match.  We need to update the name of the anonymized_file_path before saving

      -- (1) grab and trim file extension: v_ext
      SELECT SUBSTRING(p_anonymized_file_path FROM $a$\..{0,6}$$a$) INTO v_ext;
      SELECT REGEXP_REPLACE(p_anonymized_file_path, v_ext, '') INTO v_anon_no_ext;

      -- (2) grab dx_number, if it exists
      SELECT SUBSTRING(v_anon_no_ext FROM '_dx[0-9]{3}$') INTO v_dx_number;

      -- (3) if v_dx_number exists
      IF v_dx_number IS NOT NULL
      THEN
         -- v_dx_number exists, so we have to increment it by 1

         -- (3a) trim v_dx_number from v_anon_no_ext
         SELECT REGEXP_REPLACE(v_anon_no_ext, v_dx_number, '') INTO v_anon_no_ext_no_dx_number;

         -- (3b) increment v_dx_number number
         SELECT SUBSTRING(v_dx_number FROM '[0-9]{3}$')::integer+1 INTO v_increment;

         -- (3c) determine number of leading zeroes
         v_leading_zeros := '';
         IF v_increment < 10
         THEN
            v_leading_zeros := '00';
         ELSEIF v_increment < 100
         THEN
            v_leading_zeros := '0';
         END IF;

         -- (3d) create new anonymized_file_path
         v_anonymized_file_path := v_anon_no_ext_no_dx_number || '_dx' || v_leading_zeros || v_increment || v_ext;

      ELSE
         -- v_dx_number does NOT exist, so we can create it
         -- (3a) create new anonymize_file_path
         v_anonymized_file_path := v_anon_no_ext || '_dx001' || v_ext;

      END IF;

      -- (4) recursively save the new anonymized_file_path (in case we would need to increment more than once)
      SELECT dx_add_or_update_series_anonymized_file_path_f(
         p_series_id,
         p_archive_file_path,
         v_anonymized_file_path,
         p_mod_user
      ) INTO v_return;

      -- return the newly created anonymized_file_path
      RETURN v_return;

   ELSE
      -- the archive path exists, therefore the anonymized_file_path MUST also exist
      -- e.g. v_archive_cnt = 1 AND v_anonymized_cnt = 1
      -- (v_archive_cnt = 1 AND v_anonymized_cnt = 0 is not a possibility)

      -- The archive_file_path exists, all we need to do is update the date_last_accessed
      UPDATE dx_series_anonymized_file_paths
      SET date_last_accessed = now()
      WHERE archive_file_path = p_archive_file_path;

      -- since the archive_file_path exists, that implicitly means that we must have already
      -- generated an anonymized_file_path.  However, the anonymized_file_path may not be the
      -- same one that the user passed in.  Therefore, grab anonymize_file_path from the database.
      SELECT anonymized_file_path
      INTO v_anonymized_file_path
      FROM dx_series_anonymized_file_paths
      WHERE archive_file_path = p_archive_file_path;

      -- return the previously generated anonymized_file_path
      RETURN v_anonymized_file_path;

   END IF;
   
   -- DON'T enter into hist table because this causes bloat and is not useful
   
END;
$_$;


ALTER FUNCTION dxdba.dx_add_or_update_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_add_preapproval_f(numeric, text, text, text); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_preapproval_f(p_study_id numeric, p_message text, p_approved_user text, p_db_transaction_username text) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
               DECLARE 
                  v_approval_id int;
               BEGIN
                  --First test to make sure that such a row doesn't already exist
                  BEGIN
                     SELECT count(1)
                     INTO STRICT v_approval_id
                     FROM dx_preapprovals
                     WHERE study_id = p_study_id
                     AND CASE 
                        WHEN nullif(trim(BOTH FROM p_approved_user),'') IS NULL 
                           THEN approved_user IS NULL
                        ELSE approved_user = p_approved_user 
                     END;
                     EXCEPTION WHEN NO_DATA_FOUND THEN
                        v_approval_id := 0;
                  END;

                  IF v_approval_id < 1 THEN
                     INSERT INTO dx_preapprovals
                        (study_id,
                        message,
                        approved_user,
                        approval_user)
                     VALUES(
                        p_study_id,
                        p_message,
                        nullif(trim(BOTH FROM p_approved_user),''),
                        p_db_transaction_username);

                     SELECT lastval() INTO v_approval_id;

                     INSERT INTO dx_preapprovals_hist
                        (study_id,
                        message,
                        approved_user,
                        approval_user,
                        approval_id,
                        mod_user,
                        mod_date)
                     VALUES(
                        p_study_id,
                        p_message,
                        nullif(trim(BOTH FROM p_approved_user),''),
                        p_db_transaction_username,
                        v_approval_id,
                        p_db_transaction_username,
                        now());
                  END IF;
                  
                  RETURN v_approval_id;
               END;

            $$;


ALTER FUNCTION dxdba.dx_add_preapproval_f(p_study_id numeric, p_message text, p_approved_user text, p_db_transaction_username text) OWNER TO ni_developers;

--
-- Name: dx_add_series_anonymized_file_path_f(numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO dx_series_anonymized_file_paths (
      series_id, archive_file_path, anonymized_file_path, date_last_accessed
   )
   VALUES (
      p_series_id, p_archive_file_path, p_anonymized_file_path, now()
   );

   -- DON'T enter into hist table because this causes bloat and is not useful

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_add_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_add_series_zip_file_path_and_contents_f(character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_series_zip_file_path_and_contents_f(p_path character varying, p_file_name character varying, p_series_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_zip_file_id          integer;
   v_zip_file_content_id  integer;
BEGIN

   SELECT zip_file_id
   INTO v_zip_file_id
   FROM dx_series_zip_file_paths
   WHERE path = p_path
   AND file_name = p_file_name;

   IF v_zip_file_id IS NULL
   THEN
      -- We are adding the zip_path for the first time
      INSERT INTO dx_series_zip_file_paths (
         path,
         file_name
      )
      VALUES (
         p_path,
         p_file_name
      )
      RETURNING zip_file_id
      INTO v_zip_file_id;

      INSERT INTO dx_series_zip_file_paths_hist (
         zip_file_id, path, file_name, mod_user, mod_date
      )
      VALUES (
         v_zip_file_id, p_path, p_file_name, p_mod_user, now()
      );
   END IF;

   SELECT zip_file_content_id
   INTO v_zip_file_content_id
   FROM dx_series_zip_file_contents
   WHERE zip_file_id = v_zip_file_id
   AND series_id = p_series_id;

   IF v_zip_file_content_id IS NULL
   THEN
      -- We are adding the zip file content (series_id) for the first time
      INSERT INTO dx_series_zip_file_contents (
         zip_file_id, series_id
      )
      VALUES (
         v_zip_file_id, p_series_id
      )
      RETURNING zip_file_content_id
      INTO v_zip_file_content_id;

      INSERT INTO dx_series_zip_file_contents_hist (
         zip_file_content_id, zip_file_id, series_id, mod_user, mod_date
      )
      VALUES (
         v_zip_file_content_id, v_zip_file_id, p_series_id, p_mod_user, now()
      );
   END IF;

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_add_series_zip_file_path_and_contents_f(p_path character varying, p_file_name character varying, p_series_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_add_source_attribute_f(numeric, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_source_attribute_f(p_modality_id numeric, p_label character varying, p_attribute_column_name character varying, p_attribute_desc_column character varying, p_operator character varying, p_column_type character varying, p_dbtrans_username character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

              DECLARE 
               v_attribute_id numeric(4,0);

               BEGIN
                  BEGIN 
                     SELECT nextval('dx_source_attributes_attr_id_seq')
                      INTO v_attribute_id; 
                  END;
                  INSERT INTO dx_source_attributes(
                     attribute_id,
                     modality_id,
                     label,
                     attribute_column_name,
                     attribute_desc_column,
                     operator,
                     column_type
                  )  
                  VALUES(
                     v_attribute_id,
                     p_modality_id, 
                     p_label, 
                     p_attribute_column_name,
                     p_attribute_desc_column,
                     p_operator,
                     p_column_type);

                  INSERT INTO dx_source_attributes_hist(
                     attribute_id,
                     modality_id,
                     label,
                     attribute_column_name,
                     attribute_desc_column,
                     operator,
                     column_type,
                     mod_user,
                     mod_date
                  )
                  VALUES (
                     v_attribute_id, 
                     p_modality_id, 
                     p_label, 
                     p_attribute_column_name,
                     p_attribute_desc_column,
                     p_operator,
                     p_column_type,
                     p_dbtrans_username,
                     now());

               RETURN v_attribute_id;
               END;
               $$;


ALTER FUNCTION dxdba.dx_add_source_attribute_f(p_modality_id numeric, p_label character varying, p_attribute_column_name character varying, p_attribute_desc_column character varying, p_operator character varying, p_column_type character varying, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: dx_add_source_attribute_value_f(numeric, numeric, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_source_attribute_value_f(p_attribute_id numeric, p_data_requests_source_id numeric, p_value character varying, p_dbtrans_username character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

        DECLARE 
         v_source_attribute_value_id numeric(4,0);

         BEGIN
            BEGIN 
               SELECT nextval('dx_source_attribute_values_pk_id_seq')
                INTO v_source_attribute_value_id; 
            END;
            INSERT INTO dx_source_attribute_values(
               source_attribute_value_id,
               attribute_id,
               data_requests_source_id,
               value
            )  
            VALUES(
               v_source_attribute_value_id,
               p_attribute_id, 
               p_data_requests_source_id, 
               p_value);

            INSERT INTO dx_source_attribute_values_hist(
               source_attribute_value_id,
               attribute_id,
               data_requests_source_id,
               value,
               mod_user,
               mod_date
            )  
            VALUES(
               v_source_attribute_value_id,
               p_attribute_id, 
               p_data_requests_source_id, 
               p_value,
               p_dbtrans_username,
               now());

         RETURN v_source_attribute_value_id;
         END;
         $$;


ALTER FUNCTION dxdba.dx_add_source_attribute_value_f(p_attribute_id numeric, p_data_requests_source_id numeric, p_value character varying, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: dx_add_upload_f(text, numeric, numeric, text, text); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_upload_f(p_site_id text, p_scanner_id numeric, p_study_id numeric, p_username text, p_dbtrans_username text) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
         v_upload_id  numeric;
      BEGIN
      
         SELECT nextval('dxdba.dx_data_upload_id_seq') into v_upload_id;

         INSERT INTO dxdba.dx_data_uploads(
            upload_id,
            site_id,
            scanner_id,
            study_id,
            username)
         VALUES(
            v_upload_id,
            p_site_id,
            p_scanner_id,
            p_study_id,
            p_username);

         INSERT INTO dxdba.dx_data_uploads_hist(
            upload_id,
            site_id,
            scanner_id,
            study_id,
            username,
            mod_user,
            mod_date)
         VALUES(
            v_upload_id,
            p_site_id,
            p_scanner_id,
            p_study_id,
            p_username,
            p_dbtrans_username,
            now());

         return v_upload_id;
      END;
      $$;


ALTER FUNCTION dxdba.dx_add_upload_f(p_site_id text, p_scanner_id numeric, p_study_id numeric, p_username text, p_dbtrans_username text) OWNER TO ni_developers;

--
-- Name: dx_add_upload_file_f(numeric, text, text, text); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_add_upload_file_f(p_upload_id numeric, p_filename text, p_status text, p_dbtrans_username text) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
         v_upload_file_id  numeric;
      BEGIN
      
         SELECT nextval('dxdba.dx_data_upload_id_seq') INTO v_upload_file_id;

         INSERT INTO dxdba.dx_data_upload_files(
            upload_file_id,
            upload_id,
            filename,
            status
         )
         VALUES(
            v_upload_file_id,
            p_upload_id,
            p_filename,
            p_status
         );

         INSERT INTO dxdba.dx_data_upload_files_hist(
            upload_file_id,
            upload_id,
            filename,
            status,
            mod_user,
            mod_date
         )
         VALUES(
            v_upload_file_id,
            p_upload_id,
            p_filename,
            p_status,
            p_dbtrans_username,
            now()
         );

         return v_upload_file_id;
      END;
      $$;


ALTER FUNCTION dxdba.dx_add_upload_file_f(p_upload_id numeric, p_filename text, p_status text, p_dbtrans_username text) OWNER TO ni_developers;

--
-- Name: dx_agree_to_usage_agreement_f(numeric, integer, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_agree_to_usage_agreement_f(p_data_request_id numeric, p_usage_agreement_id integer, p_dbtrans_username character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_already_agreed_to   numeric(8,0);
BEGIN

   -- check if this specific user has already agreed to this DUA
   SELECT data_request_id
   INTO v_already_agreed_to
   FROM dx_usage_agreement_acceptance
   WHERE data_request_id IN (
      SELECT data_request_id FROM dx_data_requests WHERE requester_username IN (
         SELECT requester_username FROM dx_data_requests WHERE data_request_id = p_data_request_id
      )
   )
   AND usage_agreement_id = p_usage_agreement_id;

   
   IF (v_already_agreed_to IS NULL)
   THEN
      INSERT INTO dx_usage_agreement_acceptance (
         data_request_id, date_agreed, usage_agreement_id)
      VALUES (
         p_data_request_id, now(), p_usage_agreement_id);

      INSERT INTO dx_usage_agreement_acceptance_hist (
         usage_agreement_acceptance_id, data_request_id, date_agreed, usage_agreement_id, mod_user, mod_date)
      SELECT 
         currval('dxdba.dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq'), p_data_request_id, now(), p_usage_agreement_id, p_dbtrans_username, now();
   ELSE
      RAISE EXCEPTION 'Bonk!  It seems like this user has already agreed to this specific Data Usage Agreement...';
   END IF;

   RETURN 1;

END;
$$;


ALTER FUNCTION dxdba.dx_agree_to_usage_agreement_f(p_data_request_id numeric, p_usage_agreement_id integer, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: dx_approve_data_source_f(numeric, text); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_approve_data_source_f(p_source_id numeric, p_username text) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN

         UPDATE dx_data_request_source_components
         SET approval_date = now(),
             denial_date = null,
             response_user = p_username
         WHERE source_id = p_source_id;

         INSERT INTO dx_data_request_source_components_hist (
            component_id, 
            source_id,
            modality_id, 
            anonymization_id,
            id_column_value,
            approval_date,
            denial_date,
            response_user,
            mod_date,
            mod_user)
         SELECT component_id, 
            source_id,
            modality_id, 
            anonymization_id,
            id_column_value,
            approval_date,
            denial_date,
            response_user,
            now(),
            p_username
         FROM dx_data_request_source_components
         WHERE source_id = p_source_id;

         RETURN '1';
            
         END;

         $$;


ALTER FUNCTION dxdba.dx_approve_data_source_f(p_source_id numeric, p_username text) OWNER TO ni_developers;

--
-- Name: dx_complete_data_capsule_modification_f(integer, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_complete_data_capsule_modification_f(p_modification_id integer, p_transaction_username character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE
               v_rs RECORD;
               v_affected_ids text;
               v_modality_id numeric;
               v_message text;
               v_modification_message text;
               v_action_type character varying;
            BEGIN
               INSERT INTO dx_data_capsule_modification_queue_hist
               (modification_id, affected_ids, action_type, modality_id, message, mod_user, mod_date)
               SELECT
               modification_id,affected_ids, action_type, modality_id, message, p_transaction_username, now()
               FROM dx_data_capsule_modification_queue
               WHERE modification_id = p_modification_id;


               SELECT affected_ids, modality_id, message, action_type
               INTO v_affected_ids, v_modality_id, v_modification_message, v_action_type
               FROM dx_data_capsule_modification_queue
               WHERE modification_id = p_modification_id;

               PERFORM dx_message_affected_requests_f(v_affected_ids, v_modality_id, v_action_type, 'zippedapproved', v_modification_message, p_transaction_username);

               --remove modification
               DELETE FROM dx_data_capsule_modification_queue
               WHERE modification_id = p_modification_id;

               RETURN p_modification_id;
            END;
        $$;


ALTER FUNCTION dxdba.dx_complete_data_capsule_modification_f(p_modification_id integer, p_transaction_username character varying) OWNER TO ni_developers;

--
-- Name: dx_delete_capsule_processing_temp_f(numeric, numeric); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_delete_capsule_processing_temp_f(p_source_id numeric, p_file_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   DELETE FROM dx_capsule_processing_temp 
   WHERE source_id = p_source_id
   AND file_id = p_file_id;

   -- DON'T enter into hist table because this causes bloat and is not useful

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_delete_capsule_processing_temp_f(p_source_id numeric, p_file_id numeric) OWNER TO ni_developers;

--
-- Name: dx_delete_data_capsule_downloads_f(numeric, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_delete_data_capsule_downloads_f(p_file_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO dx_data_capsule_downloads_hist (
      file_id, mod_user, mod_date
   ) 
   VALUES (
      p_file_id, p_mod_user, now()
   );

   DELETE FROM dx_data_capsule_downloads 
   WHERE file_id = p_file_id;

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_delete_data_capsule_downloads_f(p_file_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_delete_data_capsule_modification_queue_f(integer, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_delete_data_capsule_modification_queue_f(p_modification_id integer, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO dx_data_capsule_modification_queue_hist (
      modification_id, mod_user, mod_date
   ) 
   VALUES (
      p_modification_id, p_mod_user, now()
   );

   DELETE FROM dx_data_capsule_modification_queue 
   WHERE modification_id = p_modification_id;

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_delete_data_capsule_modification_queue_f(p_modification_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_delete_data_capsule_request_from_queue_f(numeric); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_delete_data_capsule_request_from_queue_f(data_requests_source_id_f numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      BEGIN
         delete from dx_data_capsule_creation_queue 
         where source_id = data_requests_source_id_f;

         /*update hist table */

         update dx_data_capsule_creation_queue_hist set data_capsule_finish_creation_time=now()
         where source_id=data_requests_source_id_f;

         return '1';

      END;$$;


ALTER FUNCTION dxdba.dx_delete_data_capsule_request_from_queue_f(data_requests_source_id_f numeric) OWNER TO ni_developers;

--
-- Name: dx_delete_data_request_template_filter_f(integer, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_delete_data_request_template_filter_f(p_filter_id integer, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE
            v_group_id int;
            v_request_submitted timestamp without time zone;
            v_request_id numeric;
         
         BEGIN
            
            SELECT group_id
            INTO v_group_id
            FROM dx_data_request_template_filters_vw 
            WHERE filter_id = p_filter_id;


            WITH RECURSIVE tmp_groups_vw 
            (group_id, parent_group_id, data_request_id) AS (
               SELECT g.group_id, g.parent_group_id, g.data_request_id 
               FROM dx_data_request_template_groups_vw g 
               WHERE g.group_id = v_group_id
               UNION 
               SELECT g2.group_id, g2.parent_group_id, g2.data_request_id
               FROM dx_data_request_template_groups_vw g2 
               INNER JOIN tmp_groups_vw tmp 
               ON tmp.parent_group_id = g2.group_id
            )
            SELECT date_submitted, r.data_request_id
            INTO v_request_submitted, v_request_id
            FROM dx_data_requests r
            INNER JOIN tmp_groups_vw g
            ON g.data_request_id = r.data_request_id;


            IF v_request_submitted IS NULL THEN
               INSERT INTO dx_data_request_template_filters_hist (
               filter_id,
               group_id,
               attribute_id,
               attribute_value,
               mod_user,
               mod_date
               )
               SELECT 
               filter_id,
               group_id,
               attribute_id,
               attribute_value,
               p_dbtrans_username,
               now()
               FROM dx_data_request_template_filters
               WHERE filter_id = p_filter_id;

               DELETE FROM dx_data_request_template_filters
               WHERE filter_id = p_filter_id;

               RETURN p_filter_id;
            ELSE
               RAISE EXCEPTION 'Cannot delete a filter belonging to a submitted request: %', ('Filter_id = '||p_filter_id||' Request = '||v_request_id||' submitted: '||(v_request_submitted::text));
            END IF;
         END;
         $$;


ALTER FUNCTION dxdba.dx_delete_data_request_template_filter_f(p_filter_id integer, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: dx_delete_data_request_template_group_f(integer, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_delete_data_request_template_group_f(p_group_id integer, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         
         DECLARE
            v_rs record;
            v_result int;
            v_request_submitted timestamp without time zone;
            v_request_id numeric;

            BEGIN
               WITH RECURSIVE tmp_groups_vw 
               (group_id, parent_group_id, data_request_id) AS (
                  SELECT g.group_id, g.parent_group_id, g.data_request_id 
                  FROM dx_data_request_template_groups_vw g 
                  WHERE g.group_id = p_group_id
                  UNION 
                  SELECT g2.group_id, g2.parent_group_id, g2.data_request_id
                  FROM dx_data_request_template_groups_vw g2 
                  INNER JOIN tmp_groups_vw tmp 
                  ON g2.group_id = tmp.parent_group_id
               )
               SELECT date_submitted, r.data_request_id
               INTO v_request_submitted, v_request_id
               FROM dx_data_requests r
               INNER JOIN tmp_groups_vw g
               ON g.data_request_id = r.data_request_id;
                
               IF v_request_submitted IS NULL THEN
         
                  --delete any children first:
                  FOR v_rs IN
                     SELECT group_id 
                     FROM dx_data_request_template_groups_vw
                     WHERE parent_group_id = p_group_id
                  LOOP
                     SELECT dx_delete_data_request_template_group_f(
                        v_rs.group_id, p_dbtrans_username
                     )
                     INTO v_result;
                  END LOOP;
                  FOR v_rs IN
                     SELECT filter_id
                     FROM dx_data_request_template_filters_vw
                     WHERE group_id = p_group_id
                  LOOP
                     SELECT dx_delete_data_request_template_filter_f(
                        v_rs.filter_id, p_dbtrans_username
                     )
                     INTO v_result;
                  END LOOP;

                  INSERT INTO dxdba.dx_data_request_template_groups_hist(
                     group_id,
                     data_request_id,
                     parent_group_id,
                     conjunction_type,
                     mod_user,
                     mod_date)
                  SELECT
                     group_id,
                     data_request_id,
                     parent_group_id,
                     conjunction_type,
                     p_dbtrans_username,
                     now()
                   FROM dx_data_request_template_groups
                   WHERE group_id = p_group_id;

                   DELETE FROM dx_data_request_template_groups
                    WHERE group_id = p_group_id;
                  
                   RETURN p_group_id;
               ELSE
                  RAISE EXCEPTION 'Cannot delete a group from a submitted request: %', (' Group = '||p_group_id||' Request = '||v_request_id||' submitted: '||(v_request_submitted::text));
               END IF;
         END;
         $$;


ALTER FUNCTION dxdba.dx_delete_data_request_template_group_f(p_group_id integer, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: dx_delete_data_source_capsule_link_f(numeric, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_delete_data_source_capsule_link_f(p_data_capsule_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO dx_data_source_capsule_link_hist (
      data_capsule_id, mod_user, mod_date
   ) 
   VALUES (
      p_data_capsule_id, p_mod_user, now()
   );

   DELETE FROM dx_data_source_capsule_link 
   WHERE data_capsule_id = p_data_capsule_id;

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_delete_data_source_capsule_link_f(p_data_capsule_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_delete_ex_situ_data_capsule_files_f(numeric, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_delete_ex_situ_data_capsule_files_f(p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO dx_ex_situ_data_capsule_files_hist (
      data_capsule_id, file_name, mod_user, mod_date
   ) 
   VALUES (
      p_data_capsule_id, p_file_name, p_mod_user, now()
   );

   DELETE FROM dx_ex_situ_data_capsule_files 
   WHERE data_capsule_id = p_data_capsule_id
   AND file_name = p_file_name;

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_delete_ex_situ_data_capsule_files_f(p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_delete_ex_situ_data_capsules_f(numeric, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_delete_ex_situ_data_capsules_f(p_data_capsule_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO dx_ex_situ_data_capsules_hist (
      data_capsule_id, mod_user, mod_date
   ) 
   VALUES (
      p_data_capsule_id, p_mod_user, now()
   );

   DELETE FROM dx_ex_situ_data_capsules 
   WHERE data_capsule_id = p_data_capsule_id;

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_delete_ex_situ_data_capsules_f(p_data_capsule_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_delete_series_anonymized_file_path_f(character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_delete_series_anonymized_file_path_f(p_archive_file_path character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   DELETE FROM dx_series_anonymized_file_paths
   WHERE archive_file_path = p_archive_file_path;

   -- DON'T enter into hist table because this causes bloat and is not useful

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_delete_series_anonymized_file_path_f(p_archive_file_path character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_deny_data_source_f(numeric, text); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_deny_data_source_f(p_source_id numeric, p_username text) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN

         UPDATE dx_data_request_source_components
         SET denial_date = now(),
             approval_date = null
         WHERE source_id = p_source_id;

         INSERT INTO dx_data_request_source_components_hist (
            component_id, 
            source_id,
            modality_id, 
            anonymization_id,
            id_column_value,
            approval_date,
            denial_date,
            response_user,
            mod_date,
            mod_user)
         SELECT component_id, 
            source_id,
            modality_id, 
            anonymization_id,
            id_column_value,
            approval_date,
            denial_date,
            response_user,
            now(),
            p_username
         FROM dx_data_request_source_components
         WHERE source_id = p_source_id;

         RETURN '1';
            
         END;

         $$;


ALTER FUNCTION dxdba.dx_deny_data_source_f(p_source_id numeric, p_username text) OWNER TO ni_developers;

--
-- Name: dx_email_msg_f(numeric); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_email_msg_f(p_message_id numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

                     BEGIN

                        UPDATE dxdba.dx_messages
                           SET email_sent_date = now()
                        WHERE message_id = p_message_id;

                        return p_message_id;
                        
                     END;

                     $$;


ALTER FUNCTION dxdba.dx_email_msg_f(p_message_id numeric) OWNER TO ni_developers;

--
-- Name: dx_find_and_serve_preexisting_zip_files_f(integer[], integer); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_find_and_serve_preexisting_zip_files_f(p_series_id integer[], p_source_id integer) RETURNS TABLE(series_id integer, data_capsule_id integer)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
   DECLARE
      v_sql                       text;
      v_cnt                       integer;
      v_cnt_matched_ids           integer;
      v_cnt_total_ids             integer;
      v_select                    text;
      v_temp                      text;
      v_zip_file_id               integer;
      v_path                      character varying;
      v_file_name                 character varying;
      v_data_capsule_id           integer;
      v_file_id                   integer;
      v_file_size_mb              numeric;
   BEGIN

      CREATE TEMP TABLE dx_series_ids_temp (t_series_id integer, t_data_capsule_id integer) ON COMMIT DROP;

      INSERT INTO dx_series_ids_temp (t_series_id) SELECT UNNEST(p_series_id);

      FOR v_zip_file_id IN (
         -- we need to join with dx_ex_situ_data_capsule_files in order to make sure that we only
         -- grab zip files that have finished processing. Otherwise, we might grab a zip file that
         -- has only started to process and is still including more series_id's
         SELECT DISTINCT zip_file_id
         FROM dx_series_zip_file_paths szfp
         INNER JOIN dx_ex_situ_data_capsule_files esdcf
             ON szfp.file_name = esdcf.file_name
         ORDER BY zip_file_id)
      LOOP

         -- count matched number of ids
         SELECT COUNT(*)
         INTO v_cnt_matched_ids
         FROM dx_series_ids_temp
         WHERE t_series_id IN (
            SELECT szfc.series_id
            FROM dx_series_zip_file_contents szfc
            WHERE zip_file_id  = v_zip_file_id
         );
         
         -- count total number of ids
         SELECT COUNT(*) 
         INTO v_cnt_total_ids
         FROM dx_series_zip_file_contents 
         WHERE zip_file_id  = v_zip_file_id;

         IF v_cnt_matched_ids = v_cnt_total_ids
         THEN
            -- then the series_id's contained in this zip file (v_zip_file_id) are ALL contained in this request
            -- Now, we want to:
            -- (1) serve this zip file to the user
            -- (2) remove these newly associated series_ids from dx_series_ids_temp table
            -- (3) look thru the rest of the zip files and see if we can associate any other zip files with the request (i.e. continue with the loop)

            --(1)
            SELECT path, file_name
            INTO v_path, v_file_name
            FROM dx_series_zip_file_paths
            WHERE zip_file_id = v_zip_file_id;

            SELECT file_size_mb
            INTO v_file_size_mb
            FROM dx_ex_situ_data_capsule_files
            WHERE file_name = v_file_name;

            IF v_data_capsule_id IS NULL
            THEN
               SELECT dx_add_data_capsule_f(p_source_id, v_path, DATE_TRUNC('second', NOW())::timestamp without time zone)
               INTO v_data_capsule_id;

               UPDATE dx_series_ids_temp
               SET t_data_capsule_id = v_data_capsule_id;
            END IF;

            SELECT dxdba.dx_add_data_capsule_file_f(v_data_capsule_id, v_file_name, v_file_size_mb, DATE_TRUNC('second', NOW())::timestamp without time zone, SUBSTR(md5(RANDOM()::text),0,16) )
            INTO v_file_id;

            --(2)
            DELETE FROM dx_series_ids_temp
            WHERE t_series_id IN (
               SELECT szfc.series_id
               FROM dx_series_zip_file_contents szfc
               WHERE zip_file_id  = v_zip_file_id
            );

            --(3)
            -- continue with loop and look for more zip files to associate with this request

         END IF;
      END LOOP;

      SELECT COUNT(*)
      INTO v_cnt
      FROM dx_series_ids_temp;

      IF v_cnt = 0
      THEN
         -- dx_series_ids_temp is empty and there are NO series_ids left
         -- we still want to return the data_capsule_id, so insert one row
         -- back into table with only the t_data_capsule_id
         INSERT INTO dx_series_ids_temp (t_data_capsule_id)
         VALUES (v_data_capsule_id);
      END IF;
      
      v_select := $A$SELECT t_series_id, t_data_capsule_id FROM dx_series_ids_temp ORDER BY t_series_id$A$;

      RETURN QUERY EXECUTE v_select;


   END;
$_$;


ALTER FUNCTION dxdba.dx_find_and_serve_preexisting_zip_files_f(p_series_id integer[], p_source_id integer) OWNER TO ni_developers;

--
-- Name: dx_generate_source_object_f(integer); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_generate_source_object_f(p_request_id integer) RETURNS TABLE(data_count bigint, subject_count bigint, study_id numeric, study_label character varying, pi_id character varying, preapproved_message text, approval_user text, filter_type character varying, usage_agreement_id integer, dua_label text, dua_body text, already_agreed boolean)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
   DECLARE
      v_username           varchar(160);
      v_group_id           integer;
      v_temp               text;
      v_query              text;
      v_modality_id        numeric(4,0);
      v_column_name        varchar;
      v_null               varchar;
      v_union              varchar;
      v_filter_type        varchar(200);
   BEGIN

      -- Grab the username using the provied request_id
      SELECT requester_username INTO v_username FROM dx_data_requests WHERE data_request_id = p_request_id;

      -- Grab the top group_id from the provided request_id
      SELECT group_id INTO v_group_id FROM dx_data_request_template_groups WHERE data_request_id = p_request_id;

      -- Create a temp table to hold all returned components
      CREATE TEMP TABLE temp_component_table (series_id varchar, assessment_id numeric, study_id_ct numeric, anonymization_id varchar) ON COMMIT DROP;

      -- Insert filter components into a temp table so that we do not have to call dx_return_group_components_f more than once
      v_temp := $A$
         INSERT INTO temp_component_table
         SELECT * FROM dx_return_group_components_f($A$||v_group_id||$A$);
      $A$;
      EXECUTE v_temp;

      -- set these variables to be blank
      v_union := '';
      v_temp := '';
      v_query := '';

      -- build query for all modalities that are NOT subjects(142)/studies(143)
      FOR v_modality_id IN (
        SELECT DISTINCT modality_id 
        FROM dx_source_attributes 
        WHERE modality_id NOT IN (142, 143))
      LOOP
         SELECT attribute_view_id_column INTO v_column_name FROM mrs_modalities WHERE modality_id = v_modality_id;
         SELECT label INTO v_filter_type FROM mrs_modalities WHERE modality_id = v_modality_id;

         IF v_modality_id = 112 -- assessment_id
         THEN
            v_null := $A$-1$A$;
         ELSEIF v_modality_id = 1 -- series_id
         THEN
            v_null := $A$'dx_null'$A$;
         ELSE
            RAISE EXCEPTION 'BONK! encountered unrecognized modality_id in dx_generate_source_object_f :(';
         END IF;

         -- Return all associated filter components, count those components, and return metrics.
         v_temp := $A$
            SELECT 
                COUNT(DISTINCT data_vw.$A$||v_column_name||$A$) AS data_count, 
                COUNT(DISTINCT data_vw.anonymization_id) AS subject_count, 
                data_vw.study_id_ct AS study_id, 
                studies.label AS study_label, 
                studies.pi_id, 
                p.message AS preapproved_message,
                p.approval_user,
                '$A$||v_filter_type||$A$'::varchar AS filter_type,
                dua.usage_agreement_id,
                dua.label,
                dua.body,
                CASE WHEN duaa.usage_agreement_acceptance_id IS NULL THEN FALSE ELSE TRUE END
            FROM (SELECT * FROM temp_component_table WHERE $A$||v_column_name||$A$ NOT IN ($A$||v_null||$A$)) data_vw 
            INNER JOIN mrs_studies_vw studies ON studies.study_id = data_vw.study_id_ct
            LEFT OUTER JOIN dx_preapprovals_vw p ON p.study_id = studies.study_id AND (p.approved_user = '$A$||v_username||$A$' OR p.approved_user IS NULL) 
            LEFT OUTER JOIN (SELECT * FROM dx_usage_agreements WHERE usage_agreement_id IN (
                                SELECT MAX(usage_agreement_id) AS usage_agreement_id FROM dx_usage_agreements WHERE direction = 'download' GROUP BY study_id)
                            ) dua ON studies.study_id = dua.study_id
            LEFT OUTER JOIN dx_usage_agreement_acceptance duaa ON dua.usage_agreement_id = duaa.usage_agreement_id
            GROUP BY studies.pi_id, data_vw.study_id_ct, p.message, p.approval_user, studies.label, dua.usage_agreement_id, dua.label, dua.body, duaa.usage_agreement_acceptance_id
         $A$;

         v_query := v_query || v_union || v_temp;

         v_union := ' UNION ';        
      END LOOP;

      v_query := v_query || ' ORDER BY filter_type, study_id;';

      RETURN QUERY EXECUTE v_query;

   end;$_$;


ALTER FUNCTION dxdba.dx_generate_source_object_f(p_request_id integer) OWNER TO ni_developers;

--
-- Name: dx_get_statistics_f(integer); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_get_statistics_f(p_request_id integer) RETURNS TABLE(mr bigint, assessments bigint, studies bigint, subjects bigint)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
   DECLARE
      v_group_id           integer;
      v_temp               text;
   BEGIN

      -- Grab the top group_id from the provided request_id
      SELECT group_id INTO v_group_id FROM dx_data_request_template_groups WHERE data_request_id = p_request_id;

      -- Return all associated filter components, count those components, and return metrics.
      v_temp := $A$
      SELECT
         COUNT(DISTINCT rs.series_id)-2 AS mr,
         COUNT(DISTINCT rs.assessment_id)-2 AS assessments,
         COUNT(DISTINCT rs.study_id)-1 AS studies,
         COUNT(DISTINCT rs.anonymization_id)-1 AS subjects
      FROM (
         SELECT * FROM dx_return_group_components_f($A$||v_group_id||$A$)
         UNION SELECT 'foo_null',-1,-1,'dx_null'
         UNION SELECT 'dx_null',-2,-1,'dx_null'
      ) rs
      WHERE rs.series_id <> 'dx_null'
      OR rs.assessment_id <> -1;$A$;

      RETURN QUERY EXECUTE v_temp;

   end;$_$;


ALTER FUNCTION dxdba.dx_get_statistics_f(p_request_id integer) OWNER TO ni_developers;

--
-- Name: dx_include_exclude_all_f(numeric, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_include_exclude_all_f(p_study_id numeric, p_new_dx_excluded character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
DECLARE
   v_new_dx_excluded boolean;
   v_old_dx_excluded boolean;
BEGIN

IF p_new_dx_excluded = 'TRUE' OR
   p_new_dx_excluded = 'T' OR
   p_new_dx_excluded = 'true' OR
   p_new_dx_excluded = 't' OR
   p_new_dx_excluded = '1'
THEN
   v_new_dx_excluded = TRUE;
   v_old_dx_excluded = FALSE;
ELSE
   v_new_dx_excluded = FALSE;
   v_old_dx_excluded = TRUE;
END IF;


--mrs_studies
INSERT INTO mrsdba.mrs_studies_hist (
   study_id, dx_excluded, mod_user, mod_date
)
VALUES (
   p_study_id, v_new_dx_excluded, p_mod_user, now()
);

UPDATE mrsdba.mrs_studies
SET dx_excluded = v_new_dx_excluded
WHERE study_id = p_study_id;


--mrs_instrument_questions
INSERT INTO mrsdba.mrs_instrument_questions_hist (
   question_id, dx_excluded, mod_user, mod_date
)
SELECT 
   question_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_instrument_questions
WHERE section_id IN (
   SELECT section_id FROM mrs_instrument_section_details WHERE instrument_id IN (
      SELECT instrument_id FROM mrs_instruments_studies WHERE study_id = p_study_id
   )
)
AND dx_excluded = v_old_dx_excluded;

UPDATE mrsdba.mrs_instrument_questions
SET dx_excluded = v_new_dx_excluded
WHERE question_id IN (
   SELECT 
      question_id
   FROM mrs_instrument_questions 
   WHERE section_id IN (
      SELECT section_id FROM mrs_instrument_section_details WHERE instrument_id IN (
         SELECT instrument_id FROM mrs_instruments_studies WHERE study_id = p_study_id
      )
   )
   AND dx_excluded = v_old_dx_excluded
);


--mrs_instruments_studies
INSERT INTO mrsdba.mrs_instruments_studies_hist (
   instrument_id, study_id, dx_excluded, mod_user, mod_date
)
SELECT 
   instrument_id, study_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_instruments_studies 
WHERE study_id = p_study_id
AND dx_excluded = v_old_dx_excluded;

UPDATE mrsdba.mrs_instruments_studies
SET dx_excluded = v_new_dx_excluded
WHERE study_id = p_study_id
AND dx_excluded = v_old_dx_excluded;


--mrs_scan_sessions
INSERT INTO mrsdba.mrs_scan_sessions_hist (
   scan_id, dx_excluded, mod_user, mod_date
)
SELECT 
   scan_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_scan_sessions
WHERE study_id = p_study_id
AND dx_excluded = v_old_dx_excluded;

UPDATE mrsdba.mrs_scan_sessions
SET dx_excluded = v_new_dx_excluded
WHERE study_id = p_study_id
AND dx_excluded = v_old_dx_excluded;


--mrs_series
INSERT INTO mrsdba.mrs_series_hist (
   series_id, dx_excluded, mod_user, mod_date
)
SELECT 
   series_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_series
WHERE series_id IN (
   SELECT series_id FROM mrs_series WHERE scan_id IN (
      SELECT scan_id FROM mrs_scan_sessions WHERE study_id = p_study_id
   )
)
AND dx_excluded = v_old_dx_excluded;

UPDATE mrsdba.mrs_series
SET dx_excluded = v_new_dx_excluded
WHERE series_id IN (
   SELECT series_id FROM mrs_series WHERE scan_id IN (
      SELECT scan_id FROM mrs_scan_sessions WHERE study_id = p_study_id
   )
)
AND dx_excluded = v_old_dx_excluded;


--mrs_series_labels
INSERT INTO mrsdba.mrs_series_labels_hist (
   label_id, dx_excluded, mod_user, mod_date
)
SELECT 
   label_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_series_labels
WHERE study_id = p_study_id
AND dx_excluded = v_old_dx_excluded;

UPDATE mrsdba.mrs_series_labels
SET dx_excluded = v_new_dx_excluded
WHERE study_id = p_study_id
AND dx_excluded = v_old_dx_excluded;


--mrs_assessments
INSERT INTO mrsdba.mrs_assessments_hist (
   assessment_id, dx_excluded, mod_user, mod_date
)
SELECT 
   assessment_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_assessments
WHERE assessment_id IN (
   SELECT asmt.assessment_id
   FROM mrs_asmts_studies_vw  asv
   INNER JOIN mrs_assessments_vw asmt ON asv.assessment_id = asmt.assessment_id
   INNER JOIN mrs_inst_studies_vw inst ON asmt.instrument_id = inst.instrument_id 
                                       AND asv.study_id = inst.study_id
   INNER JOIN mrs_subject_type_details_vw std ON asmt.ursi = std.ursi 
                                              AND asv.study_id = std.study_id
   INNER JOIN mrs_subject_types_vw st ON std.subject_type_id = st.subject_type_id
   LEFT JOIN mrs_study_intervals_vw siv ON asmt.segment_interval = siv.segment_interval 
                                        AND asv.study_id = siv.study_id
   WHERE asv.study_id = p_study_id
   AND std.disenrolled_date IS NULL
   AND asmt.dataentry_type_id = 1
   AND asmt.entry_code = 'C'
   AND asmt.dx_excluded = v_old_dx_excluded
);

UPDATE mrsdba.mrs_assessments
SET dx_excluded = v_new_dx_excluded
WHERE assessment_id IN (
   SELECT asmt.assessment_id
   FROM mrs_asmts_studies_vw  asv
   INNER JOIN mrs_assessments_vw asmt ON asv.assessment_id = asmt.assessment_id
   INNER JOIN mrs_inst_studies_vw inst ON asmt.instrument_id = inst.instrument_id 
                                       AND asv.study_id = inst.study_id
   INNER JOIN mrs_subject_type_details_vw std ON asmt.ursi = std.ursi 
                                              AND asv.study_id = std.study_id
   INNER JOIN mrs_subject_types_vw st ON std.subject_type_id = st.subject_type_id
   LEFT JOIN mrs_study_intervals_vw siv ON asmt.segment_interval = siv.segment_interval 
                                        AND asv.study_id = siv.study_id
   WHERE asv.study_id = p_study_id
   AND std.disenrolled_date IS NULL
   AND asmt.dataentry_type_id = 1
   AND asmt.entry_code = 'C'
   AND asmt.dx_excluded = v_old_dx_excluded
);


--mrs_subject_types
INSERT INTO mrsdba.mrs_subject_types_hist (
   subject_type_id, dx_excluded, mod_user, mod_date
)
SELECT 
   subject_type_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_subject_types
WHERE study_id = p_study_id
AND dx_excluded = v_old_dx_excluded;

UPDATE mrsdba.mrs_subject_types
SET dx_excluded = v_new_dx_excluded
WHERE study_id = p_study_id
AND dx_excluded = v_old_dx_excluded;


--mrs_subject_type_details
INSERT INTO mrsdba.mrs_subject_type_details_hist (
   ursi, subject_type_id, usid, subject_type_detail_id, anonymization_id, dx_excluded, mod_user, mod_date
)
SELECT 
   ursi, subject_type_id, usid, subject_type_detail_id, anonymization_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_subject_type_details
WHERE subject_type_id IN (
   SELECT subject_type_id FROM mrs_subject_types WHERE study_id = p_study_id AND disenrolled_date IS NULL
)
AND dx_excluded = v_old_dx_excluded;

UPDATE mrsdba.mrs_subject_type_details
SET dx_excluded = v_new_dx_excluded
WHERE subject_type_id IN (
   SELECT subject_type_id FROM mrs_subject_types WHERE study_id = p_study_id AND disenrolled_date IS NULL
)
AND dx_excluded = v_old_dx_excluded;


IF v_new_dx_excluded = TRUE
THEN
   return 'excluded';
ELSE
   return 'included';
END IF;

END;
$$;


ALTER FUNCTION dxdba.dx_include_exclude_all_f(p_study_id numeric, p_new_dx_excluded character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_include_exclude_all_ursi_f(numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_include_exclude_all_ursi_f(p_study_id numeric, p_ursi character varying, p_new_dx_excluded character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
/* The purpose of this function is to include or exclude all data for a specific participant.
 * It will affect data that is specific to that ursi ONLY:
 *    (mrs_subject_type_details,mrs_assessments,mrs_scan_sessions,mrs_series)
 * It will NOT affect data that would also affect other ursi's:
 *    (mrs_studies,mrs_subject_types,mrs_series_labels,mrs_instruments_studies,mrs_instrument_questions)
 */
DECLARE
   v_new_dx_excluded boolean;
   v_old_dx_excluded boolean;
BEGIN

IF p_new_dx_excluded = 'TRUE' OR
   p_new_dx_excluded = 'T' OR
   p_new_dx_excluded = 'true' OR
   p_new_dx_excluded = 't' OR
   p_new_dx_excluded = '1'
THEN
   v_new_dx_excluded = TRUE;
   v_old_dx_excluded = FALSE;
ELSE
   v_new_dx_excluded = FALSE;
   v_old_dx_excluded = TRUE;
END IF;


--mrs_subject_type_details
INSERT INTO mrsdba.mrs_subject_type_details_hist (
   ursi, subject_type_id, usid, subject_type_detail_id, anonymization_id, dx_excluded, mod_user, mod_date
)
SELECT 
   ursi, subject_type_id, usid, subject_type_detail_id, anonymization_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_subject_type_details
WHERE subject_type_id IN (
   SELECT subject_type_id FROM mrs_subject_types WHERE study_id = p_study_id AND disenrolled_date IS NULL
)
AND dx_excluded = v_old_dx_excluded
AND ursi = p_ursi;


UPDATE mrsdba.mrs_subject_type_details
SET dx_excluded = v_new_dx_excluded
WHERE subject_type_id IN (
   SELECT subject_type_id FROM mrs_subject_types WHERE study_id = p_study_id AND disenrolled_date IS NULL
)
AND dx_excluded = v_old_dx_excluded
AND ursi = p_ursi;


--mrs_assessments
INSERT INTO mrsdba.mrs_assessments_hist (
   assessment_id, dx_excluded, mod_user, mod_date
)
SELECT 
   assessment_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_assessments
WHERE assessment_id IN (
   SELECT asmt.assessment_id
   FROM mrs_asmts_studies_vw  asv
   INNER JOIN mrs_assessments_vw asmt ON asv.assessment_id = asmt.assessment_id
   INNER JOIN mrs_inst_studies_vw inst ON asmt.instrument_id = inst.instrument_id 
                                       AND asv.study_id = inst.study_id
   INNER JOIN mrs_subject_type_details_vw std ON asmt.ursi = std.ursi 
                                              AND asv.study_id = std.study_id
   INNER JOIN mrs_subject_types_vw st ON std.subject_type_id = st.subject_type_id
   LEFT JOIN mrs_study_intervals_vw siv ON asmt.segment_interval = siv.segment_interval 
                                        AND asv.study_id = siv.study_id
   WHERE asv.study_id = p_study_id
   AND std.disenrolled_date IS NULL
   AND asmt.dataentry_type_id = 1
   AND asmt.entry_code = 'C'
   AND asmt.dx_excluded = v_old_dx_excluded
   AND asmt.ursi = p_ursi
);

UPDATE mrsdba.mrs_assessments
SET dx_excluded = v_new_dx_excluded
WHERE assessment_id IN (
   SELECT asmt.assessment_id
   FROM mrs_asmts_studies_vw  asv
   INNER JOIN mrs_assessments_vw asmt ON asv.assessment_id = asmt.assessment_id
   INNER JOIN mrs_inst_studies_vw inst ON asmt.instrument_id = inst.instrument_id 
                                       AND asv.study_id = inst.study_id
   INNER JOIN mrs_subject_type_details_vw std ON asmt.ursi = std.ursi 
                                              AND asv.study_id = std.study_id
   INNER JOIN mrs_subject_types_vw st ON std.subject_type_id = st.subject_type_id
   LEFT JOIN mrs_study_intervals_vw siv ON asmt.segment_interval = siv.segment_interval 
                                        AND asv.study_id = siv.study_id
   WHERE asv.study_id = p_study_id
   AND std.disenrolled_date IS NULL
   AND asmt.dataentry_type_id = 1
   AND asmt.entry_code = 'C'
   AND asmt.dx_excluded = v_old_dx_excluded
   AND asmt.ursi = p_ursi
);


--mrs_scan_sessions
INSERT INTO mrsdba.mrs_scan_sessions_hist (
   scan_id, dx_excluded, mod_user, mod_date
)
SELECT 
   scan_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_scan_sessions
WHERE study_id = p_study_id
AND dx_excluded = v_old_dx_excluded
AND ursi = p_ursi;

UPDATE mrsdba.mrs_scan_sessions
SET dx_excluded = v_new_dx_excluded
WHERE study_id = p_study_id
AND dx_excluded = v_old_dx_excluded
AND ursi = p_ursi;


--mrs_series
INSERT INTO mrsdba.mrs_series_hist (
   series_id, dx_excluded, mod_user, mod_date
)
SELECT 
   series_id, v_new_dx_excluded, p_mod_user, now()
FROM mrs_series
WHERE series_id IN (
   SELECT series_id FROM mrs_series WHERE scan_id IN (
      SELECT scan_id FROM mrs_scan_sessions WHERE study_id = p_study_id AND ursi = p_ursi
   )
)
AND dx_excluded = v_old_dx_excluded;

UPDATE mrsdba.mrs_series
SET dx_excluded = v_new_dx_excluded
WHERE series_id IN (
   SELECT series_id FROM mrs_series WHERE scan_id IN (
      SELECT scan_id FROM mrs_scan_sessions WHERE study_id = p_study_id AND ursi = p_ursi
   )
)
AND dx_excluded = v_old_dx_excluded;


IF v_new_dx_excluded = TRUE
THEN
   return 'excluded';
ELSE
   return 'included';
END IF;

END;
$$;


ALTER FUNCTION dxdba.dx_include_exclude_all_ursi_f(p_study_id numeric, p_ursi character varying, p_new_dx_excluded character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_increment_ex_situ_data_capsule_files_downloads_f(numeric, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_increment_ex_situ_data_capsule_files_downloads_f(p_file_id numeric, p_download_user character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO dx_ex_situ_data_capsule_files_hist (
      file_id, 
      download_time,
      download_user,
      mod_user, 
      mod_date
   )
   VALUES (
      p_file_id,
      NOW(),
      p_download_user,
      p_mod_user,
      NOW()
   );

   UPDATE dx_ex_situ_data_capsule_files
   SET last_downloaded_time = NOW(),
   number_of_download = (
      CASE WHEN number_of_download IS NULL
         THEN 1
         ELSE number_of_download + 1
      END
   )
   WHERE file_id = p_file_id;

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_increment_ex_situ_data_capsule_files_downloads_f(p_file_id numeric, p_download_user character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_message_affected_requests_f(text, numeric, character varying, character varying, text, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_message_affected_requests_f(p_affected_ids text, p_modality_id numeric, p_action_type character varying, p_component_status character varying, p_message text, p_transaction_username character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
                  DECLARE
                     v_rs RECORD;
                     v_affected_ids text[];
                     v_message text;
                     v_message_count int;
                  BEGIN
                     v_message_count := 0;
                     v_affected_ids := regexp_split_to_array(trim(BOTH FROM p_affected_ids), E'\\s*,\\s*');

                     FOR v_rs IN SELECT source_id, 
                        array_to_string(array_agg(anonymization_id), ', ') as affected_anonymization_ids 
                        FROM( SELECT DISTINCT rsc.source_id, anonymization_id 
                        FROM dx_data_request_source_components rsc
                        LEFT OUTER JOIN dx_data_source_capsule_link_vw dscl
                        ON dscl.source_id = rsc.source_id
                        WHERE anonymization_id = ANY(v_affected_ids)
                        AND 
                           CASE WHEN p_component_status = 'approved' THEN rsc.approval_date IS NOT NULL
                           WHEN p_component_status = 'zippedapproved' THEN dscl.data_capsule_id IS NOT NULL AND rsc.approval_date IS NOT NULL
                           WHEN p_component_status = 'notzipped' THEN dscl.data_capsule_id IS NULL
                           WHEN p_component_status = 'notzippednotdenied' THEN dscl.data_capsule_id IS NULL AND rsc.denial_date IS NULL
                           WHEN p_component_status = 'denied' THEN rsc.denial_date IS NOT NULL
                           WHEN p_component_status = 'pending' THEN rsc.denial_date IS NULL AND rsc.approval_date IS NULL
                           ELSE true = true
                           END) as q
                        GROUP BY source_id
                     --EXECUTE v_dsql
                     LOOP
                        --compose message
                        v_message := 'One or more subjects that are included in your request has been ';
                        IF p_action_type = 'include' THEN v_message := v_message||'re-'; END IF;
                        v_message := v_message||p_action_type||'d. ';
                        IF p_component_status = 'zippedapproved' THEN
                           v_message := v_message||E'COINS has automatically modified your data-capsule in light of this change, and you can now download the udated capsule at coins.mrn.org/dataexchange. \n';
                        END IF;
                        v_message := v_message||E'The study-coordinator that made this change included the following message:\n\n';
                        v_message := v_message||E'--Start of study-message--\n'||p_message||E'\n--End of study-message--\n\n';
                        v_message := v_message||'The following subjects were ';
                        IF p_action_type = 'include' THEN v_message := v_message||'re-'; END IF;
                        v_message := v_message||p_action_type||E'd:\n';
                        v_message := v_message||v_rs.affected_anonymization_ids;

                        --add the message, and queue it for emailing
                        PERFORM dx_add_msg_f(v_rs.source_id, p_transaction_username, v_message, TRUE);

                        v_message_count := v_message_count + 1;

                     END LOOP;
                  RETURN v_message_count;

                  END;
               $$;


ALTER FUNCTION dxdba.dx_message_affected_requests_f(p_affected_ids text, p_modality_id numeric, p_action_type character varying, p_component_status character varying, p_message text, p_transaction_username character varying) OWNER TO ni_developers;

--
-- Name: dx_return_group_components_f(integer); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_return_group_components_f(p_group_id integer) RETURNS TABLE(series_id character varying, assessment_id numeric, study_id numeric, anonymization_id character varying)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_X$
   DECLARE
      v_temp_table_name           text;
      v_conjunction_type          text;
      v_filter_id                 integer;
      v_group_id                  integer;
      v_id                        integer;
      v_attribute_id              numeric(4,0);
      v_modality_id               numeric(4,0);
      v_last_modality_id          numeric(4,0);
      v_last_attribute_id         numeric(4,0);
      v_temp                      text;
      v_select                    text;
      v_select2                   text;
      v_select3                   text;
      v_view                      text;
      v_column                    text;
      v_operator                  varchar(2);
      v_value                     text;
      v_sql                       text;
      v_cnt                       integer;
      v_cnt_mr_or_asmt_in_group   integer;
      v_union                     text;
      v_include_asmts_scans       text;
      v_from                      text;

   BEGIN
      -- to error check, use: RAISE EXCEPTION '%', v_variable_name;

   
      -- Explanation: This is the first pass at a function that will be used to help get metrics about DX queries.
      -- This function will return a table that contains all filter components associated with the supplied group_id

      -- What this function does:
      -- This function works by taking a (parent) group_id as an input. It then looks for all filter_id's AND (children) group_id's contained within that (parent) group_id.
      -- First, it takes the group_id's and looks for all filter_id's contained within.  Then it JOINs those anonymization_id's accordingly, and returns all filter components that belong to the child group. 
      --    This is then written to a temp table that can be operated on in the next step.
      -- Second, it takes the filter_id's AND the temp tables containing filter_id's belonging to the (children) group_id's JOIN's those anonymization_id's accordingly, and returns all the contained filter components.

      -- write the table names into variables
      SELECT INTO v_temp_table_name 'dx_temp_filter_sql_'||p_group_id;

      DROP TABLE IF EXISTS dx_local_sql;
      CREATE TEMP TABLE dx_local_sql (id integer, sql text, filter boolean, modality_id numeric, attribute_id numeric) ON COMMIT DROP;

      -- create a temp table to store filter_id's and the associated sql query.  Each group_id contained in the parent group will get its own temp table
      EXECUTE 'DROP TABLE IF EXISTS '||v_temp_table_name||'; CREATE TEMP TABLE '||v_temp_table_name||' (id integer, sql text, filter boolean, modality_id numeric, attribute_id numeric) ON COMMIT DROP;';

      -- write the conjunction type into a variable
      SELECT conjunction_type INTO v_conjunction_type FROM dxdba.dx_data_request_template_groups WHERE group_id = p_group_id;


      -- grab data regarding child groups and write them to their own table.  
      -- Then write meta data about that group into v_temp_table_name so that we know about in the next step
      FOR v_group_id IN (
        SELECT group_id
        FROM dx_data_request_template_groups
        WHERE parent_group_id = p_group_id)
      LOOP
         -- Check if there are any filters in any of the children groups.  If there are none, then disregard the group and do not count metrics
         v_temp := $A$
            SELECT COUNT(filter_id) FROM dx_data_request_template_filters WHERE group_id IN (
               -- recursive query to grab all children group_id's contained within in parent group_id
               WITH RECURSIVE allchildren(group_id, parent_group_id) AS (
                  SELECT group_id, parent_group_id
                  FROM dx_data_request_template_groups
                  WHERE group_id = $A$||v_group_id||$A$
                  UNION ALL
                  SELECT drtg.group_id, drtg.parent_group_id
                  FROM allchildren ac
                  INNER JOIN dx_data_request_template_groups drtg ON ac.group_id = drtg.parent_group_id
               )
               SELECT group_id
               FROM allchildren
               ORDER BY group_id
            );
         $A$;
         EXECUTE v_temp INTO v_cnt;

         -- If there are no filters in the (parent)group, then don't count metrics and don't include it in v_temp_table_name
         IF v_cnt <> 0
         THEN
            -- create a temp table to store filter components of all the children groups contained within the parent group
            EXECUTE 'DROP TABLE IF EXISTS dx_temp_group_'||v_group_id||'; CREATE TEMP TABLE dx_temp_group_'||v_group_id||' (series_id varchar(8), assessment_id numeric(8,0), study_id numeric(4,0), anonymization_id varchar(20)) ON COMMIT DROP;';

            -- this is the recursive magic where we traverse UP the parent-child group_id tree and write all filter_id's 
            -- associated with a child group into its own table that can be operated on in the next step
            v_temp := $A$
               INSERT INTO dx_temp_group_$A$||v_group_id||$A$
               SELECT * FROM dxdba.dx_return_group_components_f($A$||v_group_id||$A$);
            $A$;
            EXECUTE v_temp;
         
            -- sql doesn't like variables as tablenames, therefore every instance of v_temp_table_name must be quoted.  
            -- Dollar quotes are being used because it was truncating double-quotes.
            v_temp := $A$
               INSERT INTO $A$||v_temp_table_name||$A$ (id, sql, filter)
               VALUES ($A$||v_group_id||$A$, 'SELECT series_id, assessment_id, study_id, anonymization_id FROM dx_temp_group_$A$||v_group_id||$A$', FALSE);
            $A$;
            EXECUTE v_temp;
         END IF;

      END LOOP;

      -- generate dynamic sql that will grab all components from the filter_id's
      FOR v_filter_id IN (
        SELECT filter_id
        FROM dx_data_request_template_filters
        WHERE group_id = p_group_id)
      LOOP

         SELECT attribute_id INTO v_attribute_id FROM dxdba.dx_data_request_template_filters WHERE filter_id = v_filter_id;
         SELECT modality_id INTO v_modality_id FROM dx_source_attributes_vw WHERE attribute_id = v_attribute_id;
         SELECT operator INTO v_operator FROM dx_source_attributes_vw WHERE attribute_id = v_attribute_id;
         SELECT attribute_column_name INTO v_column FROM dx_source_attributes_vw WHERE attribute_id = v_attribute_id;
         SELECT attribute_view INTO v_view FROM mrs_modalities_vw WHERE modality_id = v_modality_id;
         SELECT attribute_value INTO v_value FROM dx_data_request_template_filters WHERE filter_id = v_filter_id;
         
         IF v_operator = 'IN'
         THEN
            v_from := $d$ FROM dxdba.$d$||v_view||$d$ WHERE $d$||v_column||$d$ $d$||v_operator||$d$ ($d$||v_value||$d$)$d$;
         ELSE
            v_from := $d$ FROM dxdba.$d$||v_view||$d$ WHERE $d$||v_column||$d$ $d$||v_operator||$d$ '$d$||v_value||$d$'$d$;
         END IF;

         -- NOTE: we are matching on parent_study_id, but then aliasing it as simply study_id!!!
         IF v_modality_id = 1 -- MR Scans
         THEN 
            v_select := $a$SELECT DISTINCT series_id, -1::numeric(8,0) AS assessment_id, parent_study_id AS study_id, anonymization_id $a$;
            v_select := v_select||v_from;
         ELSEIF v_modality_id = 112 -- Assessments
         THEN
            v_select := $b$SELECT DISTINCT 'dx_null'::varchar(8) AS series_id, assessment_id, parent_study_id AS study_id, anonymization_id $b$;
            v_select := v_select||v_from;
         ELSEIF (v_modality_id = 142 OR v_modality_id = 143) -- Subjects or Studies
         THEN

            SELECT COUNT(*) 
            INTO v_cnt_mr_or_asmt_in_group
            FROM dx_data_request_template_filters 
            WHERE group_id = p_group_id
            AND attribute_id IN (
               SELECT attribute_id
               FROM dx_source_attributes
               WHERE modality_id IN (1,112)
            );
         
            -- If there are ONLY Subject and Study filters in this group OR if this is an 'OR' group, 
            -- then return ALL associated MR scans and Assessments (which implicitly includes the anonymization_id's)
            IF v_cnt_mr_or_asmt_in_group = 0 OR v_conjunction_type = 'or'
            THEN
               
               -- The below lines will select anonymization_id's PLUS all associated assessments and MR scans
               v_select := $d$SELECT DISTINCT anonymization_id $d$||v_from;
               v_select := $e$
                  SELECT DISTINCT 'dx_null'::varchar(8) AS series_id, assessment_id, parent_study_id AS study_id, anonymization_id FROM dxdba.dx_asmts_mv WHERE anonymization_id IN ($e$||v_select||$e$)
                  UNION
                  SELECT DISTINCT series_id, -1::numeric(8,0) AS assessment_id, parent_study_id AS study_id, anonymization_id FROM dxdba.dx_series_mv WHERE anonymization_id IN ($e$||v_select||$e$)
               $e$;
            
            ELSE

               -- Else, we want to only return the anonymization_id's (and write null values into the MR (scan_id) and Assessment (assessment_id) columns
               v_select := $c$SELECT DISTINCT 'dx_null'::varchar(8) AS series_id, -1::numeric(8,0) AS assessment_id, parent_study_id AS study_id, anonymization_id $c$;
               v_select := v_select||v_from;

            END IF;

         ELSE
            RAISE EXCEPTION 'BONK! encountered unrecognized modality_id: %',v_modality_id;
         END IF;

         -- write the filter_id and sql into a temporary table that can be operated on in a later step
         v_temp := $B$INSERT INTO $B$||v_temp_table_name||$B$ (id, sql, filter, modality_id, attribute_id) VALUES ($B$||v_filter_id||$B$, $C$$B$||v_select||$B$$C$, TRUE, $B$||v_modality_id||$B$, $B$||v_attribute_id||$B$);$B$;
         EXECUTE v_temp;

      END LOOP;

      -- make sure that the table is empty before INSERTING
      DELETE FROM dx_local_sql;

      -- write v_temp_table_name into a table with a static name.  This makes future steps MUCH easier
      -- so that we don't have to escape the table name during FOR loops       
      v_temp := $C$
         INSERT INTO dx_local_sql (id, sql, filter, modality_id, attribute_id)
         SELECT id, sql, filter, modality_id, attribute_id
         FROM $C$||v_temp_table_name||$C$
         ORDER BY modality_id, attribute_id;
      $C$;
      EXECUTE v_temp;
      

      -- Generate dynamic sql to insert all the data into v_table_name
      
      -- OR groups
      IF v_conjunction_type = 'or'
      THEN
         -- initialize variables
         v_select := 'SELECT DISTINCT * FROM (';
         v_union = '';

         FOR v_id IN (
            SELECT id
            FROM dx_local_sql
            ORDER BY modality_id, attribute_id)
         LOOP
            SELECT sql INTO v_sql FROM dx_local_sql WHERE id = v_id;

            v_select := v_select || v_union || v_sql;
            v_union := ' UNION ';
         END LOOP;
         v_select := v_select || ') dupl';

      -- AND groups
      ELSEIF v_conjunction_type = 'and'
      THEN
         -- initialize variables
         v_select := 'WITH RECURSIVE cte AS (';
         v_select2 := '';
         v_select3 := '';
         v_cnt = 1;
         v_last_modality_id = -1;
         v_last_attribute_id = -1;
         
         FOR v_id IN (
            SELECT id
            FROM dx_local_sql
            ORDER BY modality_id, attribute_id)
         LOOP
            SELECT sql INTO v_sql FROM dx_local_sql WHERE id = v_id;
            SELECT modality_id INTO v_modality_id FROM dx_local_sql WHERE id = v_id;
            SELECT attribute_id INTO v_attribute_id FROM dx_local_sql WHERE id = v_id;

            IF v_modality_id = v_last_modality_id AND v_attribute_id != v_last_attribute_id
            THEN
               -- If we have two filters that correspond to the same modality_id then we want to JOIN them based on their attribute_view_id_column
               -- instead of based on their anonymization_id's
               -- BUT if the modality_id's are the same AND the attribute_id's are the same, then we DO NOT want to join them on attribute_view_id_column
               -- in this case, allow the operator to fall thru to the else statement
               SELECT attribute_view_id_column INTO v_column FROM mrs_modalities WHERE modality_id = v_modality_id;
            ELSE
               -- We have two filters that correspond to DIFFERENT modality_id's OR we are attempting to JOIN a filter to a group OR a group to a group.  
               -- In these cases we can ONLY join them based on their anonymization_id's.
               -- NOTE: In the table dx_local_sql, groups have a modality_id of NULL.  This is because the modality_id for a group is UNKNOWN.  (i.e. The group
               --       could be made up of one or more different modality_id's)  Any time that you compare a NULL value to any other value (including another NULL)
               --       using an equal sign (i.e. IF v_modality_id = v_last_modality_id) the result will evaluate to FALSE.
               v_column = 'anonymization_id';
            END IF;

            --part 1
            IF v_cnt = 1
            THEN
               v_select := v_select || 'SELECT dupl1.study_id, dupl1.anonymization_id, dupl1.series_id AS dupl1_series_id, dupl1.assessment_id AS dupl1_assessment_id';
            ELSE
               v_select := v_select || ', dupl'||v_cnt||'.series_id AS dupl'||v_cnt||'_series_id, dupl'||v_cnt||'.assessment_id AS dupl'||v_cnt||'_assessment_id';
            END IF;

            --part 2
            IF v_cnt = 1
            THEN
               v_select2 := ' FROM (' || v_sql || ') dupl1 ';
            ELSE
               v_select2 := v_select2 || 'INNER JOIN (' || v_sql || ') dupl'||v_cnt||' ON dupl'||v_cnt-1||'.'||v_column||' = dupl'||v_cnt||'.'||v_column||' ';
            END IF;

            --part 3
            IF v_cnt = 1
            THEN
            v_select3 := $e$) SELECT DISTINCT dupl1_series_id AS series_id, dupl1_assessment_id AS assessment_id, study_id, anonymization_id FROM cte$e$;
            ELSE
            v_select3 := v_select3 || $f$ UNION SELECT DISTINCT dupl$f$||v_cnt||$f$_series_id AS series_id, dupl$f$||v_cnt||$f$_assessment_id AS assessment_id, study_id, anonymization_id FROM cte$f$;
            END IF;

            v_cnt = v_cnt + 1;
            v_last_modality_id = v_modality_id;
            v_last_attribute_id = v_attribute_id;
         END LOOP;
         v_select := v_select || v_select2 || v_select3 || ';';
          
      ELSE 
         RAISE EXCEPTION 'BONK! encountered unrecognized conjunction_type: %',v_conjunction_type;
      END IF;


      -- count the number of rows in dx_local_sql
      SELECT COUNT(*) INTO v_cnt FROM dx_local_sql;

      -- if v_cnt = 0 (i.e. the current group_id contains NO other group_id's or filter_id's)
      -- then update v_select to return an empty table, otherwise the v_select would fail.
      IF v_cnt = 0
      THEN
         v_select := $A$SELECT NULL::varchar(8) AS series_id , NULL::numeric(8,0) AS assessment_id , NULL::numeric(4,0) AS study_id, NULL::varchar(20) AS anonymization_id LIMIT 0;$A$;
      END IF;
      
      RETURN QUERY EXECUTE v_select;

   
   end;$_X$;


ALTER FUNCTION dxdba.dx_return_group_components_f(p_group_id integer) OWNER TO ni_developers;

--
-- Name: dx_set_data_capsule_creation_starttime_f(numeric); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_set_data_capsule_creation_starttime_f(data_requests_source_id_f numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
   update dx_data_capsule_creation_queue_hist set data_capsule_start_creation_time= now() 
   where data_requests_source_id=data_requests_source_id_f;

   IF NOT FOUND  THEN
             RAISE EXCEPTION 'Record not found when updating dx_data_capsule_creation_queue_hist.';
        END IF;

   return '1';

END;$$;


ALTER FUNCTION dxdba.dx_set_data_capsule_creation_starttime_f(data_requests_source_id_f numeric) OWNER TO ni_developers;

--
-- Name: dx_submit_source_object_f(integer, text); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_submit_source_object_f(p_request_id integer, p_dbtrans_username text) RETURNS TABLE(study_id numeric, preapproved_message text, approval_user text, source_id numeric)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
   DECLARE
      v_request_label      varchar;
      v_check_result       numeric;
      v_group_id           integer;
      v_query              text;
      v_modality_id        numeric(4,0);
      v_filter_type        varchar(200);
      v_study_id           numeric;
      v_source_id          numeric;
      v_null               varchar;
      v_column_name        varchar;
   BEGIN

      -- first we need to submit the request...
      SELECT label INTO v_request_label FROM dxdba.dx_data_requests WHERE data_request_id = p_request_id;
      SELECT dxdba.dx_update_data_request_f(p_request_id, p_dbtrans_username,1,v_request_label,TRUE) INTO v_check_result; 
   
      -- Grab the top group_id from the provided request_id
      SELECT group_id INTO v_group_id FROM dx_data_request_template_groups WHERE data_request_id = p_request_id;

      -- Create a temp table to hold components from the returned source object
      CREATE TEMP TABLE temp_source_obj_table (t_study_id numeric, t_preapproved_message text, t_approval_user text, t_filter_type character varying, t_source_id numeric) ON COMMIT DROP;

      -- Insert source object components into a temp table so that we can operate on it
      v_query := $A$
         INSERT INTO temp_source_obj_table (
            t_study_id, t_preapproved_message, t_approval_user, t_filter_type)
         SELECT 
            study_id, preapproved_message, approval_user, filter_type
            FROM dx_generate_source_object_f($A$||p_request_id||$A$)
            ORDER BY study_id;
      $A$;
      EXECUTE v_query;


      -- Create a temp table to hold all returned components
      DROP TABLE IF EXISTS temp_component_table;
      CREATE TEMP TABLE temp_component_table (series_id varchar, assessment_id numeric, study_id_ct numeric, anonymization_id varchar) ON COMMIT DROP;

      -- Insert filter components into a temp table so that we do not have to call dx_return_group_components_f more than once
      v_query := $A$
         INSERT INTO temp_component_table
         SELECT * FROM dx_return_group_components_f($A$||v_group_id||$A$);
      $A$;
      EXECUTE v_query;


      FOR v_study_id, v_filter_type IN (
        SELECT t_study_id, t_filter_type
        FROM temp_source_obj_table)
      LOOP
      
         SELECT modality_id INTO v_modality_id FROM mrs_modalities WHERE label = v_filter_type;
         SELECT attribute_view_id_column INTO v_column_name FROM mrs_modalities WHERE modality_id = v_modality_id;

         IF v_modality_id = 112 -- assessment_id
         THEN
            v_null := $A$-1$A$;
         ELSEIF v_modality_id = 1 -- series_id
         THEN
            v_null := $A$'dx_null'$A$;
         ELSE
            RAISE EXCEPTION 'BONK! encountered unrecognized modality_id in dx_generate_source_object_f :(';
         END IF;

         SELECT dxdba.dx_add_data_request_source_f(p_request_id, v_study_id, p_dbtrans_username) INTO v_source_id;
         v_query := $A$
            UPDATE temp_source_obj_table SET t_source_id = $A$||v_source_id||$A$ WHERE t_study_id = $A$||v_study_id||$A$ AND t_filter_type = '$A$||v_filter_type||$A$';
         $A$;
         EXECUTE v_query;
         

        v_query := $A$
           INSERT INTO dx_data_request_source_components (
              source_id, modality_id, anonymization_id, id_column_value)
           SELECT 
              $A$||v_source_id||$A$, $A$||v_modality_id||$A$, anonymization_id, $A$||v_column_name||$A$
           FROM temp_component_table
           WHERE study_id_ct = $A$||v_study_id||$A$
           AND $A$||v_column_name||$A$ NOT IN ($A$||v_null||$A$);
        $A$;
        EXECUTE v_query;

        v_query := $A$
           INSERT INTO dx_data_request_source_components_hist(
              component_id, source_id, modality_id, anonymization_id, id_column_value, mod_user, mod_date)
           SELECT
              component_id, source_id, modality_id, anonymization_id, id_column_value, '$A$||p_dbtrans_username||$A$', now()
           FROM dx_data_request_source_components
           WHERE source_id = $A$||v_source_id||$A$;
        $A$;
        EXECUTE v_query;

      END LOOP;

      ANALYZE dx_data_request_source_components;

      v_query = $A$
         SELECT t_study_id, t_preapproved_message, t_approval_user, t_source_id
         FROM temp_source_obj_table;
      $A$;

      RETURN QUERY EXECUTE v_query;

   end;$_$;


ALTER FUNCTION dxdba.dx_submit_source_object_f(p_request_id integer, p_dbtrans_username text) OWNER TO ni_developers;

--
-- Name: dx_switch_data_request_template_group_f(integer, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_switch_data_request_template_group_f(p_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

         BEGIN
         
            UPDATE dxdba.dx_data_request_template_groups
            SET conjunction_type = p_conjunction_type
            WHERE group_id = p_group_id;

            INSERT INTO dxdba.dx_data_request_template_groups_hist(
               group_id,
               data_request_id,
               parent_group_id,
               conjunction_type,
               mod_user,
               mod_date)
            SELECT
               group_id,
               data_request_id,
               parent_group_id,
               conjunction_type,
               p_dbtrans_username,
               now()
             FROM dx_data_request_template_groups
             WHERE group_id = p_group_id;
            
             RETURN p_group_id;
        
         END;
         $$;


ALTER FUNCTION dxdba.dx_switch_data_request_template_group_f(p_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: dx_update_capsule_processing_temp_copied_f(boolean, numeric, numeric); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_update_capsule_processing_temp_copied_f(p_copied boolean, p_source_id numeric, p_file_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   UPDATE dx_capsule_processing_temp
   SET copied = p_copied
   WHERE source_id = p_source_id 
   AND file_id = p_file_id;

   -- DON'T enter into hist table because this causes bloat and is not useful

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_update_capsule_processing_temp_copied_f(p_copied boolean, p_source_id numeric, p_file_id numeric) OWNER TO ni_developers;

--
-- Name: dx_update_capsule_processing_temp_f(character varying, boolean, numeric, numeric); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_update_capsule_processing_temp_f(p_file_path character varying, p_anonymized boolean, p_source_id numeric, p_file_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   UPDATE dx_capsule_processing_temp
   SET file_path = p_file_path, anonymized = p_anonymized
   WHERE source_id = p_source_id 
   AND file_id = p_file_id;

   -- DON'T enter into hist table because this causes bloat and is not useful

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_update_capsule_processing_temp_f(p_file_path character varying, p_anonymized boolean, p_source_id numeric, p_file_id numeric) OWNER TO ni_developers;

--
-- Name: dx_update_data_request_f(numeric, text, numeric, text, boolean); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_update_data_request_f(p_data_request_id numeric, p_username text, p_delivery_venue numeric, p_label text, p_submitted boolean) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
                  DECLARE
                     v_submitted timestamp without time zone;
                  BEGIN
                     SELECT date_submitted
                     INTO v_submitted
                     FROM dx_data_requests
                     WHERE data_request_id = p_data_request_id;
                     
                     IF v_submitted IS NULL THEN
                        insert into dxdba.dx_data_requests_hist(
                           data_request_id,
                           requester_username,
                           delivery_venue,
                           label,
                           date_updated,
                           date_submitted,
                           mod_user,
                           mod_date)
                        values(
                           p_data_request_id,
                           p_username,
                           p_delivery_venue,
                           p_label,
                           now(),
                           CASE WHEN p_submitted = FALSE THEN NULL ELSE now() END,
                           p_username,
                           now());
            
                        update dxdba.dx_data_requests
                           set
                           requester_username = p_username,
                           delivery_venue = p_delivery_venue,
                           label = p_label,
                           date_updated = now(),
                           date_submitted = CASE WHEN p_submitted = FALSE THEN NULL ELSE now() END
                           where data_request_id = p_data_request_id;
         
                        return p_data_request_id;
                     ELSE
                        RAISE EXCEPTION 'Cannot Update Submitted Request: %', (p_data_request_id||' Submitted on '||(v_submitted::text)); 
                     END IF;
                     
                  END;
         
                  $$;


ALTER FUNCTION dxdba.dx_update_data_request_f(p_data_request_id numeric, p_username text, p_delivery_venue numeric, p_label text, p_submitted boolean) OWNER TO ni_developers;

--
-- Name: dx_update_data_request_template_filter_f(integer, integer, numeric, text, text, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_update_data_request_template_filter_f(p_filter_id integer, p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
               DECLARE
               v_request_submitted timestamp without time zone;
               v_request_id numeric;

               BEGIN
                  WITH RECURSIVE tmp_groups_vw 
                  (group_id, parent_group_id, data_request_id) AS (
                     SELECT g.group_id, g.parent_group_id, g.data_request_id 
                     FROM dx_data_request_template_groups_vw g 
                     WHERE g.group_id = p_group_id
                     UNION 
                     SELECT g2.group_id, g2.parent_group_id, g2.data_request_id
                     FROM dx_data_request_template_groups_vw g2 
                     INNER JOIN tmp_groups_vw tmp 
                     ON tmp.parent_group_id = g2.group_id
                  )
                  SELECT date_submitted, r.data_request_id
                  INTO v_request_submitted, v_request_id
                  FROM dx_data_requests r
                  INNER JOIN tmp_groups_vw g
                  ON g.data_request_id = r.data_request_id;


                  IF v_request_submitted IS NULL THEN

                     UPDATE dx_data_request_template_filters 
                     SET group_id = p_group_id,
                        attribute_id = p_attribute_id,
                        attribute_value = p_attribute_value,
                        attribute_value_label = p_attribute_value_label
                     WHERE filter_id = p_filter_id;

                     INSERT into dxdba.dx_data_request_template_filters_hist(
                        filter_id,
                        group_id,
                        attribute_id,
                        attribute_value,
                        attribute_value_label,
                        mod_user,
                        mod_date)
                     SELECT
                        filter_id,
                        group_id,
                        attribute_id,
                        attribute_value,
                        attribute_value_label,
                        p_dbtrans_username,
                        now()
                     FROM dx_data_request_template_filters
                     WHERE filter_id = p_filter_id;
                        
                     RETURN p_filter_id;
            
               ELSE
                  RAISE EXCEPTION 'Cannot change a filter belonging to submitted request: %', ('Group_id = '||p_group_id||' Request = '||v_request_id||' submitted: '||(v_request_submitted::text));
               END IF;
            END;
   
            $$;


ALTER FUNCTION dxdba.dx_update_data_request_template_filter_f(p_filter_id integer, p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: dx_update_data_request_template_group_f(integer, numeric, integer, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_update_data_request_template_group_f(p_group_id integer, p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
               DECLARE
                  v_request_submitted timestamp without time zone;
                  v_request_id numeric;

               BEGIN
                  WITH RECURSIVE tmp_groups_vw 
                  (group_id, parent_group_id, data_request_id) AS (
                     SELECT g.group_id, g.parent_group_id, g.data_request_id 
                     FROM dx_data_request_template_groups_vw g 
                     WHERE g.group_id = p_group_id
                     UNION 
                     SELECT g2.group_id, g2.parent_group_id, g2.data_request_id
                     FROM dx_data_request_template_groups_vw g2 
                     INNER JOIN tmp_groups_vw tmp 
                     ON g2.group_id = tmp.parent_group_id
                  )
                  SELECT date_submitted, r.data_request_id
                  INTO v_request_submitted, v_request_id
                  FROM dx_data_requests r
                  INNER JOIN tmp_groups_vw g
                  ON g.data_request_id = r.data_request_id;
                   
                  IF v_request_submitted IS NULL THEN

                     UPDATE dx_data_request_template_groups 
                     SET data_request_id = NULLIF(p_data_request_id,0),
                        parent_group_id = NULLIF(p_parent_group_id,0),
                        conjunction_type = p_conjunction_type
                     WHERE group_id = p_group_id;

                     INSERT INTO dxdba.dx_data_request_template_groups_hist(
                        group_id,
                        data_request_id,
                        parent_group_id,
                        conjunction_type,
                        mod_user,
                        mod_date)
                     SELECT
                        group_id,
                        data_request_id,
                        parent_group_id,
                        conjunction_type,
                        p_dbtrans_username,
                        now()
                     FROM dx_data_request_template_groups
                     WHERE group_id = p_group_id;
                        
                     RETURN p_group_id;
                  ELSE
                     RAISE EXCEPTION 'Cannot change a group from a submitted request: %', (' Group = '||p_group_id||' Request = '||v_request_id||' submitted: '||(v_request_submitted::text));
                  END IF;
            
                     END;
            
                     $$;


ALTER FUNCTION dxdba.dx_update_data_request_template_group_f(p_group_id integer, p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: dx_update_ex_situ_data_capsule_files_f(numeric, numeric, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_update_ex_situ_data_capsule_files_f(p_file_size_mb numeric, p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO dx_ex_situ_data_capsule_files_hist (
      file_size_mb, data_capsule_id, file_name, mod_user, mod_date
   )
   VALUES (
      p_file_size_mb, p_data_capsule_id, p_file_name, p_mod_user, now()
   );

   UPDATE dx_ex_situ_data_capsule_files 
   SET file_size_mb = p_file_size_mb
   WHERE data_capsule_id = p_data_capsule_id
   AND file_name = p_file_name;

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_update_ex_situ_data_capsule_files_f(p_file_size_mb numeric, p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: dx_update_options_f(); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_update_options_f() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
   -- this function is run by a cron EVERY hour.  The cron is located on the DB servers 
   -- at /var/lib/pgsql/materializedViewCrons/dataExchange/updateOptionsCron.sh
   -- it had been taking ~ 5 seconds to get details about filter modalities/attributes/options when DX
   -- was dynamically querying the DB.  Since these values do not change often, it is more efficient
   -- to write them directly into a table that can then be quickly queried by DX
   DECLARE
   v_sql text;
   v_tmp_sql text;
   v_count_over_direction text;

   -- Get details about all modalities, all attributes
   c_details CURSOR IS
   SELECT a.attribute_id, 
      a.modality_id, 
      a.label as attribute_label, 
      a.description as attribute_description, 
      a.attribute_column_name, 
      a.attribute_desc_column, 
      a.operator, 
      m.attribute_view,
      m.attribute_view_id_column
   FROM dx_source_attributes_vw a 
   INNER JOIN mrs_modalities_vw m ON m.modality_id = a.modality_id 
   ORDER BY m.modality_id, a.dx_attribute_order;

   BEGIN

   -- First truncate all the MV's and rebuild/analyze them
   TRUNCATE TABLE dxdba.dx_series_mv;
   INSERT INTO dxdba.dx_series_mv SELECT * FROM dxdba.dx_series_vw;
   ANALYZE dxdba.dx_series_mv;
   
   TRUNCATE TABLE dxdba.dx_asmts_mv;
   INSERT INTO dxdba.dx_asmts_mv SELECT * FROM dxdba.dx_asmts_vw;
   ANALYZE dxdba.dx_asmts_mv;

   TRUNCATE TABLE dxdba.dx_studies_mv;
   INSERT INTO dxdba.dx_studies_mv SELECT * FROM dxdba.dx_studies_vw;
   ANALYZE dxdba.dx_studies_mv;

   TRUNCATE TABLE dxdba.dx_subjects_mv;
   INSERT INTO dxdba.dx_subjects_mv SELECT * FROM dxdba.dx_subjects_vw;
   ANALYZE dxdba.dx_subjects_mv;

   TRUNCATE TABLE dxdba.dx_asmt_responses_mv;
   INSERT INTO dxdba.dx_asmt_responses_mv SELECT * FROM dxdba.dx_asmt_responses_vw;
   ANALYZE dxdba.dx_asmt_responses_mv;

   TRUNCATE TABLE dx_data_request_source_component_exclusions_mv;
   INSERT INTO dxdba.dx_data_request_source_component_exclusions_mv SELECT * FROM dxdba.dx_data_request_source_component_exclusions_vw;
   ANALYZE dxdba.dx_data_request_source_component_exclusions_mv;

   -- Delete all current data from dxdba.dx_options_mv
   TRUNCATE TABLE dxdba.dx_options_mv;

   -- define v_sql as an empty string
   v_sql := '';

   -- Loop thru c_details and build INSERT statement
   FOR attribute_details IN c_details
   LOOP

      IF v_sql != '' THEN
         v_sql := v_sql || ' UNION ';
      END IF;

      -- Create SELECT statement using values from DB
      IF attribute_details.operator = 'IN' 
      THEN
         v_tmp_sql := '(SELECT DISTINCT ' || attribute_details.attribute_id || ' AS attribute_id, ' ||
                                   $A$ 'USER_INPUT'::text AS option_id, $A$ ||
                                   $A$ 'USER_INPUT'::text AS option_label, $A$ ||
                                   ' 0::bigint ' ||
                       'FROM ' || attribute_details.attribute_view || ')';
      ELSE
         v_tmp_sql := '(SELECT ' || attribute_details.attribute_id || ' AS attribute_id, ' ||
                                   attribute_details.attribute_column_name || '::text AS option_id, ' ||
                                   attribute_details.attribute_desc_column || '::text AS option_label, ' ||
                                  'COUNT(DISTINCT '||attribute_details.attribute_view_id_column||') ' ||
                       'FROM ' || attribute_details.attribute_view || ' ' ||
                       'GROUP BY option_id, option_label)'; 
      END IF;

      IF attribute_details.operator = '>=' THEN
         v_count_over_direction := ' DESC';
      ELSE
         v_count_over_direction := '';
      END IF;
   
      IF (attribute_details.operator = '>=') OR (attribute_details.operator = '<=') THEN
         v_tmp_sql := '(SELECT ' || attribute_details.attribute_id || ' AS attribute_id, ' ||
            'q.option_id::text, ' ||
            'q.option_label::text, ' ||
            'SUM(q.count) OVER (ORDER BY q.option_label'|| v_count_over_direction ||') AS count ' ||
            'FROM ' || replace(v_tmp_sql, '::text', '') || ' AS q)';
      END IF;

     -- need to add an alias for the first SELECT statement only
     IF v_sql = '' THEN
        v_tmp_sql := v_tmp_sql||' foo1 ';
     END IF;
      
      v_sql := v_sql || v_tmp_sql;
   END LOOP;

   v_sql := $A$
      INSERT INTO dxdba.dx_options_mv ( 
         SELECT * FROM ( 
            SELECT * FROM $A$|| v_sql ||$A$ 
         ) baz 
         ORDER BY attribute_id
            , CASE option_label 
               WHEN '0' THEN '00' 
               WHEN '1' THEN '01' 
               WHEN '2' THEN '02' 
               WHEN '3' THEN '03' 
               WHEN '4' THEN '04' 
               WHEN '5' THEN '05' 
               WHEN '6' THEN '06' 
               WHEN '7' THEN '07' 
               WHEN '8' THEN '08' 
               WHEN '9' THEN '09' 
               ELSE option_label 
            END
      );
   $A$;

   EXECUTE v_sql;
   
   ANALYZE dxdba.dx_options_mv;

   return 1;

   END;
$_$;


ALTER FUNCTION dxdba.dx_update_options_f() OWNER TO ni_developers;

--
-- Name: dx_update_series_anonymized_file_path_f(character varying, character varying, character varying); Type: FUNCTION; Schema: dxdba; Owner: ni_developers
--

CREATE FUNCTION dx_update_series_anonymized_file_path_f(p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   UPDATE dx_series_anonymized_file_paths
   SET anonymized_file_path = p_anonymized_file_path, date_last_accessed = now()
   WHERE archive_file_path = p_archive_file_path;

   -- DON'T enter into hist table because this causes bloat and is not useful

   RETURN '1';
   
END;
$$;


ALTER FUNCTION dxdba.dx_update_series_anonymized_file_path_f(p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) OWNER TO ni_developers;

SET search_path = mrsdba, pg_catalog;

--
-- Name: add_all_tracker_data(); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION add_all_tracker_data() RETURNS boolean
    LANGUAGE plpgsql
    AS $$

    DECLARE tracker_id_status_at_the_end_of_ds1 integer;
    DECLARE tracker_id_status_at_the_end_of_ds1_notes integer;
    DECLARE tracker_id_status_of_data_ds1 integer;
    DECLARE tracker_id_status_at_the_end_of_ds2 integer;
    DECLARE tracker_id_status_at_the_end_of_ds2_notes integer;
    DECLARE tracker_id_status_of_data_ds2 integer;

    DECLARE event_id_0 integer;
    DECLARE event_id_1 integer;
    DECLARE event_id_2 integer;
    DECLARE event_id_3 integer;
    DECLARE event_id_4 integer;
    DECLARE event_id_5 integer;
    DECLARE event_id_6 integer;
    DECLARE event_id_7 integer;
    DECLARE event_id_8 integer;
    DECLARE event_id_9 integer;
    DECLARE event_id_10 integer;
    DECLARE event_id_11 integer;
    DECLARE event_id_12 integer;
    DECLARE event_id_13 integer;
    DECLARE event_id_14 integer;
    DECLARE event_id_15 integer;
    DECLARE event_id_16 integer;
    DECLARE event_id_17 integer;
    DECLARE event_id_18 integer;
    DECLARE event_id_19 integer;
    DECLARE event_id_20 integer;
    DECLARE event_id_21 integer;
    DECLARE event_id_22 integer;
    DECLARE event_id_23 integer;
    DECLARE event_id_24 integer;
    DECLARE event_id_25 integer;
    DECLARE event_id_26 integer;
    DECLARE event_id_27 integer;
    DECLARE event_id_28 integer;
    DECLARE event_id_29 integer;
    DECLARE event_id_30 integer;
    DECLARE event_id_31 integer;
    DECLARE event_id_32 integer;
    DECLARE event_id_33 integer;
    DECLARE event_id_34 integer;
    DECLARE event_id_35 integer;
    DECLARE event_id_36 integer;
    DECLARE event_id_37 integer;
    DECLARE event_id_38 integer;
    DECLARE event_id_39 integer;
    DECLARE event_id_40 integer;
    DECLARE event_id_41 integer;
    DECLARE event_id_42 integer;
    DECLARE event_id_43 integer;
    DECLARE event_id_44 integer;
    DECLARE event_id_45 integer;
    DECLARE event_id_46 integer;
    DECLARE event_id_47 integer;
    DECLARE event_id_48 integer;
    DECLARE event_id_49 integer;
    DECLARE event_id_50 integer;
    DECLARE event_id_51 integer;
    DECLARE event_id_52 integer;
    DECLARE event_id_53 integer;
    DECLARE event_id_54 integer;
    DECLARE event_id_55 integer;
    DECLARE event_id_56 integer;
    DECLARE event_id_57 integer;
    DECLARE event_id_58 integer;
    DECLARE event_id_59 integer;
    DECLARE event_id_60 integer;
    DECLARE event_id_61 integer;
    DECLARE event_id_62 integer;
    DECLARE event_id_63 integer;
    DECLARE event_id_64 integer;
    DECLARE event_id_65 integer;
    DECLARE event_id_66 integer;
    DECLARE event_id_67 integer;
    DECLARE event_id_68 integer;
    DECLARE event_id_69 integer;
    DECLARE event_id_70 integer;
    DECLARE event_id_71 integer;
    DECLARE event_id_72 integer;
    DECLARE event_id_73 integer;
    DECLARE event_id_74 integer;
    DECLARE event_id_75 integer;
    DECLARE event_id_76 integer;
    DECLARE event_id_77 integer;
    DECLARE event_id_78 integer;
    DECLARE event_id_79 integer;
    DECLARE event_id_80 integer;
    DECLARE event_id_81 integer;
    DECLARE event_id_82 integer;
    DECLARE event_id_83 integer;
    DECLARE event_id_84 integer;
    DECLARE event_id_85 integer;
    DECLARE event_id_86 integer;
    DECLARE event_id_87 integer;
    DECLARE event_id_88 integer;
    DECLARE event_id_89 integer;
    DECLARE event_id_90 integer;
    DECLARE event_id_91 integer;
    DECLARE event_id_92 integer;
    DECLARE event_id_93 integer;
    DECLARE event_id_94 integer;
    DECLARE event_id_95 integer;
    DECLARE event_id_96 integer;
    DECLARE event_id_97 integer;
    DECLARE event_id_98 integer;
    DECLARE event_id_99 integer;
    DECLARE event_id_100 integer;
    DECLARE event_id_101 integer;
    DECLARE event_id_102 integer;
    DECLARE event_id_103 integer;
    DECLARE event_id_104 integer;
    DECLARE event_id_105 integer;
    DECLARE event_id_106 integer;
    DECLARE event_id_107 integer;
    DECLARE event_id_108 integer;
    DECLARE event_id_109 integer;
    DECLARE event_id_110 integer;
    DECLARE event_id_111 integer;
    DECLARE event_id_112 integer;
    DECLARE event_id_113 integer;
    DECLARE event_id_114 integer;
    DECLARE event_id_115 integer;
    DECLARE event_id_116 integer;
    DECLARE event_id_117 integer;
    DECLARE event_id_118 integer;
    DECLARE event_id_119 integer;
    DECLARE event_id_120 integer;
    DECLARE event_id_121 integer;
    DECLARE event_id_122 integer;
    DECLARE event_id_123 integer;
    DECLARE event_id_124 integer;
    DECLARE event_id_125 integer;
    DECLARE event_id_126 integer;
    DECLARE event_id_127 integer;
    DECLARE event_id_128 integer;
    DECLARE event_id_129 integer;
    DECLARE event_id_130 integer;
    DECLARE event_id_131 integer;
    DECLARE event_id_132 integer;
    DECLARE event_id_133 integer;
    DECLARE event_id_134 integer;
    DECLARE event_id_135 integer;
    DECLARE event_id_136 integer;
    DECLARE event_id_137 integer;
    DECLARE event_id_138 integer;
    DECLARE event_id_139 integer;
    DECLARE event_id_140 integer;
    DECLARE event_id_141 integer;
    DECLARE event_id_142 integer;
    DECLARE event_id_143 integer;
    DECLARE event_id_144 integer;
    DECLARE event_id_145 integer;
    DECLARE event_id_146 integer;
    DECLARE event_id_147 integer;
    DECLARE event_id_148 integer;
    DECLARE event_id_149 integer;
    DECLARE event_id_150 integer;
    DECLARE event_id_151 integer;
    DECLARE event_id_152 integer;
    DECLARE event_id_153 integer;
    DECLARE event_id_154 integer;
    DECLARE event_id_155 integer;
    DECLARE event_id_156 integer;
    DECLARE event_id_157 integer;
    DECLARE event_id_158 integer;
    DECLARE event_id_159 integer;
    DECLARE event_id_160 integer;
    DECLARE event_id_161 integer;
    DECLARE event_id_162 integer;
    DECLARE event_id_163 integer;
    DECLARE event_id_164 integer;
    DECLARE event_id_165 integer;
    DECLARE event_id_166 integer;
    DECLARE event_id_167 integer;
    DECLARE event_id_168 integer;
    DECLARE event_id_169 integer;
    DECLARE event_id_170 integer;
    DECLARE event_id_171 integer;
    DECLARE event_id_172 integer;
    DECLARE event_id_173 integer;
    DECLARE event_id_174 integer;
    DECLARE event_id_175 integer;
    DECLARE event_id_176 integer;
    DECLARE event_id_177 integer;
    DECLARE event_id_178 integer;
    DECLARE event_id_179 integer;
    DECLARE event_id_180 integer;
    DECLARE event_id_181 integer;
    DECLARE event_id_182 integer;
    DECLARE event_id_183 integer;
    DECLARE event_id_184 integer;
    DECLARE event_id_185 integer;
    DECLARE event_id_186 integer;
    DECLARE event_id_187 integer;
    DECLARE event_id_188 integer;
    DECLARE event_id_189 integer;
    DECLARE event_id_190 integer;
    DECLARE event_id_191 integer;
    DECLARE event_id_192 integer;
    DECLARE event_id_193 integer;
    DECLARE event_id_194 integer;
    DECLARE event_id_195 integer;
    DECLARE event_id_196 integer;
    DECLARE event_id_197 integer;
    DECLARE event_id_198 integer;
    DECLARE event_id_199 integer;
    DECLARE event_id_200 integer;
    DECLARE event_id_201 integer;
    DECLARE event_id_202 integer;
    DECLARE event_id_203 integer;
    DECLARE event_id_204 integer;
    DECLARE event_id_205 integer;
    DECLARE event_id_206 integer;
    DECLARE event_id_207 integer;
    DECLARE event_id_208 integer;
    DECLARE event_id_209 integer;
    DECLARE event_id_210 integer;
    DECLARE event_id_211 integer;
    DECLARE event_id_212 integer;
    DECLARE event_id_213 integer;
    DECLARE event_id_214 integer;
    DECLARE event_id_215 integer;
    DECLARE event_id_216 integer;
    DECLARE event_id_217 integer;
    DECLARE event_id_218 integer;
    DECLARE event_id_219 integer;
    DECLARE event_id_220 integer;
    DECLARE event_id_221 integer;
    DECLARE event_id_222 integer;
    DECLARE event_id_223 integer;
    DECLARE event_id_224 integer;
    DECLARE event_id_225 integer;
    DECLARE event_id_226 integer;
    DECLARE event_id_227 integer;
    DECLARE event_id_228 integer;
    DECLARE event_id_229 integer;
    DECLARE event_id_230 integer;
    DECLARE event_id_231 integer;
    DECLARE event_id_232 integer;
    DECLARE event_id_233 integer;
    DECLARE event_id_234 integer;
    DECLARE event_id_235 integer;
    DECLARE event_id_236 integer;
    DECLARE event_id_237 integer;
    DECLARE event_id_238 integer;
    DECLARE event_id_239 integer;
    DECLARE event_id_240 integer;
    DECLARE event_id_241 integer;
    DECLARE event_id_242 integer;
    DECLARE event_id_243 integer;
    DECLARE event_id_244 integer;
    DECLARE event_id_245 integer;
    DECLARE event_id_246 integer;
    DECLARE event_id_247 integer;
    DECLARE event_id_248 integer;
    DECLARE event_id_249 integer;
    DECLARE event_id_250 integer;
    DECLARE event_id_251 integer;
    DECLARE event_id_252 integer;
    DECLARE event_id_253 integer;
    DECLARE event_id_254 integer;
    DECLARE event_id_255 integer;
    DECLARE event_id_256 integer;
    DECLARE event_id_257 integer;
    DECLARE event_id_258 integer;
    DECLARE event_id_259 integer;
    DECLARE event_id_260 integer;
    DECLARE event_id_261 integer;
    DECLARE event_id_262 integer;
    DECLARE event_id_263 integer;
    DECLARE event_id_264 integer;
    DECLARE event_id_265 integer;
    DECLARE event_id_266 integer;
    DECLARE event_id_267 integer;
    DECLARE event_id_268 integer;
    DECLARE event_id_269 integer;
    DECLARE event_id_270 integer;
    DECLARE event_id_271 integer;
    DECLARE event_id_272 integer;
    DECLARE event_id_273 integer;
    DECLARE event_id_274 integer;
    DECLARE event_id_275 integer;
    DECLARE event_id_276 integer;
    DECLARE event_id_277 integer;
    DECLARE event_id_278 integer;
    DECLARE event_id_279 integer;
    DECLARE event_id_280 integer;
    DECLARE event_id_281 integer;
    DECLARE event_id_282 integer;
    DECLARE event_id_283 integer;
    DECLARE event_id_284 integer;
    DECLARE event_id_285 integer;
    DECLARE event_id_286 integer;
    DECLARE event_id_287 integer;
    DECLARE event_id_288 integer;
    DECLARE event_id_289 integer;
    DECLARE event_id_290 integer;
    DECLARE event_id_291 integer;
    DECLARE event_id_292 integer;
    DECLARE event_id_293 integer;
    DECLARE event_id_294 integer;
    DECLARE event_id_295 integer;
    DECLARE event_id_296 integer;
    DECLARE event_id_297 integer;
    DECLARE event_id_298 integer;
    DECLARE event_id_299 integer;
    DECLARE event_id_300 integer;
    DECLARE event_id_301 integer;
    DECLARE event_id_302 integer;
    DECLARE event_id_303 integer;
    DECLARE event_id_304 integer;
    DECLARE event_id_305 integer;
    DECLARE event_id_306 integer;
    DECLARE event_id_307 integer;
    DECLARE event_id_308 integer;
    DECLARE event_id_309 integer;
    DECLARE event_id_310 integer;
    DECLARE event_id_311 integer;
    DECLARE event_id_312 integer;
    DECLARE event_id_313 integer;
    DECLARE event_id_314 integer;
    DECLARE event_id_315 integer;
    DECLARE event_id_316 integer;
    DECLARE event_id_317 integer;
    DECLARE event_id_318 integer;
    DECLARE event_id_319 integer;
    DECLARE event_id_320 integer;
    DECLARE event_id_321 integer;
    DECLARE event_id_322 integer;
    DECLARE event_id_323 integer;
    DECLARE event_id_324 integer;
    DECLARE event_id_325 integer;
    DECLARE event_id_326 integer;
    DECLARE event_id_327 integer;
    DECLARE event_id_328 integer;
    DECLARE event_id_329 integer;
    DECLARE event_id_330 integer;
    DECLARE event_id_331 integer;
    DECLARE event_id_332 integer;
    DECLARE event_id_333 integer;
    DECLARE event_id_334 integer;
    DECLARE event_id_335 integer;
    DECLARE event_id_336 integer;
    DECLARE event_id_337 integer;
    DECLARE event_id_338 integer;
    DECLARE event_id_339 integer;
    DECLARE event_id_340 integer;
    DECLARE event_id_341 integer;
    DECLARE event_id_342 integer;
    DECLARE event_id_343 integer;
    DECLARE event_id_344 integer;
    DECLARE event_id_345 integer;
    DECLARE event_id_346 integer;
    DECLARE event_id_347 integer;
    DECLARE event_id_348 integer;
    DECLARE event_id_349 integer;
    DECLARE event_id_350 integer;
    DECLARE event_id_351 integer;
    DECLARE event_id_352 integer;
    DECLARE event_id_353 integer;
    DECLARE event_id_354 integer;
    DECLARE event_id_355 integer;
    DECLARE event_id_356 integer;
    DECLARE event_id_357 integer;
    DECLARE event_id_358 integer;
    DECLARE event_id_359 integer;
    DECLARE event_id_360 integer;
    DECLARE event_id_361 integer;
    DECLARE event_id_362 integer;
    DECLARE event_id_363 integer;
    DECLARE event_id_364 integer;
    DECLARE event_id_365 integer;
    DECLARE event_id_366 integer;
    DECLARE event_id_367 integer;
    DECLARE event_id_368 integer;
    DECLARE event_id_369 integer;
    DECLARE event_id_370 integer;
    DECLARE event_id_371 integer;
    DECLARE event_id_372 integer;
    DECLARE event_id_373 integer;
    DECLARE event_id_374 integer;
    DECLARE event_id_375 integer;
    DECLARE event_id_376 integer;
    DECLARE event_id_377 integer;
    DECLARE event_id_378 integer;
    DECLARE event_id_379 integer;
    DECLARE event_id_380 integer;
    DECLARE event_id_381 integer;
    DECLARE event_id_382 integer;
    DECLARE event_id_383 integer;
    DECLARE event_id_384 integer;
    DECLARE event_id_385 integer;
    DECLARE event_id_386 integer;
    DECLARE event_id_387 integer;
    DECLARE event_id_388 integer;
    DECLARE event_id_389 integer;
    DECLARE event_id_390 integer;
    DECLARE event_id_391 integer;
    DECLARE event_id_392 integer;
    DECLARE event_id_393 integer;
    DECLARE event_id_394 integer;
    DECLARE event_id_395 integer;
    DECLARE event_id_396 integer;
    DECLARE event_id_397 integer;
    DECLARE event_id_398 integer;
    DECLARE event_id_399 integer;
    DECLARE event_id_400 integer;
    DECLARE event_id_401 integer;
    DECLARE event_id_402 integer;
    DECLARE event_id_403 integer;
    DECLARE event_id_404 integer;
    DECLARE event_id_405 integer;
    DECLARE event_id_406 integer;
    DECLARE event_id_407 integer;
    DECLARE event_id_408 integer;
    DECLARE event_id_409 integer;
    DECLARE event_id_410 integer;
    DECLARE event_id_411 integer;
    DECLARE event_id_412 integer;
    DECLARE event_id_413 integer;
    DECLARE event_id_414 integer;
    DECLARE event_id_415 integer;
    DECLARE event_id_416 integer;
    DECLARE event_id_417 integer;
    DECLARE event_id_418 integer;
    DECLARE event_id_419 integer;
    DECLARE event_id_420 integer;
    DECLARE event_id_421 integer;
    DECLARE event_id_422 integer;
    DECLARE event_id_423 integer;
    DECLARE event_id_424 integer;
    DECLARE event_id_425 integer;
    DECLARE event_id_426 integer;
    DECLARE event_id_427 integer;
    DECLARE event_id_428 integer;
    DECLARE event_id_429 integer;
    DECLARE event_id_430 integer;
    DECLARE event_id_431 integer;
    DECLARE event_id_432 integer;
    DECLARE event_id_433 integer;
    DECLARE event_id_434 integer;
    DECLARE event_id_435 integer;
    DECLARE event_id_436 integer;
    DECLARE event_id_437 integer;
    DECLARE event_id_438 integer;
    DECLARE event_id_439 integer;
    DECLARE event_id_440 integer;
    DECLARE event_id_441 integer;
    DECLARE event_id_442 integer;
    DECLARE event_id_443 integer;
    DECLARE event_id_444 integer;
    DECLARE event_id_445 integer;
    DECLARE event_id_446 integer;
    DECLARE event_id_447 integer;
    DECLARE event_id_448 integer;
    DECLARE event_id_449 integer;
    DECLARE event_id_450 integer;
    DECLARE event_id_451 integer;
    DECLARE event_id_452 integer;
    DECLARE event_id_453 integer;
    DECLARE event_id_454 integer;
    DECLARE event_id_455 integer;
    DECLARE event_id_456 integer;
    DECLARE event_id_457 integer;
    DECLARE event_id_458 integer;
    DECLARE event_id_459 integer;
    DECLARE event_id_460 integer;
    DECLARE event_id_461 integer;
    DECLARE event_id_462 integer;
    DECLARE event_id_463 integer;
    DECLARE event_id_464 integer;
    DECLARE event_id_465 integer;
    DECLARE event_id_466 integer;
    DECLARE event_id_467 integer;
    DECLARE event_id_468 integer;
    DECLARE event_id_469 integer;
    DECLARE event_id_470 integer;
    DECLARE event_id_471 integer;
    DECLARE event_id_472 integer;
    DECLARE event_id_473 integer;
    DECLARE event_id_474 integer;
    DECLARE event_id_475 integer;
    DECLARE event_id_476 integer;
    DECLARE event_id_477 integer;
    DECLARE event_id_478 integer;
    DECLARE event_id_479 integer;
    DECLARE event_id_480 integer;
    DECLARE event_id_481 integer;
    DECLARE event_id_482 integer;
    DECLARE event_id_483 integer;
    DECLARE event_id_484 integer;
    DECLARE event_id_485 integer;
    DECLARE event_id_486 integer;
    DECLARE event_id_487 integer;
    DECLARE event_id_488 integer;
    DECLARE event_id_489 integer;
    DECLARE event_id_490 integer;
    DECLARE event_id_491 integer;
    DECLARE event_id_492 integer;
    DECLARE event_id_493 integer;
    DECLARE event_id_494 integer;
    DECLARE event_id_495 integer;
    DECLARE event_id_496 integer;
    DECLARE event_id_497 integer;
    DECLARE event_id_498 integer;
    DECLARE event_id_499 integer;
    DECLARE event_id_500 integer;
    DECLARE event_id_501 integer;
    DECLARE event_id_502 integer;
    DECLARE event_id_503 integer;
    DECLARE event_id_504 integer;
    DECLARE event_id_505 integer;
    DECLARE event_id_506 integer;
    DECLARE event_id_507 integer;
    DECLARE event_id_508 integer;
    DECLARE event_id_509 integer;
    DECLARE event_id_510 integer;
    DECLARE event_id_511 integer;
    DECLARE event_id_512 integer;
    DECLARE event_id_513 integer;
    DECLARE event_id_514 integer;
    DECLARE event_id_515 integer;
    DECLARE event_id_516 integer;
    DECLARE event_id_517 integer;
    DECLARE event_id_518 integer;
    DECLARE event_id_519 integer;
    DECLARE event_id_520 integer;
    DECLARE event_id_521 integer;
    DECLARE event_id_522 integer;
    DECLARE event_id_523 integer;
    DECLARE event_id_524 integer;
    DECLARE event_id_525 integer;
    DECLARE event_id_526 integer;
    DECLARE event_id_527 integer;
    DECLARE event_id_528 integer;
    DECLARE event_id_529 integer;
    DECLARE event_id_530 integer;
    DECLARE event_id_531 integer;
    DECLARE event_id_532 integer;
    DECLARE event_id_533 integer;
    DECLARE event_id_534 integer;
    DECLARE event_id_535 integer;
    DECLARE event_id_536 integer;
    DECLARE event_id_537 integer;
    DECLARE event_id_538 integer;
    DECLARE event_id_539 integer;
    DECLARE event_id_540 integer;
    DECLARE event_id_541 integer;
    DECLARE event_id_542 integer;
    DECLARE event_id_543 integer;
    DECLARE event_id_544 integer;
    DECLARE event_id_545 integer;
    DECLARE event_id_546 integer;
    DECLARE event_id_547 integer;
    DECLARE event_id_548 integer;
    DECLARE event_id_549 integer;
    DECLARE event_id_550 integer;
    DECLARE event_id_551 integer;
    DECLARE event_id_552 integer;
    DECLARE event_id_553 integer;
    DECLARE event_id_554 integer;
    DECLARE event_id_555 integer;
    DECLARE event_id_556 integer;
    DECLARE event_id_557 integer;
    DECLARE event_id_558 integer;
    DECLARE event_id_559 integer;
    DECLARE event_id_560 integer;
    DECLARE event_id_561 integer;
    DECLARE event_id_562 integer;
    DECLARE event_id_563 integer;
    DECLARE event_id_564 integer;
    DECLARE event_id_565 integer;
    DECLARE event_id_566 integer;
    DECLARE event_id_567 integer;
    DECLARE event_id_568 integer;
    DECLARE event_id_569 integer;
    DECLARE event_id_570 integer;
    DECLARE event_id_571 integer;
    DECLARE event_id_572 integer;
    DECLARE event_id_573 integer;
    DECLARE event_id_574 integer;
    DECLARE event_id_575 integer;
    DECLARE event_id_576 integer;
    DECLARE event_id_577 integer;
    DECLARE event_id_578 integer;
    DECLARE event_id_579 integer;
    DECLARE event_id_580 integer;
    DECLARE event_id_581 integer;
    DECLARE event_id_582 integer;
    DECLARE event_id_583 integer;
    DECLARE event_id_584 integer;
    DECLARE event_id_585 integer;
    DECLARE event_id_586 integer;
    DECLARE event_id_587 integer;
    DECLARE event_id_588 integer;
    DECLARE event_id_589 integer;
    DECLARE event_id_590 integer;
    DECLARE event_id_591 integer;
    DECLARE event_id_592 integer;
    DECLARE event_id_593 integer;
    DECLARE event_id_594 integer;
    DECLARE event_id_595 integer;
    DECLARE event_id_596 integer;
    DECLARE event_id_597 integer;
    DECLARE event_id_598 integer;
    DECLARE event_id_599 integer;
    DECLARE event_id_600 integer;
    DECLARE event_id_601 integer;
    DECLARE event_id_602 integer;
    DECLARE event_id_603 integer;
    DECLARE event_id_604 integer;
    DECLARE event_id_605 integer;
    DECLARE event_id_606 integer;
    DECLARE event_id_607 integer;
    DECLARE event_id_608 integer;
    DECLARE event_id_609 integer;
    DECLARE event_id_610 integer;
    DECLARE event_id_611 integer;
    DECLARE event_id_612 integer;
    DECLARE event_id_613 integer;
    DECLARE event_id_614 integer;
    DECLARE event_id_615 integer;
    DECLARE event_id_616 integer;
    DECLARE event_id_617 integer;
    DECLARE event_id_618 integer;
    DECLARE event_id_619 integer;
    DECLARE event_id_620 integer;
    DECLARE event_id_621 integer;
    DECLARE event_id_622 integer;
    DECLARE event_id_623 integer;
    DECLARE event_id_624 integer;
    DECLARE event_id_625 integer;
    DECLARE event_id_626 integer;
    DECLARE event_id_627 integer;
    DECLARE event_id_628 integer;
    DECLARE event_id_629 integer;
    DECLARE event_id_630 integer;
    DECLARE event_id_631 integer;
    DECLARE event_id_632 integer;
    DECLARE event_id_633 integer;
    DECLARE event_id_634 integer;
    DECLARE event_id_635 integer;
    DECLARE event_id_636 integer;
    DECLARE event_id_637 integer;
    DECLARE event_id_638 integer;
    DECLARE event_id_639 integer;
    DECLARE event_id_640 integer;
    DECLARE event_id_641 integer;
    DECLARE event_id_642 integer;
    DECLARE event_id_643 integer;
    DECLARE event_id_644 integer;
    DECLARE event_id_645 integer;
    DECLARE event_id_646 integer;
    DECLARE event_id_647 integer;
    DECLARE event_id_648 integer;
    DECLARE event_id_649 integer;
    DECLARE event_id_650 integer;
    DECLARE event_id_651 integer;
    DECLARE event_id_652 integer;
    DECLARE event_id_653 integer;
    DECLARE event_id_654 integer;
    DECLARE event_id_655 integer;


    BEGIN

        -- upsert trackers
        tracker_id_status_at_the_end_of_ds1 = 240;
        tracker_id_status_at_the_end_of_ds1_notes = 241;
        tracker_id_status_of_data_ds1 = 242;
        tracker_id_status_at_the_end_of_ds2 = 243;
        tracker_id_status_at_the_end_of_ds2_notes = 244;
        tracker_id_status_of_data_ds2 = 245;

        -- upsert events, then finally insert trackers (could be upserted :))
        event_id_0 = upsert_tracker_event(3760, 'M10921433', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_0, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_0, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_0, tracker_id_status_at_the_end_of_ds2_notes, null, 'No V2'),
            (event_id_0, tracker_id_status_of_data_ds2, 681, null);

        event_id_1 = upsert_tracker_event(3760, 'M10966782', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_1, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_1, tracker_id_status_of_data_ds1, 664, null),
            (event_id_1, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_1, tracker_id_status_of_data_ds2, 681, null);

        event_id_2 = upsert_tracker_event(3760, 'M10987963', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_2, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_2, tracker_id_status_of_data_ds1, 665, null),
            (event_id_2, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_2, tracker_id_status_of_data_ds2, 682, null);

        event_id_3 = upsert_tracker_event(3760, 'M10977627', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_3, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_3, tracker_id_status_of_data_ds1, 665, null),
            (event_id_3, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_3, tracker_id_status_of_data_ds2, 682, null);

        event_id_4 = upsert_tracker_event(3760, 'M10992275', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_4, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_4, tracker_id_status_of_data_ds1, 665, null),
            (event_id_4, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_4, tracker_id_status_of_data_ds2, 682, null);

        event_id_5 = upsert_tracker_event(3760, 'M10967308', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_5, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_5, tracker_id_status_of_data_ds1, 665, null),
            (event_id_5, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_5, tracker_id_status_of_data_ds2, 682, null);

        event_id_6 = upsert_tracker_event(3760, 'M10979562', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_6, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_6, tracker_id_status_of_data_ds1, 665, null),
            (event_id_6, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_6, tracker_id_status_of_data_ds2, 682, null);

        event_id_7 = upsert_tracker_event(3760, 'M10988688', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_7, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_7, tracker_id_status_of_data_ds1, 665, null),
            (event_id_7, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_7, tracker_id_status_of_data_ds2, 682, null);

        event_id_8 = upsert_tracker_event(3760, 'M10951589', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_8, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_8, tracker_id_status_of_data_ds1, 665, null),
            (event_id_8, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_8, tracker_id_status_of_data_ds2, 682, null);

        event_id_9 = upsert_tracker_event(3760, 'M10919144', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_9, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_9, tracker_id_status_of_data_ds1, 665, null),
            (event_id_9, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_9, tracker_id_status_of_data_ds2, 682, null);

        event_id_10 = upsert_tracker_event(3760, 'M10980291', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_10, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_10, tracker_id_status_of_data_ds1, 665, null),
            (event_id_10, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_10, tracker_id_status_of_data_ds2, 682, null);

        event_id_11 = upsert_tracker_event(3760, 'M10952341', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_11, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_11, tracker_id_status_of_data_ds1, 665, null),
            (event_id_11, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_11, tracker_id_status_of_data_ds2, 682, null);

        event_id_12 = upsert_tracker_event(3760, 'M10984323', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_12, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_12, tracker_id_status_of_data_ds1, 665, null),
            (event_id_12, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_12, tracker_id_status_of_data_ds2, 682, null);

        event_id_13 = upsert_tracker_event(3760, 'M10908665', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_13, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_13, tracker_id_status_of_data_ds1, 665, null),
            (event_id_13, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_13, tracker_id_status_of_data_ds2, 682, null);

        event_id_14 = upsert_tracker_event(3760, 'M10960870', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_14, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_14, tracker_id_status_of_data_ds1, 665, null),
            (event_id_14, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_14, tracker_id_status_of_data_ds2, 682, null);

        event_id_15 = upsert_tracker_event(3760, 'M10920965', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_15, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_15, tracker_id_status_of_data_ds1, 665, null),
            (event_id_15, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_15, tracker_id_status_of_data_ds2, 682, null);

        event_id_16 = upsert_tracker_event(3760, 'M10975149', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_16, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_16, tracker_id_status_of_data_ds1, 665, null),
            (event_id_16, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_16, tracker_id_status_of_data_ds2, 682, null);

        event_id_17 = upsert_tracker_event(3760, 'M10954473', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_17, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_17, tracker_id_status_of_data_ds1, 666, null),
            (event_id_17, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_17, tracker_id_status_of_data_ds2, 683, null);

        event_id_18 = upsert_tracker_event(3760, 'M10941795', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_18, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_18, tracker_id_status_of_data_ds1, 666, null),
            (event_id_18, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_18, tracker_id_status_of_data_ds2, 683, null);

        event_id_19 = upsert_tracker_event(3760, 'M10950716', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_19, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_19, tracker_id_status_of_data_ds1, 666, null),
            (event_id_19, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_19, tracker_id_status_of_data_ds2, 683, null);

        event_id_20 = upsert_tracker_event(3760, 'M10932088', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_20, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_20, tracker_id_status_of_data_ds1, 666, null),
            (event_id_20, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_20, tracker_id_status_of_data_ds2, 683, null);

        event_id_21 = upsert_tracker_event(3760, 'M10961513', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_21, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_21, tracker_id_status_of_data_ds1, 666, null),
            (event_id_21, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_21, tracker_id_status_of_data_ds2, 683, null);

        event_id_22 = upsert_tracker_event(3760, 'M10905488', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_22, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_22, tracker_id_status_of_data_ds1, 666, null),
            (event_id_22, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_22, tracker_id_status_of_data_ds2, 683, null);

        event_id_23 = upsert_tracker_event(3760, 'M10962902', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_23, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_23, tracker_id_status_of_data_ds1, 666, null),
            (event_id_23, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_23, tracker_id_status_of_data_ds2, 683, null);

        event_id_24 = upsert_tracker_event(3760, 'M10964900', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_24, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_24, tracker_id_status_of_data_ds1, 666, null),
            (event_id_24, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_24, tracker_id_status_of_data_ds2, 683, null);

        event_id_25 = upsert_tracker_event(3760, 'M10994023', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_25, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_25, tracker_id_status_of_data_ds1, 666, null),
            (event_id_25, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_25, tracker_id_status_of_data_ds2, 683, null);

        event_id_26 = upsert_tracker_event(3760, 'M10903645', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_26, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_26, tracker_id_status_of_data_ds1, 666, null),
            (event_id_26, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_26, tracker_id_status_of_data_ds2, 683, null);

        event_id_27 = upsert_tracker_event(3760, 'M10944667', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_27, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_27, tracker_id_status_of_data_ds1, 666, null),
            (event_id_27, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_27, tracker_id_status_of_data_ds2, 683, null);

        event_id_28 = upsert_tracker_event(3760, 'M10914232', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_28, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_28, tracker_id_status_of_data_ds1, 666, null),
            (event_id_28, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_28, tracker_id_status_of_data_ds2, 683, null);

        event_id_29 = upsert_tracker_event(3760, 'M10936416', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_29, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_29, tracker_id_status_of_data_ds1, 666, null),
            (event_id_29, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_29, tracker_id_status_of_data_ds2, 683, null);

        event_id_30 = upsert_tracker_event(3760, 'M10946714', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_30, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_30, tracker_id_status_of_data_ds1, 666, null),
            (event_id_30, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_30, tracker_id_status_of_data_ds2, 683, null);

        event_id_31 = upsert_tracker_event(3760, 'M10923429', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_31, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_31, tracker_id_status_of_data_ds1, 666, null),
            (event_id_31, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_31, tracker_id_status_of_data_ds2, 683, null);

        event_id_32 = upsert_tracker_event(3760, 'M10999620', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_32, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_32, tracker_id_status_of_data_ds1, 666, null),
            (event_id_32, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_32, tracker_id_status_of_data_ds2, 683, null);

        event_id_33 = upsert_tracker_event(3760, 'M10906780', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_33, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_33, tracker_id_status_of_data_ds1, 666, null),
            (event_id_33, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_33, tracker_id_status_of_data_ds2, 683, null);

        event_id_34 = upsert_tracker_event(3760, 'M10949794', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_34, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_34, tracker_id_status_of_data_ds1, 666, null),
            (event_id_34, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_34, tracker_id_status_of_data_ds2, 683, null);

        event_id_35 = upsert_tracker_event(3760, 'M10973286', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_35, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_35, tracker_id_status_of_data_ds1, 666, null),
            (event_id_35, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_35, tracker_id_status_of_data_ds2, 683, null);

        event_id_36 = upsert_tracker_event(3760, 'M10946865', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_36, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_36, tracker_id_status_of_data_ds1, 666, null),
            (event_id_36, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_36, tracker_id_status_of_data_ds2, 683, null);

        event_id_37 = upsert_tracker_event(3760, 'M10980093', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_37, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_37, tracker_id_status_of_data_ds1, 666, null),
            (event_id_37, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_37, tracker_id_status_of_data_ds2, 683, null);

        event_id_38 = upsert_tracker_event(3760, 'M10953114', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_38, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_38, tracker_id_status_of_data_ds1, 666, null),
            (event_id_38, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_38, tracker_id_status_of_data_ds2, 683, null);

        event_id_39 = upsert_tracker_event(3760, 'M10958560', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_39, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_39, tracker_id_status_of_data_ds1, 666, null),
            (event_id_39, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_39, tracker_id_status_of_data_ds2, 683, null);

        event_id_40 = upsert_tracker_event(3760, 'M10944344', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_40, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_40, tracker_id_status_of_data_ds1, 666, null),
            (event_id_40, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_40, tracker_id_status_of_data_ds2, 683, null);

        event_id_41 = upsert_tracker_event(3760, 'M10937714', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_41, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_41, tracker_id_status_of_data_ds1, 666, null),
            (event_id_41, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_41, tracker_id_status_of_data_ds2, 683, null);

        event_id_42 = upsert_tracker_event(3760, 'M10937073', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_42, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_42, tracker_id_status_of_data_ds1, 666, null),
            (event_id_42, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_42, tracker_id_status_of_data_ds2, 683, null);

        event_id_43 = upsert_tracker_event(3760, 'M10995031', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_43, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_43, tracker_id_status_of_data_ds1, 666, null),
            (event_id_43, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_43, tracker_id_status_of_data_ds2, 683, null);

        event_id_44 = upsert_tracker_event(3760, 'M10996651', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_44, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_44, tracker_id_status_of_data_ds1, 666, null),
            (event_id_44, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_44, tracker_id_status_of_data_ds2, 683, null);

        event_id_45 = upsert_tracker_event(3760, 'M10939300', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_45, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_45, tracker_id_status_of_data_ds1, 666, null),
            (event_id_45, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_45, tracker_id_status_of_data_ds2, 683, null);

        event_id_46 = upsert_tracker_event(3760, 'M10931832', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_46, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_46, tracker_id_status_of_data_ds1, 666, null),
            (event_id_46, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_46, tracker_id_status_of_data_ds2, 683, null);

        event_id_47 = upsert_tracker_event(3760, 'M10950589', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_47, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_47, tracker_id_status_of_data_ds1, 666, null),
            (event_id_47, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_47, tracker_id_status_of_data_ds2, 683, null);

        event_id_48 = upsert_tracker_event(3760, 'M10980308', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_48, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_48, tracker_id_status_of_data_ds1, 666, null),
            (event_id_48, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_48, tracker_id_status_of_data_ds2, 683, null);

        event_id_49 = upsert_tracker_event(3760, 'M10931127', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_49, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_49, tracker_id_status_of_data_ds1, 666, null),
            (event_id_49, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_49, tracker_id_status_of_data_ds2, 683, null);

        event_id_50 = upsert_tracker_event(3760, 'M10916065', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_50, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_50, tracker_id_status_of_data_ds1, 666, null),
            (event_id_50, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_50, tracker_id_status_of_data_ds2, 683, null);

        event_id_51 = upsert_tracker_event(3760, 'M10916039', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_51, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_51, tracker_id_status_of_data_ds1, 666, null),
            (event_id_51, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_51, tracker_id_status_of_data_ds2, 683, null);

        event_id_52 = upsert_tracker_event(3760, 'M10927800', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_52, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_52, tracker_id_status_of_data_ds1, 666, null),
            (event_id_52, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_52, tracker_id_status_of_data_ds2, 683, null);

        event_id_53 = upsert_tracker_event(3760, 'M10902157', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_53, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_53, tracker_id_status_of_data_ds1, 666, null),
            (event_id_53, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_53, tracker_id_status_of_data_ds2, 683, null);

        event_id_54 = upsert_tracker_event(3760, 'M10989478', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_54, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_54, tracker_id_status_of_data_ds1, 666, null),
            (event_id_54, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_54, tracker_id_status_of_data_ds2, 683, null);

        event_id_55 = upsert_tracker_event(3760, 'M10905521', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_55, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_55, tracker_id_status_of_data_ds1, 666, null),
            (event_id_55, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_55, tracker_id_status_of_data_ds2, 683, null);

        event_id_56 = upsert_tracker_event(3760, 'M10996558', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_56, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_56, tracker_id_status_of_data_ds1, 666, null),
            (event_id_56, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_56, tracker_id_status_of_data_ds2, 683, null);

        event_id_57 = upsert_tracker_event(3760, 'M10921498', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_57, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_57, tracker_id_status_of_data_ds1, 666, null),
            (event_id_57, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_57, tracker_id_status_of_data_ds2, 683, null);

        event_id_58 = upsert_tracker_event(3760, 'M10986277', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_58, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_58, tracker_id_status_of_data_ds1, 666, null),
            (event_id_58, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_58, tracker_id_status_of_data_ds2, 683, null);

        event_id_59 = upsert_tracker_event(3760, 'M10974886', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_59, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_59, tracker_id_status_of_data_ds1, 666, null),
            (event_id_59, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_59, tracker_id_status_of_data_ds2, 683, null);

        event_id_60 = upsert_tracker_event(3760, 'M10915321', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_60, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_60, tracker_id_status_of_data_ds1, 666, null),
            (event_id_60, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_60, tracker_id_status_of_data_ds2, 683, null);

        event_id_61 = upsert_tracker_event(3760, 'M10922816', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_61, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_61, tracker_id_status_of_data_ds1, 666, null),
            (event_id_61, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_61, tracker_id_status_of_data_ds2, 683, null);

        event_id_62 = upsert_tracker_event(3760, 'M10979873', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_62, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_62, tracker_id_status_of_data_ds1, 666, null),
            (event_id_62, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_62, tracker_id_status_of_data_ds2, 683, null);

        event_id_63 = upsert_tracker_event(3760, 'M10997456', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_63, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_63, tracker_id_status_of_data_ds1, 666, null),
            (event_id_63, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_63, tracker_id_status_of_data_ds2, 683, null);

        event_id_64 = upsert_tracker_event(3760, 'M10912828', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_64, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_64, tracker_id_status_of_data_ds1, 666, null),
            (event_id_64, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_64, tracker_id_status_of_data_ds2, 683, null);

        event_id_65 = upsert_tracker_event(3760, 'M10962704', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_65, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_65, tracker_id_status_of_data_ds1, 666, null),
            (event_id_65, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_65, tracker_id_status_of_data_ds2, 683, null);

        event_id_66 = upsert_tracker_event(3760, 'M10952189', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_66, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_66, tracker_id_status_of_data_ds1, 666, null),
            (event_id_66, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_66, tracker_id_status_of_data_ds2, 683, null);

        event_id_67 = upsert_tracker_event(3760, 'M10990053', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_67, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_67, tracker_id_status_of_data_ds1, 666, null),
            (event_id_67, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_67, tracker_id_status_of_data_ds2, 683, null);

        event_id_68 = upsert_tracker_event(3760, 'M10957947', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_68, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_68, tracker_id_status_of_data_ds1, 666, null),
            (event_id_68, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_68, tracker_id_status_of_data_ds2, 683, null);

        event_id_69 = upsert_tracker_event(3760, 'M10913030', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_69, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_69, tracker_id_status_of_data_ds1, 666, null),
            (event_id_69, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_69, tracker_id_status_of_data_ds2, 683, null);

        event_id_70 = upsert_tracker_event(3760, 'M10968413', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_70, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_70, tracker_id_status_of_data_ds1, 666, null),
            (event_id_70, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_70, tracker_id_status_of_data_ds2, 683, null);

        event_id_71 = upsert_tracker_event(3760, 'M10916842', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_71, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_71, tracker_id_status_of_data_ds1, 666, null),
            (event_id_71, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_71, tracker_id_status_of_data_ds2, 683, null);

        event_id_72 = upsert_tracker_event(3760, 'M10915564', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_72, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_72, tracker_id_status_of_data_ds1, 666, null),
            (event_id_72, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_72, tracker_id_status_of_data_ds2, 683, null);

        event_id_73 = upsert_tracker_event(3760, 'M10979005', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_73, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_73, tracker_id_status_of_data_ds1, 666, null),
            (event_id_73, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_73, tracker_id_status_of_data_ds2, 683, null);

        event_id_74 = upsert_tracker_event(3760, 'M10959429', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_74, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_74, tracker_id_status_of_data_ds1, 666, null),
            (event_id_74, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_74, tracker_id_status_of_data_ds2, 683, null);

        event_id_75 = upsert_tracker_event(3760, 'M10950525', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_75, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_75, tracker_id_status_of_data_ds1, 666, null),
            (event_id_75, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_75, tracker_id_status_of_data_ds2, 683, null);

        event_id_76 = upsert_tracker_event(3760, 'M10958744', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_76, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_76, tracker_id_status_of_data_ds1, 666, null),
            (event_id_76, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_76, tracker_id_status_of_data_ds2, 683, null);

        event_id_77 = upsert_tracker_event(3760, 'M10988199', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_77, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_77, tracker_id_status_of_data_ds1, 666, null),
            (event_id_77, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_77, tracker_id_status_of_data_ds2, 683, null);

        event_id_78 = upsert_tracker_event(3760, 'M10953790', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_78, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_78, tracker_id_status_of_data_ds1, 666, null),
            (event_id_78, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_78, tracker_id_status_of_data_ds2, 683, null);

        event_id_79 = upsert_tracker_event(3760, 'M10998985', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_79, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_79, tracker_id_status_of_data_ds1, 666, null),
            (event_id_79, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_79, tracker_id_status_of_data_ds2, 683, null);

        event_id_80 = upsert_tracker_event(3760, 'M10939212', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_80, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_80, tracker_id_status_of_data_ds1, 666, null),
            (event_id_80, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_80, tracker_id_status_of_data_ds2, 683, null);

        event_id_81 = upsert_tracker_event(3760, 'M10925762', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_81, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_81, tracker_id_status_of_data_ds1, 666, null),
            (event_id_81, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_81, tracker_id_status_of_data_ds2, 683, null);

        event_id_82 = upsert_tracker_event(3760, 'M10978174', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_82, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_82, tracker_id_status_of_data_ds1, 666, null),
            (event_id_82, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_82, tracker_id_status_of_data_ds2, 683, null);

        event_id_83 = upsert_tracker_event(3760, 'M10982376', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_83, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_83, tracker_id_status_of_data_ds1, 666, null),
            (event_id_83, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_83, tracker_id_status_of_data_ds2, 683, null);

        event_id_84 = upsert_tracker_event(3760, 'M10920557', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_84, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_84, tracker_id_status_of_data_ds1, 666, null),
            (event_id_84, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_84, tracker_id_status_of_data_ds2, 683, null);

        event_id_85 = upsert_tracker_event(3760, 'M10927733', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_85, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_85, tracker_id_status_of_data_ds1, 666, null),
            (event_id_85, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_85, tracker_id_status_of_data_ds2, 683, null);

        event_id_86 = upsert_tracker_event(3760, 'M10919866', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_86, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_86, tracker_id_status_of_data_ds1, 666, null),
            (event_id_86, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_86, tracker_id_status_of_data_ds2, 683, null);

        event_id_87 = upsert_tracker_event(3760, 'M10909727', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_87, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_87, tracker_id_status_of_data_ds1, 666, null),
            (event_id_87, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_87, tracker_id_status_of_data_ds2, 683, null);

        event_id_88 = upsert_tracker_event(3760, 'M10961200', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_88, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_88, tracker_id_status_of_data_ds1, 666, null),
            (event_id_88, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_88, tracker_id_status_of_data_ds2, 683, null);

        event_id_89 = upsert_tracker_event(3760, 'M10969007', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_89, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_89, tracker_id_status_of_data_ds1, 666, null),
            (event_id_89, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_89, tracker_id_status_of_data_ds2, 683, null);

        event_id_90 = upsert_tracker_event(3760, 'M10923657', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_90, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_90, tracker_id_status_of_data_ds1, 666, null),
            (event_id_90, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_90, tracker_id_status_of_data_ds2, 683, null);

        event_id_91 = upsert_tracker_event(3760, 'M10906057', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_91, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_91, tracker_id_status_of_data_ds1, 666, null),
            (event_id_91, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_91, tracker_id_status_of_data_ds2, 683, null);

        event_id_92 = upsert_tracker_event(3760, 'M10944702', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_92, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_92, tracker_id_status_of_data_ds1, 666, null),
            (event_id_92, tracker_id_status_of_data_ds2, 683, null);

        event_id_93 = upsert_tracker_event(3760, 'M10962251', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_93, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_93, tracker_id_status_of_data_ds1, 666, null),
            (event_id_93, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_93, tracker_id_status_of_data_ds2, 683, null);

        event_id_94 = upsert_tracker_event(3760, 'M10983726', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_94, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_94, tracker_id_status_of_data_ds1, 666, null),
            (event_id_94, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_94, tracker_id_status_of_data_ds2, 683, null);

        event_id_95 = upsert_tracker_event(3760, 'M10911282', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_95, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_95, tracker_id_status_of_data_ds1, 666, null),
            (event_id_95, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_95, tracker_id_status_of_data_ds2, 683, null);

        event_id_96 = upsert_tracker_event(3760, 'M10903714', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_96, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_96, tracker_id_status_of_data_ds1, 666, null),
            (event_id_96, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_96, tracker_id_status_of_data_ds2, 683, null);

        event_id_97 = upsert_tracker_event(3760, 'M10968239', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_97, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_97, tracker_id_status_of_data_ds1, 666, null),
            (event_id_97, tracker_id_status_of_data_ds2, 683, null);

        event_id_98 = upsert_tracker_event(3760, 'M10915454', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_98, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_98, tracker_id_status_of_data_ds1, 666, null),
            (event_id_98, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_98, tracker_id_status_of_data_ds2, 683, null);

        event_id_99 = upsert_tracker_event(3760, 'M10923971', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_99, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_99, tracker_id_status_of_data_ds1, 666, null),
            (event_id_99, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_99, tracker_id_status_of_data_ds2, 683, null);

        event_id_100 = upsert_tracker_event(3760, 'M10983457', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_100, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_100, tracker_id_status_of_data_ds1, 666, null),
            (event_id_100, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_100, tracker_id_status_of_data_ds2, 683, null);

        event_id_101 = upsert_tracker_event(3760, 'M10977330', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_101, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_101, tracker_id_status_of_data_ds1, 666, null),
            (event_id_101, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_101, tracker_id_status_of_data_ds2, 683, null);

        event_id_102 = upsert_tracker_event(3760, 'M10939480', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_102, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_102, tracker_id_status_of_data_ds1, 666, null),
            (event_id_102, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_102, tracker_id_status_of_data_ds2, 683, null);

        event_id_103 = upsert_tracker_event(3760, 'M10974363', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_103, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_103, tracker_id_status_of_data_ds1, 666, null),
            (event_id_103, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_103, tracker_id_status_of_data_ds2, 683, null);

        event_id_104 = upsert_tracker_event(3760, 'M10956263', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_104, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_104, tracker_id_status_of_data_ds1, 666, null),
            (event_id_104, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_104, tracker_id_status_of_data_ds2, 683, null);

        event_id_105 = upsert_tracker_event(3760, 'M10920652', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_105, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_105, tracker_id_status_of_data_ds1, 666, null),
            (event_id_105, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_105, tracker_id_status_of_data_ds2, 683, null);

        event_id_106 = upsert_tracker_event(3760, 'M10920538', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_106, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_106, tracker_id_status_of_data_ds1, 666, null),
            (event_id_106, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_106, tracker_id_status_of_data_ds2, 683, null);

        event_id_107 = upsert_tracker_event(3760, 'M10977681', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_107, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_107, tracker_id_status_of_data_ds1, 666, null),
            (event_id_107, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_107, tracker_id_status_of_data_ds2, 683, null);

        event_id_108 = upsert_tracker_event(3760, 'M10985428', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_108, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_108, tracker_id_status_of_data_ds1, 666, null),
            (event_id_108, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_108, tracker_id_status_of_data_ds2, 683, null);

        event_id_109 = upsert_tracker_event(3760, 'M10987635', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_109, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_109, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion'),
            (event_id_109, tracker_id_status_of_data_ds1, 666, null),
            (event_id_109, tracker_id_status_of_data_ds2, 683, null);

        event_id_110 = upsert_tracker_event(3760, 'M10926919', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_110, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_110, tracker_id_status_of_data_ds1, 666, null),
            (event_id_110, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_110, tracker_id_status_of_data_ds2, 683, null);

        event_id_111 = upsert_tracker_event(3760, 'M10912249', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_111, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_111, tracker_id_status_of_data_ds1, 666, null),
            (event_id_111, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_111, tracker_id_status_of_data_ds2, 683, null);

        event_id_112 = upsert_tracker_event(3760, 'M10934795', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_112, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_112, tracker_id_status_of_data_ds1, 666, null),
            (event_id_112, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_112, tracker_id_status_of_data_ds2, 683, null);

        event_id_113 = upsert_tracker_event(3760, 'M10954419', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_113, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_113, tracker_id_status_of_data_ds1, 666, null),
            (event_id_113, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_113, tracker_id_status_of_data_ds2, 683, null);

        event_id_114 = upsert_tracker_event(3760, 'M10922169', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_114, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_114, tracker_id_status_of_data_ds1, 666, null),
            (event_id_114, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_114, tracker_id_status_of_data_ds2, 683, null);

        event_id_115 = upsert_tracker_event(3760, 'M10922512', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_115, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_115, tracker_id_status_of_data_ds1, 666, null),
            (event_id_115, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_115, tracker_id_status_of_data_ds2, 683, null);

        event_id_116 = upsert_tracker_event(3760, 'M10998357', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_116, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_116, tracker_id_status_of_data_ds1, 666, null),
            (event_id_116, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_116, tracker_id_status_of_data_ds2, 683, null);

        event_id_117 = upsert_tracker_event(3760, 'M10937496', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_117, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_117, tracker_id_status_of_data_ds1, 666, null),
            (event_id_117, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_117, tracker_id_status_of_data_ds2, 683, null);

        event_id_118 = upsert_tracker_event(3760, 'M10933894', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_118, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_118, tracker_id_status_of_data_ds1, 666, null),
            (event_id_118, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_118, tracker_id_status_of_data_ds2, 683, null);

        event_id_119 = upsert_tracker_event(3760, 'M10932717', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_119, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_119, tracker_id_status_of_data_ds1, 666, null),
            (event_id_119, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_119, tracker_id_status_of_data_ds2, 683, null);

        event_id_120 = upsert_tracker_event(3760, 'M10916834', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_120, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_120, tracker_id_status_of_data_ds1, 666, null),
            (event_id_120, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_120, tracker_id_status_of_data_ds2, 683, null);

        event_id_121 = upsert_tracker_event(3760, 'M10998051', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_121, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_121, tracker_id_status_of_data_ds1, 666, null),
            (event_id_121, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_121, tracker_id_status_of_data_ds2, 683, null);

        event_id_122 = upsert_tracker_event(3760, 'M10915824', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_122, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_122, tracker_id_status_of_data_ds1, 666, null),
            (event_id_122, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_122, tracker_id_status_of_data_ds2, 683, null);

        event_id_123 = upsert_tracker_event(3760, 'M10968357', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_123, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_123, tracker_id_status_of_data_ds1, 666, null),
            (event_id_123, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_123, tracker_id_status_of_data_ds2, 683, null);

        event_id_124 = upsert_tracker_event(3760, 'M10958411', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_124, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_124, tracker_id_status_of_data_ds1, 666, null),
            (event_id_124, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_124, tracker_id_status_of_data_ds2, 683, null);

        event_id_125 = upsert_tracker_event(3760, 'M10909819', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_125, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_125, tracker_id_status_of_data_ds1, 666, null),
            (event_id_125, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_125, tracker_id_status_of_data_ds2, 683, null);

        event_id_126 = upsert_tracker_event(3760, 'M10932995', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_126, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_126, tracker_id_status_of_data_ds1, 666, null),
            (event_id_126, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_126, tracker_id_status_of_data_ds2, 683, null);

        event_id_127 = upsert_tracker_event(3760, 'M10988219', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_127, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_127, tracker_id_status_of_data_ds1, 666, null),
            (event_id_127, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_127, tracker_id_status_of_data_ds2, 683, null);

        event_id_128 = upsert_tracker_event(3760, 'M10944314', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_128, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_128, tracker_id_status_of_data_ds1, 666, null),
            (event_id_128, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_128, tracker_id_status_of_data_ds2, 683, null);

        event_id_129 = upsert_tracker_event(3760, 'M10988939', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_129, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_129, tracker_id_status_of_data_ds1, 666, null),
            (event_id_129, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_129, tracker_id_status_of_data_ds2, 683, null);

        event_id_130 = upsert_tracker_event(3760, 'M10970363', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_130, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_130, tracker_id_status_of_data_ds1, 666, null),
            (event_id_130, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_130, tracker_id_status_of_data_ds2, 683, null);

        event_id_131 = upsert_tracker_event(3760, 'M10938558', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_131, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_131, tracker_id_status_of_data_ds1, 666, null),
            (event_id_131, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_131, tracker_id_status_of_data_ds2, 683, null);

        event_id_132 = upsert_tracker_event(3760, 'M10917168', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_132, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_132, tracker_id_status_of_data_ds1, 666, null),
            (event_id_132, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_132, tracker_id_status_of_data_ds2, 683, null);

        event_id_133 = upsert_tracker_event(3760, 'M10955419', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_133, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_133, tracker_id_status_of_data_ds1, 666, null),
            (event_id_133, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_133, tracker_id_status_of_data_ds2, 683, null);

        event_id_134 = upsert_tracker_event(3760, 'M10968489', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_134, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_134, tracker_id_status_of_data_ds1, 666, null),
            (event_id_134, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_134, tracker_id_status_of_data_ds2, 683, null);

        event_id_135 = upsert_tracker_event(3760, 'M10990501', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_135, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_135, tracker_id_status_of_data_ds1, 666, null),
            (event_id_135, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_135, tracker_id_status_of_data_ds2, 683, null);

        event_id_136 = upsert_tracker_event(3760, 'M10988854', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_136, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_136, tracker_id_status_of_data_ds1, 666, null),
            (event_id_136, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_136, tracker_id_status_of_data_ds2, 683, null);

        event_id_137 = upsert_tracker_event(3760, 'M10956678', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_137, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_137, tracker_id_status_of_data_ds1, 666, null),
            (event_id_137, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_137, tracker_id_status_of_data_ds2, 683, null);

        event_id_138 = upsert_tracker_event(3760, 'M10967827', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_138, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_138, tracker_id_status_of_data_ds1, 666, null),
            (event_id_138, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_138, tracker_id_status_of_data_ds2, 683, null);

        event_id_139 = upsert_tracker_event(3760, 'M10955458', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_139, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_139, tracker_id_status_of_data_ds1, 666, null),
            (event_id_139, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_139, tracker_id_status_of_data_ds2, 683, null);

        event_id_140 = upsert_tracker_event(3760, 'M10973496', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_140, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_140, tracker_id_status_of_data_ds1, 666, null),
            (event_id_140, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_140, tracker_id_status_of_data_ds2, 683, null);

        event_id_141 = upsert_tracker_event(3760, 'M10998130', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_141, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_141, tracker_id_status_of_data_ds1, 666, null),
            (event_id_141, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_141, tracker_id_status_of_data_ds2, 683, null);

        event_id_142 = upsert_tracker_event(3760, 'M10981439', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_142, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_142, tracker_id_status_of_data_ds1, 666, null),
            (event_id_142, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_142, tracker_id_status_of_data_ds2, 683, null);

        event_id_143 = upsert_tracker_event(3760, 'M10973085', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_143, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_143, tracker_id_status_of_data_ds1, 666, null),
            (event_id_143, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_143, tracker_id_status_of_data_ds2, 683, null);

        event_id_144 = upsert_tracker_event(3760, 'M10963059', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_144, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_144, tracker_id_status_of_data_ds1, 666, null),
            (event_id_144, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_144, tracker_id_status_of_data_ds2, 683, null);

        event_id_145 = upsert_tracker_event(3760, 'M10960099', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_145, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_145, tracker_id_status_of_data_ds1, 666, null),
            (event_id_145, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_145, tracker_id_status_of_data_ds2, 683, null);

        event_id_146 = upsert_tracker_event(3760, 'M10937679', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_146, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_146, tracker_id_status_of_data_ds1, 666, null),
            (event_id_146, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_146, tracker_id_status_of_data_ds2, 683, null);

        event_id_147 = upsert_tracker_event(3760, 'M10977857', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_147, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_147, tracker_id_status_of_data_ds1, 666, null),
            (event_id_147, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_147, tracker_id_status_of_data_ds2, 683, null);

        event_id_148 = upsert_tracker_event(3760, 'M10933436', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_148, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_148, tracker_id_status_of_data_ds1, 666, null),
            (event_id_148, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_148, tracker_id_status_of_data_ds2, 683, null);

        event_id_149 = upsert_tracker_event(3760, 'M10941473', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_149, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_149, tracker_id_status_of_data_ds1, 666, null),
            (event_id_149, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_149, tracker_id_status_of_data_ds2, 683, null);

        event_id_150 = upsert_tracker_event(3760, 'M10908355', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_150, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_150, tracker_id_status_of_data_ds1, 666, null),
            (event_id_150, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_150, tracker_id_status_of_data_ds2, 683, null);

        event_id_151 = upsert_tracker_event(3760, 'M10913013', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_151, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_151, tracker_id_status_of_data_ds1, 666, null),
            (event_id_151, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_151, tracker_id_status_of_data_ds2, 683, null);

        event_id_152 = upsert_tracker_event(3760, 'M10985781', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_152, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_152, tracker_id_status_of_data_ds1, 666, null),
            (event_id_152, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_152, tracker_id_status_of_data_ds2, 683, null);

        event_id_153 = upsert_tracker_event(3760, 'M10932850', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_153, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_153, tracker_id_status_of_data_ds1, 666, null),
            (event_id_153, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_153, tracker_id_status_of_data_ds2, 683, null);

        event_id_154 = upsert_tracker_event(3760, 'M10997836', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_154, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_154, tracker_id_status_of_data_ds1, 666, null),
            (event_id_154, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_154, tracker_id_status_of_data_ds2, 683, null);

        event_id_155 = upsert_tracker_event(3760, 'M10953131', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_155, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_155, tracker_id_status_of_data_ds1, 666, null),
            (event_id_155, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_155, tracker_id_status_of_data_ds2, 683, null);

        event_id_156 = upsert_tracker_event(3760, 'M10947122', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_156, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_156, tracker_id_status_of_data_ds1, 666, null),
            (event_id_156, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_156, tracker_id_status_of_data_ds2, 683, null);

        event_id_157 = upsert_tracker_event(3760, 'M10979283', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_157, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_157, tracker_id_status_of_data_ds1, 666, null),
            (event_id_157, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_157, tracker_id_status_of_data_ds2, 683, null);

        event_id_158 = upsert_tracker_event(3760, 'M10952968', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_158, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_158, tracker_id_status_of_data_ds1, 666, null),
            (event_id_158, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_158, tracker_id_status_of_data_ds2, 683, null);

        event_id_159 = upsert_tracker_event(3760, 'M10954423', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_159, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_159, tracker_id_status_of_data_ds1, 666, null),
            (event_id_159, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_159, tracker_id_status_of_data_ds2, 683, null);

        event_id_160 = upsert_tracker_event(3760, 'M10965532', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_160, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_160, tracker_id_status_of_data_ds1, 666, null),
            (event_id_160, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_160, tracker_id_status_of_data_ds2, 683, null);

        event_id_161 = upsert_tracker_event(3760, 'M10994956', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_161, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_161, tracker_id_status_of_data_ds1, 666, null),
            (event_id_161, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_161, tracker_id_status_of_data_ds2, 683, null);

        event_id_162 = upsert_tracker_event(3760, 'M10935671', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_162, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_162, tracker_id_status_of_data_ds1, 666, null),
            (event_id_162, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_162, tracker_id_status_of_data_ds2, 683, null);

        event_id_163 = upsert_tracker_event(3760, 'M10923173', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_163, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_163, tracker_id_status_of_data_ds1, 666, null),
            (event_id_163, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_163, tracker_id_status_of_data_ds2, 683, null);

        event_id_164 = upsert_tracker_event(3760, 'M10985676', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_164, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_164, tracker_id_status_of_data_ds1, 666, null),
            (event_id_164, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_164, tracker_id_status_of_data_ds2, 683, null);

        event_id_165 = upsert_tracker_event(3760, 'M10922844', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_165, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_165, tracker_id_status_of_data_ds1, 666, null),
            (event_id_165, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_165, tracker_id_status_of_data_ds2, 683, null);

        event_id_166 = upsert_tracker_event(3760, 'M10966987', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_166, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_166, tracker_id_status_of_data_ds1, 666, null),
            (event_id_166, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_166, tracker_id_status_of_data_ds2, 683, null);

        event_id_167 = upsert_tracker_event(3760, 'M10982604', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_167, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_167, tracker_id_status_of_data_ds1, 666, null),
            (event_id_167, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_167, tracker_id_status_of_data_ds2, 683, null);

        event_id_168 = upsert_tracker_event(3760, 'M10971266', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_168, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_168, tracker_id_status_of_data_ds1, 666, null),
            (event_id_168, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_168, tracker_id_status_of_data_ds2, 683, null);

        event_id_169 = upsert_tracker_event(3760, 'M10999340', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_169, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_169, tracker_id_status_of_data_ds1, 666, null),
            (event_id_169, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_169, tracker_id_status_of_data_ds2, 683, null);

        event_id_170 = upsert_tracker_event(3760, 'M10944495', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_170, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_170, tracker_id_status_of_data_ds1, 666, null),
            (event_id_170, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_170, tracker_id_status_of_data_ds2, 683, null);

        event_id_171 = upsert_tracker_event(3760, 'M10978453', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_171, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_171, tracker_id_status_of_data_ds1, 666, null),
            (event_id_171, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_171, tracker_id_status_of_data_ds2, 683, null);

        event_id_172 = upsert_tracker_event(3760, 'M10992736', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_172, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_172, tracker_id_status_of_data_ds1, 666, null),
            (event_id_172, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_172, tracker_id_status_of_data_ds2, 683, null);

        event_id_173 = upsert_tracker_event(3760, 'M10995236', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_173, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_173, tracker_id_status_of_data_ds1, 666, null),
            (event_id_173, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_173, tracker_id_status_of_data_ds2, 683, null);

        event_id_174 = upsert_tracker_event(3760, 'M10992197', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_174, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_174, tracker_id_status_of_data_ds1, 666, null),
            (event_id_174, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_174, tracker_id_status_of_data_ds2, 683, null);

        event_id_175 = upsert_tracker_event(3760, 'M10986697', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_175, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_175, tracker_id_status_of_data_ds1, 666, null),
            (event_id_175, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_175, tracker_id_status_of_data_ds2, 683, null);

        event_id_176 = upsert_tracker_event(3760, 'M10916415', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_176, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_176, tracker_id_status_of_data_ds1, 666, null),
            (event_id_176, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_176, tracker_id_status_of_data_ds2, 683, null);

        event_id_177 = upsert_tracker_event(3760, 'M10993358', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_177, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_177, tracker_id_status_of_data_ds1, 666, null),
            (event_id_177, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_177, tracker_id_status_of_data_ds2, 683, null);

        event_id_178 = upsert_tracker_event(3760, 'M10905290', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_178, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_178, tracker_id_status_of_data_ds1, 666, null),
            (event_id_178, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_178, tracker_id_status_of_data_ds2, 683, null);

        event_id_179 = upsert_tracker_event(3760, 'M10999155', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_179, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_179, tracker_id_status_of_data_ds1, 666, null),
            (event_id_179, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_179, tracker_id_status_of_data_ds2, 683, null);

        event_id_180 = upsert_tracker_event(3760, 'M10979309', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_180, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_180, tracker_id_status_of_data_ds1, 666, null),
            (event_id_180, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_180, tracker_id_status_of_data_ds2, 683, null);

        event_id_181 = upsert_tracker_event(3760, 'M10964326', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_181, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_181, tracker_id_status_of_data_ds1, 666, null),
            (event_id_181, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_181, tracker_id_status_of_data_ds2, 683, null);

        event_id_182 = upsert_tracker_event(3760, 'M10966009', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_182, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_182, tracker_id_status_of_data_ds1, 666, null),
            (event_id_182, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_182, tracker_id_status_of_data_ds2, 683, null);

        event_id_183 = upsert_tracker_event(3760, 'M10979454', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_183, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_183, tracker_id_status_of_data_ds1, 666, null),
            (event_id_183, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_183, tracker_id_status_of_data_ds2, 683, null);

        event_id_184 = upsert_tracker_event(3760, 'M10936018', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_184, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_184, tracker_id_status_of_data_ds1, 666, null),
            (event_id_184, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_184, tracker_id_status_of_data_ds2, 683, null);

        event_id_185 = upsert_tracker_event(3760, 'M10952384', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_185, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_185, tracker_id_status_of_data_ds1, 666, null),
            (event_id_185, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_185, tracker_id_status_of_data_ds2, 683, null);

        event_id_186 = upsert_tracker_event(3760, 'M10997570', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_186, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_186, tracker_id_status_of_data_ds1, 666, null),
            (event_id_186, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_186, tracker_id_status_of_data_ds2, 683, null);

        event_id_187 = upsert_tracker_event(3760, 'M10948071', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_187, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_187, tracker_id_status_of_data_ds1, 666, null),
            (event_id_187, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_187, tracker_id_status_of_data_ds2, 683, null);

        event_id_188 = upsert_tracker_event(3760, 'M10918439', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_188, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_188, tracker_id_status_of_data_ds1, 666, null),
            (event_id_188, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_188, tracker_id_status_of_data_ds2, 683, null);

        event_id_189 = upsert_tracker_event(3760, 'M10912347', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_189, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_189, tracker_id_status_of_data_ds1, 666, null),
            (event_id_189, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_189, tracker_id_status_of_data_ds2, 683, null);

        event_id_190 = upsert_tracker_event(3760, 'M10968013', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_190, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_190, tracker_id_status_of_data_ds1, 666, null),
            (event_id_190, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_190, tracker_id_status_of_data_ds2, 683, null);

        event_id_191 = upsert_tracker_event(3760, 'M10930249', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_191, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_191, tracker_id_status_of_data_ds1, 666, null),
            (event_id_191, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_191, tracker_id_status_of_data_ds2, 683, null);

        event_id_192 = upsert_tracker_event(3760, 'M10909459', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_192, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_192, tracker_id_status_of_data_ds1, 666, null),
            (event_id_192, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_192, tracker_id_status_of_data_ds2, 683, null);

        event_id_193 = upsert_tracker_event(3760, 'M10965660', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_193, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_193, tracker_id_status_of_data_ds1, 666, null),
            (event_id_193, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_193, tracker_id_status_of_data_ds2, 683, null);

        event_id_194 = upsert_tracker_event(3760, 'M10957873', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_194, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_194, tracker_id_status_of_data_ds1, 666, null),
            (event_id_194, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_194, tracker_id_status_of_data_ds2, 683, null);

        event_id_195 = upsert_tracker_event(3760, 'M10951580', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_195, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_195, tracker_id_status_of_data_ds1, 666, null),
            (event_id_195, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_195, tracker_id_status_of_data_ds2, 683, null);

        event_id_196 = upsert_tracker_event(3760, 'M10903872', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_196, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_196, tracker_id_status_of_data_ds1, 666, null),
            (event_id_196, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_196, tracker_id_status_of_data_ds2, 683, null);

        event_id_197 = upsert_tracker_event(3760, 'M10936303', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_197, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_197, tracker_id_status_of_data_ds1, 667, null),
            (event_id_197, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_197, tracker_id_status_of_data_ds2, 684, null);

        event_id_198 = upsert_tracker_event(3760, 'M10913044', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_198, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_198, tracker_id_status_of_data_ds1, 667, null),
            (event_id_198, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_198, tracker_id_status_of_data_ds2, 684, null);

        event_id_199 = upsert_tracker_event(3760, 'M10964385', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_199, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_199, tracker_id_status_of_data_ds1, 667, null),
            (event_id_199, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_199, tracker_id_status_of_data_ds2, 684, null);

        event_id_200 = upsert_tracker_event(3760, 'M10963508', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_200, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_200, tracker_id_status_of_data_ds1, 667, null),
            (event_id_200, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_200, tracker_id_status_of_data_ds2, 684, null);

        event_id_201 = upsert_tracker_event(3760, 'M10966094', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_201, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_201, tracker_id_status_of_data_ds1, 667, null),
            (event_id_201, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_201, tracker_id_status_of_data_ds2, 684, null);

        event_id_202 = upsert_tracker_event(3760, 'M10973358', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_202, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_202, tracker_id_status_of_data_ds1, 667, null),
            (event_id_202, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_202, tracker_id_status_of_data_ds2, 684, null);

        event_id_203 = upsert_tracker_event(3760, 'M10942673', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_203, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_203, tracker_id_status_of_data_ds1, 667, null),
            (event_id_203, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_203, tracker_id_status_of_data_ds2, 684, null);

        event_id_204 = upsert_tracker_event(3760, 'M10950404', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_204, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_204, tracker_id_status_of_data_ds1, 667, null),
            (event_id_204, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_204, tracker_id_status_of_data_ds2, 684, null);

        event_id_205 = upsert_tracker_event(3760, 'M10986067', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_205, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_205, tracker_id_status_of_data_ds1, 667, null),
            (event_id_205, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_205, tracker_id_status_of_data_ds2, 684, null);

        event_id_206 = upsert_tracker_event(3760, 'M10963228', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_206, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_206, tracker_id_status_of_data_ds1, 667, null),
            (event_id_206, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_206, tracker_id_status_of_data_ds2, 684, null);

        event_id_207 = upsert_tracker_event(3760, 'M10971391', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_207, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_207, tracker_id_status_of_data_ds1, 665, null),
            (event_id_207, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_207, tracker_id_status_of_data_ds2, 684, null);

        event_id_208 = upsert_tracker_event(3760, 'M10998200', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_208, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_208, tracker_id_status_of_data_ds1, 667, null),
            (event_id_208, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_208, tracker_id_status_of_data_ds2, 684, null);

        event_id_209 = upsert_tracker_event(3760, 'M10961530', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_209, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_209, tracker_id_status_of_data_ds1, 667, null),
            (event_id_209, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_209, tracker_id_status_of_data_ds2, 684, null);

        event_id_210 = upsert_tracker_event(3760, 'M10981960', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_210, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_210, tracker_id_status_of_data_ds1, 667, null),
            (event_id_210, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_210, tracker_id_status_of_data_ds2, 684, null);

        event_id_211 = upsert_tracker_event(3760, 'M10964093', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_211, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_211, tracker_id_status_of_data_ds1, 667, null),
            (event_id_211, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_211, tracker_id_status_of_data_ds2, 684, null);

        event_id_212 = upsert_tracker_event(3760, 'M10981535', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_212, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_212, tracker_id_status_of_data_ds1, 668, null),
            (event_id_212, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_212, tracker_id_status_of_data_ds2, 685, null);

        event_id_213 = upsert_tracker_event(3760, 'M10987884', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_213, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_213, tracker_id_status_of_data_ds1, 668, null),
            (event_id_213, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_213, tracker_id_status_of_data_ds2, 685, null);

        event_id_214 = upsert_tracker_event(3760, 'M10966731', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_214, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_214, tracker_id_status_of_data_ds1, 668, null),
            (event_id_214, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_214, tracker_id_status_of_data_ds2, 685, null);

        event_id_215 = upsert_tracker_event(3760, 'M10941860', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_215, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_215, tracker_id_status_of_data_ds1, 668, null),
            (event_id_215, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_215, tracker_id_status_of_data_ds2, 685, null);

        event_id_216 = upsert_tracker_event(3760, 'M10927665', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_216, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_216, tracker_id_status_of_data_ds1, 668, null),
            (event_id_216, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_216, tracker_id_status_of_data_ds2, 685, null);

        event_id_217 = upsert_tracker_event(3760, 'M10950062', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_217, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_217, tracker_id_status_of_data_ds1, 668, null),
            (event_id_217, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_217, tracker_id_status_of_data_ds2, 685, null);

        event_id_218 = upsert_tracker_event(3760, 'M10906664', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_218, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_218, tracker_id_status_of_data_ds1, 668, null),
            (event_id_218, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_218, tracker_id_status_of_data_ds2, 685, null);

        event_id_219 = upsert_tracker_event(3760, 'M10972228', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_219, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_219, tracker_id_status_of_data_ds1, 668, null),
            (event_id_219, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_219, tracker_id_status_of_data_ds2, 685, null);

        event_id_220 = upsert_tracker_event(3760, 'M10912536', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_220, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_220, tracker_id_status_of_data_ds1, 668, null),
            (event_id_220, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_220, tracker_id_status_of_data_ds2, 685, null);

        event_id_221 = upsert_tracker_event(3760, 'M10919351', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_221, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_221, tracker_id_status_of_data_ds1, 668, null),
            (event_id_221, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_221, tracker_id_status_of_data_ds2, 685, null);

        event_id_222 = upsert_tracker_event(3760, 'M10943484', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_222, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_222, tracker_id_status_of_data_ds1, 668, null),
            (event_id_222, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_222, tracker_id_status_of_data_ds2, 685, null);

        event_id_223 = upsert_tracker_event(3760, 'M10935591', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_223, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_223, tracker_id_status_of_data_ds1, 668, null),
            (event_id_223, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_223, tracker_id_status_of_data_ds2, 685, null);

        event_id_224 = upsert_tracker_event(3760, 'M10969571', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_224, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_224, tracker_id_status_of_data_ds1, 668, null),
            (event_id_224, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_224, tracker_id_status_of_data_ds2, 685, null);

        event_id_225 = upsert_tracker_event(3760, 'M10932049', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_225, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_225, tracker_id_status_of_data_ds1, 668, null),
            (event_id_225, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_225, tracker_id_status_of_data_ds2, 685, null);

        event_id_226 = upsert_tracker_event(3760, 'M10927784', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_226, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_226, tracker_id_status_of_data_ds1, 668, null),
            (event_id_226, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_226, tracker_id_status_of_data_ds2, 685, null);

        event_id_227 = upsert_tracker_event(3760, 'M10920859', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_227, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_227, tracker_id_status_of_data_ds1, 668, null),
            (event_id_227, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_227, tracker_id_status_of_data_ds2, 685, null);

        event_id_228 = upsert_tracker_event(3760, 'M10996198', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_228, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_228, tracker_id_status_of_data_ds1, 668, null),
            (event_id_228, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_228, tracker_id_status_of_data_ds2, 685, null);

        event_id_229 = upsert_tracker_event(3760, 'M10920818', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_229, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_229, tracker_id_status_of_data_ds1, 668, null),
            (event_id_229, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_229, tracker_id_status_of_data_ds2, 685, null);

        event_id_230 = upsert_tracker_event(3760, 'M10942609', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_230, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_230, tracker_id_status_of_data_ds1, 668, null),
            (event_id_230, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_230, tracker_id_status_of_data_ds2, 685, null);

        event_id_231 = upsert_tracker_event(3760, 'M10961506', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_231, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_231, tracker_id_status_of_data_ds1, 668, null),
            (event_id_231, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_231, tracker_id_status_of_data_ds2, 685, null);

        event_id_232 = upsert_tracker_event(3760, 'M10908184', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_232, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_232, tracker_id_status_of_data_ds1, 668, null),
            (event_id_232, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_232, tracker_id_status_of_data_ds2, 685, null);

        event_id_233 = upsert_tracker_event(3760, 'M10930424', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_233, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_233, tracker_id_status_of_data_ds1, 668, null),
            (event_id_233, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_233, tracker_id_status_of_data_ds2, 685, null);

        event_id_234 = upsert_tracker_event(3760, 'M10970636', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_234, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_234, tracker_id_status_of_data_ds1, 668, null),
            (event_id_234, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_234, tracker_id_status_of_data_ds2, 685, null);

        event_id_235 = upsert_tracker_event(3760, 'M10917902', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_235, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_235, tracker_id_status_of_data_ds1, 668, null),
            (event_id_235, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_235, tracker_id_status_of_data_ds2, 685, null);

        event_id_236 = upsert_tracker_event(3760, 'M10915684', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_236, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_236, tracker_id_status_of_data_ds1, 668, null),
            (event_id_236, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_236, tracker_id_status_of_data_ds2, 685, null);

        event_id_237 = upsert_tracker_event(3760, 'M10914008', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_237, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_237, tracker_id_status_of_data_ds1, 668, null),
            (event_id_237, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_237, tracker_id_status_of_data_ds2, 685, null);

        event_id_238 = upsert_tracker_event(3760, 'M10984446', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_238, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_238, tracker_id_status_of_data_ds1, 668, null),
            (event_id_238, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_238, tracker_id_status_of_data_ds2, 685, null);

        event_id_239 = upsert_tracker_event(3760, 'M10939437', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_239, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_239, tracker_id_status_of_data_ds1, 668, null),
            (event_id_239, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_239, tracker_id_status_of_data_ds2, 685, null);

        event_id_240 = upsert_tracker_event(3760, 'M10934505', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_240, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_240, tracker_id_status_of_data_ds1, 668, null),
            (event_id_240, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_240, tracker_id_status_of_data_ds2, 685, null);

        event_id_241 = upsert_tracker_event(3760, 'M10901084', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_241, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_241, tracker_id_status_of_data_ds1, 668, null),
            (event_id_241, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_241, tracker_id_status_of_data_ds2, 685, null);

        event_id_242 = upsert_tracker_event(3760, 'M10976479', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_242, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_242, tracker_id_status_of_data_ds1, 668, null),
            (event_id_242, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_242, tracker_id_status_of_data_ds2, 685, null);

        event_id_243 = upsert_tracker_event(3760, 'M10917964', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_243, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_243, tracker_id_status_of_data_ds1, 668, null),
            (event_id_243, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_243, tracker_id_status_of_data_ds2, 685, null);

        event_id_244 = upsert_tracker_event(3760, 'M10938497', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_244, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_244, tracker_id_status_of_data_ds1, 668, null),
            (event_id_244, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_244, tracker_id_status_of_data_ds2, 685, null);

        event_id_245 = upsert_tracker_event(3760, 'M10960872', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_245, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_245, tracker_id_status_of_data_ds1, 668, null),
            (event_id_245, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_245, tracker_id_status_of_data_ds2, 685, null);

        event_id_246 = upsert_tracker_event(3760, 'M10933646', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_246, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_246, tracker_id_status_of_data_ds1, 668, null),
            (event_id_246, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_246, tracker_id_status_of_data_ds2, 685, null);

        event_id_247 = upsert_tracker_event(3760, 'M10921400', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_247, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_247, tracker_id_status_of_data_ds1, 668, null),
            (event_id_247, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_247, tracker_id_status_of_data_ds2, 685, null);

        event_id_248 = upsert_tracker_event(3760, 'M10958726', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_248, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_248, tracker_id_status_of_data_ds1, 668, null),
            (event_id_248, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_248, tracker_id_status_of_data_ds2, 685, null);

        event_id_249 = upsert_tracker_event(3760, 'M10978964', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_249, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_249, tracker_id_status_of_data_ds1, 668, null),
            (event_id_249, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_249, tracker_id_status_of_data_ds2, 685, null);

        event_id_250 = upsert_tracker_event(3760, 'M10910809', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_250, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_250, tracker_id_status_of_data_ds1, 668, null),
            (event_id_250, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_250, tracker_id_status_of_data_ds2, 685, null);

        event_id_251 = upsert_tracker_event(3760, 'M10925107', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_251, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_251, tracker_id_status_of_data_ds1, 668, null),
            (event_id_251, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_251, tracker_id_status_of_data_ds2, 685, null);

        event_id_252 = upsert_tracker_event(3760, 'M10923116', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_252, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_252, tracker_id_status_of_data_ds1, 668, null),
            (event_id_252, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_252, tracker_id_status_of_data_ds2, 685, null);

        event_id_253 = upsert_tracker_event(3760, 'M10963613', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_253, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_253, tracker_id_status_of_data_ds1, 668, null),
            (event_id_253, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_253, tracker_id_status_of_data_ds2, 685, null);

        event_id_254 = upsert_tracker_event(3760, 'M10923694', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_254, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_254, tracker_id_status_of_data_ds1, 668, null),
            (event_id_254, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_254, tracker_id_status_of_data_ds2, 685, null);

        event_id_255 = upsert_tracker_event(3760, 'M10942968', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_255, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_255, tracker_id_status_of_data_ds1, 668, null),
            (event_id_255, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_255, tracker_id_status_of_data_ds2, 685, null);

        event_id_256 = upsert_tracker_event(3760, 'M10900464', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_256, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_256, tracker_id_status_of_data_ds1, 668, null),
            (event_id_256, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_256, tracker_id_status_of_data_ds2, 685, null);

        event_id_257 = upsert_tracker_event(3760, 'M10967693', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_257, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_257, tracker_id_status_of_data_ds1, 668, null),
            (event_id_257, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_257, tracker_id_status_of_data_ds2, 685, null);

        event_id_258 = upsert_tracker_event(3760, 'M10923048', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_258, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_258, tracker_id_status_of_data_ds1, 668, null),
            (event_id_258, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_258, tracker_id_status_of_data_ds2, 685, null);

        event_id_259 = upsert_tracker_event(3760, 'M10930678', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_259, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_259, tracker_id_status_of_data_ds1, 668, null),
            (event_id_259, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_259, tracker_id_status_of_data_ds2, 685, null);

        event_id_260 = upsert_tracker_event(3760, 'M10953980', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_260, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_260, tracker_id_status_of_data_ds1, 668, null),
            (event_id_260, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_260, tracker_id_status_of_data_ds2, 685, null);

        event_id_261 = upsert_tracker_event(3760, 'M10909371', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_261, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_261, tracker_id_status_of_data_ds1, 668, null),
            (event_id_261, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_261, tracker_id_status_of_data_ds2, 685, null);

        event_id_262 = upsert_tracker_event(3760, 'M10988689', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_262, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_262, tracker_id_status_of_data_ds1, 668, null),
            (event_id_262, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_262, tracker_id_status_of_data_ds2, 685, null);

        event_id_263 = upsert_tracker_event(3760, 'M10903580', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_263, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_263, tracker_id_status_of_data_ds1, 668, null),
            (event_id_263, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_263, tracker_id_status_of_data_ds2, 685, null);

        event_id_264 = upsert_tracker_event(3760, 'M10941771', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_264, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_264, tracker_id_status_of_data_ds1, 668, null),
            (event_id_264, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_264, tracker_id_status_of_data_ds2, 685, null);

        event_id_265 = upsert_tracker_event(3760, 'M10983506', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_265, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_265, tracker_id_status_of_data_ds1, 668, null),
            (event_id_265, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_265, tracker_id_status_of_data_ds2, 685, null);

        event_id_266 = upsert_tracker_event(3760, 'M10935883', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_266, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_266, tracker_id_status_of_data_ds1, 668, null),
            (event_id_266, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_266, tracker_id_status_of_data_ds2, 685, null);

        event_id_267 = upsert_tracker_event(3760, 'M10996878', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_267, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_267, tracker_id_status_of_data_ds1, 668, null),
            (event_id_267, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_267, tracker_id_status_of_data_ds2, 685, null);

        event_id_268 = upsert_tracker_event(3760, 'M10968007', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_268, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_268, tracker_id_status_of_data_ds1, 668, null),
            (event_id_268, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_268, tracker_id_status_of_data_ds2, 685, null);

        event_id_269 = upsert_tracker_event(3760, 'M10926369', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_269, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_269, tracker_id_status_of_data_ds1, 668, null),
            (event_id_269, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_269, tracker_id_status_of_data_ds2, 685, null);

        event_id_270 = upsert_tracker_event(3760, 'M10924714', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_270, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_270, tracker_id_status_of_data_ds1, 668, null),
            (event_id_270, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_270, tracker_id_status_of_data_ds2, 685, null);

        event_id_271 = upsert_tracker_event(3760, 'M10931060', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_271, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_271, tracker_id_status_of_data_ds1, 668, null),
            (event_id_271, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_271, tracker_id_status_of_data_ds2, 685, null);

        event_id_272 = upsert_tracker_event(3760, 'M10908781', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_272, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_272, tracker_id_status_of_data_ds1, 669, null),
            (event_id_272, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_272, tracker_id_status_of_data_ds2, 686, null);

        event_id_273 = upsert_tracker_event(3760, 'M10924041', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_273, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_273, tracker_id_status_of_data_ds1, 669, null),
            (event_id_273, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_273, tracker_id_status_of_data_ds2, 686, null);

        event_id_274 = upsert_tracker_event(3760, 'M10908485', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_274, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_274, tracker_id_status_of_data_ds1, 669, null),
            (event_id_274, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_274, tracker_id_status_of_data_ds2, 686, null);

        event_id_275 = upsert_tracker_event(3760, 'M10980964', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_275, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_275, tracker_id_status_of_data_ds1, 669, null),
            (event_id_275, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_275, tracker_id_status_of_data_ds2, 686, null);

        event_id_276 = upsert_tracker_event(3760, 'M10912131', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_276, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_276, tracker_id_status_of_data_ds1, 669, null),
            (event_id_276, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_276, tracker_id_status_of_data_ds2, 686, null);

        event_id_277 = upsert_tracker_event(3760, 'M10916011', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_277, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_277, tracker_id_status_of_data_ds1, 669, null),
            (event_id_277, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_277, tracker_id_status_of_data_ds2, 686, null);

        event_id_278 = upsert_tracker_event(3760, 'M10976753', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_278, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_278, tracker_id_status_of_data_ds1, 669, null),
            (event_id_278, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_278, tracker_id_status_of_data_ds2, 686, null);

        event_id_279 = upsert_tracker_event(3760, 'M10916041', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_279, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_279, tracker_id_status_of_data_ds1, 669, null),
            (event_id_279, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_279, tracker_id_status_of_data_ds2, 686, null);

        event_id_280 = upsert_tracker_event(3760, 'M10953754', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_280, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_280, tracker_id_status_of_data_ds1, 669, null),
            (event_id_280, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_280, tracker_id_status_of_data_ds2, 686, null);

        event_id_281 = upsert_tracker_event(3760, 'M10990475', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_281, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_281, tracker_id_status_of_data_ds1, 669, null),
            (event_id_281, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_281, tracker_id_status_of_data_ds2, 686, null);

        event_id_282 = upsert_tracker_event(3760, 'M10930248', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_282, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_282, tracker_id_status_of_data_ds1, 669, null),
            (event_id_282, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_282, tracker_id_status_of_data_ds2, 686, null);

        event_id_283 = upsert_tracker_event(3760, 'M10988820', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_283, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_283, tracker_id_status_of_data_ds1, 669, null),
            (event_id_283, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_283, tracker_id_status_of_data_ds2, 686, null);

        event_id_284 = upsert_tracker_event(3760, 'M10903347', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_284, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_284, tracker_id_status_of_data_ds1, 669, null),
            (event_id_284, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_284, tracker_id_status_of_data_ds2, 686, null);

        event_id_285 = upsert_tracker_event(3760, 'M10906459', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_285, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_285, tracker_id_status_of_data_ds1, 669, null),
            (event_id_285, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_285, tracker_id_status_of_data_ds2, 686, null);

        event_id_286 = upsert_tracker_event(3760, 'M10966210', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_286, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_286, tracker_id_status_of_data_ds1, 669, null),
            (event_id_286, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_286, tracker_id_status_of_data_ds2, 686, null);

        event_id_287 = upsert_tracker_event(3760, 'M10993222', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_287, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_287, tracker_id_status_of_data_ds1, 669, null),
            (event_id_287, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_287, tracker_id_status_of_data_ds2, 686, null);

        event_id_288 = upsert_tracker_event(3760, 'M10919486', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_288, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_288, tracker_id_status_of_data_ds1, 669, null),
            (event_id_288, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_288, tracker_id_status_of_data_ds2, 686, null);

        event_id_289 = upsert_tracker_event(3760, 'M10908829', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_289, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_289, tracker_id_status_of_data_ds1, 669, null),
            (event_id_289, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_289, tracker_id_status_of_data_ds2, 686, null);

        event_id_290 = upsert_tracker_event(3760, 'M10978859', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_290, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_290, tracker_id_status_of_data_ds1, 669, null),
            (event_id_290, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_290, tracker_id_status_of_data_ds2, 686, null);

        event_id_291 = upsert_tracker_event(3760, 'M10965770', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_291, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_291, tracker_id_status_of_data_ds1, 669, null),
            (event_id_291, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_291, tracker_id_status_of_data_ds2, 686, null);

        event_id_292 = upsert_tracker_event(3760, 'M10908465', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_292, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_292, tracker_id_status_of_data_ds1, 669, null),
            (event_id_292, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_292, tracker_id_status_of_data_ds2, 686, null);

        event_id_293 = upsert_tracker_event(3760, 'M10988695', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_293, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_293, tracker_id_status_of_data_ds1, 669, null),
            (event_id_293, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_293, tracker_id_status_of_data_ds2, 686, null);

        event_id_294 = upsert_tracker_event(3760, 'M10999658', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_294, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_294, tracker_id_status_of_data_ds1, 669, null),
            (event_id_294, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_294, tracker_id_status_of_data_ds2, 686, null);

        event_id_295 = upsert_tracker_event(3760, 'M10988214', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_295, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_295, tracker_id_status_of_data_ds1, 669, null),
            (event_id_295, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_295, tracker_id_status_of_data_ds2, 686, null);

        event_id_296 = upsert_tracker_event(3760, 'M10956928', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_296, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_296, tracker_id_status_of_data_ds1, 669, null),
            (event_id_296, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_296, tracker_id_status_of_data_ds2, 686, null);

        event_id_297 = upsert_tracker_event(3760, 'M10901463', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_297, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_297, tracker_id_status_of_data_ds1, 669, null),
            (event_id_297, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_297, tracker_id_status_of_data_ds2, 686, null);

        event_id_298 = upsert_tracker_event(3760, 'M10936246', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_298, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_298, tracker_id_status_of_data_ds1, 669, null),
            (event_id_298, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_298, tracker_id_status_of_data_ds2, 686, null);

        event_id_299 = upsert_tracker_event(3760, 'M10924028', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_299, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_299, tracker_id_status_of_data_ds1, 669, null),
            (event_id_299, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_299, tracker_id_status_of_data_ds2, 686, null);

        event_id_300 = upsert_tracker_event(3760, 'M10988976', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_300, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_300, tracker_id_status_of_data_ds1, 669, null),
            (event_id_300, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_300, tracker_id_status_of_data_ds2, 686, null);

        event_id_301 = upsert_tracker_event(3760, 'M10910184', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_301, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_301, tracker_id_status_of_data_ds1, 669, null),
            (event_id_301, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_301, tracker_id_status_of_data_ds2, 686, null);

        event_id_302 = upsert_tracker_event(3760, 'M10902019', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_302, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_302, tracker_id_status_of_data_ds1, 669, null),
            (event_id_302, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_302, tracker_id_status_of_data_ds2, 686, null);

        event_id_303 = upsert_tracker_event(3760, 'M10967628', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_303, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_303, tracker_id_status_of_data_ds1, 669, null),
            (event_id_303, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_303, tracker_id_status_at_the_end_of_ds2_notes, null, 'MRI contraindication'),
            (event_id_303, tracker_id_status_of_data_ds2, 686, null);

        event_id_304 = upsert_tracker_event(3760, 'M10984809', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_304, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_304, tracker_id_status_of_data_ds1, 669, null),
            (event_id_304, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_304, tracker_id_status_of_data_ds2, 686, null);

        event_id_305 = upsert_tracker_event(3760, 'M10939077', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_305, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_305, tracker_id_status_of_data_ds1, 669, null),
            (event_id_305, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_305, tracker_id_status_of_data_ds2, 686, null);

        event_id_306 = upsert_tracker_event(3760, 'M10936649', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_306, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_306, tracker_id_status_of_data_ds1, 669, null),
            (event_id_306, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_306, tracker_id_status_of_data_ds2, 686, null);

        event_id_307 = upsert_tracker_event(3760, 'M10931637', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_307, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_307, tracker_id_status_of_data_ds1, 669, null),
            (event_id_307, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_307, tracker_id_status_of_data_ds2, 686, null);

        event_id_308 = upsert_tracker_event(3760, 'M10957850', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_308, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_308, tracker_id_status_of_data_ds1, 669, null),
            (event_id_308, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_308, tracker_id_status_of_data_ds2, 686, null);

        event_id_309 = upsert_tracker_event(3760, 'M10943391', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_309, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_309, tracker_id_status_of_data_ds1, 669, null),
            (event_id_309, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_309, tracker_id_status_of_data_ds2, 686, null);

        event_id_310 = upsert_tracker_event(3760, 'M10900451', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_310, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_310, tracker_id_status_of_data_ds1, 669, null),
            (event_id_310, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_310, tracker_id_status_of_data_ds2, 686, null);

        event_id_311 = upsert_tracker_event(3760, 'M10936216', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_311, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_311, tracker_id_status_of_data_ds1, 669, null),
            (event_id_311, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_311, tracker_id_status_of_data_ds2, 686, null);

        event_id_312 = upsert_tracker_event(3760, 'M10971510', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_312, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_312, tracker_id_status_of_data_ds1, 669, null),
            (event_id_312, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_312, tracker_id_status_of_data_ds2, 686, null);

        event_id_313 = upsert_tracker_event(3760, 'M10911693', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_313, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_313, tracker_id_status_of_data_ds1, 669, null),
            (event_id_313, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_313, tracker_id_status_of_data_ds2, 686, null);

        event_id_314 = upsert_tracker_event(3760, 'M10929348', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_314, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_314, tracker_id_status_of_data_ds1, 669, null),
            (event_id_314, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_314, tracker_id_status_of_data_ds2, 686, null);

        event_id_315 = upsert_tracker_event(3760, 'M10917747', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_315, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_315, tracker_id_status_of_data_ds1, 669, null),
            (event_id_315, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_315, tracker_id_status_of_data_ds2, 686, null);

        event_id_316 = upsert_tracker_event(3760, 'M10950880', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_316, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_316, tracker_id_status_of_data_ds1, 669, null),
            (event_id_316, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_316, tracker_id_status_of_data_ds2, 686, null);

        event_id_317 = upsert_tracker_event(3760, 'M10951876', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_317, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_317, tracker_id_status_of_data_ds1, 669, null),
            (event_id_317, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_317, tracker_id_status_of_data_ds2, 686, null);

        event_id_318 = upsert_tracker_event(3760, 'M10975151', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_318, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_318, tracker_id_status_of_data_ds1, 669, null),
            (event_id_318, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_318, tracker_id_status_of_data_ds2, 686, null);

        event_id_319 = upsert_tracker_event(3760, 'M10914446', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_319, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_319, tracker_id_status_of_data_ds1, 669, null),
            (event_id_319, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_319, tracker_id_status_of_data_ds2, 686, null);

        event_id_320 = upsert_tracker_event(3760, 'M10994108', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_320, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_320, tracker_id_status_of_data_ds1, 669, null),
            (event_id_320, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_320, tracker_id_status_of_data_ds2, 686, null);

        event_id_321 = upsert_tracker_event(3760, 'M10920486', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_321, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_321, tracker_id_status_of_data_ds1, 669, null),
            (event_id_321, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_321, tracker_id_status_of_data_ds2, 686, null);

        event_id_322 = upsert_tracker_event(3760, 'M10914275', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_322, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_322, tracker_id_status_of_data_ds1, 669, null),
            (event_id_322, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_322, tracker_id_status_of_data_ds2, 686, null);

        event_id_323 = upsert_tracker_event(3760, 'M10983277', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_323, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_323, tracker_id_status_of_data_ds1, 669, null),
            (event_id_323, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_323, tracker_id_status_of_data_ds2, 686, null);

        event_id_324 = upsert_tracker_event(3760, 'M10939764', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_324, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_324, tracker_id_status_of_data_ds1, 669, null),
            (event_id_324, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_324, tracker_id_status_of_data_ds2, 686, null);

        event_id_325 = upsert_tracker_event(3760, 'M10945411', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_325, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_325, tracker_id_status_of_data_ds1, 669, null),
            (event_id_325, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_325, tracker_id_status_of_data_ds2, 686, null);

        event_id_326 = upsert_tracker_event(3760, 'M10991053', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_326, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_326, tracker_id_status_of_data_ds1, 669, null),
            (event_id_326, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_326, tracker_id_status_of_data_ds2, 686, null);

        event_id_327 = upsert_tracker_event(3760, 'M10914047', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_327, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_327, tracker_id_status_of_data_ds1, 669, null),
            (event_id_327, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_327, tracker_id_status_of_data_ds2, 686, null);

        event_id_328 = upsert_tracker_event(3760, 'M10910559', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_328, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_328, tracker_id_status_of_data_ds1, 669, null),
            (event_id_328, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_328, tracker_id_status_of_data_ds2, 686, null);

        event_id_329 = upsert_tracker_event(3760, 'M10952872', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_329, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_329, tracker_id_status_of_data_ds1, 669, null),
            (event_id_329, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_329, tracker_id_status_of_data_ds2, 686, null);

        event_id_330 = upsert_tracker_event(3760, 'M10996445', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_330, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_330, tracker_id_status_of_data_ds1, 669, null),
            (event_id_330, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_330, tracker_id_status_of_data_ds2, 686, null);

        event_id_331 = upsert_tracker_event(3760, 'M10955568', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_331, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_331, tracker_id_status_of_data_ds1, 669, null),
            (event_id_331, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_331, tracker_id_status_of_data_ds2, 686, null);

        event_id_332 = upsert_tracker_event(3760, 'M10956730', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_332, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_332, tracker_id_status_of_data_ds1, 669, null),
            (event_id_332, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_332, tracker_id_status_of_data_ds2, 686, null);

        event_id_333 = upsert_tracker_event(3760, 'M10976913', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_333, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_333, tracker_id_status_of_data_ds1, 669, null),
            (event_id_333, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_333, tracker_id_status_of_data_ds2, 686, null);

        event_id_334 = upsert_tracker_event(3760, 'M10914139', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_334, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_334, tracker_id_status_of_data_ds1, 669, null),
            (event_id_334, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_334, tracker_id_status_of_data_ds2, 686, null);

        event_id_335 = upsert_tracker_event(3760, 'M10927484', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_335, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_335, tracker_id_status_of_data_ds1, 669, null),
            (event_id_335, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_335, tracker_id_status_of_data_ds2, 686, null);

        event_id_336 = upsert_tracker_event(3760, 'M10989280', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_336, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_336, tracker_id_status_of_data_ds1, 669, null),
            (event_id_336, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_336, tracker_id_status_of_data_ds2, 686, null);

        event_id_337 = upsert_tracker_event(3760, 'M10996582', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_337, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_337, tracker_id_status_of_data_ds1, 669, null),
            (event_id_337, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_337, tracker_id_status_of_data_ds2, 686, null);

        event_id_338 = upsert_tracker_event(3760, 'M10987473', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_338, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_338, tracker_id_status_of_data_ds1, 669, null),
            (event_id_338, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_338, tracker_id_status_at_the_end_of_ds2_notes, null, 'MRI contraindication'),
            (event_id_338, tracker_id_status_of_data_ds2, 686, null);

        event_id_339 = upsert_tracker_event(3760, 'M10974314', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_339, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_339, tracker_id_status_of_data_ds1, 669, null),
            (event_id_339, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_339, tracker_id_status_of_data_ds2, 686, null);

        event_id_340 = upsert_tracker_event(3760, 'M10942513', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_340, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_340, tracker_id_status_of_data_ds1, 669, null),
            (event_id_340, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_340, tracker_id_status_of_data_ds2, 686, null);

        event_id_341 = upsert_tracker_event(3760, 'M10960620', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_341, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_341, tracker_id_status_of_data_ds1, 669, null),
            (event_id_341, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_341, tracker_id_status_of_data_ds2, 686, null);

        event_id_342 = upsert_tracker_event(3760, 'M10954555', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_342, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_342, tracker_id_status_of_data_ds1, 669, null),
            (event_id_342, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_342, tracker_id_status_of_data_ds2, 686, null);

        event_id_343 = upsert_tracker_event(3760, 'M10942579', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_343, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_343, tracker_id_status_of_data_ds1, 669, null),
            (event_id_343, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_343, tracker_id_status_of_data_ds2, 686, null);

        event_id_344 = upsert_tracker_event(3760, 'M10997584', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_344, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_344, tracker_id_status_of_data_ds1, 669, null),
            (event_id_344, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_344, tracker_id_status_of_data_ds2, 686, null);

        event_id_345 = upsert_tracker_event(3760, 'M10964993', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_345, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_345, tracker_id_status_of_data_ds1, 669, null),
            (event_id_345, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_345, tracker_id_status_of_data_ds2, 686, null);

        event_id_346 = upsert_tracker_event(3760, 'M10901783', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_346, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_346, tracker_id_status_of_data_ds1, 669, null),
            (event_id_346, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_346, tracker_id_status_of_data_ds2, 686, null);

        event_id_347 = upsert_tracker_event(3760, 'M10903365', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_347, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_347, tracker_id_status_of_data_ds1, 669, null),
            (event_id_347, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_347, tracker_id_status_of_data_ds2, 686, null);

        event_id_348 = upsert_tracker_event(3760, 'M10928159', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_348, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_348, tracker_id_status_of_data_ds1, 669, null),
            (event_id_348, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_348, tracker_id_status_of_data_ds2, 686, null);

        event_id_349 = upsert_tracker_event(3760, 'M10903525', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_349, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_349, tracker_id_status_of_data_ds1, 669, null),
            (event_id_349, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_349, tracker_id_status_of_data_ds2, 686, null);

        event_id_350 = upsert_tracker_event(3760, 'M10927468', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_350, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_350, tracker_id_status_of_data_ds1, 669, null),
            (event_id_350, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_350, tracker_id_status_of_data_ds2, 686, null);

        event_id_351 = upsert_tracker_event(3760, 'M10920493', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_351, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_351, tracker_id_status_of_data_ds1, 669, null),
            (event_id_351, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_351, tracker_id_status_of_data_ds2, 686, null);

        event_id_352 = upsert_tracker_event(3760, 'M10970750', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_352, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_352, tracker_id_status_of_data_ds1, 669, null),
            (event_id_352, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_352, tracker_id_status_of_data_ds2, 686, null);

        event_id_353 = upsert_tracker_event(3760, 'M10944544', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_353, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_353, tracker_id_status_of_data_ds1, 669, null),
            (event_id_353, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_353, tracker_id_status_of_data_ds2, 686, null);

        event_id_354 = upsert_tracker_event(3760, 'M10981315', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_354, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_354, tracker_id_status_of_data_ds1, 669, null),
            (event_id_354, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_354, tracker_id_status_of_data_ds2, 686, null);

        event_id_355 = upsert_tracker_event(3760, 'M10992604', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_355, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_355, tracker_id_status_of_data_ds1, 669, null),
            (event_id_355, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_355, tracker_id_status_of_data_ds2, 686, null);

        event_id_356 = upsert_tracker_event(3760, 'M10943867', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_356, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_356, tracker_id_status_of_data_ds1, 669, null),
            (event_id_356, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_356, tracker_id_status_of_data_ds2, 686, null);

        event_id_357 = upsert_tracker_event(3760, 'M10934715', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_357, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_357, tracker_id_status_of_data_ds1, 669, null),
            (event_id_357, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_357, tracker_id_status_of_data_ds2, 686, null);

        event_id_358 = upsert_tracker_event(3760, 'M10975411', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_358, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_358, tracker_id_status_of_data_ds1, 669, null),
            (event_id_358, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_358, tracker_id_status_of_data_ds2, 686, null);

        event_id_359 = upsert_tracker_event(3760, 'M10955677', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_359, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_359, tracker_id_status_of_data_ds1, 669, null),
            (event_id_359, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_359, tracker_id_status_of_data_ds2, 686, null);

        event_id_360 = upsert_tracker_event(3760, 'M10913436', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_360, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_360, tracker_id_status_of_data_ds1, 669, null),
            (event_id_360, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_360, tracker_id_status_of_data_ds2, 686, null);

        event_id_361 = upsert_tracker_event(3760, 'M10949662', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_361, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_361, tracker_id_status_of_data_ds1, 669, null),
            (event_id_361, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_361, tracker_id_status_of_data_ds2, 686, null);

        event_id_362 = upsert_tracker_event(3760, 'M10917124', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_362, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_362, tracker_id_status_of_data_ds1, 669, null),
            (event_id_362, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_362, tracker_id_status_of_data_ds2, 686, null);

        event_id_363 = upsert_tracker_event(3760, 'M10908886', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_363, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_363, tracker_id_status_of_data_ds1, 669, null),
            (event_id_363, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_363, tracker_id_status_of_data_ds2, 686, null);

        event_id_364 = upsert_tracker_event(3760, 'M10952992', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_364, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_364, tracker_id_status_of_data_ds1, 669, null),
            (event_id_364, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_364, tracker_id_status_of_data_ds2, 686, null);

        event_id_365 = upsert_tracker_event(3760, 'M10989418', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_365, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_365, tracker_id_status_of_data_ds1, 669, null),
            (event_id_365, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_365, tracker_id_status_of_data_ds2, 686, null);

        event_id_366 = upsert_tracker_event(3760, 'M10976211', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_366, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_366, tracker_id_status_of_data_ds1, 669, null),
            (event_id_366, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_366, tracker_id_status_of_data_ds2, 686, null);

        event_id_367 = upsert_tracker_event(3760, 'M10905356', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_367, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_367, tracker_id_status_of_data_ds1, 669, null),
            (event_id_367, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_367, tracker_id_status_of_data_ds2, 686, null);

        event_id_368 = upsert_tracker_event(3760, 'M10953460', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_368, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_368, tracker_id_status_of_data_ds1, 669, null),
            (event_id_368, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_368, tracker_id_status_of_data_ds2, 686, null);

        event_id_369 = upsert_tracker_event(3760, 'M10903384', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_369, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_369, tracker_id_status_of_data_ds1, 669, null),
            (event_id_369, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_369, tracker_id_status_of_data_ds2, 686, null);

        event_id_370 = upsert_tracker_event(3760, 'M10969847', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_370, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_370, tracker_id_status_of_data_ds1, 669, null),
            (event_id_370, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_370, tracker_id_status_of_data_ds2, 686, null);

        event_id_371 = upsert_tracker_event(3760, 'M10905922', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_371, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_371, tracker_id_status_of_data_ds1, 669, null),
            (event_id_371, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_371, tracker_id_status_of_data_ds2, 686, null);

        event_id_372 = upsert_tracker_event(3760, 'M10971717', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_372, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_372, tracker_id_status_of_data_ds1, 669, null),
            (event_id_372, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_372, tracker_id_status_of_data_ds2, 686, null);

        event_id_373 = upsert_tracker_event(3760, 'M10998101', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_373, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_373, tracker_id_status_of_data_ds1, 669, null),
            (event_id_373, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_373, tracker_id_status_of_data_ds2, 686, null);

        event_id_374 = upsert_tracker_event(3760, 'M10904892', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_374, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_374, tracker_id_status_of_data_ds1, 669, null),
            (event_id_374, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_374, tracker_id_status_of_data_ds2, 686, null);

        event_id_375 = upsert_tracker_event(3760, 'M10999438', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_375, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_375, tracker_id_status_of_data_ds1, 669, null),
            (event_id_375, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_375, tracker_id_status_of_data_ds2, 686, null);

        event_id_376 = upsert_tracker_event(3760, 'M10917289', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_376, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_376, tracker_id_status_of_data_ds1, 669, null),
            (event_id_376, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_376, tracker_id_status_of_data_ds2, 686, null);

        event_id_377 = upsert_tracker_event(3760, 'M10921437', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_377, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_377, tracker_id_status_of_data_ds1, 669, null),
            (event_id_377, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_377, tracker_id_status_of_data_ds2, 686, null);

        event_id_378 = upsert_tracker_event(3760, 'M10915084', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_378, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_378, tracker_id_status_of_data_ds1, 669, null),
            (event_id_378, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_378, tracker_id_status_of_data_ds2, 686, null);

        event_id_379 = upsert_tracker_event(3760, 'M10929703', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_379, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_379, tracker_id_status_of_data_ds1, 670, null),
            (event_id_379, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_379, tracker_id_status_of_data_ds2, 687, null);

        event_id_380 = upsert_tracker_event(3760, 'M10905316', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_380, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_380, tracker_id_status_of_data_ds1, 670, null),
            (event_id_380, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_380, tracker_id_status_of_data_ds2, 687, null);

        event_id_381 = upsert_tracker_event(3760, 'M10905409', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_381, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_381, tracker_id_status_of_data_ds1, 670, null),
            (event_id_381, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_381, tracker_id_status_of_data_ds2, 687, null);

        event_id_382 = upsert_tracker_event(3760, 'M10944207', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_382, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_382, tracker_id_status_of_data_ds1, 670, null),
            (event_id_382, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_382, tracker_id_status_of_data_ds2, 687, null);

        event_id_383 = upsert_tracker_event(3760, 'M10989642', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_383, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_383, tracker_id_status_of_data_ds1, 670, null),
            (event_id_383, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_383, tracker_id_status_of_data_ds2, 687, null);

        event_id_384 = upsert_tracker_event(3760, 'M10996473', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_384, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_384, tracker_id_status_of_data_ds1, 670, null),
            (event_id_384, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_384, tracker_id_status_of_data_ds2, 687, null);

        event_id_385 = upsert_tracker_event(3760, 'M10981179', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_385, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_385, tracker_id_status_of_data_ds1, 670, null),
            (event_id_385, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_385, tracker_id_status_of_data_ds2, 687, null);

        event_id_386 = upsert_tracker_event(3760, 'M10927209', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_386, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_386, tracker_id_status_of_data_ds1, 670, null),
            (event_id_386, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_386, tracker_id_status_of_data_ds2, 687, null);

        event_id_387 = upsert_tracker_event(3760, 'M10970400', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_387, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_387, tracker_id_status_of_data_ds1, 670, null),
            (event_id_387, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_387, tracker_id_status_of_data_ds2, 687, null);

        event_id_388 = upsert_tracker_event(3760, 'M10908258', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_388, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_388, tracker_id_status_of_data_ds1, 670, null),
            (event_id_388, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_388, tracker_id_status_of_data_ds2, 687, null);

        event_id_389 = upsert_tracker_event(3760, 'M10952105', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_389, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_389, tracker_id_status_of_data_ds1, 670, null),
            (event_id_389, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_389, tracker_id_status_of_data_ds2, 687, null);

        event_id_390 = upsert_tracker_event(3760, 'M10967807', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_390, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_390, tracker_id_status_of_data_ds1, 670, null),
            (event_id_390, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_390, tracker_id_status_of_data_ds2, 687, null);

        event_id_391 = upsert_tracker_event(3760, 'M10938333', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_391, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_391, tracker_id_status_of_data_ds1, 670, null),
            (event_id_391, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_391, tracker_id_status_of_data_ds2, 687, null);

        event_id_392 = upsert_tracker_event(3760, 'M10925747', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_392, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_392, tracker_id_status_of_data_ds1, 670, null),
            (event_id_392, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_392, tracker_id_status_of_data_ds2, 687, null);

        event_id_393 = upsert_tracker_event(3760, 'M10949248', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_393, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_393, tracker_id_status_of_data_ds1, 670, null),
            (event_id_393, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_393, tracker_id_status_of_data_ds2, 687, null);

        event_id_394 = upsert_tracker_event(3760, 'M10944460', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_394, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_394, tracker_id_status_of_data_ds1, 670, null),
            (event_id_394, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_394, tracker_id_status_of_data_ds2, 687, null);

        event_id_395 = upsert_tracker_event(3760, 'M10944801', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_395, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_395, tracker_id_status_of_data_ds1, 670, null),
            (event_id_395, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_395, tracker_id_status_of_data_ds2, 687, null);

        event_id_396 = upsert_tracker_event(3760, 'M10937033', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_396, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_396, tracker_id_status_of_data_ds1, 670, null),
            (event_id_396, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_396, tracker_id_status_of_data_ds2, 687, null);

        event_id_397 = upsert_tracker_event(3760, 'M10908312', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_397, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_397, tracker_id_status_of_data_ds1, 670, null),
            (event_id_397, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_397, tracker_id_status_of_data_ds2, 687, null);

        event_id_398 = upsert_tracker_event(3760, 'M10962579', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_398, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_398, tracker_id_status_of_data_ds1, 670, null),
            (event_id_398, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_398, tracker_id_status_of_data_ds2, 687, null);

        event_id_399 = upsert_tracker_event(3760, 'M10938697', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_399, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_399, tracker_id_status_of_data_ds1, 670, null),
            (event_id_399, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_399, tracker_id_status_of_data_ds2, 687, null);

        event_id_400 = upsert_tracker_event(3760, 'M10919768', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_400, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_400, tracker_id_status_of_data_ds1, 670, null),
            (event_id_400, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_400, tracker_id_status_of_data_ds2, 687, null);

        event_id_401 = upsert_tracker_event(3760, 'M10960543', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_401, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_401, tracker_id_status_of_data_ds1, 670, null),
            (event_id_401, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_401, tracker_id_status_of_data_ds2, 687, null);

        event_id_402 = upsert_tracker_event(3760, 'M10902349', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_402, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_402, tracker_id_status_of_data_ds1, 670, null),
            (event_id_402, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_402, tracker_id_status_of_data_ds2, 687, null);

        event_id_403 = upsert_tracker_event(3760, 'M10962317', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_403, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_403, tracker_id_status_of_data_ds1, 670, null),
            (event_id_403, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_403, tracker_id_status_of_data_ds2, 687, null);

        event_id_404 = upsert_tracker_event(3760, 'M10936306', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_404, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_404, tracker_id_status_of_data_ds1, 670, null),
            (event_id_404, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_404, tracker_id_status_of_data_ds2, 687, null);

        event_id_405 = upsert_tracker_event(3760, 'M10967476', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_405, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_405, tracker_id_status_of_data_ds1, 670, null),
            (event_id_405, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_405, tracker_id_status_of_data_ds2, 687, null);

        event_id_406 = upsert_tracker_event(3760, 'M10963768', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_406, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_406, tracker_id_status_of_data_ds1, 670, null),
            (event_id_406, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_406, tracker_id_status_of_data_ds2, 687, null);

        event_id_407 = upsert_tracker_event(3760, 'M10914326', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_407, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_407, tracker_id_status_of_data_ds1, 670, null),
            (event_id_407, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_407, tracker_id_status_of_data_ds2, 687, null);

        event_id_408 = upsert_tracker_event(3760, 'M10994049', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_408, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_408, tracker_id_status_of_data_ds1, 670, null),
            (event_id_408, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_408, tracker_id_status_of_data_ds2, 687, null);

        event_id_409 = upsert_tracker_event(3760, 'M10993115', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_409, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_409, tracker_id_status_of_data_ds1, 670, null),
            (event_id_409, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_409, tracker_id_status_of_data_ds2, 687, null);

        event_id_410 = upsert_tracker_event(3760, 'M10987724', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_410, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_410, tracker_id_status_of_data_ds1, 670, null),
            (event_id_410, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_410, tracker_id_status_of_data_ds2, 687, null);

        event_id_411 = upsert_tracker_event(3760, 'M10939874', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_411, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_411, tracker_id_status_of_data_ds1, 670, null),
            (event_id_411, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_411, tracker_id_status_of_data_ds2, 687, null);

        event_id_412 = upsert_tracker_event(3760, 'M10926996', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_412, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_412, tracker_id_status_of_data_ds1, 670, null),
            (event_id_412, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_412, tracker_id_status_of_data_ds2, 687, null);

        event_id_413 = upsert_tracker_event(3760, 'M10998320', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_413, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_413, tracker_id_status_of_data_ds1, 670, null),
            (event_id_413, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_413, tracker_id_status_of_data_ds2, 687, null);

        event_id_414 = upsert_tracker_event(3760, 'M10932177', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_414, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_414, tracker_id_status_of_data_ds1, 670, null),
            (event_id_414, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_414, tracker_id_status_of_data_ds2, 687, null);

        event_id_415 = upsert_tracker_event(3760, 'M10940794', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_415, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_415, tracker_id_status_of_data_ds1, 670, null),
            (event_id_415, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_415, tracker_id_status_of_data_ds2, 687, null);

        event_id_416 = upsert_tracker_event(3760, 'M10918629', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_416, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_416, tracker_id_status_of_data_ds1, 670, null),
            (event_id_416, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_416, tracker_id_status_of_data_ds2, 687, null);

        event_id_417 = upsert_tracker_event(3760, 'M10928312', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_417, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_417, tracker_id_status_of_data_ds1, 670, null),
            (event_id_417, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_417, tracker_id_status_of_data_ds2, 687, null);

        event_id_418 = upsert_tracker_event(3760, 'M10982324', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_418, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_418, tracker_id_status_of_data_ds1, 670, null),
            (event_id_418, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_418, tracker_id_status_of_data_ds2, 687, null);

        event_id_419 = upsert_tracker_event(3760, 'M10959209', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_419, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_419, tracker_id_status_of_data_ds1, 670, null),
            (event_id_419, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_419, tracker_id_status_of_data_ds2, 687, null);

        event_id_420 = upsert_tracker_event(3760, 'M10917893', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_420, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_420, tracker_id_status_of_data_ds1, 670, null),
            (event_id_420, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_420, tracker_id_status_of_data_ds2, 687, null);

        event_id_421 = upsert_tracker_event(3760, 'M10988324', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_421, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_421, tracker_id_status_of_data_ds1, 670, null),
            (event_id_421, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_421, tracker_id_status_of_data_ds2, 687, null);

        event_id_422 = upsert_tracker_event(3760, 'M10906760', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_422, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_422, tracker_id_status_of_data_ds1, 670, null),
            (event_id_422, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_422, tracker_id_status_of_data_ds2, 687, null);

        event_id_423 = upsert_tracker_event(3760, 'M10910922', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_423, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_423, tracker_id_status_of_data_ds1, 670, null),
            (event_id_423, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_423, tracker_id_status_of_data_ds2, 687, null);

        event_id_424 = upsert_tracker_event(3760, 'M10968528', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_424, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_424, tracker_id_status_of_data_ds1, 670, null),
            (event_id_424, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_424, tracker_id_status_of_data_ds2, 687, null);

        event_id_425 = upsert_tracker_event(3760, 'M10992869', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_425, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_425, tracker_id_status_of_data_ds1, 670, null),
            (event_id_425, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_425, tracker_id_status_of_data_ds2, 687, null);

        event_id_426 = upsert_tracker_event(3760, 'M10999469', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_426, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_426, tracker_id_status_of_data_ds1, 670, null),
            (event_id_426, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_426, tracker_id_status_of_data_ds2, 687, null);

        event_id_427 = upsert_tracker_event(3760, 'M10925909', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_427, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_427, tracker_id_status_of_data_ds1, 670, null),
            (event_id_427, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_427, tracker_id_status_at_the_end_of_ds2_notes, null, 'MRI contraindication'),
            (event_id_427, tracker_id_status_of_data_ds2, 687, null);

        event_id_428 = upsert_tracker_event(3760, 'M10911168', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_428, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_428, tracker_id_status_of_data_ds1, 670, null),
            (event_id_428, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_428, tracker_id_status_of_data_ds2, 687, null);

        event_id_429 = upsert_tracker_event(3760, 'M10903270', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_429, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_429, tracker_id_status_of_data_ds1, 670, null),
            (event_id_429, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_429, tracker_id_status_of_data_ds2, 687, null);

        event_id_430 = upsert_tracker_event(3760, 'M10930716', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_430, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_430, tracker_id_status_of_data_ds1, 670, null),
            (event_id_430, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_430, tracker_id_status_of_data_ds2, 687, null);

        event_id_431 = upsert_tracker_event(3760, 'M10923711', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_431, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_431, tracker_id_status_of_data_ds1, 670, null),
            (event_id_431, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_431, tracker_id_status_of_data_ds2, 687, null);

        event_id_432 = upsert_tracker_event(3760, 'M10971044', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_432, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_432, tracker_id_status_of_data_ds1, 670, null),
            (event_id_432, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_432, tracker_id_status_of_data_ds2, 687, null);

        event_id_433 = upsert_tracker_event(3760, 'M10904642', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_433, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_433, tracker_id_status_of_data_ds1, 670, null),
            (event_id_433, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_433, tracker_id_status_of_data_ds2, 687, null);

        event_id_434 = upsert_tracker_event(3760, 'M10964979', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_434, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_434, tracker_id_status_of_data_ds1, 670, null),
            (event_id_434, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_434, tracker_id_status_of_data_ds2, 687, null);

        event_id_435 = upsert_tracker_event(3760, 'M10995873', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_435, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_435, tracker_id_status_of_data_ds1, 670, null),
            (event_id_435, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_435, tracker_id_status_of_data_ds2, 687, null);

        event_id_436 = upsert_tracker_event(3760, 'M10923245', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_436, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_436, tracker_id_status_of_data_ds1, 670, null),
            (event_id_436, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_436, tracker_id_status_of_data_ds2, 687, null);

        event_id_437 = upsert_tracker_event(3760, 'M10949254', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_437, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_437, tracker_id_status_of_data_ds1, 670, null),
            (event_id_437, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_437, tracker_id_status_of_data_ds2, 687, null);

        event_id_438 = upsert_tracker_event(3760, 'M10906639', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_438, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_438, tracker_id_status_of_data_ds1, 670, null),
            (event_id_438, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_438, tracker_id_status_of_data_ds2, 687, null);

        event_id_439 = upsert_tracker_event(3760, 'M10971678', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_439, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_439, tracker_id_status_of_data_ds1, 670, null),
            (event_id_439, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_439, tracker_id_status_of_data_ds2, 687, null);

        event_id_440 = upsert_tracker_event(3760, 'M10914688', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_440, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_440, tracker_id_status_of_data_ds1, 670, null),
            (event_id_440, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_440, tracker_id_status_of_data_ds2, 687, null);

        event_id_441 = upsert_tracker_event(3760, 'M10910591', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_441, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_441, tracker_id_status_of_data_ds1, 670, null),
            (event_id_441, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_441, tracker_id_status_of_data_ds2, 687, null);

        event_id_442 = upsert_tracker_event(3760, 'M10908040', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_442, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_442, tracker_id_status_of_data_ds1, 670, null),
            (event_id_442, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_442, tracker_id_status_of_data_ds2, 687, null);

        event_id_443 = upsert_tracker_event(3760, 'M10988762', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_443, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_443, tracker_id_status_of_data_ds1, 670, null),
            (event_id_443, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_443, tracker_id_status_of_data_ds2, 687, null);

        event_id_444 = upsert_tracker_event(3760, 'M10961348', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_444, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_444, tracker_id_status_of_data_ds1, 670, null),
            (event_id_444, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_444, tracker_id_status_of_data_ds2, 687, null);

        event_id_445 = upsert_tracker_event(3760, 'M10903850', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_445, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_445, tracker_id_status_of_data_ds1, 670, null),
            (event_id_445, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_445, tracker_id_status_of_data_ds2, 687, null);

        event_id_446 = upsert_tracker_event(3760, 'M10919947', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_446, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_446, tracker_id_status_of_data_ds1, 670, null),
            (event_id_446, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_446, tracker_id_status_of_data_ds2, 687, null);

        event_id_447 = upsert_tracker_event(3760, 'M10952366', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_447, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_447, tracker_id_status_of_data_ds1, 670, null),
            (event_id_447, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_447, tracker_id_status_of_data_ds2, 687, null);

        event_id_448 = upsert_tracker_event(3760, 'M10920659', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_448, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_448, tracker_id_status_of_data_ds1, 670, null),
            (event_id_448, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_448, tracker_id_status_of_data_ds2, 687, null);

        event_id_449 = upsert_tracker_event(3760, 'M10900534', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_449, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_449, tracker_id_status_of_data_ds1, 670, null),
            (event_id_449, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_449, tracker_id_status_of_data_ds2, 687, null);

        event_id_450 = upsert_tracker_event(3760, 'M10982386', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_450, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_450, tracker_id_status_of_data_ds1, 670, null),
            (event_id_450, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_450, tracker_id_status_of_data_ds2, 687, null);

        event_id_451 = upsert_tracker_event(3760, 'M10992340', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_451, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_451, tracker_id_status_of_data_ds1, 670, null),
            (event_id_451, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_451, tracker_id_status_of_data_ds2, 687, null);

        event_id_452 = upsert_tracker_event(3760, 'M10973814', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_452, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_452, tracker_id_status_of_data_ds1, 670, null),
            (event_id_452, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_452, tracker_id_status_of_data_ds2, 687, null);

        event_id_453 = upsert_tracker_event(3760, 'M10936019', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_453, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_453, tracker_id_status_of_data_ds1, 670, null),
            (event_id_453, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_453, tracker_id_status_of_data_ds2, 687, null);

        event_id_454 = upsert_tracker_event(3760, 'M10945213', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_454, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_454, tracker_id_status_of_data_ds1, 670, null),
            (event_id_454, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_454, tracker_id_status_of_data_ds2, 687, null);

        event_id_455 = upsert_tracker_event(3760, 'M10949447', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_455, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_455, tracker_id_status_of_data_ds1, 670, null),
            (event_id_455, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_455, tracker_id_status_of_data_ds2, 687, null);

        event_id_456 = upsert_tracker_event(3760, 'M10984083', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_456, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_456, tracker_id_status_of_data_ds1, 670, null),
            (event_id_456, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_456, tracker_id_status_of_data_ds2, 687, null);

        event_id_457 = upsert_tracker_event(3760, 'M10985923', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_457, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_457, tracker_id_status_of_data_ds1, 670, null),
            (event_id_457, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_457, tracker_id_status_of_data_ds2, 687, null);

        event_id_458 = upsert_tracker_event(3760, 'M10929973', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_458, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_458, tracker_id_status_of_data_ds1, 670, null),
            (event_id_458, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_458, tracker_id_status_of_data_ds2, 687, null);

        event_id_459 = upsert_tracker_event(3760, 'M10997698', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_459, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_459, tracker_id_status_of_data_ds1, 670, null),
            (event_id_459, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_459, tracker_id_status_of_data_ds2, 687, null);

        event_id_460 = upsert_tracker_event(3760, 'M10959461', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_460, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_460, tracker_id_status_of_data_ds1, 670, null),
            (event_id_460, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_460, tracker_id_status_of_data_ds2, 687, null);

        event_id_461 = upsert_tracker_event(3760, 'M10937131', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_461, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_461, tracker_id_status_of_data_ds1, 670, null),
            (event_id_461, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_461, tracker_id_status_of_data_ds2, 687, null);

        event_id_462 = upsert_tracker_event(3760, 'M10981792', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_462, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_462, tracker_id_status_of_data_ds1, 670, null),
            (event_id_462, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_462, tracker_id_status_of_data_ds2, 687, null);

        event_id_463 = upsert_tracker_event(3760, 'M10932848', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_463, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_463, tracker_id_status_of_data_ds1, 670, null),
            (event_id_463, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_463, tracker_id_status_of_data_ds2, 687, null);

        event_id_464 = upsert_tracker_event(3760, 'M10916094', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_464, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_464, tracker_id_status_of_data_ds1, 670, null),
            (event_id_464, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_464, tracker_id_status_of_data_ds2, 687, null);

        event_id_465 = upsert_tracker_event(3760, 'M10926807', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_465, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_465, tracker_id_status_of_data_ds1, 670, null),
            (event_id_465, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_465, tracker_id_status_of_data_ds2, 687, null);

        event_id_466 = upsert_tracker_event(3760, 'M10997236', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_466, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_466, tracker_id_status_of_data_ds1, 670, null),
            (event_id_466, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_466, tracker_id_status_of_data_ds2, 687, null);

        event_id_467 = upsert_tracker_event(3760, 'M10945048', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_467, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_467, tracker_id_status_of_data_ds1, 670, null),
            (event_id_467, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_467, tracker_id_status_of_data_ds2, 687, null);

        event_id_468 = upsert_tracker_event(3760, 'M10972267', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_468, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_468, tracker_id_status_of_data_ds1, 670, null),
            (event_id_468, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_468, tracker_id_status_of_data_ds2, 687, null);

        event_id_469 = upsert_tracker_event(3760, 'M10975019', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_469, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_469, tracker_id_status_of_data_ds1, 670, null),
            (event_id_469, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_469, tracker_id_status_of_data_ds2, 687, null);

        event_id_470 = upsert_tracker_event(3760, 'M10946688', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_470, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_470, tracker_id_status_of_data_ds1, 670, null),
            (event_id_470, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_470, tracker_id_status_of_data_ds2, 687, null);

        event_id_471 = upsert_tracker_event(3760, 'M10912586', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_471, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_471, tracker_id_status_of_data_ds1, 670, null),
            (event_id_471, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_471, tracker_id_status_of_data_ds2, 687, null);

        event_id_472 = upsert_tracker_event(3760, 'M10992817', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_472, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_472, tracker_id_status_of_data_ds1, 670, null),
            (event_id_472, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_472, tracker_id_status_of_data_ds2, 687, null);

        event_id_473 = upsert_tracker_event(3760, 'M10976213', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_473, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_473, tracker_id_status_of_data_ds1, 670, null),
            (event_id_473, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_473, tracker_id_status_of_data_ds2, 687, null);

        event_id_474 = upsert_tracker_event(3760, 'M10902826', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_474, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_474, tracker_id_status_of_data_ds1, 670, null),
            (event_id_474, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_474, tracker_id_status_of_data_ds2, 687, null);

        event_id_475 = upsert_tracker_event(3760, 'M10943434', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_475, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_475, tracker_id_status_of_data_ds1, 670, null),
            (event_id_475, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_475, tracker_id_status_of_data_ds2, 687, null);

        event_id_476 = upsert_tracker_event(3760, 'M10933962', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_476, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_476, tracker_id_status_of_data_ds1, 670, null),
            (event_id_476, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_476, tracker_id_status_of_data_ds2, 687, null);

        event_id_477 = upsert_tracker_event(3760, 'M10939978', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_477, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_477, tracker_id_status_of_data_ds1, 670, null),
            (event_id_477, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_477, tracker_id_status_of_data_ds2, 687, null);

        event_id_478 = upsert_tracker_event(3760, 'M10926720', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_478, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_478, tracker_id_status_of_data_ds1, 670, null),
            (event_id_478, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_478, tracker_id_status_of_data_ds2, 687, null);

        event_id_479 = upsert_tracker_event(3760, 'M10957908', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_479, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_479, tracker_id_status_of_data_ds1, 670, null),
            (event_id_479, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_479, tracker_id_status_of_data_ds2, 687, null);

        event_id_480 = upsert_tracker_event(3760, 'M10917604', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_480, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_480, tracker_id_status_of_data_ds1, 670, null),
            (event_id_480, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_480, tracker_id_status_of_data_ds2, 687, null);

        event_id_481 = upsert_tracker_event(3760, 'M10988757', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_481, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_481, tracker_id_status_of_data_ds1, 671, null),
            (event_id_481, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_481, tracker_id_status_of_data_ds2, 688, null);

        event_id_482 = upsert_tracker_event(3760, 'M10924859', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_482, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_482, tracker_id_status_of_data_ds1, 671, null),
            (event_id_482, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_482, tracker_id_status_of_data_ds2, 688, null);

        event_id_483 = upsert_tracker_event(3760, 'M10947470', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_483, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_483, tracker_id_status_of_data_ds1, 671, null),
            (event_id_483, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_483, tracker_id_status_of_data_ds2, 688, null);

        event_id_484 = upsert_tracker_event(3760, 'M10995916', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_484, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_484, tracker_id_status_of_data_ds1, 671, null),
            (event_id_484, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_484, tracker_id_status_of_data_ds2, 688, null);

        event_id_485 = upsert_tracker_event(3760, 'M10923884', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_485, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_485, tracker_id_status_of_data_ds1, 671, null),
            (event_id_485, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_485, tracker_id_status_of_data_ds2, 688, null);

        event_id_486 = upsert_tracker_event(3760, 'M10918931', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_486, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_486, tracker_id_status_of_data_ds1, 671, null),
            (event_id_486, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_486, tracker_id_status_of_data_ds2, 688, null);

        event_id_487 = upsert_tracker_event(3760, 'M10908233', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_487, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_487, tracker_id_status_of_data_ds1, 671, null),
            (event_id_487, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_487, tracker_id_status_of_data_ds2, 688, null);

        event_id_488 = upsert_tracker_event(3760, 'M10905666', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_488, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_488, tracker_id_status_of_data_ds1, 671, null),
            (event_id_488, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_488, tracker_id_status_of_data_ds2, 688, null);

        event_id_489 = upsert_tracker_event(3760, 'M10989588', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_489, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_489, tracker_id_status_of_data_ds1, 671, null),
            (event_id_489, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_489, tracker_id_status_of_data_ds2, 688, null);

        event_id_490 = upsert_tracker_event(3760, 'M10963242', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_490, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_490, tracker_id_status_of_data_ds1, 671, null),
            (event_id_490, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_490, tracker_id_status_of_data_ds2, 688, null);

        event_id_491 = upsert_tracker_event(3760, 'M10978150', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_491, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_491, tracker_id_status_of_data_ds1, 671, null),
            (event_id_491, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_491, tracker_id_status_of_data_ds2, 688, null);

        event_id_492 = upsert_tracker_event(3760, 'M10944885', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_492, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_492, tracker_id_status_of_data_ds1, 671, null),
            (event_id_492, tracker_id_status_at_the_end_of_ds2, 678, null),
            (event_id_492, tracker_id_status_of_data_ds2, 688, null);

        event_id_493 = upsert_tracker_event(3760, 'M10992423', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_493, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_493, tracker_id_status_of_data_ds1, 671, null),
            (event_id_493, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_493, tracker_id_status_of_data_ds2, 688, null);

        event_id_494 = upsert_tracker_event(3760, 'M10948663', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_494, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_494, tracker_id_status_of_data_ds1, 671, null),
            (event_id_494, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_494, tracker_id_status_of_data_ds2, 688, null);

        event_id_495 = upsert_tracker_event(3760, 'M10917524', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_495, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_495, tracker_id_status_of_data_ds1, 671, null),
            (event_id_495, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_495, tracker_id_status_of_data_ds2, 688, null);

        event_id_496 = upsert_tracker_event(3760, 'M10919490', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_496, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_496, tracker_id_status_of_data_ds1, 671, null),
            (event_id_496, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_496, tracker_id_status_of_data_ds2, 688, null);

        event_id_497 = upsert_tracker_event(3760, 'M10947251', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_497, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_497, tracker_id_status_of_data_ds1, 671, null),
            (event_id_497, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_497, tracker_id_status_of_data_ds2, 688, null);

        event_id_498 = upsert_tracker_event(3760, 'M10999556', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_498, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_498, tracker_id_status_of_data_ds1, 671, null),
            (event_id_498, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_498, tracker_id_status_of_data_ds2, 688, null);

        event_id_499 = upsert_tracker_event(3760, 'M10971539', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_499, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_499, tracker_id_status_of_data_ds1, 671, null),
            (event_id_499, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_499, tracker_id_status_of_data_ds2, 688, null);

        event_id_500 = upsert_tracker_event(3760, 'M10908015', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_500, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_500, tracker_id_status_of_data_ds1, 671, null),
            (event_id_500, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_500, tracker_id_status_of_data_ds2, 688, null);

        event_id_501 = upsert_tracker_event(3760, 'M10933164', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_501, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_501, tracker_id_status_of_data_ds1, 671, null),
            (event_id_501, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_501, tracker_id_status_of_data_ds2, 688, null);

        event_id_502 = upsert_tracker_event(3760, 'M10971450', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_502, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_502, tracker_id_status_of_data_ds1, 671, null),
            (event_id_502, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_502, tracker_id_status_of_data_ds2, 688, null);

        event_id_503 = upsert_tracker_event(3760, 'M10943252', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_503, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_503, tracker_id_status_of_data_ds1, 671, null),
            (event_id_503, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_503, tracker_id_status_of_data_ds2, 688, null);

        event_id_504 = upsert_tracker_event(3760, 'M10912497', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_504, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_504, tracker_id_status_of_data_ds1, 671, null),
            (event_id_504, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_504, tracker_id_status_of_data_ds2, 688, null);

        event_id_505 = upsert_tracker_event(3760, 'M10941769', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_505, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_505, tracker_id_status_of_data_ds1, 671, null),
            (event_id_505, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_505, tracker_id_status_of_data_ds2, 688, null);

        event_id_506 = upsert_tracker_event(3760, 'M10950576', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_506, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_506, tracker_id_status_of_data_ds1, 671, null),
            (event_id_506, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_506, tracker_id_status_of_data_ds2, 688, null);

        event_id_507 = upsert_tracker_event(3760, 'M10904097', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_507, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_507, tracker_id_status_of_data_ds1, 671, null),
            (event_id_507, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_507, tracker_id_status_of_data_ds2, 688, null);

        event_id_508 = upsert_tracker_event(3760, 'M10911729', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_508, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_508, tracker_id_status_of_data_ds1, 671, null),
            (event_id_508, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_508, tracker_id_status_of_data_ds2, 688, null);

        event_id_509 = upsert_tracker_event(3760, 'M10965872', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_509, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_509, tracker_id_status_of_data_ds1, 671, null),
            (event_id_509, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_509, tracker_id_status_of_data_ds2, 688, null);

        event_id_510 = upsert_tracker_event(3760, 'M10915382', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_510, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_510, tracker_id_status_of_data_ds1, 671, null),
            (event_id_510, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_510, tracker_id_status_of_data_ds2, 688, null);

        event_id_511 = upsert_tracker_event(3760, 'M10928623', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_511, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_511, tracker_id_status_of_data_ds1, 671, null),
            (event_id_511, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_511, tracker_id_status_of_data_ds2, 688, null);

        event_id_512 = upsert_tracker_event(3760, 'M10909091', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_512, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_512, tracker_id_status_of_data_ds1, 671, null),
            (event_id_512, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_512, tracker_id_status_of_data_ds2, 688, null);

        event_id_513 = upsert_tracker_event(3760, 'M10967844', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_513, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_513, tracker_id_status_of_data_ds1, 671, null),
            (event_id_513, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_513, tracker_id_status_of_data_ds2, 688, null);

        event_id_514 = upsert_tracker_event(3760, 'M10972751', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_514, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_514, tracker_id_status_of_data_ds1, 671, null),
            (event_id_514, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_514, tracker_id_status_of_data_ds2, 688, null);

        event_id_515 = upsert_tracker_event(3760, 'M10939258', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_515, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_515, tracker_id_status_of_data_ds1, 671, null),
            (event_id_515, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_515, tracker_id_status_of_data_ds2, 688, null);

        event_id_516 = upsert_tracker_event(3760, 'M10954899', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_516, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_516, tracker_id_status_of_data_ds1, 671, null),
            (event_id_516, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_516, tracker_id_status_of_data_ds2, 688, null);

        event_id_517 = upsert_tracker_event(3760, 'M10968123', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_517, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_517, tracker_id_status_of_data_ds1, 671, null),
            (event_id_517, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_517, tracker_id_status_of_data_ds2, 688, null);

        event_id_518 = upsert_tracker_event(3760, 'M10951930', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_518, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_518, tracker_id_status_of_data_ds1, 671, null),
            (event_id_518, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_518, tracker_id_status_of_data_ds2, 688, null);

        event_id_519 = upsert_tracker_event(3760, 'M10971623', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_519, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_519, tracker_id_status_of_data_ds1, 671, null),
            (event_id_519, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_519, tracker_id_status_of_data_ds2, 688, null);

        event_id_520 = upsert_tracker_event(3760, 'M10997625', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_520, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_520, tracker_id_status_of_data_ds1, 671, null),
            (event_id_520, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_520, tracker_id_status_of_data_ds2, 688, null);

        event_id_521 = upsert_tracker_event(3760, 'M10978179', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_521, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_521, tracker_id_status_of_data_ds1, 671, null),
            (event_id_521, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_521, tracker_id_status_of_data_ds2, 688, null);

        event_id_522 = upsert_tracker_event(3760, 'M10919493', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_522, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_522, tracker_id_status_of_data_ds1, 671, null),
            (event_id_522, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_522, tracker_id_status_of_data_ds2, 688, null);

        event_id_523 = upsert_tracker_event(3760, 'M10958639', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_523, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_523, tracker_id_status_of_data_ds1, 671, null),
            (event_id_523, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_523, tracker_id_status_of_data_ds2, 688, null);

        event_id_524 = upsert_tracker_event(3760, 'M10961308', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_524, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_524, tracker_id_status_of_data_ds1, 671, null),
            (event_id_524, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_524, tracker_id_status_of_data_ds2, 688, null);

        event_id_525 = upsert_tracker_event(3760, 'M10942913', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_525, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_525, tracker_id_status_of_data_ds1, 671, null),
            (event_id_525, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_525, tracker_id_status_of_data_ds2, 688, null);

        event_id_526 = upsert_tracker_event(3760, 'M10975908', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_526, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_526, tracker_id_status_of_data_ds1, 671, null),
            (event_id_526, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_526, tracker_id_status_of_data_ds2, 688, null);

        event_id_527 = upsert_tracker_event(3760, 'M10979299', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_527, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_527, tracker_id_status_of_data_ds1, 671, null),
            (event_id_527, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_527, tracker_id_status_of_data_ds2, 688, null);

        event_id_528 = upsert_tracker_event(3760, 'M10927807', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_528, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_528, tracker_id_status_of_data_ds1, 671, null),
            (event_id_528, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_528, tracker_id_status_of_data_ds2, 688, null);

        event_id_529 = upsert_tracker_event(3760, 'M10925951', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_529, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_529, tracker_id_status_of_data_ds1, 671, null),
            (event_id_529, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_529, tracker_id_status_of_data_ds2, 688, null);

        event_id_530 = upsert_tracker_event(3760, 'M10940218', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_530, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_530, tracker_id_status_of_data_ds1, 671, null),
            (event_id_530, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_530, tracker_id_status_of_data_ds2, 688, null);

        event_id_531 = upsert_tracker_event(3760, 'M10933383', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_531, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_531, tracker_id_status_of_data_ds1, 671, null),
            (event_id_531, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_531, tracker_id_status_of_data_ds2, 688, null);

        event_id_532 = upsert_tracker_event(3760, 'M10909210', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_532, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_532, tracker_id_status_of_data_ds1, 671, null),
            (event_id_532, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_532, tracker_id_status_of_data_ds2, 688, null);

        event_id_533 = upsert_tracker_event(3760, 'M10974422', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_533, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_533, tracker_id_status_of_data_ds1, 671, null),
            (event_id_533, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_533, tracker_id_status_of_data_ds2, 688, null);

        event_id_534 = upsert_tracker_event(3760, 'M10999168', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_534, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_534, tracker_id_status_of_data_ds1, 671, null),
            (event_id_534, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_534, tracker_id_status_of_data_ds2, 688, null);

        event_id_535 = upsert_tracker_event(3760, 'M10966058', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_535, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_535, tracker_id_status_of_data_ds1, 671, null),
            (event_id_535, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_535, tracker_id_status_of_data_ds2, 688, null);

        event_id_536 = upsert_tracker_event(3760, 'M10984892', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_536, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_536, tracker_id_status_of_data_ds1, 671, null),
            (event_id_536, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_536, tracker_id_status_of_data_ds2, 688, null);

        event_id_537 = upsert_tracker_event(3760, 'M10999973', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_537, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_537, tracker_id_status_of_data_ds1, 671, null),
            (event_id_537, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_537, tracker_id_status_of_data_ds2, 688, null);

        event_id_538 = upsert_tracker_event(3760, 'M10948507', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_538, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_538, tracker_id_status_of_data_ds1, 671, null),
            (event_id_538, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_538, tracker_id_status_of_data_ds2, 688, null);

        event_id_539 = upsert_tracker_event(3760, 'M10929164', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_539, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_539, tracker_id_status_of_data_ds1, 671, null),
            (event_id_539, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_539, tracker_id_status_of_data_ds2, 688, null);

        event_id_540 = upsert_tracker_event(3760, 'M10931464', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_540, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_540, tracker_id_status_of_data_ds1, 671, null),
            (event_id_540, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_540, tracker_id_status_of_data_ds2, 688, null);

        event_id_541 = upsert_tracker_event(3760, 'M10974997', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_541, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_541, tracker_id_status_of_data_ds1, 671, null),
            (event_id_541, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_541, tracker_id_status_of_data_ds2, 688, null);

        event_id_542 = upsert_tracker_event(3760, 'M10975938', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_542, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_542, tracker_id_status_of_data_ds1, 671, null),
            (event_id_542, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_542, tracker_id_status_of_data_ds2, 688, null);

        event_id_543 = upsert_tracker_event(3760, 'M10950342', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_543, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_543, tracker_id_status_of_data_ds1, 671, null),
            (event_id_543, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_543, tracker_id_status_of_data_ds2, 688, null);

        event_id_544 = upsert_tracker_event(3760, 'M10979065', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_544, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_544, tracker_id_status_of_data_ds1, 671, null),
            (event_id_544, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_544, tracker_id_status_of_data_ds2, 688, null);

        event_id_545 = upsert_tracker_event(3760, 'M10926278', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_545, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_545, tracker_id_status_of_data_ds1, 671, null),
            (event_id_545, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_545, tracker_id_status_of_data_ds2, 688, null);

        event_id_546 = upsert_tracker_event(3760, 'M10983545', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_546, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_546, tracker_id_status_of_data_ds1, 671, null),
            (event_id_546, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_546, tracker_id_status_of_data_ds2, 688, null);

        event_id_547 = upsert_tracker_event(3760, 'M10985013', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_547, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_547, tracker_id_status_of_data_ds1, 671, null),
            (event_id_547, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_547, tracker_id_status_of_data_ds2, 688, null);

        event_id_548 = upsert_tracker_event(3760, 'M10960880', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_548, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_548, tracker_id_status_of_data_ds1, 671, null),
            (event_id_548, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_548, tracker_id_status_of_data_ds2, 688, null);

        event_id_549 = upsert_tracker_event(3760, 'M10925715', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_549, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_549, tracker_id_status_of_data_ds1, 671, null),
            (event_id_549, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_549, tracker_id_status_of_data_ds2, 688, null);

        event_id_550 = upsert_tracker_event(3760, 'M10959552', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_550, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_550, tracker_id_status_of_data_ds1, 671, null),
            (event_id_550, tracker_id_status_at_the_end_of_ds2, 677, null),
            (event_id_550, tracker_id_status_of_data_ds2, 688, null);

        event_id_551 = upsert_tracker_event(3760, 'M10918733', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_551, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_551, tracker_id_status_of_data_ds1, 671, null),
            (event_id_551, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_551, tracker_id_status_of_data_ds2, 688, null);

        event_id_552 = upsert_tracker_event(3760, 'M10924433', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_552, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_552, tracker_id_status_of_data_ds1, 671, null),
            (event_id_552, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_552, tracker_id_status_of_data_ds2, 688, null);

        event_id_553 = upsert_tracker_event(3760, 'M10925786', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_553, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_553, tracker_id_status_of_data_ds1, 671, null),
            (event_id_553, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_553, tracker_id_status_of_data_ds2, 688, null);

        event_id_554 = upsert_tracker_event(3760, 'M10982144', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_554, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_554, tracker_id_status_of_data_ds1, 671, null),
            (event_id_554, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_554, tracker_id_status_of_data_ds2, 688, null);

        event_id_555 = upsert_tracker_event(3760, 'M10911496', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_555, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_555, tracker_id_status_at_the_end_of_ds1_notes, null, 'child also in study'),
            (event_id_555, tracker_id_status_of_data_ds1, 674, null),
            (event_id_555, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_555, tracker_id_status_of_data_ds2, 691, null);

        event_id_556 = upsert_tracker_event(3760, 'M10954106', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_556, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_556, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion'),
            (event_id_556, tracker_id_status_of_data_ds1, 674, null),
            (event_id_556, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_556, tracker_id_status_at_the_end_of_ds2_notes, null, 'completed visit, but should not be released'),
            (event_id_556, tracker_id_status_of_data_ds2, 691, null);

        event_id_557 = upsert_tracker_event(3760, 'M10918051', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_557, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_558 = upsert_tracker_event(3760, 'M10925015', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_558, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_558, tracker_id_status_of_data_ds1, 670, null);

        event_id_559 = upsert_tracker_event(3760, 'M10910902', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_559, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_559, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_560 = upsert_tracker_event(3760, 'M10916115', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_560, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_560, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_561 = upsert_tracker_event(3760, 'M10996257', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_561, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_562 = upsert_tracker_event(3760, 'M10955671', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_562, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_562, tracker_id_status_at_the_end_of_ds1_notes, null, 'poor data quality'),
            (event_id_562, tracker_id_status_at_the_end_of_ds2, 679, null);

        event_id_563 = upsert_tracker_event(3760, 'M10939071', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_563, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_564 = upsert_tracker_event(3760, 'M10995976', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_564, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_564, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_565 = upsert_tracker_event(3760, 'M10949597', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_565, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_565, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_566 = upsert_tracker_event(3760, 'M10930281', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_566, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_567 = upsert_tracker_event(3760, 'M10984335', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_567, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_567, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_568 = upsert_tracker_event(3760, 'M10977059', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_568, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_568, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_569 = upsert_tracker_event(3760, 'M10947790', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_569, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_569, tracker_id_status_at_the_end_of_ds1_notes, null, 'MRI contraindication');

        event_id_570 = upsert_tracker_event(3760, 'M10909319', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_570, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_571 = upsert_tracker_event(3760, 'M10952792', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_571, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_572 = upsert_tracker_event(3760, 'M10965311', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_572, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_572, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_573 = upsert_tracker_event(3760, 'M10962932', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_573, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_573, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_574 = upsert_tracker_event(3760, 'M10989521', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_574, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_574, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_575 = upsert_tracker_event(3760, 'M10992743', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_575, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_575, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_576 = upsert_tracker_event(3760, 'M10901668', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_576, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_576, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_577 = upsert_tracker_event(3760, 'M10919591', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_577, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_577, tracker_id_status_at_the_end_of_ds2, 676, null);

        event_id_578 = upsert_tracker_event(3760, 'M10977291', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_578, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_579 = upsert_tracker_event(3760, 'M10910482', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_579, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_579, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_579, tracker_id_status_at_the_end_of_ds2_notes, null, 'No V2');

        event_id_580 = upsert_tracker_event(3760, 'M10941480', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_580, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_581 = upsert_tracker_event(3760, 'M10941099', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_581, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_581, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_581, tracker_id_status_at_the_end_of_ds2_notes, null, 'mri contradindication');

        event_id_582 = upsert_tracker_event(3760, 'M10923408', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_582, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_583 = upsert_tracker_event(3760, 'M10964673', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_583, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_583, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_584 = upsert_tracker_event(3760, 'M10919153', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_584, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_584, tracker_id_status_at_the_end_of_ds2, 676, null);

        event_id_585 = upsert_tracker_event(3760, 'M10901899', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_585, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_585, tracker_id_status_at_the_end_of_ds1_notes, null, 'withdrew from study');

        event_id_586 = upsert_tracker_event(3760, 'M10962226', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_586, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_586, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_586, tracker_id_status_at_the_end_of_ds2_notes, null, 'No V2');

        event_id_587 = upsert_tracker_event(3760, 'M10982680', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_587, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_587, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_587, tracker_id_status_at_the_end_of_ds2_notes, null, 'No V2');

        event_id_588 = upsert_tracker_event(3760, 'M10906712', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_588, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_588, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_589 = upsert_tracker_event(3760, 'M10914269', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_589, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_589, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_590 = upsert_tracker_event(3760, 'M10908439', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_590, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_590, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_590, tracker_id_status_at_the_end_of_ds2_notes, null, 'No V2');

        event_id_591 = upsert_tracker_event(3760, 'M10909532', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_591, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_591, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_592 = upsert_tracker_event(3760, 'M10921371', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_592, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_593 = upsert_tracker_event(3760, 'M10903651', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_593, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_593, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_593, tracker_id_status_at_the_end_of_ds2_notes, null, 'No V2');

        event_id_594 = upsert_tracker_event(3760, 'M10994072', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_594, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_594, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_594, tracker_id_status_at_the_end_of_ds2_notes, null, 'No V2');

        event_id_595 = upsert_tracker_event(3760, 'M10970605', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_595, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_595, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_595, tracker_id_status_at_the_end_of_ds2_notes, null, 'mri contradindication');

        event_id_596 = upsert_tracker_event(3760, 'M10963843', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_596, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_596, tracker_id_status_at_the_end_of_ds2, 676, null);

        event_id_597 = upsert_tracker_event(3760, 'M10947016', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_597, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_597, tracker_id_status_at_the_end_of_ds2, 676, null);

        event_id_598 = upsert_tracker_event(3760, 'M10901165', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_598, tracker_id_status_at_the_end_of_ds1, 662, null),
            (event_id_598, tracker_id_status_at_the_end_of_ds2, 679, null);

        event_id_599 = upsert_tracker_event(3760, 'M10998168', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_599, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_599, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_599, tracker_id_status_at_the_end_of_ds2_notes, null, 'mri contradindication');

        event_id_600 = upsert_tracker_event(3760, 'M10997377', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_600, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_600, tracker_id_status_at_the_end_of_ds1_notes, null, 'MRI contraindication');

        event_id_601 = upsert_tracker_event(3760, 'M10903394', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_601, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_601, tracker_id_status_at_the_end_of_ds1_notes, null, 'withdrew consent');

        event_id_602 = upsert_tracker_event(3760, 'M10914620', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_602, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_602, tracker_id_status_at_the_end_of_ds2, 676, null);

        event_id_603 = upsert_tracker_event(3760, 'M10986255', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_603, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_603, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_603, tracker_id_status_at_the_end_of_ds2_notes, null, 'mri contradindication');

        event_id_604 = upsert_tracker_event(3760, 'M10919719', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_604, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_605 = upsert_tracker_event(3760, 'M10948329', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_605, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_605, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_606 = upsert_tracker_event(3760, 'M10982795', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_606, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_606, tracker_id_status_at_the_end_of_ds2, 679, null);

        event_id_607 = upsert_tracker_event(3760, 'M10915765', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_607, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_607, tracker_id_status_at_the_end_of_ds2, 676, null);

        event_id_608 = upsert_tracker_event(3760, 'M10931992', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_608, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_608, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion'),
            (event_id_608, tracker_id_status_at_the_end_of_ds2, 679, null);

        event_id_609 = upsert_tracker_event(3760, 'M10962900', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_609, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_609, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_610 = upsert_tracker_event(3760, 'M10961704', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_610, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_611 = upsert_tracker_event(3760, 'M10956806', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_611, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_611, tracker_id_status_at_the_end_of_ds2, 676, null);

        event_id_612 = upsert_tracker_event(3760, 'M10985399', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_612, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_612, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_613 = upsert_tracker_event(3760, 'M10954882', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_613, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_613, tracker_id_status_of_data_ds1, 665, null);

        event_id_614 = upsert_tracker_event(3760, 'M10963561', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_614, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_614, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_615 = upsert_tracker_event(3760, 'M10977617', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_615, tracker_id_status_at_the_end_of_ds1, 662, null),
            (event_id_615, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_615, tracker_id_status_at_the_end_of_ds2_notes, null, 'mri contradindication');

        event_id_616 = upsert_tracker_event(3760, 'M10937017', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_616, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_616, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_616, tracker_id_status_at_the_end_of_ds2_notes, null, 'No V2');

        event_id_617 = upsert_tracker_event(3760, 'M10923873', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_617, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_617, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion');

        event_id_618 = upsert_tracker_event(3760, 'M10938773', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_618, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_618, tracker_id_status_at_the_end_of_ds1_notes, null, 'Excluded');

        event_id_619 = upsert_tracker_event(3760, 'M10911670', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_619, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_619, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_619, tracker_id_status_at_the_end_of_ds2_notes, null, ' No V2');

        event_id_620 = upsert_tracker_event(3760, 'M10913124', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_620, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_620, tracker_id_status_at_the_end_of_ds1_notes, null, ' IRB exclusion');

        event_id_621 = upsert_tracker_event(3760, 'M10913218', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_621, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_622 = upsert_tracker_event(3760, 'M10966136', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_622, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_622, tracker_id_status_at_the_end_of_ds2, 679, null);

        event_id_623 = upsert_tracker_event(3760, 'M10993327', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_623, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_623, tracker_id_status_of_data_ds1, 665, null);

        event_id_624 = upsert_tracker_event(3760, 'M10926819', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_624, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_624, tracker_id_status_of_data_ds1, 665, null),
            (event_id_624, tracker_id_status_at_the_end_of_ds2, null, 'COULD NOT SCHEDULE REMAINING VISITS.');

        event_id_625 = upsert_tracker_event(3760, 'M10945609', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_625, tracker_id_status_at_the_end_of_ds1, 663, null),
            (event_id_625, tracker_id_status_at_the_end_of_ds1_notes, null, 'IRB exclusion'),
            (event_id_625, tracker_id_status_at_the_end_of_ds2, 679, null);

        event_id_626 = upsert_tracker_event(3760, 'M10922140', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_626, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_626, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_626, tracker_id_status_at_the_end_of_ds2_notes, null, 'NO V2');

        event_id_627 = upsert_tracker_event(3760, 'M10913467', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_627, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_628 = upsert_tracker_event(3760, 'M10907652', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_628, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_628, tracker_id_status_at_the_end_of_ds2, 679, null),
            (event_id_628, tracker_id_status_at_the_end_of_ds2_notes, null, 'NO V2');

        event_id_629 = upsert_tracker_event(3760, 'M10923069', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_629, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_629, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_630 = upsert_tracker_event(3760, 'M10916751', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_630, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_630, tracker_id_status_at_the_end_of_ds2, 676, null),
            (event_id_630, tracker_id_status_at_the_end_of_ds2_notes, null, 'mri contradindication');

        event_id_631 = upsert_tracker_event(3760, 'M10961136', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_631, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_631, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_632 = upsert_tracker_event(3760, 'M10961512', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_632, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_632, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_633 = upsert_tracker_event(3760, 'M10912098', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_633, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_633, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_634 = upsert_tracker_event(3760, 'M10943535', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_634, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_634, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_635 = upsert_tracker_event(3760, 'M10995223', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_635, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_636 = upsert_tracker_event(3760, 'M10921014', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_636, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_636, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_637 = upsert_tracker_event(3760, 'M10924278', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_637, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_637, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_638 = upsert_tracker_event(3760, 'M10968423', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_638, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_639 = upsert_tracker_event(3760, 'M10972932', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_639, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_639, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_640 = upsert_tracker_event(3760, 'M10933238', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_640, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_641 = upsert_tracker_event(3760, 'M10937007', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_641, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_642 = upsert_tracker_event(3760, 'M10918384', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_642, tracker_id_status_at_the_end_of_ds1, 661, null),
            (event_id_642, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_643 = upsert_tracker_event(3760, 'M10979815', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_643, tracker_id_status_at_the_end_of_ds1, 663, null);

        event_id_644 = upsert_tracker_event(3760, 'M10932773', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_644, tracker_id_status_at_the_end_of_ds2, 675, null),
            (event_id_644, tracker_id_status_at_the_end_of_ds2_notes, null, 'DSA completed');

        event_id_645 = upsert_tracker_event(3760, 'M10963828', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_645, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_646 = upsert_tracker_event(3760, 'M10957084', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_646, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_647 = upsert_tracker_event(3760, 'M10935495', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_647, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_648 = upsert_tracker_event(3760, 'M10953280', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_648, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_649 = upsert_tracker_event(3760, 'M10980026', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_649, tracker_id_status_at_the_end_of_ds1, 662, null);

        event_id_650 = upsert_tracker_event(3760, 'M10997446', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_650, tracker_id_status_at_the_end_of_ds1, 662, null),
            (event_id_650, tracker_id_status_at_the_end_of_ds1_notes, null, 'SOME remaining assessments');

        event_id_651 = upsert_tracker_event(3760, 'M10944305', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_651, tracker_id_status_at_the_end_of_ds2, 675, null);

        event_id_652 = upsert_tracker_event(3760, 'M10989019', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_652, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_653 = upsert_tracker_event(3760, 'M10970996', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_653, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_654 = upsert_tracker_event(3760, 'M10967745', now(), 'import', null);
        INSERT INTO mrs_subject_tracker_responses
            (event_id, tracker_id, tracker_response_option_id, custom_text_response)
            VALUES
            (event_id_654, tracker_id_status_at_the_end_of_ds1, 661, null);

        event_id_655 = upsert_tracker_event(3760, 'M10979062', now(), 'import', null);
        RETURN 't';
    END;
$$;


ALTER FUNCTION mrsdba.add_all_tracker_data() OWNER TO ni_developers;

--
-- Name: cas_clean_cas_user_study_privs_tmp_f(); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION cas_clean_cas_user_study_privs_tmp_f() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    BEGIN
      DELETE FROM cas_user_study_privs_tmp WHERE insert_date < NOW() - INTERVAL '10 days';
      RETURN NEW;
    END;
    $$;


ALTER FUNCTION mrsdba.cas_clean_cas_user_study_privs_tmp_f() OWNER TO ni_developers;

--
-- Name: cast_by_string_f(anyelement, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION cast_by_string_f(p_input anyelement, p_cast_string character varying) RETURNS anyelement
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    IF p_cast_string = 'boolean' THEN
        RETURN p_input::boolean;
    END IF;
    IF p_cast_string = 'numeric' THEN
        RETURN p_input::numeric;
    END IF;
    IF p_cast_string = 'character varying' THEN
        RETURN p_input::character varying;
    END IF;
    IF p_cast_string = 'integer' THEN
        RETURN p_input::integer;
    END IF;
    IF p_cast_string = 'timestamp without time zone' THEN
        RETURN p_input::timestamp without time zone;
    END IF;
    IF p_cast_string = 'text' THEN
        RETURN p_input::text;
    END IF;
    IF p_cast_string = 'date' THEN
        RETURN p_input::date;
    END IF;
    RAISE EXCEPTION 'Invalid cast type';
END;
$$;


ALTER FUNCTION mrsdba.cast_by_string_f(p_input anyelement, p_cast_string character varying) OWNER TO ni_developers;

--
-- Name: instr(text, unknown); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION instr(text, unknown) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
DECLARE
    pos integer;
BEGIN
    pos:= public.instr($1, $2::text, 1);
    RETURN pos;
END;
$_$;


ALTER FUNCTION mrsdba.instr(text, unknown) OWNER TO postgres;

--
-- Name: instr(unknown, unknown); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION instr(unknown, unknown) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
DECLARE
    pos integer;
BEGIN
    pos:= public.instr($1::text, $2::text, 1);
    RETURN pos;
END;
$_$;


ALTER FUNCTION mrsdba.instr(unknown, unknown) OWNER TO postgres;

--
-- Name: mrs_add_account_f(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_account_f(p_account_number character varying, p_label character varying, p_description character varying, p_pr_number character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Load record
  INSERT INTO mrs_accounts (
    account_number,
    label,
    description,
    purchase_request_id
  )
  VALUES (
    p_account_number,
    p_label,
    p_description,
    p_pr_number
  );

  INSERT INTO mrs_accounts_hist (
    account_number,
    label,
    description,
    purchase_request_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_account_number,
    p_label,
    p_description,
    p_pr_number,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_account_f(p_account_number character varying, p_label character varying, p_description character varying, p_pr_number character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_address_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_address_id    mrsdba.mrs_addresses.address_id%TYPE;
BEGIN

  BEGIN
    SELECT nextval('mrsdba.mrsaddres_addressid_seq')
      INTO v_address_id;
  END;

  INSERT INTO mrsdba.mrs_addresses (
    address_id,
    line1,
    line2,
    city,
    state,
    zip,
    country,
    notes,
    start_date,
    end_date,
    usid
  )
  VALUES (
    v_address_id,
    p_line1,
    p_line2,
    p_city,
    p_state,
    p_zip,
    p_country,
    p_notes,
    now(),  -- Date the address was entered
    null,     -- Should be null because we're adding an address
    p_usid
  );

  INSERT INTO mrsdba.mrs_addresses_hist (
    address_id,
    line1,
    line2,
    city,
    state,
    zip,
    country,
    notes,
    start_date,
    end_date,
    usid,
    mod_user,
    mod_date
  )
  VALUES (
    v_address_id,
    p_line1,
    p_line2,
    p_city,
    p_state,
    p_zip,
    p_country,
    p_notes,
    now(),  -- Date the address was entered
    null,     -- Should be null because we're adding an address
    p_usid,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_analysis_details_f(character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_analysis_details_f(series_id_f character varying, analysis_id_f numeric, non_default_output_path_f character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin 
insert into mrs_analysis_details (analysis_id, series_id, non_default_output_path) values (
analysis_id_f,
series_id_f,
non_default_output_path_f);

return '1';

end;$$;


ALTER FUNCTION mrsdba.mrs_add_analysis_details_f(series_id_f character varying, analysis_id_f numeric, non_default_output_path_f character varying) OWNER TO postgres;

--
-- Name: mrs_add_analysis_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_analysis_f(label_f character varying, desc_f character varying, user_submit_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 

declare analysis_id_f numeric;
begin
      select nextval('mrsdba.mrs_analysis_counter') into analysis_id_f;
      insert into mrs_analysis (analysis_id, label, description, user_submit, date_submit) values (
		analysis_id_f,
      label_f,
      desc_f,
      user_submit_f,
      now()
      );

    return analysis_id_f;
    end;$$;


ALTER FUNCTION mrsdba.mrs_add_analysis_f(label_f character varying, desc_f character varying, user_submit_f character varying) OWNER TO postgres;

--
-- Name: mrs_add_analysis_files_f(character varying, character varying, timestamp without time zone, bigint, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_analysis_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_series_id character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  f_file_id     mrsdba.mrs_analysis_files.file_id%TYPE;

BEGIN
  select nextval('mrsdba.mrs_analysis_files_counter')
  into f_file_id;

  insert into mrsdba.mrs_analysis_files(
        file_id,
        label,
        type,
        creation_datetime,
        size_kb,
        description,
        series_id
  )
  values (
        f_file_id,
        f_label,
        f_type,
        f_date,
        f_size_kb,
        f_desc,
        f_series_id
  );

  return f_file_id;
END;$$;


ALTER FUNCTION mrsdba.mrs_add_analysis_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_series_id character varying) OWNER TO postgres;

--
-- Name: mrs_add_analysis_job_f(character varying, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_analysis_job_f(f_portal_name character varying, f_pi_id character varying, f_study_name character varying, f_ursi character varying, f_session character varying, f_task character varying, f_submission_datetime timestamp without time zone, f_status character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare f_id bigint;

begin
        select nextval('mrs_analysis_job_counter') into f_id;
        insert into mrs_analysis_job_status (
                id,
                portal_name,
                pi_id,
                study_name,
                ursi,
                session,
                task,
                submission_datetime,
                status)
        values (
                f_id,
                f_portal_name,
                f_pi_id,
                f_study_name,
                f_ursi,
                f_session,
                f_task,
                f_submission_datetime,
                f_status);

        return '1';
end;$$;


ALTER FUNCTION mrsdba.mrs_add_analysis_job_f(f_portal_name character varying, f_pi_id character varying, f_study_name character varying, f_ursi character varying, f_session character varying, f_task character varying, f_submission_datetime timestamp without time zone, f_status character varying) OWNER TO postgres;

--
-- Name: mrs_add_analysis_queue_f(numeric, timestamp without time zone); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_analysis_queue_f(scan_id_f numeric, analysis_submit_f timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare 
	id_f numeric;
begin
	select nextval('mrs_analysis_queue_counter') into id_f;
	insert into mrs_analysis_queue (id, scan_id, analysis_submit) values (id_f, scan_id_f, analysis_submit_f);
	insert into mrs_analysis_queue_hist (id, scan_id, analysis_submit) values (id_f, scan_id_f, analysis_submit_f);
	
	return id_f;
end;$$;


ALTER FUNCTION mrsdba.mrs_add_analysis_queue_f(scan_id_f numeric, analysis_submit_f timestamp without time zone) OWNER TO postgres;

--
-- Name: mrs_add_analysis_stats_files_f(character varying, character varying, timestamp without time zone, bigint, character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_analysis_stats_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_scan_id numeric, f_task_name character varying, f_stats_folder_name character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
    f_file_id mrsdba.mrs_analysis_stats_files.file_id%TYPE;

begin
    select nextval('mrsdba.mrs_analysis_stats_files_counter')
    into f_file_id;

    insert into mrsdba.mrs_analysis_stats_files(
        file_id,
        label,
        file_type,
        creation_datetime,
        size_kb,
        description,
        scan_id,
        task_name,
        stats_folder_name
    )
    values (
        f_file_id,
        f_label,
        f_type,
        f_date,
        f_size_kb,
        f_desc,
        f_scan_id,
        f_task_name,
        f_stats_folder_name
    );
    return f_file_id;

end;$$;


ALTER FUNCTION mrsdba.mrs_add_analysis_stats_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_scan_id numeric, f_task_name character varying, f_stats_folder_name character varying) OWNER TO postgres;

--
-- Name: mrs_add_anatomy_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_anatomy_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_anaregid  mrs_anatomy_regions.anatomy_region_id%TYPE;
BEGIN

  BEGIN
    SELECT nextval('mrsanareg_anaregid_seq')
      INTO v_anaregid;
  END;

  -- Load record
  INSERT INTO mrs_anatomy_regions (
    anatomy_region_id,
    label,
    description
  )
  VALUES (
    v_anaregid,
    p_label,
    p_description
  );

  INSERT INTO mrs_anatomy_regions_hist (
    anatomy_region_id,
    label,
    description,
    mod_user,
    mod_date
  )
  VALUES (
    v_anaregid,
    p_label,
    p_description,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_anatomy_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_anonymous_subject_f(text, timestamp without time zone, text, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_anonymous_subject_f(p_site_id text, p_birthdate timestamp without time zone, p_gender text, p_dbtrans_username_pt text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_usid         mrsdba.mrs_subjects.usid%TYPE;
   BEGIN
      v_usid:= mrs_get_next_usid_f('stub'::character varying);
      -- Load data
      INSERT INTO mrs_subjects (
         usid 
         ,site_id 
         ,birth_date 
         ,gender 
         ,entered_date 
         ,user_entered 
      )
      VALUES (
         v_usid 
         ,p_site_id 
         ,p_birthdate 
         ,p_gender 
         ,now() 
         ,p_dbtrans_username_pt 
      );

      INSERT INTO mrsdba.mrs_subjects_hist (
         usid 
         ,birth_date 
         ,gender 
         ,site_id 
         ,entered_date 
         ,user_entered 
         ,mod_user 
         ,mod_date
      )
      VALUES (
         v_usid 
         ,p_birthdate 
         ,p_gender 
         ,p_site_id 
         ,now() 
         ,p_dbtrans_username_pt 
         ,p_dbtrans_username_pt 
         ,now()
      );

      return v_usid;
   END;
$$;


ALTER FUNCTION mrsdba.mrs_add_anonymous_subject_f(p_site_id text, p_birthdate timestamp without time zone, p_gender text, p_dbtrans_username_pt text) OWNER TO ni_developers;

--
-- Name: mrs_add_app_option_f(integer, character varying, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_app_option_f(p_study_id integer, p_app_name character varying, p_option_str text, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql STRICT SECURITY DEFINER
    AS $$DECLARE
    v_exist int :=0;
    v_opt_id int;
BEGIN
    SELECT id INTO v_exist 
    FROM mrs_app_options
    WHERE study_id = p_study_id AND app_name=p_app_name AND option_str=p_option_str;

    IF v_exist > 0 THEN
        RETURN v_exist;
    ELSE
        INSERT INTO mrs_app_options (study_id, app_name, option_str)
        VALUES (p_study_id, p_app_name, p_option_str)
        RETURNING id INTO v_opt_id;

        INSERT INTO mrs_app_options_hist (id, study_id, app_name, option_str, mod_date, mod_user)
        VALUES (v_opt_id, p_study_id, p_app_name, p_option_str, now(), p_mod_user);

        RETURN v_opt_id;
    END IF;
END;$$;


ALTER FUNCTION mrsdba.mrs_add_app_option_f(p_study_id integer, p_app_name character varying, p_option_str text, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_assessment_events_f(numeric, character varying, numeric, numeric, numeric, numeric, numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_assessment_events_f(assessment_id_f numeric, question_id_f character varying, question_instance_f numeric, page_id_f numeric, page_instance_f numeric, timestamp_f numeric, timezone_offset_f numeric, event_type_id_f numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare event_id_f numeric;

begin
	select nextval('mrs_assessment_events_counter') into event_id_f;
	insert into mrs_assessment_events (
		event_id,
		assessment_id,
		question_id,
		question_instance,
		page_id,
		page_instance,
		timestamp,
		timezone_offset,
		event_type_id) 
	values (
		event_id_f,
		assessment_id_f,
		question_id_f,
		question_instance_f,
		page_id_f,
		page_instance_f,
		timestamp_f,
		timezone_offset_f,
		event_type_id_f);

	return event_id_f;
end;
		 $$;


ALTER FUNCTION mrsdba.mrs_add_assessment_events_f(assessment_id_f numeric, question_id_f character varying, question_instance_f numeric, page_id_f numeric, page_instance_f numeric, timestamp_f numeric, timezone_offset_f numeric, event_type_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_add_auto_message_f(numeric, numeric, timestamp without time zone, text, text, text, text, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_auto_message_f(study_id_f numeric, message_type_id_f numeric, sent_time_f timestamp without time zone, message_subject_f text, message_body_f text, message_to_f text, message_from_f text, message_cc_f text, mod_user_f character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare
    message_id_f numeric;
    ursis varchar[] := string_to_array(message_to_f, ',');
    ret_str text := '';
begin
    FOR i IN array_lower(ursis, 1) .. array_upper(ursis, 1)
    LOOP
        select nextval('mrsdba.mrs_auto_message_counter') into message_id_f;

        insert into mrs_auto_messages (
            message_id
           ,message_subject
           ,message_from
           ,message_to
           ,message_cc
           ,message_body
           ,study_id
           ,message_type_id
           ,sent_time
        ) values (
            message_id_f
           ,message_subject_f
           ,message_from_f
           ,trim(ursis[i])
           ,message_cc_f
           ,message_body_f
           ,study_id_f
           ,message_type_id_f
           ,sent_time_f
        );

        insert into mrs_auto_messages_hist (
            message_id
           ,message_subject  
           ,message_from
           ,message_to
           ,message_cc
           ,message_body
           ,study_id
           ,message_type_id
           ,sent_time
           ,mod_date
           ,mod_user
        ) values (
            message_id_f
           ,message_subject_f
           ,message_from_f
           ,trim(ursis[i])
           ,message_cc_f
           ,message_body_f
           ,study_id_f
           ,message_type_id_f
           ,sent_time_f
           ,now()
           ,mod_user_f
        ); 

        ret_str := ret_str || ursis[i] || '-' || message_id_f || ',';
    END LOOP;
    
    return trim(ret_str, ',');
end;$$;


ALTER FUNCTION mrsdba.mrs_add_auto_message_f(study_id_f numeric, message_type_id_f numeric, sent_time_f timestamp without time zone, message_subject_f text, message_body_f text, message_to_f text, message_from_f text, message_cc_f text, mod_user_f character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_behavioral_upload_f(character varying, numeric, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_behavioral_upload_f(file_name_f character varying, file_size_k_f numeric, dest_session_id_f numeric, dest_series_id_f character varying, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare
upload_id_f numeric;
begin
select nextval('mrs_behavioral_uploads_counter') into upload_id_f;
insert into mrs_behavioral_uploads (
	upload_id,
	file_name,
	file_size_k,
	dest_session_id,
	dest_series_id)
	values (
	upload_id_f,
	file_name_f,
	file_size_k_f,
	dest_session_id_f,
	dest_series_id_f);

insert into mrs_behavioral_uploads_hist (
	upload_id,
	file_name,
	file_size_k,
	dest_session_id,
	dest_series_id,	
	mod_user,
	mod_date,
	action)
	values (
	upload_id_f,
	file_name_f,
	file_size_k_f,
	dest_session_id_f,
	dest_series_id_f,
	mod_user_f,
	now(),
	'add');
return upload_id_f;
end;$$;


ALTER FUNCTION mrsdba.mrs_add_behavioral_upload_f(file_name_f character varying, file_size_k_f numeric, dest_session_id_f numeric, dest_series_id_f character varying, mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_add_charge_code_f(character varying, character varying, timestamp without time zone, timestamp without time zone, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_charge_code_f(p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_charge_code_id   mrs_charge_codes.charge_code_id%TYPE;
   BEGIN

      BEGIN
         SELECT nextval('seq_charge_code_id')
         INTO v_charge_code_id;
      END;

      INSERT INTO mrs_charge_codes
      (
         charge_code_id,
         charge_code,
         project_number,
         start_date,
         end_date
      )
      VALUES
      (
         v_charge_code_id,
         p_charge_code,
         p_project_number,
         p_start_date,
         p_end_date
      );

      INSERT INTO mrs_charge_codes_hist
      (
         charge_code_id,
         charge_code,
         project_number,
         start_date,
         end_date,
         mod_user,
         mod_date
      )
      VALUES
      (
         v_charge_code_id,
         p_charge_code,
         p_project_number,
         p_start_date,
         p_end_date,
         p_user_entered,
         now()
      );

      RETURN v_charge_code_id;
   END;
$$;


ALTER FUNCTION mrsdba.mrs_add_charge_code_f(p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_charge_code_site_f(numeric, numeric, character varying, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_charge_code_site_f(p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  declare
  v_site_charge_id   mrs_charge_code_site_details.site_charge_id%TYPE;
  BEGIN

  BEGIN
  SELECT nextval('seq_site_charge_id')
  INTO v_site_charge_id;
  END;

  INSERT INTO mrs_charge_code_site_details(
  site_charge_id,
  charge_code_id,
  site_id,
  funding_source,
  notes,
  is_enabled
  )
  VALUES(
  v_site_charge_id,
  p_charge_code_id,
  p_site_id,
  p_funding_source,
  p_notes,
  p_is_enabled
  );

  INSERT INTO mrs_charge_code_site_details_hist(
  site_charge_id,
  charge_code_id,
  site_id,
  funding_source,
  notes,
  is_enabled,
  mod_user,
  mod_date
  )
  VALUES(
  v_site_charge_id,
  p_charge_code_id,
  p_site_id,
  p_funding_source,
  p_notes,
  p_is_enabled,
  p_user_entered,
  now()
  );

  RETURN v_site_charge_id;
  END;
  
  $$;


ALTER FUNCTION mrsdba.mrs_add_charge_code_site_f(p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_charge_code_site_modality_f(numeric, numeric, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_charge_code_site_modality_f(p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  declare
  v_site_modality_id   mrs_charge_code_site_modalities.site_modality_id%TYPE;
  v_site_id            mrs_charge_code_site_details.site_id%TYPE;
  BEGIN

  BEGIN
     SELECT nextval('seq_site_modality_id')
     INTO v_site_modality_id;
  END;
  
  BEGIN
     SELECT site_id
     INTO v_site_id
     FROM mrs_charge_code_site_details
     WHERE site_charge_id = p_site_charge_id;
  END;

  INSERT INTO mrs_charge_code_site_modalities(
  site_modality_id,
  site_charge_id,
  modality_id,
  is_default,
  uses_credits
  )
  VALUES(
  v_site_modality_id,
  p_site_charge_id,
  p_modality_id,
  p_is_default,
  p_uses_credits
  );

  INSERT INTO mrs_charge_code_site_modalities_hist(
  site_modality_id,
  site_charge_id,
  modality_id,
  is_default,
  uses_credits,
  mod_user,
  mod_date
  )
  VALUES(
  v_site_modality_id,
  p_site_charge_id,
  p_modality_id,
  p_is_default,
  p_uses_credits,
  p_user_entered,
  now()
  );

  IF p_is_default = 't' THEN
  UPDATE mrs_charge_code_site_modalities
  SET is_default = 'f'
  WHERE site_modality_id IN (
     SELECT sm.site_modality_id FROM mrs_charge_code_site_details sd
     INNER JOIN mrs_charge_code_site_modalities sm ON sm.site_charge_id = sd.site_charge_id
     WHERE sd.site_id = v_site_id
     AND sm.modality_id = p_modality_id
     AND sm.site_modality_id != v_site_modality_id
  );
  END IF;

  RETURN v_site_modality_id;
  END;
  $$;


ALTER FUNCTION mrsdba.mrs_add_charge_code_site_modality_f(p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_charge_code_study_f(numeric, numeric, character varying, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_charge_code_study_f(p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  declare
  v_study_charge_id   mrs_charge_code_study_details.study_charge_id%TYPE;
  BEGIN

  BEGIN
  SELECT nextval('seq_study_charge_id')
  INTO v_study_charge_id;
  END;

  INSERT INTO mrs_charge_code_study_details(
  study_charge_id,
  charge_code_id,
  study_id,
  funding_source,
  notes,
  is_enabled
  )
  VALUES(
  v_study_charge_id,
  p_charge_code_id,
  p_study_id,
  p_funding_source,
  p_notes,
  p_is_enabled
  );

  INSERT INTO mrs_charge_code_study_details_hist(
  study_charge_id,
  charge_code_id,
  study_id,
  funding_source,
  notes,
  is_enabled,
  mod_user,
  mod_date
  )
  VALUES(
  v_study_charge_id,
  p_charge_code_id,
  p_study_id,
  p_funding_source,
  p_notes,
  p_is_enabled,
  p_user_entered,
  now()
  );

  RETURN v_study_charge_id;
  END;
  
  $$;


ALTER FUNCTION mrsdba.mrs_add_charge_code_study_f(p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_charge_code_study_modality_f(numeric, numeric, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_charge_code_study_modality_f(p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  declare
  v_study_modality_id   mrs_charge_code_study_modalities.study_modality_id%TYPE;
  v_study_id            mrs_charge_code_study_details.study_id%TYPE;
  BEGIN

  BEGIN
     SELECT nextval('seq_study_modality_id')
     INTO v_study_modality_id;
  END;
  
  BEGIN
     SELECT study_id
     INTO v_study_id
     FROM mrs_charge_code_study_details
     WHERE study_charge_id = p_study_charge_id;
  END;

  INSERT INTO mrs_charge_code_study_modalities(
  study_modality_id,
  study_charge_id,
  modality_id,
  is_default,
  uses_credits
  )
  VALUES(
  v_study_modality_id,
  p_study_charge_id,
  p_modality_id,
  p_is_default,
  p_uses_credits
  );

  INSERT INTO mrs_charge_code_study_modalities_hist(
  study_modality_id,
  study_charge_id,
  modality_id,
  is_default,
  uses_credits,
  mod_user,
  mod_date
  )
  VALUES(
  v_study_modality_id,
  p_study_charge_id,
  p_modality_id,
  p_is_default,
  p_uses_credits,
  p_user_entered,
  now()
  );

  IF p_is_default = 't' THEN
  UPDATE mrs_charge_code_study_modalities
  SET is_default = 'f'
  WHERE study_modality_id IN (
     SELECT sm.study_modality_id FROM mrs_charge_code_study_details sd
     INNER JOIN mrs_charge_code_study_modalities sm ON sm.study_charge_id = sd.study_charge_id
     WHERE sd.study_id = v_study_id
     AND sm.modality_id = p_modality_id
     AND sm.study_modality_id != v_study_modality_id
  );
  END IF;

  RETURN v_study_modality_id;
  END;
  $$;


ALTER FUNCTION mrsdba.mrs_add_charge_code_study_modality_f(p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_client_device_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_client_device_f(p_reg_remote_address character varying, p_reg_http_client_ip character varying, p_reg_http_x_forwarded_ip character varying, p_reg_user_agent character varying, p_reg_request_url character varying, p_reg_http_referer character varying, p_db_transaction_username character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    DECLARE 
        v_device_id int;
    BEGIN
        INSERT INTO mrs_client_devices (
            reg_username,
            reg_date,
            reg_remote_address,
            reg_http_client_ip,
            reg_http_x_forwarded_ip,
            reg_user_agent,
            reg_request_url,
            reg_http_referer
        )
        VALUES (
            p_db_transaction_username,
            now(),
            p_reg_remote_address,
            p_reg_http_client_ip,
            p_reg_http_x_forwarded_ip,
            p_reg_user_agent,
            p_reg_request_url,
            p_reg_http_referer
        ) RETURNING device_id
        INTO v_device_id;

        INSERT INTO mrs_client_devices_hist (
            device_id,
            reg_username,
            reg_date,
            reg_remote_address,
            reg_http_client_ip,
            reg_http_x_forwarded_ip,
            reg_user_agent,
            reg_request_url,
            reg_http_referer,
            mod_user,
            mod_date
        )
        SELECT 
            device_id,
            reg_username,
            reg_date,
            reg_remote_address,
            reg_http_client_ip,
            reg_http_x_forwarded_ip,
            reg_user_agent,
            reg_request_url,
            reg_http_referer,
            p_db_transaction_username,
            now()
        FROM mrs_client_devices
        WHERE device_id = v_device_id;

        RETURN v_device_id;
    END;
$$;


ALTER FUNCTION mrsdba.mrs_add_client_device_f(p_reg_remote_address character varying, p_reg_http_client_ip character varying, p_reg_http_x_forwarded_ip character varying, p_reg_user_agent character varying, p_reg_request_url character varying, p_reg_http_referer character varying, p_db_transaction_username character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_conditional_jump_f(text, text, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_conditional_jump_f(p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_sort_order numeric;
BEGIN

   SELECT (MAX(sort_order) + 1) into v_sort_order
   FROM mrsdba.mrs_instrument_question_jumps
   WHERE question_id = p_question_id;

   IF v_sort_order IS null OR v_sort_order = 0 THEN
      v_sort_order := 1;
   END IF;

   INSERT INTO mrs_instrument_question_jumps (
      question_id, target_qid, formula, sort_order
   ) VALUES (
      p_question_id, p_target_qid, p_formula, v_sort_order
   );

   INSERT INTO mrs_instrument_question_jumps_hist (
      question_jump_id, question_id, target_qid, formula, sort_order, mod_user, mod_date
   )
   SELECT
      question_jump_id, p_question_id, p_target_qid, p_formula, v_sort_order, p_mod_user, now()
   FROM mrs_instrument_question_jumps
   WHERE question_id = p_question_id
   AND sort_order = v_sort_order;

   RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_add_conditional_jump_f(p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_data_domain_f(character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_data_domain_f(p_label character varying, p_study_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_data_domain_id mrs_data_domains.data_domain_id%TYPE;
BEGIN

  BEGIN
    SELECT nextval('mrsdatadom_datadom_id_seq')
    INTO v_data_domain_id;
  END;

  INSERT INTO mrs_data_domains (
    data_domain_id,
    label,
    study_id
  )
  VALUES (
    v_data_domain_id,
    p_label,
    p_study_id
  );

  INSERT INTO mrs_data_domains_hist (
    data_domain_id,
    label,
    study_id,
    mod_user,
    mod_date
  )
  VALUES (
    v_data_domain_id,
    p_label,
    p_study_id,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_data_domain_f(p_label character varying, p_study_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_data_qc_constraint_f(numeric, integer, numeric, text, text, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_data_qc_constraint_f(p_device_id numeric, p_event_type_id integer, p_event_param_id numeric, p_formula text, p_label text, p_mod_user text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_constraint_id integer;
BEGIN
    INSERT INTO mrs_data_qc_constraints (
        device_id,
        daq_event_type_id,
        event_parameter_id,
        constraint_formula,
        label)
    VALUES (
        p_device_id,
        p_event_type_id,
        p_event_param_id,
        p_formula,
        p_label)
    RETURNING constraint_id INTO v_constraint_id;

    INSERT INTO mrs_data_qc_constraints_hist (
        constraint_id,
        device_id,
        daq_event_type_id,
        event_parameter_id,
        constraint_formula,
        label,
        mod_user,
        mod_date)
    VALUES (
        v_constraint_id,
        p_device_id,
        p_event_type_id,
        p_event_param_id,
        p_formula,
        p_label,
        p_mod_user,
        now());

    RETURN v_constraint_id;
END;
    $$;


ALTER FUNCTION mrsdba.mrs_add_data_qc_constraint_f(p_device_id numeric, p_event_type_id integer, p_event_param_id numeric, p_formula text, p_label text, p_mod_user text) OWNER TO ni_developers;

--
-- Name: mrs_add_dataentry_type_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_dataentry_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_type_id   mrs_dataentry_types.dataentry_type_id%TYPE;
BEGIN

 -- Get unique id
 SELECT nextval('mrsdattyp_dataentrytypeid_seq')
   INTO v_type_id;

 -- Load application data
 INSERT INTO mrs_dataentry_types (
  dataentry_type_id,
  label,
  description
 )
 VALUES (
  v_type_id,
  p_label,
  p_description
 );

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */

 INSERT INTO mrs_dataentry_types_hist (
  dataentry_type_id,
  label,
  description,
  mod_user,
  mod_date
 )
 VALUES (
  v_type_id,
  p_label,
  p_description,
  p_dbtrans_username_pt,
  now()
 );

 RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_dataentry_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_document_category_f(character varying, character varying, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_document_category_f(p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_categoryid  mrs_document_categories.category_id%TYPE;
BEGIN

  SELECT nextval('mrsdoccat_categoryid_seq')
    INTO v_categoryid;

  -- Load record
  INSERT INTO mrs_document_categories (
    category_id,
    label,
    description,
    study_id,
    parent_id,
    mod_user,
    mod_date
  )
  VALUES (
    v_categoryid,
    p_label,
    p_description,
    p_study_id,
    p_parent_id,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_document_category_f(p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_document_f(character varying, character varying, character varying, character varying, character varying, character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_document_f(p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_category_id numeric, p_site_id character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_fileid  mrs_documents.file_id%TYPE;
  v_output  varchar(1);
BEGIN

  SELECT nextval('mrsdocume_fileid_seq')
    INTO v_fileid;

  -- Load record
  INSERT INTO mrs_documents (
    file_id,
    file_name,
    file_mime_type,
    label,
    description,
    file_size,
    path_relative,
    site_id,
    mod_user,
    mod_date
  )
  VALUES (
    v_fileid,
    p_file_name,
    p_file_mime_type,
    p_label,
    p_description,
    p_file_size,
    p_path_relative,
    p_site_id,
    p_dbtrans_username_pt,
    now()
  );

  -- add cat if you got one
  if  p_category_id is not null then
    v_output := mrs_assign_doc_category_f(v_fileid,p_category_id,p_dbtrans_username_pt);

  end if;

  -- return new id
  RETURN v_fileid;

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_document_f(p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_category_id numeric, p_site_id character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_drug_category_f(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_drug_category_f(p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
  v_category_id       mrs_drug_categories.category_id%TYPE;
BEGIN

  BEGIN
    SELECT nextval('mrsdrgcat_cat_id_seq')
      INTO v_category_id;
  END;

  -- Load record
  INSERT INTO mrs_drug_categories (
    category_id,
    category_name,
    description,
    entered_date,
    notes,
    user_entered
  )
  VALUES (
    v_category_id,
    p_category_name,
    p_description,
    now(),
    p_notes,
    p_dbtrans_username_pt
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_drug_category_f(p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_drug_prop_details_f(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_drug_prop_details_f(p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
 v_property_id  		numeric;
BEGIN

  SELECT nextval('mrsdrugprop_property_id_seq')
  INTO   v_property_id;

  INSERT INTO mrs_drug_prop_details (
    property_id,
    label,
    description,
    entered_date,
    user_entered,
    notes
  )
  VALUES (
    v_property_id,
    p_label,
    p_description,
    now(),
    p_dbtrans_username_pt,
    p_notes
  );

  INSERT INTO mrs_drug_prop_details_hist (
    property_id,
    label,
    description,
    entered_date,
    user_entered,
    notes,
    mod_user,
    mod_date
  )
  VALUES (
    v_property_id,
    p_label,
    p_description,
    now(),
    p_dbtrans_username_pt,
    p_notes,
    p_dbtrans_username_pt,
    now()
  );


  RETURN v_property_id;

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_drug_prop_details_f(p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_drug_property_f(character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_drug_property_f(p_drug_code character varying, p_property_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  INSERT INTO mrs_drug_properties (
    drug_code,
    property_id
  )
  VALUES (
    p_drug_code,
    p_property_id
  );

  INSERT INTO mrs_drug_properties_hist (
    drug_code,
    property_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_drug_code,
    p_property_id,
    p_dbtrans_username_pt,
    now()
  );


  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_drug_property_f(p_drug_code character varying, p_property_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_eeg_device_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_eeg_device_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_input_impedance numeric, p_number_of_channels numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_device_id  mrs_scanners.scanner_id%TYPE;
BEGIN

  BEGIN
    SELECT nextval('mrseeg_eegid_seq')
      INTO v_device_id;
  END;

  -- Load record
  INSERT INTO mrs_eeg_devices (
    eeg_id,
    label,
    description,
    site_id,
    model,
    manufacturer,
    station,
    software_version,
    start_date,
    input_impedance,
    number_of_channels,
    modality_id
  )
  VALUES (
    v_device_id ,
    p_label,
    p_description,
    p_site_id,
    p_model,
    p_manufacturer,
    p_station,
    p_software_version,
    now(),
    p_input_impedance,
    p_number_of_channels,
    p_modality_id
  );

  INSERT INTO mrs_eeg_devices_hist (
    eeg_id,
    label,
    description,
    site_id,
    model,
    manufacturer,
    station,
    software_version,
    start_date,
    input_impedance,
    number_of_channels,
    modality_id,
    mod_user,
    mod_date
  )
  VALUES (
    v_device_id ,
    p_label,
    p_description,
    p_site_id,
    p_model,
    p_manufacturer,
    p_station,
    p_software_version,
    now(),
    p_input_impedance,
    p_number_of_channels,
    p_modality_id,
    p_dbtrans_username_pt,
    now()
  );

  RETURN v_device_id ;
END;
$$;


ALTER FUNCTION mrsdba.mrs_add_eeg_device_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_input_impedance numeric, p_number_of_channels numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_eeg_series_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_eeg_series_f(p_eeg_session_id numeric, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_series_id   mrs_eeg_series.series_id%TYPE;
  str int[]; /*custom string package won't need for postgresl */
  ndxCount int;
BEGIN

  
  str:=string_to_array(p_eeg_study_task_ids,';');
  ndxCount:=array_upper(str,1);

  for i in 1..ndxCount loop
    BEGIN
      SELECT nextval('MRSEEGSERID_SEQ')
        INTO v_series_id;
    END;

    -- Load record
    INSERT INTO mrs_eeg_series (series_id, eeg_session_id, eeg_study_task_id, sort_order )
    VALUES(
      v_series_id,
      p_eeg_session_id,
      str[i],
      i
    );
    INSERT INTO mrs_eeg_series_hist (series_id, eeg_session_id, eeg_study_task_id, sort_order,
                                 mod_user, mod_date)
    VALUES(
      v_series_id,
      p_eeg_session_id,
      str[i],
      i,
      p_dbtrans_username_pt,
      now()
    );

  end loop;


  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_eeg_series_f(p_eeg_session_id numeric, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_eeg_study_task_f(character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_eeg_study_task_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_taskid   mrs_eeg_study_tasks.eeg_study_task_id%TYPE;
BEGIN

  BEGIN
    SELECT nextval('MRSSTUTAS_EEGTASKID_SEQ')
      INTO v_taskid;
  END;

  -- Load record
  INSERT INTO mrs_eeg_study_tasks (
    eeg_study_task_id,
    label,
    description,
    study_id
  )
  VALUES (
    v_taskid,
    p_label,
    p_description,
    p_study_id
  );

  INSERT INTO mrs_eeg_study_tasks_hist (
    eeg_study_task_id,
    label,
    description,
    study_id,
    mod_user,
    mod_date
  )
  VALUES (
    v_taskid,
    p_label,
    p_description,
    p_study_id,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_eeg_study_task_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_generic_drug_f(character varying, character varying, character varying, numeric, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_category_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare

v_output   varchar(1);
BEGIN

  -- Load record
  INSERT INTO mrs_generic_drugs (
    drug_code,
    generic_name,
    description,
    equivalency,
    entered_date,
    notes,
    user_entered
  )
  VALUES (
    p_drug_code,
    p_generic_name,
    p_description,
    p_equivalency,
    now(),
    p_notes,
    p_dbtrans_username_pt
  );

  v_output := mrs_assign_drug_cat_f(p_drug_code, p_category_id);

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_category_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_inst_f(character varying, character varying, character varying, character varying, character varying, numeric, numeric, numeric, boolean, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_inst_f(p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_study_id numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_sa_hide_skipped_questions boolean, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_instrument_id  numeric; 
   BEGIN

      /* next instrument id */
      BEGIN
         SELECT nextval('mrsinstru_instrumentid_seq')
         INTO v_instrument_id;
      END;


      /* insert instrument properties */
      INSERT INTO mrs_instruments (
          instrument_id,
          label,
          salabel,
          copyright_notice,
          description,
          version,
          display_type,
          max_per_segment,
          hide_sa_previous,
          skip_question_text,
          sa_hide_skipped_questions
      )
      VALUES (
          v_instrument_id,
          p_label,
          p_salabel,
          p_copyright_notice,
          p_description,
          p_version,
          p_display_type,
          p_max_per_segment,
          p_hide_sa_previous,
          p_skip_question_text,
          p_sa_hide_skipped_questions
      );


      /* insert instrument properties */
      INSERT INTO mrs_instruments_hist (
          instrument_id,
          label,
          salabel,
          copyright_notice,
          description,
          version,
          display_type,
          max_per_segment,
          hide_sa_previous,
          skip_question_text,
          sa_hide_skipped_questions,
          mod_user,
          mod_date
      )
      VALUES (
          v_instrument_id,
          p_label,
          p_salabel,
          p_copyright_notice,
          p_description,
          p_version,
          p_display_type,
          p_max_per_segment,
          p_hide_sa_previous,
          p_skip_question_text,
          p_sa_hide_skipped_questions,
          p_mod_user,
          now()
      );

      PERFORM mrs_assign_instrument_study_f(
        v_instrument_id,
        p_study_id,
        1, -- is owner
        p_mod_user
      );

      RETURN v_instrument_id;

   END;
$$;


ALTER FUNCTION mrsdba.mrs_add_inst_f(p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_study_id numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_sa_hide_skipped_questions boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_inst_question_f(character varying, character varying, character varying, character varying, character varying, numeric, numeric, numeric, character varying, character varying, character varying, character varying, boolean, boolean, boolean, boolean, character varying, character varying, character varying, numeric, character varying, character, character, boolean, boolean, numeric, numeric, numeric, boolean, boolean, boolean, character varying, character varying, character varying, numeric, numeric, boolean, integer, character varying, numeric, numeric, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_sort_order numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_copied_from_question_id character varying, p_table_row_id numeric, p_table_col_id numeric, p_is_de_hidden boolean, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_checkVar int;
BEGIN

SELECT COUNT(*)
INTO v_checkVar 
FROM mrs_instrument_questions 
WHERE question_id = p_question_id;

IF v_checkVar = 0 THEN

   INSERT INTO mrs_instrument_questions (
      question_id,
      label,
      sa_label,
      description,
      example_description,
      exclusion_description,
      max_instances,
      section_id,
      sort_order,
      dsm_question_type,
      disp_label_first,
      formula_question_type,
      formula,
      is_required,
      is_sa_hidden,
      is_sa_radio_type,
      is_auto_complete_type,
      autopop_qid,
      assumed_value,
      response_format_id,
      other_option_label,
      specify_detail,
      multiple_choice,
      istextquestion,
      isvasquestion,
      vas_minimum,
      vas_maximum,
      vas_interval,
      vas_min_label,
      vas_mid_label,
      vas_max_label,
      vas_display_extrema,
      vas_display_cursor_value,
      vas_display_center_mark,
      numeric_response_min,
      numeric_response_max,
      is_media_upload,
      vas_recording_interval,
      copied_from_question_id,
      table_row_id,
      table_col_id,
      is_de_hidden
   )
   VALUES (
      p_question_id,
      p_label,
      p_sa_label,
      p_description,
      p_example_description,
      p_exclusion_description,
      p_max_instances,
      p_section_id,
      p_sort_order,
      p_dsm_question_type,
      p_disp_label_first,
      p_formula_question_type,
      p_formula,
      p_is_required,
      p_is_sa_hidden,
      p_is_sa_radio_type,
      p_is_auto_complete_type,
      p_autopop_qid,
      p_assumed_value,
      p_response_format_id,
      p_other_option_label,
      p_specify_detail,
      p_multiple_choice,
      p_istextquestion,
      p_isvasquestion,
      p_vas_minimum,
      p_vas_maximum,
      p_vas_interval,
      p_vas_min_label,
      p_vas_mid_label,
      p_vas_max_label,
      p_vas_display_extrema,
      p_vas_display_cursor_value,
      p_vas_display_center_mark,
      p_numeric_response_min,
      p_numeric_response_max,
      p_is_media_upload,
      p_vas_recording_interval,
      p_copied_from_question_id,
      p_table_row_id,
      p_table_col_id,
      p_is_de_hidden
   );

   INSERT INTO mrs_instrument_questions_hist (
      question_id,
      label,
      sa_label,
      description,
      example_description,
      exclusion_description,
      max_instances,
      section_id,
      sort_order,
      dsm_question_type,
      disp_label_first,
      formula_question_type,
      formula,
      is_required,
      is_sa_hidden,
      is_sa_radio_type,
      is_auto_complete_type,
      autopop_qid,
      assumed_value,
      response_format_id,
      other_option_label,
      specify_detail,
      multiple_choice,
      istextquestion,
      isvasquestion,
      vas_minimum,
      vas_maximum,
      vas_interval,
      vas_min_label,
      vas_mid_label,
      vas_max_label,
      vas_display_extrema,
      vas_display_cursor_value,
      vas_display_center_mark,
      numeric_response_min,
      numeric_response_max,
      is_media_upload,
      vas_recording_interval,
      copied_from_question_id,
      table_row_id,
      table_col_id,
      is_de_hidden,
      mod_user,
      mod_date
   )
   VALUES (
      p_question_id,
      p_label,
      p_sa_label,
      p_description,
      p_example_description,
      p_exclusion_description,
      p_max_instances,
      p_section_id,
      p_sort_order,
      p_dsm_question_type,
      p_disp_label_first,
      p_formula_question_type,
      p_formula,
      p_is_required,
      p_is_sa_hidden,
      p_is_sa_radio_type,
      p_is_auto_complete_type,
      p_autopop_qid,
      p_assumed_value,
      p_response_format_id,
      p_other_option_label,
      p_specify_detail,
      p_multiple_choice,
      p_istextquestion,
      p_isvasquestion,
      p_vas_minimum,
      p_vas_maximum,
      p_vas_interval,
      p_vas_min_label,
      p_vas_mid_label,
      p_vas_max_label,
      p_vas_display_extrema,
      p_vas_display_cursor_value,
      p_vas_display_center_mark,
      p_numeric_response_min,
      p_numeric_response_max,
      p_is_media_upload,
      p_vas_recording_interval,
      p_copied_from_question_id,
      p_table_row_id,
      p_table_col_id,
      p_is_de_hidden,
      p_mod_user,
      now()
   );

   RETURN '1';

ELSE 
   RETURN 'NOT_UNIQUE';
END IF;

END;
$$;


ALTER FUNCTION mrsdba.mrs_add_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_sort_order numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_copied_from_question_id character varying, p_table_row_id numeric, p_table_col_id numeric, p_is_de_hidden boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_inst_question_score_f(character varying, numeric, character); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_inst_question_score_f(question_id_f character varying, study_id_f numeric, selected_f character) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin

insert into mrsdba.mrs_instrument_question_score
(question_id, study_id, selected) 
values(
question_id_f,
study_id_f,
selected_f);

return '1';

end;$$;


ALTER FUNCTION mrsdba.mrs_add_inst_question_score_f(question_id_f character varying, study_id_f numeric, selected_f character) OWNER TO postgres;

--
-- Name: mrs_add_inst_response_f(character varying, character varying, character varying, numeric, boolean, boolean, boolean, character, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_inst_response_f(p_question_id character varying, p_label character varying, p_description character varying, p_value numeric, p_is_critical boolean, p_is_hidden boolean, p_skip_revscore boolean, p_specify_detail character, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_cnt_responses       numeric;
   v_sort_order          numeric;
   v_response_id         numeric;
BEGIN

   -- first, run this function so that we can guarantee that the sort_order
   -- A) starts at 1
   -- B) does not skip any numbers
   PERFORM mrs_reorder_inst_responses_f(p_question_id, p_mod_user);
   
   -- determine current number of response codes for this question_id
   SELECT COUNT(*)
   INTO v_cnt_responses
   FROM mrs_instrument_code_responses
   WHERE question_id = p_question_id;

   -- set the new sort_order by incrementing total number of response codes by 1
   v_sort_order := v_cnt_responses + 1;

   INSERT INTO mrs_instrument_code_responses (
      label,
      description,
      value,
      question_id,
      sort_order,
      is_critical,
      is_hidden,
      skip_revscore,
      specify_detail
   )
   VALUES (
      p_label,
      p_description,
      p_value,
      p_question_id,
      v_sort_order,
      p_is_critical,
      p_is_hidden,
      p_skip_revscore,
      p_specify_detail
   )
   RETURNING response_id::numeric
   INTO v_response_id;

   INSERT INTO mrs_instrument_code_responses_hist (
      label,
      description,
      value,
      question_id,
      sort_order,
      is_critical,
      is_hidden,
      skip_revscore,
      specify_detail,
      response_id,
      mod_user,
      mod_date
   )
   VALUES (
      p_label,
      p_description,
      p_value,
      p_question_id,
      v_sort_order,
      p_is_critical,
      p_is_hidden,
      p_skip_revscore,
      p_specify_detail,
      v_response_id,
      p_mod_user,
      NOW()
   );

   RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_add_inst_response_f(p_question_id character varying, p_label character varying, p_description character varying, p_value numeric, p_is_critical boolean, p_is_hidden boolean, p_skip_revscore boolean, p_specify_detail character, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_inst_section_details_f(numeric, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_sort_order numeric;
BEGIN

   SELECT (max(sort_order) + 1) into v_sort_order
   FROM mrsdba.mrs_instrument_section_details
   WHERE instrument_id = p_instrument_id;

   IF v_sort_order IS null OR v_sort_order = 0 THEN
      v_sort_order := 1;
   END IF;

   INSERT INTO mrs_instrument_section_details_hist (
      instrument_id, section_id, sort_order, sa_questions_per_page, mod_user, mod_date
   ) VALUES (
      p_instrument_id, p_section_id, v_sort_order, p_sa_questions_per_page, p_mod_user, now()
   );

   INSERT INTO mrs_instrument_section_details (
      instrument_id, section_id, sort_order, sa_questions_per_page
   ) VALUES (
      p_instrument_id, p_section_id, v_sort_order, p_sa_questions_per_page
   );

   RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) OWNER TO postgres;

--
-- Name: mrs_add_inst_section_f(character varying, character varying, numeric, character varying, character varying, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_inst_section_f(p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_section_id  numeric;
BEGIN

    BEGIN
        SELECT nextval('mrsinssec_sectionid_seq')
        INTO v_section_id;
    END;

    INSERT INTO mrs_instrument_sections_hist (
        section_id, label, description, multi_inst_grid, sa_label, sa_description, is_likert_grid, is_table_grid, mod_user, mod_date
     ) VALUES (
        v_section_id, p_label, p_description, p_multi_inst_grid, p_sa_label, p_sa_description, p_is_likert_grid, p_is_table_grid, p_mod_user, now()
     );

     INSERT INTO mrs_instrument_sections (
        section_id, label, description, multi_inst_grid, sa_label, sa_description, is_likert_grid, is_table_grid
     ) VALUES (
        v_section_id, p_label, p_description, p_multi_inst_grid, p_sa_label, p_sa_description, p_is_likert_grid, p_is_table_grid
     );

     RETURN v_section_id;

END;
$$;


ALTER FUNCTION mrsdba.mrs_add_inst_section_f(p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_instrument_question_media_f(character varying, integer, integer, character varying, character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_instrument_question_media_f(p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE
            v_question_media_id int;
         BEGIN
            INSERT INTO mrs_instrument_question_media
            (question_id,
             media_type_id,
             sort_order,
             url,
             attributes,
             caption,
             position)
            VALUES (
             p_question_id,
             p_media_type_id,
             p_sort_order,
             p_url,
             p_attributes,
             p_caption,
             p_position);
            
            SELECT LASTVAL() INTO v_question_media_id;

            INSERT INTO mrs_instrument_question_media_hist
            (question_media_id,
             question_id,
             media_type_id,
             sort_order,
             url,
             attributes,
             caption,
             position,
             mod_user,
             mod_date)
            SELECT
            question_media_id,
             question_id,
             media_type_id,
             sort_order,
             url,
             attributes,
             caption,
             position,
             p_dbtrans_username,
             now()
            FROM mrs_instrument_question_media
            WHERE question_media_id = v_question_media_id;

            RETURN v_question_media_id;
         END;
      $$;


ALTER FUNCTION mrsdba.mrs_add_instrument_question_media_f(p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) OWNER TO postgres;

--
-- Name: mrs_add_instrument_question_media_type_f(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_instrument_question_media_type_f(p_label character varying, p_description character varying, p_html_wrapper character varying, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN
            INSERT INTO mrs_instrument_question_media_types
            (label,
            description,
            html_wrapper
            )
            VALUES
            (
            p_label,
            p_description,
            p_html_wrapper
            );
            INSERT INTO mrs_instrument_question_media_types_hist
            (
            media_type_id,
            label,
            description,
            html_wrapper,
            mod_user,
            mod_date
            )
            VALUES
            ((SELECT LASTVAL()),
            p_label,
            p_description,
            p_html_wrapper,
            p_dbtrans_username,
            now()
            );
            RETURN LASTVAL();
         END;
      $$;


ALTER FUNCTION mrsdba.mrs_add_instrument_question_media_type_f(p_label character varying, p_description character varying, p_html_wrapper character varying, p_dbtrans_username character varying) OWNER TO postgres;

--
-- Name: mrs_add_instrument_table_col_f(numeric, character varying, integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_instrument_table_col_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_col_id numeric(10,0);
BEGIN
    SELECT nextval('mrsdba.mrs_instrument_table_cols_counter') INTO v_col_id;
    INSERT INTO mrs_instrument_table_cols (
        col_id,
        table_id,
        label,
        sort_order)
    VALUES (
        v_col_id,
        p_table_id,
        p_label,
        p_sort_order);

    INSERT INTO mrs_instrument_table_cols_hist (
        col_id,
        table_id,
        label,
        sort_order,
        mod_user,
        mod_date)
    VALUES (
        v_col_id,
        p_table_id,
        p_label,
        p_sort_order,
        p_mod_user,
        now());

    RETURN v_col_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_add_instrument_table_col_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_instrument_table_f(numeric, integer, integer, text, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_instrument_table_f(p_section_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_table_id numeric(10,0);
    v_sort_order integer;
BEGIN
    SELECT nextval('mrsdba.mrs_instrument_tables_counter') INTO v_table_id;

    SELECT max(sort_order) FROM mrs_instrument_tables WHERE section_id = p_section_id INTO v_sort_order;
    IF v_sort_order IS NULL THEN 
        v_sort_order := 1;
    ELSE 
        v_sort_order := v_sort_order + 1;
    END IF;

    INSERT INTO mrs_instrument_tables (
        table_id,
        section_id,
        num_rows,
        num_cols,
        label,
        description,
        sort_order) 
    VALUES (
        v_table_id,
        p_section_id,
        p_num_rows,
        p_num_cols,
        p_label,
        p_description,
        v_sort_order);

    INSERT INTO mrs_instrument_tables_hist (
        table_id,
        section_id,
        num_rows,
        num_cols,
        label,
        description,
        sort_order,
        mod_user,
        mod_date)
    VALUES (
        v_table_id,
        p_section_id,
        p_num_rows,
        p_num_cols,
        p_label,
        p_description,
        v_sort_order,
        p_mod_user,
        now());
    RETURN v_table_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_add_instrument_table_f(p_section_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_instrument_table_row_f(numeric, character varying, integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_instrument_table_row_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_row_id numeric(10,0);
BEGIN
    SELECT nextval('mrsdba.mrs_instrument_table_rows_counter') INTO v_row_id;
    INSERT INTO mrs_instrument_table_rows (
        row_id,
        table_id,
        label,
        sort_order)
    VALUES (
        v_row_id,
        p_table_id,
        p_label,
        p_sort_order);

    INSERT INTO mrs_instrument_table_rows_hist (
        row_id,
        table_id,
        label,
        sort_order,
        mod_user, 
        mod_date)
    VALUES (
        v_row_id,
        p_table_id,
        p_label,
        p_sort_order,
        p_mod_user,
        now());

    RETURN v_row_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_add_instrument_table_row_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_internal_subject_f(character varying, numeric, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_internal_subject_f(p_sid character varying, p_ext_id numeric, p_identifier character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_match_level character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 v_match_found  character varying(50);
 v_ursi         mrs_subjects.ursi%TYPE;
 v_site_id      mrs_subjects.site_id%TYPE;
 v_output       character varying(1);
BEGIN

  -- Determine if the subject has already been entered into the database.
  -- NONE indicates no match algorith is required.
  -- HJB 20050228 we null external id and type because it was allowing
  -- existing ursis to have duplicates if either no ext id was given on entry
  -- or followup entry, plus if more than one ext id is defined the application
  -- only permits one external id to be entered at entry event
  --
  IF UPPER(NVL(p_match_level,'NONE')) != 'NONE' THEN
    v_match_found := mrs_match_subject_f(
                       p_sid,
                       p_first_name,
                       p_last_name,
                       p_birthdate,
                       p_gender,
                       null,
                       null,
                       p_match_level
                     );
  END IF;

  IF UPPER(v_match_found) IN ('MATCH_FOUND','EXACT_MATCH') THEN
    RETURN v_match_found;
  END IF;

  -- Get the URSI number
  BEGIN
   SELECT mrs_get_next_ursi_f(config_value)
     INTO v_ursi
     FROM mrs_configs
    WHERE UPPER(config_label) = 'URSI_PREFIX'
      AND UPPER(group_label)  = 'PREFIX_CODES';
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE NOTICE 'URSI Prefix not found in configuration table';
  END;

  -- Get the local site id
  BEGIN
   SELECT config_value
     INTO v_site_id
     FROM mrs_configs
    WHERE UPPER(config_label) = 'LOCAL'
      AND UPPER(group_label)  = 'SITE_ID';
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE NOTICE 'Local site id not found in configuration table';
  END;

  -- Load data
  INSERT INTO mrs_subjects (
    ursi,
    first_name,
    middle_name,
    last_name,
    site_id,
    birth_date,
    gender,
    entered_date,
    user_entered
  )
  VALUES (
    v_ursi,
    p_first_name,
    p_middle_name,
    p_last_name,
    v_site_id,
    p_birthdate,
    p_gender,
    sysdate,
    p_dbtrans_username_pt
  );

  INSERT INTO mrs_subjects_hist (
    ursi,
    first_name,
    middle_name,
    last_name,
    site_id,
    birth_date,
    gender,
    entered_date,
    user_entered,
    mod_user,
    mod_date
  )
  VALUES (
    v_ursi,
    p_first_name,
    p_middle_name,
    p_last_name,
    v_site_id,
    p_birthdate,
    p_gender,
    sysdate,
    p_dbtrans_username_pt,
    p_dbtrans_username_pt,
    sysdate
  );

  -- Don't worry about the output value.  It will always return '1'
  -- if the call was successful.  An exception will be raised otherwise.

  -- Assign an external identifier if it was specified
  IF p_ext_id IS NOT NULL AND
     p_identifier IS NOT NULL THEN
    v_output := mrs_assign_extid_f(
                  v_ursi,
                  p_ext_id,
                  p_identifier,
                  p_dbtrans_username_pt
                );
  END IF;

  -- Add addresss info
  v_output := mrs_add_address_f(
                v_ursi,
                p_line1,
                p_line2,
                p_city,
                p_state,
                p_zip,
                p_country,
                p_notes,
                p_dbtrans_username_pt
              );

  RETURN '1';
END;
$$;


ALTER FUNCTION mrsdba.mrs_add_internal_subject_f(p_sid character varying, p_ext_id numeric, p_identifier character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_match_level character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_mail_f(numeric, boolean, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_mail_f(p_study_id numeric, p_use_coins_template boolean, p_from_label character varying, p_recipients character varying, p_reply_to_address character varying, p_subject character varying, p_text_body character varying, p_html_body character varying, p_disclamer_text character varying, p_menu_link_key character varying, p_send_time timestamp without time zone, p_user_entered character varying) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        BEGIN
            INSERT INTO mrs_mail (
                study_id
                ,use_coins_template
                ,from_label
                ,recipients
                ,reply_to_address
                ,subject
                ,text_body
                ,html_body
                ,disclamer_text
                ,menu_link_key
                ,send_time
            )
            VALUES (
                p_study_id
                ,p_use_coins_template
                ,p_from_label
                ,p_recipients
                ,p_reply_to_address
                ,p_subject
                ,p_text_body
                ,p_html_body
                ,p_disclamer_text
                ,p_menu_link_key
                ,p_send_time
            );

            INSERT INTO mrs_mail_hist (
                study_id
                ,use_coins_template
                ,from_label
                ,recipients
                ,reply_to_address
                ,subject
                ,text_body
                ,html_body
                ,disclamer_text
                ,menu_link_key
                ,send_time
                ,mod_user
                ,mod_date
            )
            VALUES (
                p_study_id
                ,p_use_coins_template
                ,p_from_label
                ,p_recipients
                ,p_reply_to_address
                ,p_subject
                ,p_text_body
                ,p_html_body
                ,p_disclamer_text
                ,p_menu_link_key
                ,p_send_time
                ,p_user_entered
                ,now()
                );
            RETURN TRUE;

        END;
    $$;


ALTER FUNCTION mrsdba.mrs_add_mail_f(p_study_id numeric, p_use_coins_template boolean, p_from_label character varying, p_recipients character varying, p_reply_to_address character varying, p_subject character varying, p_text_body character varying, p_html_body character varying, p_disclamer_text character varying, p_menu_link_key character varying, p_send_time timestamp without time zone, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_message_f(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_message_f(subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare 
	message_id_f numeric;
begin
	select nextval('mrsdba.mrs_messages_counter') into message_id_f;
	insert into mrs_messages (
		message_id,
		message_subject,
		message_body,
		message_from,
		message_to) values (
		message_id_f,
		subject_f,
		body_f,
		from_f,
		to_f);
	
	insert into mrs_messages_hist (
		message_id,
		message_subject,
		message_body,
		message_from,
		message_to,
		mod_user,
		mod_date) values (
		message_id_f,
		subject_f,
		body_f,
		from_f,
		to_f,
		mod_user_f,
		now());
	return message_id_f;
end;$$;


ALTER FUNCTION mrsdba.mrs_add_message_f(subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_add_missing_assessment_reason_f(character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_missing_assessment_reason_f(label_f character varying, description_f character varying, study_id_f numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare
    id_f numeric;
begin
    select nextval('mrs_missing_assessment_reasons_counter') into id_f;
    insert into mrs_missing_assessment_reasons (id, label, description) values (id_f, label_f, description_f);
    insert into mrs_study_missing_assessment_reasons(reason_id, study_id) values(id_f, study_id_f);
    insert into mrs_missing_assessment_reasons_hist(id, label, description, study_id, date) values(id_f, label_f, description_f, study_id_f, now());

    return id_f;
end;$$;


ALTER FUNCTION mrsdba.mrs_add_missing_assessment_reason_f(label_f character varying, description_f character varying, study_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_add_modality_f(character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_modality_f(p_label character varying, p_description character varying, p_acquisition_level character varying, p_attribute_view character varying, p_attribute_view_id_column character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
               declare
                 v_modalityid  mrs_modalities.modality_id%TYPE;
               BEGIN

                 BEGIN
                   SELECT nextval('mrsmodali_modalityid_seq')
                     INTO v_modalityid;
                 END;

                 -- Load record
                 INSERT INTO mrs_modalities (
                   modality_id,
                   label,
                   description,
                   acquisition_level,
                  attribute_view,
                  attribute_view_id_column
                 )
                 VALUES (
                   v_modalityid,
                   p_label,
                   p_description,
                   p_acquisition_level,
                   p_attribute_view,
                   p_attribute_view_id_column
                 );

                 INSERT INTO mrs_modalities_hist (
                   modality_id,
                   label,
                   description,
                   acquisition_level,
                   attribute_view,
                   attribute_view_id_column,
                   mod_user,
                   mod_date
                 )
                 VALUES (
                   v_modalityid,
                   p_label,
                   p_description,
                   p_acquisition_level,
                   p_attribute_view,
                   p_attribute_view_id_column,
                   p_dbtrans_username_pt,
                   now()
                 );

                 RETURN '1';
               end;
               $$;


ALTER FUNCTION mrsdba.mrs_add_modality_f(p_label character varying, p_description character varying, p_acquisition_level character varying, p_attribute_view character varying, p_attribute_view_id_column character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_person_alias_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_person_alias_f(p_label character varying, p_dbtrans_username_pt character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_alias_id    mrs_person_alias.alias_id%TYPE;
BEGIN

  BEGIN
    SELECT nextval('mrsperali_aliasid_seq')
      INTO v_alias_id;
  END;

  -- Load record
  INSERT INTO mrs_person_alias (
    alias_id,
    label
  )
  VALUES (
    v_alias_id,
    p_label
  );

  INSERT INTO mrs_person_alias_hist (
    alias_id,
    label,
    mod_user,
    mod_date
  )
  VALUES (
    v_alias_id,
    p_label,
    p_dbtrans_username_pt,
    now()
  );

  RETURN v_alias_id;
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_person_alias_f(p_label character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_person_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
BEGIN

  INSERT INTO mrs_persons (
    person_id,
    first_name,
    middle_name,
    last_name,
    site_id,
    department,
    institution,
    contact_email
  )
  VALUES (
    UPPER(p_person_id),
    p_first_name,
    p_middle_name,
    p_last_name,
    p_site_id,
    p_department,
    p_institution,
    p_contact_email
  );
  
  
  INSERT INTO mrs_persons_hist (
    person_id,
    first_name,
    middle_name,
    last_name,
    site_id,
    department,
    institution,
    contact_email,
    mod_user,
    mod_date
  )
  VALUES (
    p_person_id,
    p_first_name,
    p_middle_name,
    p_last_name,
    p_site_id,
    p_department,
    p_institution,
    p_contact_email,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_person_role_detail_f(numeric, character varying, numeric, numeric, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_person_role_detail_f(p_role_id numeric, p_person_id character varying, p_alias_id numeric, p_study_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  DECLARE
  v_prd_id    numeric;

  BEGIN
  
 -- Get next PRD ID from sequence
  SELECT nextval('mrsperode_prdid_seq')
      INTO v_prd_id;
  -- Load record
  INSERT INTO mrs_person_role_details (
    role_id,
    person_id,
    alias_id,
    study_id,
    prd_id,
    is_hidden
  )
  VALUES (
    p_role_id,
    p_person_id,
    p_alias_id,
    p_study_id,
    v_prd_id,
    p_is_hidden
  );

  INSERT INTO mrsdba.mrs_person_role_details_hist (
    role_id,
    person_id,
    alias_id,
    mod_user,
    mod_date,
    study_id,
    prd_id,
    is_hidden
  )
  VALUES (
    p_role_id,
    p_person_id,
    p_alias_id,
    p_dbtrans_username_pt,
    now(),
    p_study_id,
    v_prd_id,
    p_is_hidden
  );

  RETURN v_prd_id;
  
  end;
$$;


ALTER FUNCTION mrsdba.mrs_add_person_role_detail_f(p_role_id numeric, p_person_id character varying, p_alias_id numeric, p_study_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_personaddress_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
v_address_id      integer;
v_add_result            varchar(40);

BEGIN
   SELECT nextval('mrs_perad_address_id_seq')
      INTO v_address_id;
   INSERT INTO mrs_personaddresses (
      address_id,
      address_line_1,
      address_line_2,
      msc,
      city,
      state,
      zip,
      country,
      address_type_id,
      preference_id
   )
   VALUES (
      v_address_id,
      p_address_line_1,
      p_address_line_2,
      p_msc,
      p_city,
      p_state,
      p_zip,
      p_country,
      p_address_type_id,
      p_preference_id
     );
   INSERT INTO mrs_personaddresses_hist (
      address_id,
      address_line_1,
      address_line_2,
      msc,
      city,
      state,
      zip,
      country,
      address_type_id,
      preference_id,
      mod_user,
      mod_date
   )
   VALUES (
      v_address_id,
      p_address_line_1,
      p_address_line_2,
      p_msc,
      p_city,
      p_state,
      p_zip,
      p_country,
      p_address_type_id,
      p_preference_id,
      p_dbtrans_username_pt,
      now()
     );

   v_add_result := mrs_assign_personaddress_f(p_prd_id, v_address_id, p_dbtrans_username_pt);

   RETURN v_add_result;

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) OWNER TO postgres;

--
-- Name: mrs_add_personphone_f(character varying, character varying, character varying, numeric, numeric, numeric, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_personphone_f(p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
v_phone_id      numeric(8,0);
retval            varchar(40);

BEGIN
   SELECT nextval('mrs_perph_phone_id_seq')
      INTO v_phone_id;

   INSERT INTO mrs_personphones (
      phone_id,
      country_code,
      area_code,
      phone_number,
      phone_type_id,
      sms_preference_id,
      preference_id
   )
   VALUES (
      v_phone_id,
      p_country_code,
      p_area_code,
      p_phone_number,
      p_phone_type_id,
      p_sms_preference_id,
      p_preference_id
     );

   INSERT INTO mrs_personphones_hist (
      phone_id,
      country_code,
      area_code,
      phone_number,
      phone_type_id,
      sms_preference_id,
      preference_id,
      mod_user,
      mod_date
   )
   VALUES (
      v_phone_id,
      p_country_code,
      p_area_code,
      p_phone_number,
      p_phone_type_id,
      p_sms_preference_id,
      p_preference_id,
      p_dbtrans_username_pt,
      now()
     );

   retval := mrs_assign_personphone_f(p_prd_id, v_phone_id, p_dbtrans_username_pt);

   RETURN 'ADDED';

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_personphone_f(p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) OWNER TO postgres;

--
-- Name: mrs_add_pr_f(character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_pr_f(p_pr_number character varying, p_study_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Load record
  INSERT INTO mrs_purchase_requests (
    purchase_request_id,
    study_id
  )
  VALUES (
    p_pr_number,
    p_study_id
  );

  INSERT INTO mrs_purchase_requests_hist (
    purchase_request_id,
    study_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_pr_number,
    p_study_id,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_pr_f(p_pr_number character varying, p_study_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_proj_study_det_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_proj_study_det_f(p_study_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
BEGIN

  BEGIN

  INSERT INTO mrs_proj_study_details (
    project_id,
    study_id
  )
  VALUES (
    p_project_id,
    p_study_id
  );

  INSERT INTO mrs_proj_study_det_hist (
    project_id,
    study_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_project_id,
    p_study_id,
    p_dbtrans_username_pt,
    now()
  );

EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;

  END;


RETURN 1;

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_proj_study_det_f(p_study_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_protocol_f(numeric, numeric, character varying, numeric, numeric, integer, integer, character varying, integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_protocol_f(p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 v_protocol_id mrsdba.mrs_protocols.protocol_id%type;
BEGIN

   SELECT NEXTVAL('mrs_protocols_counter')
   INTO v_protocol_id;

   INSERT INTO mrsdba.mrs_protocols(
      protocol_id,
      subject_type_id,
      segment_interval_id,
      protocol_type_id,
      description,
      start_minutes_from_segment_interval,
      end_minutes_from_segment_interval,
      label,
      source_type_id,
      queue_type_id
   )
   VALUES(
      v_protocol_id,
      p_subject_type_id,
      p_segment_interval_id,
      p_protocol_type_id,
      p_description,
      p_start_minutes_from_segment_interval,
      p_end_minutes_from_segment_interval,
      p_label,
      p_source_type_id,
      p_queue_type_id
   );

   INSERT INTO mrsdba.mrs_protocols_hist(
      protocol_id,
      subject_type_id,
      segment_interval_id,
      protocol_type_id,
      description,
      start_minutes_from_segment_interval,
      end_minutes_from_segment_interval,
      source_type_id,
      label,
      queue_type_id,
      mod_user,
      mod_date
      
   )
   VALUES(
      v_protocol_id,
      p_subject_type_id,
      p_segment_interval_id,
      p_protocol_type_id,
      p_description,
      p_start_minutes_from_segment_interval,
      p_end_minutes_from_segment_interval,
      p_source_type_id,
      p_label,
      p_queue_type_id,
      p_mod_user,
      now()
   );

   RETURN v_protocol_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_add_protocol_f(p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_protocol_requirement_f(numeric, character varying, character varying, character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_protocol_requirement_f(p_protocol_id numeric, p_table_name character varying, p_owner character varying, p_column_name character varying, p_column_type character varying, p_column_req_value_string character varying, p_column_req_value_number numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE

 V_REQUIREMENT_ID MRSDBA.MRS_PROTOCOL_REQUIREMENTS.PROTOCOL_REQ_ID%TYPE;
BEGIN
   BEGIN
      SELECT PROTOCOL_REQ_ID INTO STRICT V_REQUIREMENT_ID
      FROM MRSDBA.MRS_PROTOCOL_REQUIREMENTS
      WHERE PROTOCOL_ID = P_PROTOCOL_ID
            AND TABLE_NAME = P_TABLE_NAME
            AND OWNER = P_OWNER
            AND COLUMN_NAME = P_COLUMN_NAME
            AND COLUMN_TYPE = P_COLUMN_TYPE
            AND (COLUMN_REQ_VALUE_STRING = P_COLUMN_REQ_VALUE_STRING
                 OR (COLUMN_REQ_VALUE_STRING IS NULL AND COLUMN_REQ_VALUE_STRING IS NULL))
            AND (COLUMN_REQ_VALUE_NUMBER = P_COLUMN_REQ_VALUE_NUMBER
                 OR (COLUMN_REQ_VALUE_NUMBER IS NULL AND COLUMN_REQ_VALUE_NUMBER IS NULL));

   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         SELECT nextval('MRS_PROTOCOL_REQS_COUNTER')
            INTO V_REQUIREMENT_ID;

         INSERT INTO MRSDBA.MRS_PROTOCOL_REQUIREMENTS(
            PROTOCOL_REQ_ID,
            PROTOCOL_ID,
            TABLE_NAME,
            OWNER,
            COLUMN_NAME,
            COLUMN_TYPE,
            COLUMN_REQ_VALUE_STRING,
            COLUMN_REQ_VALUE_NUMBER
         )
         VALUES(
            V_REQUIREMENT_ID,
            P_PROTOCOL_ID,
            P_TABLE_NAME,
            P_OWNER,
            P_COLUMN_NAME,
            P_COLUMN_TYPE,
            P_COLUMN_REQ_VALUE_STRING,
            P_COLUMN_REQ_VALUE_NUMBER
         );
   END;
   RETURN V_REQUIREMENT_ID;
END;
$$;


ALTER FUNCTION mrsdba.mrs_add_protocol_requirement_f(p_protocol_id numeric, p_table_name character varying, p_owner character varying, p_column_name character varying, p_column_type character varying, p_column_req_value_string character varying, p_column_req_value_number numeric) OWNER TO postgres;

--
-- Name: mrs_add_queue_template_f(character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_queue_template_f(p_template_name character varying, p_study_id numeric, p_dbtrans_username character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
V_TEMPLATE_ID NUMERIC;
BEGIN
    BEGIN
        SELECT nextval('MRS_STUDY_TEMPLATE_COUNTER')
        INTO V_TEMPLATE_ID;
    END;

    INSERT INTO MRS_STUDY_TEMPLATES_HIST(
        TEMPLATE_ID,
        TEMPLATE_NAME,
        STUDY_ID,
        MOD_USER,
        MOD_DATE
    )
    VALUES(
        V_TEMPLATE_ID,
        P_TEMPLATE_NAME,
        P_STUDY_ID,
        P_DBTRANS_USERNAME,
        NOW()
    );

    INSERT INTO MRS_STUDY_TEMPLATES(
        TEMPLATE_ID,
        TEMPLATE_NAME,
        STUDY_ID
    )
    VALUES(
        V_TEMPLATE_ID,
        P_TEMPLATE_NAME,
        P_STUDY_ID
    );

    RETURN V_TEMPLATE_ID;
    END;
$$;


ALTER FUNCTION mrsdba.mrs_add_queue_template_f(p_template_name character varying, p_study_id numeric, p_dbtrans_username character varying) OWNER TO postgres;

--
-- Name: mrs_add_queue_template_inst_f(numeric, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_queue_template_inst_f(p_template_id numeric, p_instrument_id numeric, p_sort_order numeric, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
BEGIN

   INSERT INTO MRS_TEMPLATE_INSTRUMENTS_HIST(
        TEMPLATE_ID,
        INSTRUMENT_ID,
        SORT_ORDER,
        MOD_USER,
        MOD_DATE
    )
    VALUES(
        P_TEMPLATE_ID,
        P_INSTRUMENT_ID,
        P_SORT_ORDER,
        P_DBTRANS_USERNAME,
        NOW()
    );

    INSERT INTO MRS_TEMPLATE_INSTRUMENTS(
        TEMPLATE_ID,
        INSTRUMENT_ID,
        SORT_ORDER
    )
    VALUES(
        P_TEMPLATE_ID,
        P_INSTRUMENT_ID,
        P_SORT_ORDER
    );
    return '1';

    END;
$$;


ALTER FUNCTION mrsdba.mrs_add_queue_template_inst_f(p_template_id numeric, p_instrument_id numeric, p_sort_order numeric, p_dbtrans_username character varying) OWNER TO postgres;

--
-- Name: mrs_add_rad_comment_f(character varying, boolean, text); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_rad_comment_f(p_comment_text character varying, p_requires_followup boolean, p_category text) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         declare
         v_comment_id mrsdba.mrs_radiologist_comments.comment_id%TYPE;
         begin
            select nextval('mrs_rad_comment_id_counter')
            into v_comment_id;

            insert into
            mrsdba.mrs_radiologist_comments(comment_id,
                                            comment_text,
                                            requires_followup,
                                            category)
            values(v_comment_id,
                   p_comment_text,
                   p_requires_followup,
                   p_category);

            return v_comment_id;

         end;
         $$;


ALTER FUNCTION mrsdba.mrs_add_rad_comment_f(p_comment_text character varying, p_requires_followup boolean, p_category text) OWNER TO postgres;

--
-- Name: mrs_add_rate_f(numeric, numeric, character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_rate_f(p_scanner_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_rate_amt numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Load record
  INSERT INTO mrs_study_scanner_rates (
    scanner_id,
    study_id,
    label,
    description,
    rate_amt,
    start_date
  )
  VALUES (
    p_scanner_id,
    p_study_id,
    p_label,
    p_description,
    p_rate_amt,
    now()
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_rate_f(p_scanner_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_rate_amt numeric) OWNER TO postgres;

--
-- Name: mrs_add_rater_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_rater_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_alias character varying, p_study_id numeric, p_alias_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
 v_alias_id            mrs_person_alias.alias_id%TYPE;
 v_role_id             mrs_person_role_details.role_id%TYPE;
 v_function_response   varchar(40);
 v_person_id_count     int:=0;
 v_is_hidden           boolean := FALSE;
 
BEGIN

  IF p_alias_id IS NULL THEN

     select count(1) into v_person_id_count
     from mrs_persons where person_id = p_person_id;
     
     IF v_person_id_count = 0 THEN
       v_function_response := mrsdba.mrs_add_person_f(
       p_person_id,
       p_first_name,
       p_middle_name,
       p_last_name,
       p_site_id,
       p_department,
       p_institution,
       p_contact_email,
       p_dbtrans_username_pt);
     END IF;

    v_alias_id := mrsdba.mrs_add_person_alias_f(p_alias,p_dbtrans_username_pt);
  ELSE v_alias_id := p_alias_id;
  END IF;

  v_function_response := mrsdba.mrs_add_person_role_detail_f(
    2,
    p_person_id,
    v_alias_id,
    p_study_id,
    v_is_hidden,
    p_dbtrans_username_pt);

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_rater_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_alias character varying, p_study_id numeric, p_alias_id numeric, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_recent_scan_export_f(character varying, text, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_recent_scan_export_f(p_dbuser character varying, p_query_text text, p_label character varying, p_scan_export_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare 
	v_scan_export_id numeric (8,0);
	v_user_row_count int;
	v_most_recent_export text;
	v_overwrite int;
begin
	begin
		select count(1)
		INTO v_overwrite
		FROM mrsdba.mrs_recent_scan_exports
		WHERE scan_export_id = p_scan_export_id
		AND query_text = p_query_text;
	end;

	begin 
		SELECT query_text
		INTO v_most_recent_export
		FROM mrsdba.mrs_recent_scan_exports
		WHERE db_username = p_dbuser
		AND export_date = 
		(
			SELECT max(export_date)
			FROM mrsdba.mrs_recent_scan_exports
			WHERE db_username = p_dbuser
		);
	end;
		
	
	IF v_overwrite != 0 THEN
		UPDATE mrsdba.mrs_recent_scan_exports
		SET export_date = now()
		WHERE scan_eport_id = p_scan_export_id;

		RETURN 'UPDATED';
		
	ELSIF v_most_recent_export = p_query_text THEN
		UPDATE mrsdba.mrs_recent_scan_exports
		SET export_date = now()
		WHERE db_username = p_dbuser
		AND export_date = 
		(
			SELECT max(export_date)
			FROM mrsdba.mrs_recent_scan_exports
			WHERE db_username = p_dbuser
		);

		RETURN 'UPDATED';
	ELSE
		--count number of records for that user in the table
		begin 
			SELECT count(1) 
			INTO v_user_row_count
			FROM mrsdba.mrs_recent_scan_exports
			WHERE db_username = p_dbuser;
		end;
		
		--if there are 20 rows for this user, delete the least recent row
		IF v_user_row_count > 19 THEN
			begin
				DELETE FROM mrsdba.mrs_recent_scan_exports
				WHERE export_date = 
					(
						SELECT MIN(export_date)
						FROM mrsdba.mrs_recent_scan_exports
						WHERE db_username = p_dbuser
					)
					AND db_username = p_dbuser;
			end;
		END IF;

		--get next scan_export_id
		begin 
			SELECT nextval('mrsrecscanexp_scanexpid_seq')
				INTO v_scan_export_id;
		end;

		begin
			INSERT INTO mrsdba.mrs_recent_scan_exports 
				(
					scan_export_id,
					db_username,
					export_date,
					query_text,
					label
				)
			VALUES 
				(
					v_scan_export_id,
					p_dbuser,
					now(),
					p_query_text,
					p_label
				);
		end;

		return v_scan_export_id;
	END IF;
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_recent_scan_export_f(p_dbuser character varying, p_query_text text, p_label character varying, p_scan_export_id numeric) OWNER TO postgres;

--
-- Name: mrs_add_recent_scan_export_study_f(numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_recent_scan_export_study_f(p_scan_export_id numeric, p_study_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare 
	v_retval text;
begin
	INSERT INTO mrsdba.mrs_recent_scan_exports_studies 
		(
			scan_export_id,
			study_id
		)
	VALUES (
			p_scan_export_id,
			p_study_id
		);

return '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_recent_scan_export_study_f(p_scan_export_id numeric, p_study_id numeric) OWNER TO postgres;

--
-- Name: mrs_add_role_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_role_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_role_id    mrs_roles.role_id%TYPE;
BEGIN

  BEGIN
    SELECT nextval('mrsroles_roleid_seq')
      INTO v_role_id;
  END;

  -- Load record
  INSERT INTO mrs_roles (
    role_id,
    label,
    description
  )
  VALUES (
    v_role_id,
    p_label,
    p_description
  );

  INSERT INTO mrs_roles_hist (
    role_id,
    label,
    description,
    mod_user,
    mod_date
  )
  VALUES (
    v_role_id,
    p_label,
    p_description,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_role_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_saved_query_f(character varying, character varying, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_saved_query_f(p_username character varying, p_label character varying, p_json text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_result int;
    v_id int;
    v_query_id    int;
BEGIN
    SELECT count(1) INTO v_result 
    FROM mrsdba.mrs_saved_user_queries
    WHERE username = p_username
        AND label = p_label;

    IF v_result = 0 THEN

    INSERT INTO mrsdba.mrs_saved_queries (
        json_strng
    ) VALUES (
        p_json
    ) RETURNING id INTO v_query_id; 

    INSERT INTO mrsdba.mrs_saved_queries_hist (
        id,
        json_strng,
        mod_user,
        mod_date
    ) VALUES (
        v_query_id,
        p_json,
        p_username,
        now()
    );

    INSERT INTO mrsdba.mrs_saved_user_queries (
        username,
        label,
        query_id
    ) VALUES (
        p_username,
        p_label,
        v_query_id
    ) RETURNING id INTO v_id;

    INSERT INTO mrsdba.mrs_saved_user_queries_hist (
        id,
        username,
        label,
        query_id,
        mod_user,
        mod_date
    ) VALUES (
        v_id,
        p_username,
        p_label,
        v_query_id,
        p_username,
        now()
    );

    RETURN 1;

    ELSE
        RETURN 2;
    END IF;

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_saved_query_f(p_username character varying, p_label character varying, p_json text) OWNER TO ni_developers;

--
-- Name: mrs_add_scan_sessions_review_f(numeric, character varying, timestamp without time zone, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_scan_sessions_review_f(p_scan_id numeric, p_person_id character varying, p_review_date timestamp without time zone, p_recommendation_code character varying, p_recommendation_comments character varying, p_dbtrans_username_pt character varying, p_report_template character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    declare
    v_review_count   NUMERIC;
    v_review_date    mrs_scan_sessions_review.review_date%TYPE;
BEGIN

    -- record the END time for the review
    INSERT INTO mrsdba.mrs_scan_sessions_hist (
        scan_id,
        review_end_date,
        mod_user,
        mod_date
    )
    VALUES (
        p_scan_id,
        now(),
        p_dbtrans_username_pt,
        now()
    );

    UPDATE mrsdba.mrs_scan_sessions
    SET review_end_date = now()
    WHERE
        scan_id = p_scan_id AND
        review_end_date IS NULL;

    -- grab the START time of the review (this is the time that is displayed to users)
    IF p_review_date IS NULL
    THEN
        v_review_date = now();
    ELSE
        v_review_date = p_review_date;
    END IF;

    --Save History
    INSERT INTO mrs_scan_sessions_review_hist (
        scan_id,
        person_id,
        review_date,
        recommendation_code,
        recommendation_comments,
        impression,
        recommendation,
        findings,
        report_template,
        mod_user,
        mod_date
    ) VALUES (
        p_scan_id,
        p_person_id,
        v_review_date,
        p_recommendation_code,
        p_recommendation_comments,
        'N', -- temp
        'none', -- temp
        'none', -- temp
        p_report_template,
        p_dbtrans_username_pt,
        now()
    );

    SELECT count(scan_id) INTO v_review_count
    FROM mrs_scan_sessions_review
    WHERE scan_id=p_scan_id;

    IF v_review_count > 0 THEN
        --remove review
        DELETE from mrs_scan_sessions_review
        WHERE scan_id=p_scan_id;
    END IF;

    -- Load record
    INSERT INTO mrs_scan_sessions_review (
        scan_id,
        person_id,
        review_date,
        recommendation_code,
        recommendation_comments,
        impression,          -- temp
        recommendation,        -- temp
        findings,            -- temp
        report_template
    ) VALUES (
        p_scan_id,
        p_person_id,
        v_review_date,
        p_recommendation_code,
        p_recommendation_comments,
        'N', -- temp
        'none', -- temp
        'none', -- temp
        p_report_template
    );

    RETURN 1;

    end;
$$;


ALTER FUNCTION mrsdba.mrs_add_scan_sessions_review_f(p_scan_id numeric, p_person_id character varying, p_review_date timestamp without time zone, p_recommendation_code character varying, p_recommendation_comments character varying, p_dbtrans_username_pt character varying, p_report_template character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_scan_slots_f(character varying, numeric, character varying, numeric, timestamp without time zone); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_scan_slots_f(p_pi_id character varying, p_default_charge_code_id numeric, p_user_entered character varying, p_count numeric, p_date_effective timestamp without time zone) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
      V_SCAN_SLOT_ID   MRS_SCAN_SLOTS.SCAN_SLOT_ID%TYPE;
      V_DATE_EFFECTIVE MRS_SCAN_SLOTS.DATE_EFFECTIVE%TYPE;

      BEGIN
      /* next scan slot id */
      BEGIN
      SELECT nextval('MRS_SCAN_SLOTS_COUNTER')
      INTO V_SCAN_SLOT_ID;
      END;

      IF P_DATE_EFFECTIVE IS NULL THEN
      V_DATE_EFFECTIVE := now();
      ELSE
      V_DATE_EFFECTIVE := P_DATE_EFFECTIVE;
      END IF;

      /* insert scan slot properties */
      INSERT INTO MRS_SCAN_SLOTS (
      SCAN_SLOT_ID,
      DEFAULT_CHARGE_CODE_ID,
      COUNT,
      USER_ENTERED,
      DATE_EFFECTIVE,
      PI_ID
      )
      VALUES (
      V_SCAN_SLOT_ID,
      P_DEFAULT_CHARGE_CODE_ID,
      P_COUNT,
      P_USER_ENTERED,
      V_DATE_EFFECTIVE,
      P_PI_ID
      );

      /* insert properties into history table*/
      INSERT INTO MRS_SCAN_SLOTS_HIST (
      SCAN_SLOT_ID,
      DEFAULT_CHARGE_CODE_ID,
      COUNT,
      PI_ID,
      DATE_EFFECTIVE,
      USER_MOD,
      DATE_MOD
      )
      VALUES (
      V_SCAN_SLOT_ID,
      P_DEFAULT_CHARGE_CODE_ID,
      P_COUNT,
      P_PI_ID,
      V_DATE_EFFECTIVE,
      P_USER_ENTERED,
      now()
      );

      /* TODO insert associations */

      RETURN V_SCAN_SLOT_ID;

      END;
      $$;


ALTER FUNCTION mrsdba.mrs_add_scan_slots_f(p_pi_id character varying, p_default_charge_code_id numeric, p_user_entered character varying, p_count numeric, p_date_effective timestamp without time zone) OWNER TO postgres;

--
-- Name: mrs_add_scanner_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_scanner_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_field_strength numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_scanner_id  mrs_scanners.scanner_id%TYPE;
   BEGIN

      BEGIN
         SELECT nextval('mrsscanne_scannerid_seq')
         INTO v_scanner_id;
      END;

      -- Load record
      INSERT INTO mrs_scanners 
      (
         scanner_id,
         label,
         description,
         site_id,
         model,
         manufacturer,
         station,
         software_version,
         field_strength,
         start_date,
         modality_id
      )
      VALUES 
      (
         v_scanner_id,
         p_label,
         p_description,
         p_site_id,
         p_model,
         p_manufacturer,
         p_station,
         p_software_version,
         p_field_strength,
         now(),
         p_modality_id
      );

      INSERT INTO mrs_scanners_hist 
      (
         scanner_id,
         label,
         description,
         site_id,
         model,
         manufacturer,
         station,
         software_version,
         field_strength,
         start_date,
         modality_id,
         mod_user,
         mod_date
      )
      VALUES 
      (
         v_scanner_id,
         p_label,
         p_description,
         p_site_id,
         p_model,
         p_manufacturer,
         p_station,
         p_software_version,
         p_field_strength,
         now(),
         p_modality_id,
         p_dbtrans_username_pt,
         now()
      );

      RETURN v_scanner_id;
   END;
$$;


ALTER FUNCTION mrsdba.mrs_add_scanner_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_field_strength numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_series_data_f(character varying, numeric, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_series_data_f(p_series_id character varying, p_scan_data_type_id numeric, p_value character varying, p_series_data_type_instance numeric, p_dbtrans_username_pt character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
v_series_data_id  numeric;
v_series_id  character varying;
v_instance numeric;
BEGIN

   BEGIN
      SELECT nextval('mrsdba.mrs_series_data_counter')
      INTO v_series_data_id;
   END;

   INSERT INTO MRSDBA.MRS_SERIES_DATA(
      SERIES_ID,
      SERIES_DATA_ID,
      SCAN_DATA_TYPE_ID,
      VALUE,
      SERIES_DATA_TYPE_INSTANCE
   )
   VALUES(
      p_series_id,
      v_series_data_id,
      P_SCAN_DATA_TYPE_ID,
      P_VALUE,
      P_SERIES_DATA_TYPE_INSTANCE
   );
   INSERT INTO MRSDBA.MRS_SERIES_DATA_HIST(
      SERIES_DATA_ID,
      SCAN_DATA_TYPE_ID,
      VALUE,
      SERIES_DATA_TYPE_INSTANCE,
      MOD_USER,
      MOD_DATE
   )
   VALUES(
      v_series_data_id,
      P_SCAN_DATA_TYPE_ID,
      P_VALUE,
      P_SERIES_DATA_TYPE_INSTANCE,
      P_DBTRANS_USERNAME_PT,
      now()
   );

RETURN v_series_data_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_add_series_data_f(p_series_id character varying, p_scan_data_type_id numeric, p_value character varying, p_series_data_type_instance numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_series_f(character varying, numeric, numeric, character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_series_f(p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_series_id    mrsdba.mrs_series.series_id%TYPE;
  v_label_id     mrsdba.mrs_series_labels.label_id%TYPE;

  c_scan_details CURSOR IS
  SELECT ss.study_id, s.modality_id
  FROM mrs_scan_sessions ss
  INNER JOIN mrs_scanners s ON ss.scanner_id = s.scanner_id
  WHERE scan_id = p_scan_id;

BEGIN

  BEGIN
    SELECT nextval('mrsdba.mrsseries_seriesid_seq')
      INTO v_series_id;
  END;

  --first, we need to check if this label already exists
  FOR SCAN_DETAILS IN c_scan_details
  LOOP
     SELECT label_id
     FROM mrs_series_labels
     WHERE label = p_label
     AND study_id = SCAN_DETAILS.study_id
     AND modality_id = SCAN_DETAILS.modality_id
     INTO v_label_id;

     -- if v_label_id is null, then we must add this label to the mrs_series_labels table
     IF v_label_id IS NULL THEN
        PERFORM mrs_add_series_label_f(p_label,p_label,SCAN_DETAILS.study_id,NULL,SCAN_DETAILS.modality_id,false,false,true,p_dbtrans_username_pt);

        -- select into v_label_id again...
        SELECT label_id
        FROM mrs_series_labels
        WHERE label = p_label
        AND study_id = SCAN_DETAILS.study_id
        AND modality_id = SCAN_DETAILS.modality_id
        INTO v_label_id;

     END IF;
  END LOOP;

  -- Load record
  INSERT INTO mrsdba.mrs_series (
    series_id,
    scan_id,
    study_code_id,
    usable,
    notes,
    sort_order,
    label_id
  )
  VALUES (
    v_series_id,
    p_scan_id,
    p_study_code_id,
    p_usable,
    p_notes,
    p_sort_order,
    v_label_id
  );

    INSERT INTO mrsdba.mrs_series_hist (
    series_id,
    scan_id,
    study_code_id,
    usable,
    notes,
    sort_order,
    label_id,
    mod_user,
    mod_date
  )
  VALUES (
    v_series_id,
    p_scan_id,
    p_study_code_id,
    p_usable,
    p_notes,
    p_sort_order,
    v_label_id,
    p_dbtrans_username_pt,
    now()
  );


  RETURN v_series_id;

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_series_f(p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_series_label_f(character varying, character varying, numeric, numeric, numeric, boolean, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_series_label_f(p_label character varying, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_modality_id numeric, p_is_hidden boolean, p_rad_loaded boolean, p_dx_excluded boolean, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
           declare
           v_labelid   numeric;
           BEGIN

           BEGIN
           SELECT nextval('mrs_series_labels_label_id_seq')
           INTO v_labelid;
           END;

           -- Load record
           INSERT INTO mrs_series_labels (
           label,
           description,
           study_id,
           modality_id,
           dest_study_id,
           is_hidden,
           label_id,
           rad_loaded,
           dx_excluded
           )
           VALUES (
           p_label,
           p_description,
           p_study_id,
           p_modality_id,
           p_dest_study_id,
           p_is_hidden,
           v_labelid,
           p_rad_loaded,
           p_dx_excluded
           );

           INSERT INTO mrs_series_labels_hist (
           label,
           description,
           study_id,
           modality_id,
           dest_study_id,
           is_hidden,
           label_id,
           rad_loaded,
           dx_excluded,
           mod_user,
           mod_date
           )
           VALUES (
           p_label,
           p_description,
           p_study_id,
           p_modality_id,
           p_dest_study_id,
           p_is_hidden,
           v_labelid,
           p_rad_loaded,
           p_dx_excluded,
           p_dbtrans_username_pt,
           now()
           );

           RETURN '1';
           END;
           $$;


ALTER FUNCTION mrsdba.mrs_add_series_label_f(p_label character varying, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_modality_id numeric, p_is_hidden boolean, p_rad_loaded boolean, p_dx_excluded boolean, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_sharing_rule_f(numeric, numeric, numeric, character varying, character varying, numeric, character varying, numeric, character varying, numeric, numeric, character varying, timestamp without time zone, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_sharing_rule_f(p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
	v_rule_exists numeric;
	v_rule_id numeric;
BEGIN
	BEGIN
	SELECT (sharing_rule_id) 
	INTO STRICT v_rule_exists
	FROM mrs_sharing_rules
	WHERE 
	study_id = NULLIF(p_study_id, -1) AND
	instrument_id = NULLIF(p_instrument_id, -1) AND
	rater_id = NULLIF(p_rater_id, -1) AND
	segment_interval = NULLIF(p_segment_interval, '') AND
	site_id = NULLIF(p_site_id, '') AND
	ursi = NULLIF(p_ursi, '') AND
	assessment_id = NULLIF(p_assessment_id, -1) AND
	entry_code = NULLIF(p_entry_code, '') AND
	dataentry_type_id = NULLIF(p_dataentry_type_id, -1) AND
	source_type = NULLIF(p_source_type, -1);

	EXCEPTION
	WHEN no_data_found THEN
		v_rule_exists := 0;
	END;
	--IF there are not currently any matching rules
	IF v_rule_exists = 0 THEN
		BEGIN
			--Select new rule from sequence
			SELECT nextval('mrsshrrul_ruleid_seq')
			INTO v_rule_id;
			--Insert new rule
			INSERT INTO mrs_sharing_rules (
				sharing_rule_id,
				study_id,
				instrument_id,
				rater_id, 
				segment_interval,
				site_id,
				ursi,
				assessment_id,
				entry_code,
				dataentry_type_id,
				source_type,
				approved_by,
				approval_date,
				note)
			VALUES (
				v_rule_id,
				NULLIF(p_study_id, -1),
				NULLIF(p_instrument_id, -1),
				NULLIF(p_rater_id, -1),
				NULLIF(p_segment_interval, ''),
				NULLIF(p_site_id, ''),
				NULLIF(p_ursi, ''),
				NULLIF(p_assessment_id, -1),
				NULLIF(p_entry_code, ''),
				NULLIF(p_dataentry_type_id, -1),
				NULLIF(p_source_type, -1),
				NULLIF(p_approved_by, ''),
				p_approval_date,
				NULLIF(p_note, '')
				);
			-- Insert into hist table
			INSERT INTO mrs_sharing_rules_hist (
				sharing_rule_id,
				study_id,
				instrument_id,
				rater_id, 
				segment_interval,
				site_id,
				ursi,
				assessment_id,
				entry_code,
				dataentry_type_id,
				source_type,
				approved_by,
				approval_date,
				note,
				mod_user,
				mod_date)
			VALUES (
				v_rule_id,
				NULLIF(p_study_id, -1),
				NULLIF(p_instrument_id, -1),
				NULLIF(p_rater_id, -1),
				NULLIF(p_segment_interval, ''),
				NULLIF(p_site_id, ''),
				NULLIF(p_ursi, ''),
				NULLIF(p_assessment_id, -1),
				NULLIF(p_entry_code, ''),
				NULLIF(p_dataentry_type_id, -1),
				NULLIF(p_source_type, -1),
				NULLIF(p_approved_by, ''),
				p_approval_date,
				NULLIF(p_note, ''),
				p_dbtrans_username_pt,
				now()
				);
			--return new rule_id
			RETURN v_rule_id;
		END;
	--There is (are) matching rule(s): Notify App-layer
	ELSE
		RETURN 'RULE_EXISTS';
	END IF;

	RETURN v_rule_id;
END;

$$;


ALTER FUNCTION mrsdba.mrs_add_sharing_rule_f(p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_sharing_rules_exception_f(numeric, numeric, numeric, numeric, character varying, numeric, character varying, numeric, character varying, numeric, numeric, character varying, timestamp without time zone, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_sharing_rules_exception_f(p_rule_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval numeric, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
	v_rule_exists numeric;
	v_exception_id numeric;
BEGIN
	BEGIN
	SELECT (sharing_rule_exception_id) 
	INTO STRICT v_rule_exists
	FROM mrs_sharing_rule_exceptions
	WHERE 
	sharing_rule_id = NULLIF(p_rule_id, '') AND
	instrument_id = NULLIF(p_instrument_id, '') AND
	rater_id = NULLIF(p_rater_id, '') AND
	segment_interval = NULLIF(p_segment_interval, '') AND
	site_id = NULLIF(p_site_id, '') AND
	ursi = NULLIF(p_ursi, '') AND
	assessment_id = NULLIF(p_assessment_id, '') AND
	entry_code = NULLIF(p_entry_code, '') AND
	dataentry_type_id = NULLIF(p_dataentry_type_id, '') AND
	source_type = NULLIF(p_source_type, '');

	EXCEPTION
	WHEN no_data_found THEN
		v_rule_exists := 0;
	END;
	--IF there are not currently any matching rules
	IF v_rule_exists = 0 THEN
		BEGIN
			--Select new rule from sequence
			SELECT nextval('mrsshrrul_excid_seq')
			INTO v_exception_id;
			--Insert new rule
			INSERT INTO mrs_sharing_rule_exceptions (
				sharing_rule_exception_id,
				sharing_rule_id,
				instrument_id,
				rater_id, 
				segment_interval,
				site_id,
				ursi,
				assessment_id,
				entry_code,
				dataentry_type_id,
				source_type,
				approved_by,
				approval_date,
				note)
			VALUES (
				v_exception_id,
				NULLIF(p_rule_id, ''),
				NULLIF(p_instrument_id, ''),
				NULLIF(p_rater_id, ''),
				NULLIF(p_segment_interval, ''),
				NULLIF(p_site_id, ''),
				NULLIF(p_ursi, ''),
				NULLIF(p_assessment_id, ''),
				NULLIF(p_entry_code, ''),
				NULLIF(p_dataentry_type_id, ''),
				NULLIF(p_source_type, ''),
				NULLIF(p_approved_by, ''),
				NULLIF(p_approval_date, ''),
				NULLIF(p_note, '')
				);
			-- Insert into hist table
			INSERT INTO mrs_sharing_rule_exceptions_hist (
				eption_id,
				sharing_rule_id,
				instrument_id,
				rater_id, 
				segment_interval,
				site_id,
				ursi,
				assessment_id,
				entry_code,
				dataentry_type_id,
				source_type,
				approved_by,
				approval_date,
				note,
				mod_user,
				mod_date)
			VALUES (
				v_exception_id,
				NULLIF(p_rule_id, ''),
				NULLIF(p_instrument_id, ''),
				NULLIF(p_rater_id, ''),
				NULLIF(p_segment_interval, ''),
				NULLIF(p_site_id, ''),
				NULLIF(p_ursi, ''),
				NULLIF(p_assessment_id, ''),
				NULLIF(p_entry_code, ''),
				NULLIF(p_dataentry_type_id, ''),
				NULLIF(p_source_type, ''),
				NULLIF(p_approved_by, ''),
				NULLIF(p_approval_date, ''),
				NULLIF(p_note, ''),
				p_dbtrans_username_pt,
				now()
				);
			--return new rule_id
			RETURN v_exception_id;
		END;
	--There is (are) matching rule(s): Notify App-layer
	ELSE
		RETURN 'RULE_EXISTS';
	END IF;
END;

$$;


ALTER FUNCTION mrsdba.mrs_add_sharing_rules_exception_f(p_rule_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval numeric, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_software_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_software_f(s_name character varying, s_version character varying, s_description character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
        s_id    numeric;

BEGIN

  SELECT nextval('mrsdba.mrs_softwares_counter')
  INTO   s_id;

  INSERT INTO mrsdba.mrs_softwares (
        software_id,
        name,
        version,
        description
  )
  VALUES (
        s_id,
        s_name,
        s_version,
        s_description
  );

  RETURN s_id;

END;$$;


ALTER FUNCTION mrsdba.mrs_add_software_f(s_name character varying, s_version character varying, s_description character varying) OWNER TO postgres;

--
-- Name: mrs_add_source_type_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_source_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
   v_source_type numeric(10);
BEGIN

  select nextval('mrssource_source_type_seq')
    into v_source_type;

  INSERT INTO mrs_source_type (
    source_type,
    label,
    description
  )
  VALUES (
    v_source_type,
    p_label,
    p_description
  );

  INSERT INTO mrs_source_type_hist (
    source_type,
    label,
    description,
    mod_user,
    mod_date
  )
  VALUES (
    v_source_type,
    p_label,
    p_description,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_source_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_staged_scan_f(text, text, numeric, timestamp without time zone, numeric, text, text, text, text, text, text, boolean, text, text); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_staged_scan_f(p_label text, p_segment_interval text, p_scanner_id numeric, p_scan_date timestamp without time zone, p_subject_age numeric, p_notes text, p_study_dir_name text, p_pi_id text, p_ursi text, p_file_path text, p_source_filename text, p_is_error boolean, p_uid text, p_user_entered text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
              DECLARE
              v_scan_id mrsdba.mrs_scan_sessions_stage.scan_id%TYPE;
              BEGIN

              -- Get scan_id value
              SELECT nextval('mrsdba.mrsscases_scanid_seq')
              INTO v_scan_id;

              -- Add scan event
              INSERT INTO mrsdba.mrs_scan_sessions_stage 
              (
                 scan_id,
                 label,
                 segment_interval,
                 scanner_id,
                 scan_date,
                 subject_age,
                 notes,
                 study_dir_name,
                 pi_id,
                 ursi,
                 file_path,
                 source_filename,
                 is_error,
                 uid,
                 user_entered,
                 date_added
              )
              VALUES (
                 v_scan_id,
                 p_label,
                 p_segment_interval,
                 p_scanner_id,
                 p_scan_date,
                 p_subject_age,
                 p_notes,
                 p_study_dir_name,
                 p_pi_id,
                 p_ursi,
                 p_file_path,
                 p_source_filename,
                 p_is_error,
                 p_uid,
                 p_user_entered,
                 now()
              );

              RETURN v_scan_id;
              end;
              $$;


ALTER FUNCTION mrsdba.mrs_add_staged_scan_f(p_label text, p_segment_interval text, p_scanner_id numeric, p_scan_date timestamp without time zone, p_subject_age numeric, p_notes text, p_study_dir_name text, p_pi_id text, p_ursi text, p_file_path text, p_source_filename text, p_is_error boolean, p_uid text, p_user_entered text) OWNER TO postgres;

--
-- Name: mrs_add_staged_series_f(character varying, numeric, character varying, numeric, character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_staged_series_f(p_label character varying, p_scan_id numeric, p_base_path character varying, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      BEGIN

      -- Add series event
      INSERT INTO mrsdba.mrs_series_stage (
         label,
         scan_id,
         base_path,
         study_code_id,
         usable,
         notes,
         sort_order
      )
      VALUES (
         p_label,
         p_scan_id,
         p_base_path,
         p_study_code_id,
         p_usable,
         p_notes,
         p_sort_order
      );

      RETURN '1';

      end;
      $$;


ALTER FUNCTION mrsdba.mrs_add_staged_series_f(p_label character varying, p_scan_id numeric, p_base_path character varying, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric) OWNER TO postgres;

--
-- Name: mrs_add_study_code_f(character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_study_code_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_code_id     mrs_study_codes.code_id%TYPE;
BEGIN

  SELECT nextval('mrsstucod_codeid_seq')
    INTO v_code_id;

  -- Load record
  INSERT INTO mrs_study_codes (
    code_id,
    label,
    description,
    study_id
  )
  VALUES (
    v_code_id,
    p_label,
    p_description,
    p_study_id
  );

  INSERT INTO mrs_study_codes_hist (
    code_id,
    label,
    description,
    study_id,
    mod_user,
    mod_date
  )
  VALUES (
    v_code_id,
    p_label,
    p_description,
    p_study_id,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_study_code_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_study_f(character varying, character varying, character varying, character varying, numeric, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, boolean, character varying, character varying, numeric, boolean, character varying, boolean, boolean, character varying, character varying, boolean, boolean, boolean); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_study_f(p_label character varying, p_description character varying, p_irb_number character varying, p_hrrc_num character varying, p_approved_sessions numeric, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_title character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_is_rdoc_study boolean) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_studyid   mrs_studies.study_id%TYPE;
   v_output    text;
BEGIN

   BEGIN
      SELECT nextval('mrsstudie_studyid_seq')
      INTO v_studyid;
   END;

   -- Load record
   INSERT INTO mrs_studies (
       study_id
       ,label
       ,description
       ,IRB_NUMBER
       ,hrrc_num
       ,approved_sessions
       ,remaining_sessions
       ,expiration_date
       ,exp_warn_emails
       ,pi_id
       ,co_pi_id
       ,rad_review_emails
       ,status_id
       ,hrrc_title
       ,hrrc_consent_date
       ,grant_number
       ,url_reference
       ,url_description
       ,date_created
       ,sponsor
       ,primary_research_area_id
       ,secondary_research_area_id
       ,add_to_recruitment
       ,recruitment_study_purpose
       ,recruitment_protocol_summary
       ,recruitment_contact_name
       ,recruitment_contact_email
       ,recruitment_contact_phone
       ,max_enrollment
       ,reuse_ursi
       ,site_id
       ,share_inst_emails
       ,parent_study_id
       ,dx_excluded
       ,default_radiologist
       ,hide_savenexit_in_sa
       ,nonstop_queue_in_sa
       ,study_css_url
       ,study_dir_name
       ,self_enroll_enabled
       ,recruitment_study
       ,is_rdoc_study
   )
   VALUES (
       v_studyid
       ,p_label
       ,p_description
       ,p_IRB_NUMBER
       ,p_hrrc_num
       ,p_approved_sessions
       ,p_approved_sessions
       ,p_expiration_date
       ,p_exp_warn_emails
       ,p_pi_id
       ,p_co_pi_id
       ,p_rad_review_emails
       ,p_status_id
       ,p_hrrc_title
       ,p_hrrc_consent_date
       ,p_grant_number
       ,p_url_reference
       ,p_url_description
       ,now()
       ,p_sponsor
       ,p_primary_research_area_id
       ,p_secondary_research_area_id
       ,p_add_to_recruitment
       ,p_recruitment_study_purpose
       ,p_recruitment_protocol_summary
       ,p_recruitment_contact_name
       ,p_recruitment_contact_email
       ,p_recruitment_contact_phone
       ,p_max_enrollment
       ,p_reuse_ursi
       ,p_site_id
       ,p_share_inst_emails
       ,p_parent_study_id
       ,p_dx_excluded
       ,p_default_radiologist
       ,p_hide_savenexit_in_sa
       ,p_nonstop_queue_in_sa
       ,p_study_css_url
       ,p_study_dir_name
       ,p_self_enroll_enabled
       ,p_recruitment_study
       ,p_is_rdoc_study
   );

   INSERT INTO mrs_studies_hist (
       study_id
       ,label
       ,description
       ,IRB_NUMBER
       ,hrrc_num
       ,approved_sessions
       ,remaining_sessions
       ,expiration_date
       ,exp_warn_emails
       ,pi_id
       ,co_pi_id
       ,rad_review_emails
       ,status_id
       ,hrrc_title
       ,hrrc_consent_date
       ,grant_number
       ,url_reference
       ,url_description
       ,date_created
       ,sponsor
       ,primary_research_area_id
       ,secondary_research_area_id
       ,add_to_recruitment
       ,recruitment_study_purpose
       ,recruitment_protocol_summary
       ,recruitment_contact_name
       ,recruitment_contact_email
       ,recruitment_contact_phone
       ,max_enrollment
       ,reuse_ursi
       ,mod_user
       ,mod_date
       ,site_id
       ,share_inst_emails
       ,parent_study_id
       ,dx_excluded
       ,default_radiologist
       ,hide_savenexit_in_sa
       ,nonstop_queue_in_sa
       ,study_css_url
       ,study_dir_name
       ,self_enroll_enabled
       ,recruitment_study
       ,is_rdoc_study
   )
   VALUES (
       v_studyid
       ,p_label
       ,p_description
       ,p_IRB_NUMBER
       ,p_hrrc_num
       ,p_approved_sessions
       ,p_approved_sessions
       ,p_expiration_date
       ,p_exp_warn_emails
       ,p_pi_id
       ,p_co_pi_id
       ,p_rad_review_emails
       ,p_status_id
       ,p_hrrc_title
       ,p_hrrc_consent_date
       ,p_grant_number
       ,p_url_reference
       ,p_url_description
       ,now()
       ,p_sponsor
       ,p_primary_research_area_id
       ,p_secondary_research_area_id
       ,p_add_to_recruitment
       ,p_recruitment_study_purpose
       ,p_recruitment_protocol_summary
       ,p_recruitment_contact_name
       ,p_recruitment_contact_email
       ,p_recruitment_contact_phone
       ,p_max_enrollment
       ,p_reuse_ursi
       ,p_mod_user
       ,now()
       ,p_site_id
       ,p_share_inst_emails
       ,p_parent_study_id
       ,p_dx_excluded
       ,p_default_radiologist
       ,p_hide_savenexit_in_sa
       ,p_nonstop_queue_in_sa
       ,p_study_css_url
       ,p_study_dir_name
       ,p_self_enroll_enabled
       ,p_recruitment_study
       ,p_is_rdoc_study
   );

   v_output := mrs_add_subject_type_f(v_studyid,'UNKNOWN','Unknown subject type', TRUE, TRUE, FALSE, p_mod_user);
   v_output := mrs_add_subject_type_f(v_studyid,'WITHDRAWN','Subject Withdraw',TRUE, TRUE, FALSE, p_mod_user);
   v_output := mrs_add_subject_type_f(v_studyid,'EXCLUDED','Subject Excluded',TRUE, TRUE, FALSE, p_mod_user);

   v_output := mrs_add_sharing_rule_f(v_studyid, null, null, null, null, null, null, null, 
      null, null, null, p_pi_id, CAST(now() as timestamp without time zone), 'Basic sharing rule for this study, created during study creation', p_mod_user);

   v_output := mrs_assign_sharing_rule_study_f(CAST(v_output as numeric), v_studyid, p_pi_id, CAST(now() as timestamp without time zone), p_pi_id, CAST(now() as timestamp without time zone), 
   'Reflexive sharing rule created during study creation so that study shares with itself', p_mod_user);

   RETURN v_studyid;

END;
$$;


ALTER FUNCTION mrsdba.mrs_add_study_f(p_label character varying, p_description character varying, p_irb_number character varying, p_hrrc_num character varying, p_approved_sessions numeric, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_title character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_is_rdoc_study boolean) OWNER TO ni_developers;

--
-- Name: mrs_add_study_interval_f(numeric, character varying, numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE

BEGIN


 -- Load application data
 INSERT INTO mrs_study_intervals (
  study_id,
  label,
  time_from_baseline,
  time_Unit,
  segment_interval
 )
 VALUES (
 p_study_id,
 p_label,
 p_time_from_baseline,
 p_time_Unit,
 p_segment_interval
 );

 /**
  * Load data into history tables.
  */

 INSERT INTO mrs_study_intervals_hist (
  study_id,
  label,
  time_from_baseline,
  time_Unit,
  segment_interval,
  mod_user,
  mod_date
 )
 VALUES (
 p_study_id,
 p_label,
 p_time_from_baseline,
 p_time_Unit,
 p_segment_interval,
 p_dbtrans_username_pt,
 now()
 );

 RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_study_message_f(numeric, numeric, numeric, boolean, integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin

	insert into mrs_study_messages (
		message_id,
		study_id,
		message_type_id,
		auto_send,
		days_in_advance) 
	values (
		message_id_f,
		study_id_f,
		message_type_id_f,
		auto_send_f,
		days_in_advance_f);

	insert into mrs_study_messages_hist (
		message_id,
		study_id,
		message_type_id,
		auto_send,
        days_in_advance,
		mod_user,
		mod_date) values(
		message_id_f,
		study_id_f,
		message_type_id_f,
		auto_send_f,
        days_in_advance_f,
		mod_user_f,
		now());

	return 1;
end;$$;


ALTER FUNCTION mrsdba.mrs_add_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_add_study_proj_f(character varying, numeric, timestamp without time zone, timestamp without time zone, character varying, character varying, character varying, character varying, numeric, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_study_proj_f(p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_project_id mrs_study_projects.project_id%TYPE;
  v_result varchar(400);

BEGIN

  BEGIN
    SELECT  nextval('mrsstdproj_project_id_seq')
    INTO    v_project_id;
  END;


  BEGIN

  INSERT INTO mrs_study_projects (
    project_id,
    label,
    priority,
    date_requested,
    date_approved,
    datasource_category,
    outcome_measures,
    outcome_dependencies,
    notes,
    parent_project_id,
    pr_inv_person_id
  )
  VALUES (
    v_project_id,
    p_label,
    p_priority,
    p_date_requested,
    p_date_approved,
    p_datasource_cat,
    p_outcome_measures,
    p_outcome_dependencies,
    p_notes,
    p_parent_project_id,
    p_pr_inv_person_id
  );


/* */
  INSERT INTO mrs_study_proj_hist (
    project_id,
    label,
    priority,
    date_requested,
    date_approved,
    datasource_category,
    outcome_measures,
    outcome_dependencies,
    notes,
    parent_project_id,
    pr_inv_person_id,
    mod_user,
    mod_date
  )
  VALUES (
    v_project_id,
    p_label,
    p_priority,
    p_date_requested,
    p_date_approved,
    p_datasource_cat,
    p_outcome_measures,
    p_outcome_dependencies,
    p_notes,
    p_parent_project_id,
    p_pr_inv_person_id,
    p_dbtrans_username_pt,
    now()
  );



  v_result := mrs_add_proj_study_det_f(p_study_id, v_project_id, p_dbtrans_username_pt);
  -- v_result := mrs_add_proj_grant_det_f(p_grant_id, v_project_id, p_dbtrans_username_pt);
  -- v_result := mrs_add_proj_co_inv_f(v_project_id,p_pr_inv_person_id,p_dbtrans_username_pt);




END;

  RETURN v_project_id;

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_study_proj_f(p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_study_recruitment_criteria_f(numeric, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_study_recruitment_criteria_f(study_id_f numeric, criteria_id_f numeric, value_f character varying, user_f character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin

	insert into mrs_study_recruitment_criteria (study_id, criteria_id, value) values (study_id_f, criteria_id_f, value_f);
	insert into mrs_study_recruitment_criteria_hist (study_id, criteria_id, value, mod_user, mod_date) values (study_id_f, criteria_id_f, value_f, user_f, now());
	return '1';
end;$$;


ALTER FUNCTION mrsdba.mrs_add_study_recruitment_criteria_f(study_id_f numeric, criteria_id_f numeric, value_f character varying, user_f character varying) OWNER TO postgres;

--
-- Name: mrs_add_subject_class_details_f(character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   declare
   begin
   insert into mrsdba.mrs_subject_class_details_hist(
   usid,subject_class_id,notes,mod_user,mod_date
   )
   values(
   p_usid,
   p_subject_class_id,
   p_notes,
   p_mod_user,
   now()
   );
   insert into mrsdba.mrs_subject_class_details(
   usid,
   subject_class_id,
   notes
   ) values (
   p_usid,
   p_subject_class_id,
   p_notes
   );
   return '1';
   end;
$$;


ALTER FUNCTION mrsdba.mrs_add_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) OWNER TO postgres;

--
-- Name: mrs_add_subject_f(character varying, character varying, character varying, numeric, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, character varying, boolean, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_subject_f(p_site_id character varying, p_sid character varying, p_match_level character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_email_address character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_mod_user character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric, p_password character varying, p_is_p2_active boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_match_found  varchar(50);
      v_usid         mrsdba.mrs_subjects.usid%TYPE;
      v_output       varchar(1);
   BEGIN
      -------------------------------------------------------------
      -- if p_match_level provided by user is NOT NONE
      -- it means we should check if similar subject already exists
      -- Any other match_level will just be ignored and the matches
      -- will be checked
      -------------------------------------------------------------

      IF UPPER(p_match_level) IS NULL OR UPPER(p_match_level) != 'NONE' THEN

         v_match_found := mrs_matched_subjects_f(
            p_sid 
            , p_first_name 
            , p_last_name 
            , p_birthdate 
            , NULL -- remove gender as match criteria 
            , CAST('' AS character varying) -- phone number not used as match criteria when adding a subject
            , CAST('' AS character varying)  
            , NULL -- email 
            , p_subject_tag_id
            , p_tag_value
            , CAST('more' AS character varying)
            , p_key
            , p_iv 
            , p_site_id 
            , p_user_study_ids
         );
      END IF;

      -------------------------------------------------------------
      -- if a match has been found return that message and exit
      -------------------------------------------------------------
      IF UPPER(v_match_found) IN ('MATCH_FOUND','EXACT_MATCH') THEN
         RETURN v_match_found;
      END IF;

      ---------------------------------------------------
      -- No match found: Proceed with adding the subject
      ---------------------------------------------------
      v_usid:= mrs_get_next_usid_f('stub'::character varying);

      -- Load data
      INSERT INTO mrs_subjects (
         usid 
         , first_name 
         , middle_name 
         , last_name 
         , site_id 
         , birth_date 
         , gender 
         , entered_date 
         , user_entered 
         , email_address 
         , suffix
         , password
         , is_p2_active
         , first_name_at_birth
         , middle_name_at_birth
         , last_name_at_birth
         , physical_sex_at_birth
         , city_born_in
      )
      VALUES (
         v_usid 
         , p_first_name 
         , p_middle_name 
         , p_last_name 
         , p_site_id 
         , p_birthdate 
         , p_gender 
         , now() 
         , p_mod_user 
         , p_email_address 
         , p_suffix
         , p_password
         , p_is_p2_active
         , p_first_name_at_birth
         , p_middle_name_at_birth
         , p_last_name_at_birth
         , p_physical_sex_at_birth
         , p_city_born_in
      );

      INSERT INTO mrsdba.mrs_subjects_hist (
         usid 
         , first_name 
         , middle_name 
         , last_name 
         , birth_date 
         , gender 
         , site_id 
         , email_address 
         , suffix 
         , entered_date 
         , user_entered 
         , password
         , is_p2_active
         , first_name_at_birth
         , middle_name_at_birth
         , last_name_at_birth
         , physical_sex_at_birth
         , city_born_in
         , mod_user 
         , mod_date
      )
      VALUES (
         v_usid 
         , p_first_name 
         , p_middle_name 
         , p_last_name 
         , p_birthdate 
         , p_gender 
         , p_site_id 
         , p_email_address 
         , p_suffix 
         , now() 
         , p_mod_user 
         , p_password
         , p_is_p2_active
         , p_first_name_at_birth
         , p_middle_name_at_birth
         , p_last_name_at_birth
         , p_physical_sex_at_birth
         , p_city_born_in
         , p_mod_user 
         , now()
      );

      -- Assign a subject tag if it was specified
      IF p_subject_tag_id IS NOT NULL AND
         p_tag_value IS NOT NULL THEN
         v_output := mrsdba.mrs_assign_subject_tag_detail_f(
            v_usid 
            , p_subject_tag_id 
            , p_tag_value 
            , p_tag_site_id 
            , p_tag_study_id 
            , p_mod_user
         );
      END IF;

      /* Make address optional
         If line1, city, and zip code are null assume that address was not passed.
         Otherwise, attempt to add the address
      */
      IF p_line1 IS NOT NULL AND p_city IS NOT NULL and p_zip IS NOT NULL THEN
         -- Add addresss info
         v_output := mrsdba.mrs_add_address_f(
            v_usid 
            , p_line1 
            , p_line2 
            , p_city 
            , p_state 
            , p_zip 
            , p_country
            , p_notes
            , p_mod_user
         );
      END IF;

      -- Return the new usid
      RETURN v_usid;

   END;
$$;


ALTER FUNCTION mrsdba.mrs_add_subject_f(p_site_id character varying, p_sid character varying, p_match_level character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_email_address character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_mod_user character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric, p_password character varying, p_is_p2_active boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_subject_login_f(character varying, numeric, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_subject_login_f(p_usid character varying, p_study_id numeric, p_subject_id character varying, p_source_type numeric, p_dbtrans_username character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE
         V_LOGIN_ID  NUMERIC;
         BEGIN

         BEGIN
         SELECT nextval('MRS_SUBJECT_LOGIN_COUNTER')
         INTO V_LOGIN_ID;
         END;

         -- get new login id 
         INSERT INTO MRS_SUBJECT_LOGINS_HIST(
         LOGIN_ID,
         USID,
         STUDY_ID,
         SUBJECT_ID,
         SOURCE_TYPE,
         MOD_USER,
         MOD_DATE
         )
         VALUES(
         V_LOGIN_ID,
         P_USID,
         P_STUDY_ID,
         P_SUBJECT_ID,
         P_SOURCE_TYPE,
         P_DBTRANS_USERNAME,
         NOW());

         INSERT INTO MRS_SUBJECT_LOGINS(
         LOGIN_ID,
         USID,
         STUDY_ID,
         SUBJECT_ID,
         SOURCE_TYPE
         )
         VALUES(
         V_LOGIN_ID,
         P_USID,
         P_STUDY_ID,
         P_SUBJECT_ID,
         P_SOURCE_TYPE
         );

         RETURN V_LOGIN_ID;
         END;
         $$;


ALTER FUNCTION mrsdba.mrs_add_subject_login_f(p_usid character varying, p_study_id numeric, p_subject_id character varying, p_source_type numeric, p_dbtrans_username character varying) OWNER TO postgres;

--
-- Name: mrs_add_subject_phone_f(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_subject_phone_f(p_usid character varying, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
    v_phone_id     mrs_phones.phone_id%TYPE;
begin

 -- get next phone_id
  begin
    SELECT nextval('mrsphones_phoneid_seq')
      INTO v_phone_id;
  end;


 -- insert new phone record
 begin

  INSERT INTO mrs_phones (
    phone_id,
    area_code,
    phone_num,
    extension,
    notes
  )
  VALUES (
    v_phone_id,
    p_area_code,
    p_phone_num,
    p_extension,
    p_notes
  );


 -- link phone to subject

  INSERT INTO mrs_subject_phone_details (
    usid,
    phone_id
  )
  VALUES (
    p_usid,
    v_phone_id
  );



  end;


  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_subject_phone_f(p_usid character varying, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying) OWNER TO postgres;

--
-- Name: mrs_add_subject_tag_f(character varying, character varying, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_subject_tag_f(p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_subject_tag_id   mrs_subject_tags.subject_tag_id%TYPE;
BEGIN

  BEGIN
    SELECT nextval('mrsextid_extid_seq')
      INTO v_subject_tag_id;
  END;

  -- Load record
  INSERT INTO mrs_subject_tags (
    subject_tag_id,
    organization,
    label,
    description,
    is_phi
  )
  VALUES (
    v_subject_tag_id,
    p_organization,
    p_label,
    p_description,
    p_is_phi
  );

  INSERT INTO mrs_subject_tags_hist (
    subject_tag_id,
    organization,
    label,
    description,
    is_phi,
    mod_user,
    mod_date
  )
  VALUES (
    v_subject_tag_id,
    p_organization,
    p_label,
    p_description,
    p_is_phi,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_subject_tag_f(p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_subject_type_f(numeric, character varying, character varying, boolean, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_subject_type_f(p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_allow_p2_self_enrollment boolean, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_type_id   mrs_subject_types.subject_type_id%TYPE;
BEGIN

 -- Get unique id
 SELECT nextval('mrssubtyp_subjecttypeid_seq')
   INTO v_type_id;

 -- Load application data
 INSERT INTO mrs_subject_types (
  subject_type_id,
  study_id,
  label,
  description,
  dx_excluded,
  qb_excluded,
  allow_p2_self_enrollment
 )
 VALUES (
  v_type_id,
  p_study_id,
  p_label,
  p_description,
  p_dx_excluded,
  p_qb_excluded,
  p_allow_p2_self_enrollment
 );

 /**
  * Load data into history tables.  This is the preferred way over
  * the use of triggers.
  */

 INSERT INTO mrs_subject_types_hist (
  subject_type_id,
  study_id,
  label,
  description,
  dx_excluded,
  qb_excluded,
  allow_p2_self_enrollment,
  mod_user,
  mod_date
 )
 VALUES (
  v_type_id,
  p_study_id,
  p_label,
  p_description,
  p_dx_excluded,
  p_qb_excluded,
  p_allow_p2_self_enrollment,
  p_dbtrans_username_pt,
  now()
 );

 RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_subject_type_f(p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_allow_p2_self_enrollment boolean, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_subject_type_group_f(character varying, character varying, numeric[], character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_subject_type_group_f(label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare 
	type_group_id_f numeric;
	type_id numeric;
begin
	select nextval('mrs_subject_type_group_counter') into type_group_id_f;

	
	insert into mrs_subject_type_groups (
			type_group_id,
			label,
			description)
	values (
			type_group_id_f,
			label_f,
			desc_f);
	insert into mrs_subject_type_groups_hist (
			type_group_id,
			label,
			description,
			subject_type_ids,
			date,
			mod_user)
	values (
			type_group_id_f,
			label_f,
			desc_f,
			array_to_string(typeids_f, ','),
			now(),
			mod_user_f);
	for i in array_lower(typeids_f, 1) .. array_upper(typeids_f,1) loop
		insert into mrs_subject_type_group_link (type_group_id, subject_type_id) values (type_group_id_f, typeids_f[i]);
	end loop;

	return type_group_id_f;
end;$$;


ALTER FUNCTION mrsdba.mrs_add_subject_type_group_f(label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_add_submitted_asmt_f(numeric, timestamp without time zone, timestamp without time zone, character varying, numeric, numeric, numeric, character varying, character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_submitted_asmt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- Note: Used by Tablet Assessment
DECLARE
 v_assessment_id           mrsdba.mrs_assessments.assessment_id%TYPE;
 v_next_segment_instance   mrsdba.mrs_assessments.segment_instance%TYPE;
 v_entry_code              mrsdba.mrs_assessments.entry_code%TYPE := 'C';
 v_dataentry_type_id       mrsdba.mrs_assessments.dataentry_type_id%TYPE := 1;

BEGIN
  -- Get instance number
  --
  -- Determine if the entry has already been entered.  If it has, then get the segment
  -- instance number and proceed with the second part of the double entry.
  BEGIN
    SELECT segment_instance
      INTO STRICT v_next_segment_instance
      FROM mrsdba.mrs_assessments
     WHERE instrument_id = p_instrument_id
       AND segment_interval = p_segment_interval
       AND ursi = p_ursi
       AND site_id = p_site_id
       AND rater1 = p_rater1
       AND dataentry_type_id = v_dataentry_type_id
       AND source_type = p_source_type
       AND entry_code = 'C'
       AND assessment_date = p_assessment_date;
              -- Assessment date validation above is
              -- necessary for multiple segment instances for
              -- the same segment interval and double entry
  EXCEPTION
    WHEN no_data_found THEN
    -- set search_path=mrsdba;
      -- If the entry has not been entered for the specified date, then get the next
      -- segment instance number for the segment interval.
      SELECT coalesce(MAX(segment_instance),0) + 1
        INTO v_next_segment_instance
        FROM mrsdba.mrs_assessments
       WHERE instrument_id = p_instrument_id
         AND segment_interval = p_segment_interval
         AND ursi = p_ursi
         AND site_id = p_site_id
         AND rater1 = p_rater1
         AND dataentry_type_id = v_dataentry_type_id
         AND source_type = p_source_type;
  END;

  -- Raise an exception if this is assessment cannot be performed anymore
  -- for the segment interval
  DECLARE
    v_max_per_segment    mrsdba.mrs_instruments.max_per_segment%TYPE;
  BEGIN
    -- set search_path=mrsdba;
    
    SELECT max_per_segment
      INTO v_max_per_segment
      FROM mrsdba.mrs_instruments
     WHERE instrument_id = p_instrument_id;

    IF v_next_segment_instance > v_max_per_segment THEN
      RAISE NOTICE 'Assessment cannot be performed anymore on the subject for the specified segment interval.  The MAX_PER_SEGMENT threshold has been reached.';
    END IF;
  EXCEPTION
    WHEN no_data_found THEN
      RAISE NOTICE 'Instrument % does not exist', p_instrument_id;
  END;

  SELECT nextval('mrsassess_assessmentid_seq')
    INTO v_assessment_id;

  INSERT INTO mrsdba.mrs_assessments (
    assessment_id,
    instrument_id,
    assessment_date,
    ursi,
    entry_code,
    entry_username,
    entry_start_date,
    entry_end_date,
    submission_date,
    rater1,
    rater2,
    source_type,
    site_id,
    dataentry_type_id,
    segment_interval,
    segment_instance,
    xml_source,
    successfully_completed, study_id
  )
  VALUES (
    v_assessment_id,
    p_instrument_id,
    p_assessment_date,
    p_ursi,
    v_entry_code,
    p_dbtrans_username_pt,
    p_assessment_date,
    p_assessment_end_date,
    now(),
    p_rater1,
    p_rater2,
    p_source_type,
    p_site_id,
    v_dataentry_type_id,
    p_segment_interval,
    v_next_segment_instance,
    null,
    p_successfully_completed, p_study_id
  );

  INSERT INTO mrsdba.mrs_assessments_hist (
    assessment_id,
    instrument_id,
    assessment_date,
    ursi,
    entry_code,
    entry_username,
    entry_start_date,
    entry_end_date,
    submission_date,
    rater1,
    rater2,
    source_type,
    site_id,
    dataentry_type_id,
    segment_interval,
    segment_instance,
    mod_user,
    mod_date,
    successfully_completed, study_id
  )
  VALUES (
    v_assessment_id,
    p_instrument_id,
    p_assessment_date,
    p_ursi,
    v_entry_code,
    p_dbtrans_username_pt,
    p_assessment_date,
    p_assessment_end_date,
    now(),
    p_rater1,
    p_rater2,
    p_source_type,
    p_site_id,
    v_dataentry_type_id,
    p_segment_interval,
    v_next_segment_instance,
    p_dbtrans_username_pt,
    now(),
    p_successfully_completed, p_study_id
  );

  --insert assessment ownership properties
  PERFORM mrs_update_asmt_ownership_f(v_assessment_id);

  RETURN v_assessment_id;

END;
$$;


ALTER FUNCTION mrsdba.mrs_add_submitted_asmt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) OWNER TO postgres;

--
-- Name: mrs_add_submitted_asmt_f_deleteme(numeric, timestamp without time zone, character varying, numeric, numeric, numeric, character varying, character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_submitted_asmt_f_deleteme(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- Note: Used by Tablet Assessment
DECLARE
 v_assessment_id           mrsdba.mrs_assessments.assessment_id%TYPE;
 v_next_segment_instance   mrsdba.mrs_assessments.segment_instance%TYPE;
 v_entry_code              mrsdba.mrs_assessments.entry_code%TYPE := 'C';
 v_dataentry_type_id       mrsdba.mrs_assessments.dataentry_type_id%TYPE := 1;

BEGIN
  -- Get instance number
  --
  -- Determine if the entry has already been entered.  If it has, then get the segment
  -- instance number and proceed with the second part of the double entry.
  BEGIN
    SELECT segment_instance
      INTO STRICT v_next_segment_instance
      FROM mrsdba.mrs_assessments
     WHERE instrument_id = p_instrument_id
       AND segment_interval = p_segment_interval
       AND ursi = p_ursi
       AND site_id = p_site_id
       AND rater1 = p_rater1
       AND dataentry_type_id = v_dataentry_type_id
       AND source_type = p_source_type
       AND entry_code = 'C'
       AND assessment_date = p_assessment_date;
              -- Assessment date validation above is
              -- necessary for multiple segment instances for
              -- the same segment interval and double entry
  EXCEPTION
    WHEN no_data_found THEN
    -- set search_path=mrsdba;
      -- If the entry has not been entered for the specified date, then get the next
      -- segment instance number for the segment interval.
      SELECT coalesce(MAX(segment_instance),0) + 1
        INTO v_next_segment_instance
        FROM mrsdba.mrs_assessments
       WHERE instrument_id = p_instrument_id
         AND segment_interval = p_segment_interval
         AND ursi = p_ursi
         AND site_id = p_site_id
         AND rater1 = p_rater1
         AND dataentry_type_id = v_dataentry_type_id
         AND source_type = p_source_type;
  END;

  -- Raise an exception if this is assessment cannot be performed anymore
  -- for the segment interval
  DECLARE
    v_max_per_segment    mrsdba.mrs_instruments.max_per_segment%TYPE;
  BEGIN
    set search_path=mrsdba;
    
    SELECT max_per_segment
      INTO v_max_per_segment
      FROM mrsdba.mrs_instruments
     WHERE instrument_id = p_instrument_id;

    IF v_next_segment_instance > v_max_per_segment THEN
      RAISE NOTICE 'Assessment cannot be performed anymore on the subject for the specified segment interval.  The MAX_PER_SEGMENT threshold has been reached.';
    END IF;
  EXCEPTION
    WHEN no_data_found THEN
      RAISE NOTICE 'Instrument % does not exist', p_instrument_id;
  END;

  SELECT nextval('mrsassess_assessmentid_seq')
    INTO v_assessment_id;

  INSERT INTO mrsdba.mrs_assessments (
    assessment_id,
    instrument_id,
    assessment_date,
    ursi,
    entry_code,
    entry_username,
    entry_start_date,
    rater1,
    rater2,
    source_type,
    site_id,
    dataentry_type_id,
    segment_interval,
    segment_instance,
    xml_source,
    successfully_completed, study_id
  )
  VALUES (
    v_assessment_id,
    p_instrument_id,
    p_assessment_date,
    p_ursi,
    v_entry_code,
    p_dbtrans_username_pt,
    now(),
    p_rater1,
    p_rater2,
    p_source_type,
    p_site_id,
    v_dataentry_type_id,
    p_segment_interval,
    v_next_segment_instance,
    null,
    p_successfully_completed, p_study_id
  );

  INSERT INTO mrsdba.mrs_assessments_hist (
    assessment_id,
    instrument_id,
    assessment_date,
    ursi,
    entry_code,
    entry_username,
    entry_start_date,
    rater1,
    rater2,
    source_type,
    site_id,
    dataentry_type_id,
    segment_interval,
    segment_instance,
    mod_user,
    mod_date,
    successfully_completed, study_id
  )
  VALUES (
    v_assessment_id,
    p_instrument_id,
    p_assessment_date,
    p_ursi,
    v_entry_code,
    p_dbtrans_username_pt,
    now(),
    p_rater1,
    p_rater2,
    p_source_type,
    p_site_id,
    v_dataentry_type_id,
    p_segment_interval,
    v_next_segment_instance,
    p_dbtrans_username_pt,
    now(),
    p_successfully_completed, p_study_id
  );

  RETURN v_assessment_id;

END;
$$;


ALTER FUNCTION mrsdba.mrs_add_submitted_asmt_f_deleteme(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) OWNER TO postgres;

--
-- Name: mrs_add_submitted_asmt_tblt_f(numeric, timestamp without time zone, timestamp without time zone, character varying, character varying, numeric, numeric, character varying, character varying, mrs_response_type[], numeric, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_xml_source text) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- Note: Used by Tablet Assessment
DECLARE
v_assessment_id           mrsdba.mrs_assessments.assessment_id%TYPE;
v_site_id                 mrsdba.mrs_assessments.site_id%TYPE;
v_rater_alias             mrsdba.mrs_assessments.rater1%TYPE;
v_error                   character varying(20);
v_base_directory          character varying(20);
v_directory               character varying(20);

begin
select distinct site_id
into v_site_id
from mrsdba.mrs_raters_vw
where alias_label = p_rater1;

select distinct b.alias_id
into v_rater_alias
from mrsdba.mrs_raters_vw a, mrsdba.mrs_raters_vw b
where  a.person_id = b.person_id
and b.study_id = p_study_id
and a.alias_label = p_rater1;

v_assessment_id := mrsdba.mrs_add_submitted_asmt_f(
p_instrument_id,
p_assessment_date,
p_assessment_end_date,
p_ursi,
v_rater_alias,
p_rater2,
p_source_type,
v_site_id,
p_segment_interval,
p_dbtrans_username_pt,
'Y', p_study_id);

v_error := mrsdba.mrs_assign_all_asmt_response_values_f(v_assessment_id, p_responses, p_dbtrans_username_pt);

v_error := mrsdba.mrs_write_xml_source_f(v_assessment_id, p_xml_source);

v_error := mrsdba.mrs_update_asmt_ownership_f(v_assessment_id);

return v_error;
END;
$$;


ALTER FUNCTION mrsdba.mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_xml_source text) OWNER TO ni_developers;

--
-- Name: mrs_add_submitted_asmt_tblt_f(numeric, timestamp without time zone, timestamp without time zone, character varying, character varying, numeric, numeric, character varying, character varying, mrs_response_type[], numeric, boolean, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_uses_double_entry boolean, p_xml_source text) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- Note: Used by Tablet Assessment
DECLARE
v_assessment_id           mrsdba.mrs_assessments.assessment_id%TYPE;
v_site_id                 mrsdba.mrs_assessments.site_id%TYPE;
v_rater_alias             mrsdba.mrs_assessments.rater1%TYPE;
v_temp                    text;
v_assessment_text         text;
v_error                   character varying(20);
v_base_directory          character varying(20);
v_directory               character varying(20);

begin
select distinct site_id
into v_site_id
from mrsdba.mrs_raters_vw
where alias_label = p_rater1;

select distinct b.alias_id
into v_rater_alias
from mrsdba.mrs_raters_vw a, mrsdba.mrs_raters_vw b
where  a.person_id = b.person_id
and b.study_id = p_study_id
and a.alias_label = p_rater1;

if p_uses_double_entry then
   v_assessment_text := mrsdba.mrs_start_assessment_f(
      p_study_id,
      p_instrument_id,
      p_assessment_date,
      p_ursi,
      v_rater_alias,
      p_rater2,
      p_source_type,
      v_site_id,
      1, -- dataentry_type_id
      p_segment_interval,
      p_dbtrans_username_pt
   );
   v_assessment_id = split_part(ltrim(v_assessment_text,' '),'|',1);
else
   v_assessment_id := mrsdba.mrs_add_submitted_asmt_f(
   p_instrument_id,
   p_assessment_date,
   p_assessment_end_date,
   p_ursi,
   v_rater_alias,
   p_rater2,
   p_source_type,
   v_site_id,
   p_segment_interval,
   p_dbtrans_username_pt,
   'Y', p_study_id);
end if;

v_error := mrsdba.mrs_assign_all_asmt_response_values_f(v_assessment_id, p_responses, p_dbtrans_username_pt);

v_error := mrsdba.mrs_update_asmt_ownership_f(v_assessment_id);

v_error := mrsdba.mrs_write_xml_source_f(v_assessment_id, p_xml_source);

-- make sure to complete assessments that are single entry so that
-- conflict resolution happens
if p_uses_double_entry then
   v_temp := mrsdba.mrs_complete_assessment_f(
      v_assessment_id,
      0, -- elapsed time
      p_dbtrans_username_pt,
      p_study_id
   );

end if;

return v_error;
END;
$$;


ALTER FUNCTION mrsdba.mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_uses_double_entry boolean, p_xml_source text) OWNER TO ni_developers;

--
-- Name: mrs_add_system_phi_log_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_system_phi_log_f(p_usid character varying, p_view_source character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
BEGIN

  INSERT INTO mrsdba.mrs_system_phi_log (
    usid,
    view_time,
    view_source,
    username
  )
  VALUES (
   p_usid,
   now(),
   p_view_source,
   p_dbtrans_username_pt
  );

  
  RETURN 1;

end;
$$;


ALTER FUNCTION mrsdba.mrs_add_system_phi_log_f(p_usid character varying, p_view_source character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_trade_name_f(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_trade_name_f(p_trade_name character varying, p_description character varying, p_drug_code character varying, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
 v_trade_id  mrs_trade_names.trade_id%TYPE;
 v_output    varchar(1);

BEGIN

  BEGIN
    SELECT nextval('mrstrdnm_tradeid_seq')
      INTO v_trade_id;
  END;

  -- Load record
  INSERT INTO mrs_trade_names (
    trade_id,
    trade_name,
    description,
    entered_date,
    notes,
    user_entered
  )
  VALUES (
    v_trade_id,
    p_trade_name,
    p_description,
    now(),
    p_notes,
    p_dbtrans_username_pt
  );

  v_output := mrs_assign_gdrug_tradenm_f(p_drug_code, v_trade_id);

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_add_trade_name_f(p_trade_name character varying, p_description character varying, p_drug_code character varying, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_add_user_app_option_f(character varying, integer, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_add_user_app_option_f(p_username character varying, p_option_id integer, p_option_name character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql STRICT SECURITY DEFINER
    AS $$DECLARE
    v_option_name varchar := '';
    v_id integer;
BEGIN
    SELECT option_name INTO v_option_name
    FROM mrs_user_app_options
    WHERE username = p_username 
        AND option_id = p_option_id;

    IF length(v_option_name) > 0 THEN
        RETURN v_option_name;
    ELSE
        INSERT INTO mrs_user_app_options (username, option_id, option_name)
        VALUES (p_username, p_option_id, p_option_name)
        RETURNING id INTO v_id;

        INSERT INTO mrs_user_app_options_hist(id, username, option_id, option_name, mod_date, mod_user)
        VALUES (v_id, p_username, p_option_id, p_option_name, now(), p_mod_user);

        RETURN v_id;
    END IF;
END;$$;


ALTER FUNCTION mrsdba.mrs_add_user_app_option_f(p_username character varying, p_option_id integer, p_option_name character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_add_user_scan_export_option_f(character varying, text); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_add_user_scan_export_option_f(p_db_username character varying, p_options_string text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
	v_db_username_exists int;
BEGIN

	BEGIN
		SELECT count(1) 
		INTO v_db_username_exists
		FROM mrsdba.mrs_user_scan_export_options
		WHERE LOWER(db_username) = LOWER(p_db_username);
	END;

	IF v_db_username_exists > 0 THEN
		UPDATE mrsdba.mrs_user_scan_export_options
		SET options_string = p_options_string,
			last_updated = now()
		WHERE LOWER(db_username) = LOWER(p_db_username);

	ELSE
		INSERT INTO mrsdba.mrs_user_scan_export_options
			(
				db_username,
				options_string,
				last_updated
			)
		VALUES 
			(
				p_db_username,
				p_options_string,
				now()
			);
	END IF;

	RETURN '1';
END;
$$;


ALTER FUNCTION mrsdba.mrs_add_user_scan_export_option_f(p_db_username character varying, p_options_string text) OWNER TO postgres;

--
-- Name: mrs_analysis_add_analyzed_series_f(character varying, character varying, character varying, timestamp without time zone, timestamp without time zone, integer, character varying, boolean, integer); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_add_analyzed_series_f(f_series_id character varying, f_cpu_host character varying, f_cpu_env character varying, f_start timestamp without time zone, f_end timestamp without time zone, f_instance integer, f_notes character varying, f_is_usable boolean, f_software_id integer) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN
    
    insert into mrsdba.mrs_series_analysis(
	series_id,
	cpu_host,
	cpu_env,
	start_timedate,
	end_timedate,
	instance,
	notes,
	is_usable,
	software_id
    )
    values (
	f_series_id,
	f_cpu_host,
	f_cpu_env,
	f_start,
	f_end,
	f_instance,
	f_notes,
	f_is_usable,
	f_software_id
    );

    return '1';
END;$$;


ALTER FUNCTION mrsdba.mrs_analysis_add_analyzed_series_f(f_series_id character varying, f_cpu_host character varying, f_cpu_env character varying, f_start timestamp without time zone, f_end timestamp without time zone, f_instance integer, f_notes character varying, f_is_usable boolean, f_software_id integer) OWNER TO postgres;

--
-- Name: mrs_analysis_add_scan_sessions_from_archive_f(character varying, character varying, character varying, character varying, numeric, character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_add_scan_sessions_from_archive_f(f_pi_dir_name character varying, f_study_dir_name character varying, f_ursi character varying, f_label character varying, f_study_id numeric, f_scanner_model character varying, f_notes character varying, f_micis_scan_id numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$declare
	f_scan_id numeric;
begin
	select into f_scan_id nextval('mrsdba.mrs_scan_sessions_from_archive_counter');

	insert into mrsdba.mrs_scan_sessions_from_archive (
		scan_id,
		label,
		ursi,
		notes,
		study_dir_name,
		pi_dir_name,
		study_id,
		scanner_model,
		micis_scan_id) 
	values (
		f_scan_id,
		f_label,
		f_ursi,
		f_notes,
		f_study_dir_name,
		f_pi_dir_name,
		f_study_id,
		f_scanner_model,
		f_micis_scan_id);

	insert into mrsdba.mrs_scan_sessions_from_archive_hist (
		scan_id,
		label,
		ursi,
		notes,
		study_dir_name,
		pi_dir_name,
		study_id,
		scanner_model,
		micis_scan_id) 
	values (
		f_scan_id,
		f_label,
		f_ursi,
		f_notes,
		f_study_dir_name,
		f_pi_dir_name,
		f_study_id,
		f_scanner_model,
		f_micis_scan_id);

	return f_scan_id;

end;$$;


ALTER FUNCTION mrsdba.mrs_analysis_add_scan_sessions_from_archive_f(f_pi_dir_name character varying, f_study_dir_name character varying, f_ursi character varying, f_label character varying, f_study_id numeric, f_scanner_model character varying, f_notes character varying, f_micis_scan_id numeric) OWNER TO postgres;

--
-- Name: mrs_analysis_add_series_from_archive_f(character varying, numeric, numeric, numeric, numeric, character varying, character); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_add_series_from_archive_f(f_label character varying, f_scan_id numeric, f_sort_order numeric, f_modality_id numeric, f_micis_series_id numeric, f_notes character varying, f_usable character) RETURNS numeric
    LANGUAGE plpgsql
    AS $$declare
	f_series_id numeric;
begin
	select into f_series_id nextval('mrsdba.mrs_series_from_archive_counter');
	insert into mrsdba.mrs_series_from_archive (
		series_id,
		label,
		scan_id,
		notes,
		sort_order,
		modality_id,
		micis_series_id,
		usable)
	values (
	        f_series_id,
	        f_label,
	        f_scan_id,
	        f_notes,
	        f_sort_order,
	        f_modality_id,
	        f_micis_series_id,
	        f_usable);

	 insert into mrsdba.mrs_series_from_archive_hist (
		series_id,
		label,
		scan_id,
		notes,
		sort_order,
		modality_id,
		micis_series_id,
		usable)
	values (
	        f_series_id,
	        f_label,
	        f_scan_id,
	        f_notes,
	        f_sort_order,
	        f_modality_id,
	        f_micis_series_id,
	        f_usable);
	 return f_series_id;
end;$$;


ALTER FUNCTION mrsdba.mrs_analysis_add_series_from_archive_f(f_label character varying, f_scan_id numeric, f_sort_order numeric, f_modality_id numeric, f_micis_series_id numeric, f_notes character varying, f_usable character) OWNER TO postgres;

--
-- Name: mrs_analysis_add_vbm_img_f(character varying, character varying, timestamp without time zone, bigint, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_add_vbm_img_f(label_f character varying, file_type_f character varying, creation_datetime_f timestamp without time zone, size_kb_f bigint, desc_f character varying, scan_id_f numeric) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare 
	file_id_f mrsdba.mrs_analysis_vbm_img.file_id%TYPE;
begin
	select nextval('mrsdba.mrs_analysis_vbm_img_counter') into file_id_f;
	insert into mrsdba.mrs_analysis_vbm_img(
		file_id,
		label,
		file_type,
		creation_datetime,
		size_kb,
		description,
		scan_id) 
	values (
		file_id_f,
		label_f,
		file_type_f,
		creation_datetime_f,
		size_kb_f,
		desc_f,
		scan_id_f);
	return file_id_f;
end;$$;


ALTER FUNCTION mrsdba.mrs_analysis_add_vbm_img_f(label_f character varying, file_type_f character varying, creation_datetime_f timestamp without time zone, size_kb_f bigint, desc_f character varying, scan_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_analysis_delete_one_substudy_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_delete_one_substudy_f(study_id_f numeric, sub_study_name_f character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    delete from mrs_analysis_sub_study where study_id=study_id_f and sub_study_name=sub_study_name_f;
    delete from mrs_analysis_substudy_permission where study_id=study_id_f and sub_study_name=sub_study_name_f;
    return '1';
END;$$;


ALTER FUNCTION mrsdba.mrs_analysis_delete_one_substudy_f(study_id_f numeric, sub_study_name_f character varying) OWNER TO postgres;

--
-- Name: mrs_analysis_delete_scan_session_from_archive_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_delete_scan_session_from_archive_f(scan_id_f numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$begin

insert into mrs_scan_sessions_from_archive_hist (
	scan_id,
	label,
	ursi,
	notes,
	study_dir_name,
	pi_dir_name,
	study_id,
	scanner_model,
	micis_scan_id)
select scan_id, label, ursi, 'session deleted', study_dir_name, pi_dir_name, study_id, scanner_model, micis_scan_id
from mrs_scan_sessions_from_archive where scan_id = scan_id_f;

delete from mrs_scan_sessions_from_archive where scan_id = scan_id_f;

return 1;

end;$$;


ALTER FUNCTION mrsdba.mrs_analysis_delete_scan_session_from_archive_f(scan_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_analysis_delete_series_from_archive_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_delete_series_from_archive_f(series_id_f numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$begin

insert into mrs_series_from_archive_hist (
	series_id,
	label,
	scan_id,
	notes,
	sort_order,
	modality_id,
	micis_series_id,
	usable)
select series_id, label, scan_id, 'series deleted', sort_order, modality_id, micis_series_id, usable
from mrs_series_from_archive where series_id = series_id_f;

delete from mrs_series_from_archive where series_id = series_id_f;

return 1;

end;$$;


ALTER FUNCTION mrsdba.mrs_analysis_delete_series_from_archive_f(series_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_analysis_level2_update_analyzed_series_f(numeric, character varying, character varying, integer, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_level2_update_analyzed_series_f(scan_id_f numeric, module_f character varying, notes_f character varying, is_usable_f integer, software_id_f numeric) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE num int:=0;

BEGIN
    select count(*) into num from mrsdba.mrs_series_level2_analysis where scan_id=scan_id_f and module=module_f;
    if num = 0 then
	insert into mrs_series_level2_analysis (
		scan_id,
		module,
		notes,
		is_usable,
		software_id
	)
	values (
		scan_id_f,
		module_f,
		notes_f,
		is_usable_f,
		software_id_f
	);
    else
	    update mrs_series_level2_analysis 
	    set notes=notes_f, is_usable=is_usable_f, software_id=software_id_f 
	    where scan_id=scan_id_f and module=module_f;
    end if;
    return '1';
END;$$;


ALTER FUNCTION mrsdba.mrs_analysis_level2_update_analyzed_series_f(scan_id_f numeric, module_f character varying, notes_f character varying, is_usable_f integer, software_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_analysis_set_substudy_permission_f(numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_set_substudy_permission_f(study_id_f numeric, sub_study_name_f character varying, permission_f character varying, sub_study_creator_f character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$DECLARE num integer;
BEGIN

    select count(*) into num from mrsdba.mrs_analysis_substudy_permission where study_id=study_id_f and sub_study_name=sub_study_name_f;
    if num=0 then
    insert into mrsdba.mrs_analysis_substudy_permission values(
        study_id_f,
        sub_study_name_f,
        permission_f,
        sub_study_creator_f
    );
    else
    update mrsdba.mrs_analysis_substudy_permission set permission=permission_f where
    study_id=study_id_f and sub_study_name=sub_study_name_f;
    end if;

    return 1;
END;$$;


ALTER FUNCTION mrsdba.mrs_analysis_set_substudy_permission_f(study_id_f numeric, sub_study_name_f character varying, permission_f character varying, sub_study_creator_f character varying) OWNER TO postgres;

--
-- Name: mrs_analysis_update_analyzed_series_f(character varying, character varying, boolean, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_update_analyzed_series_f(series_id_f character varying, notes_f character varying, is_usable_f boolean, software_id_f numeric) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE num int:=0;

BEGIN
    select count(*) into num from mrsdba.mrs_series_analysis where series_id=series_id_f;
    if num = 0 then
	insert into mrs_series_analysis (
		series_id,
		notes,
		is_usable,
		software_id
	)
	values (
		series_id_f,
		notes_f,
		is_usable_f,
		software_id_f
	);
    else
	
	    update mrs_series_analysis 
	    set notes=notes_f, is_usable=is_usable_f, software_id=software_id_f 
	    where series_id=series_id_f;
	
    end if;
    return '1';
END;$$;


ALTER FUNCTION mrsdba.mrs_analysis_update_analyzed_series_f(series_id_f character varying, notes_f character varying, is_usable_f boolean, software_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_analysis_update_ql_statistic_f(numeric, integer, integer, integer, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_update_ql_statistic_f(study_id_f numeric, total_fmri_task_f integer, analyzed_fmri_task_f integer, total_dti_task_f integer, analyzed_dti_task_f integer, total_vbm_task_f integer, analyzed_vbm_task_f integer, total_fs_task_f integer, analyzed_fs_task_f integer) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare study_id_count int:=0;

BEGIN
    select count(*) into study_id_count
    from mrs_analysis_quicklook_statistic where study_id = study_id_f;

    if study_id_count = 0 then
    insert into mrs_analysis_quicklook_statistic (
	study_id, 
	total_fmri_task, 
	analyzed_fmri_task,
	total_dti_task,
	analyzed_dti_task,
	total_vbm_task,
	analyzed_vbm_task,
	total_fs_task,
	analyzed_fs_task
    )
    values (
	study_id_f, 
	total_fmri_task_f, 
	analyzed_fmri_task_f,
	total_dti_task_f,
	analyzed_dti_task_f,
	total_vbm_task_f,
	analyzed_vbm_task_f,
	total_fs_task_f,
	analyzed_fs_task_f
    );

    else
    update mrs_analysis_quicklook_statistic
    set total_fmri_task=total_fmri_task_f, 
	analyzed_fmri_task=analyzed_fmri_task_f,
	total_dti_task=total_dti_task_f,
	analyzed_dti_task=analyzed_dti_task_f,
	total_vbm_task=total_vbm_task_f,
	analyzed_vbm_task=analyzed_vbm_task_f,
	total_fs_task=total_fs_task_f,
	analyzed_fs_task=analyzed_fs_task_f 
    where study_id = study_id_f;

    end if;
    return '1';
END;$$;


ALTER FUNCTION mrsdba.mrs_analysis_update_ql_statistic_f(study_id_f numeric, total_fmri_task_f integer, analyzed_fmri_task_f integer, total_dti_task_f integer, analyzed_dti_task_f integer, total_vbm_task_f integer, analyzed_vbm_task_f integer, total_fs_task_f integer, analyzed_fs_task_f integer) OWNER TO postgres;

--
-- Name: mrs_analysis_update_scan_sessions_from_archive_f(numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_update_scan_sessions_from_archive_f(archive_scan_id_f numeric, micis_scan_id_f numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$begin

update mrs_scan_sessions_from_archive set micis_scan_id=micis_scan_id_f where scan_id=archive_scan_id_f;

insert into mrs_scan_sessions_from_archive_hist (
	scan_id,
	label,
	ursi,
	notes,
	study_dir_name,
	pi_dir_name,
	study_id,
	scanner_model,
	micis_scan_id) 
select scan_id, label,ursi, 'change micis scan id', study_dir_name, pi_dir_name, study_id, scanner_model, micis_scan_id
from mrs_scan_sessions_from_archive where scan_id=archive_scan_id_f;

return 1;
end;$$;


ALTER FUNCTION mrsdba.mrs_analysis_update_scan_sessions_from_archive_f(archive_scan_id_f numeric, micis_scan_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_analysis_update_series_from_archive_f(numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_update_series_from_archive_f(archive_series_id_f numeric, micis_series_id_f numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$begin

update mrs_series_from_archive set micis_series_id=micis_series_id_f where series_id=archive_series_id_f;

insert into mrs_series_from_archive_hist (
	series_id,
	label,
	scan_id,
	notes,
	sort_order,
	modality_id,
	micis_series_id,
	usable)
select series_id, label, scan_id, 'change micis_series_id', sort_order, modality_id, micis_series_id, usable
from mrs_series_from_archive where series_id=archive_series_id_f;

return 1;
end;$$;


ALTER FUNCTION mrsdba.mrs_analysis_update_series_from_archive_f(archive_series_id_f numeric, micis_series_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_analysis_update_substudy_f(numeric, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_update_substudy_f(study_id_f numeric, sub_study_name_f character varying, scan_id_f numeric, action_f character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$DECLARE
	id_f numeric;

BEGIN
	select nextval('mrs_analysis_sub_study_counter') into id_f;
	
	if action_f='add' then 
	    insert into mrs_analysis_sub_study (id,study_id,sub_study_name, scan_id) values (id_f, study_id_f, sub_study_name_f, scan_id_f);
	    else if action_f='delete' then  
		delete from mrs_analysis_sub_study 
		where study_id=study_id_f and sub_study_name=sub_study_name_f and scan_id=scan_id_f;
	    end if;
	end if;

	return '1';
END;$$;


ALTER FUNCTION mrsdba.mrs_analysis_update_substudy_f(study_id_f numeric, sub_study_name_f character varying, scan_id_f numeric, action_f character varying) OWNER TO postgres;

--
-- Name: mrs_analysis_update_vbmqa_f(integer, numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_analysis_update_vbmqa_f(f_scan_id integer, f_qa_value numeric, f_qa_status numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE scan_id_count int:=0;
BEGIN
    SELECT count(*) into scan_id_count 
    FROM mrs_analysis_vbm_qa_values WHERE scan_id = f_scan_id;
    
    IF scan_id_count=0 THEN
    INSERT INTO mrs_analysis_vbm_qa_values (scan_id, qa_value, qa_status) 
    VALUES (f_scan_id, f_qa_value, f_qa_status);

    ELSE
	IF f_qa_value=-1 THEN
	    UPDATE mrs_analysis_vbm_qa_values
            SET qa_status = f_qa_status
	    WHERE scan_id = f_scan_id;
	ELSE
	    UPDATE mrs_analysis_vbm_qa_values
            SET qa_status = f_qa_status, qa_value = f_qa_value
	    WHERE scan_id = f_scan_id;
	END IF;
    
    END IF;
    RETURN '1';

END;$$;


ALTER FUNCTION mrsdba.mrs_analysis_update_vbmqa_f(f_scan_id integer, f_qa_value numeric, f_qa_status numeric) OWNER TO postgres;

--
-- Name: mrs_assign_all_asmt_response_values_f(numeric, mrs_response_type[], character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_assign_all_asmt_response_values_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- Note: Used by Tablet Assessment
DECLARE                                                                                 
v_result              character varying(20);            
v_response_value_desc   text;                                
begin
if array_upper(p_table,1) IS NOT NULL
THEN
for i in 1 .. array_upper(p_table,1) LOOP
   v_response_value_desc := p_table[i].response_value_description;
   IF position('multiple_choice~' in v_response_value_desc) = 1
   THEN
      v_result := mrsdba.mrs_assign_multi_response_value_f(                                         
      p_assessment_id,                                                                        
      p_table[i].question_id,                                                                 
      p_table[i].question_instance,
      p_table[i].response_value,                                                              
      substring(v_response_value_desc, E'multiple_choice~(.*)'),
      p_dbuser);
   ELSE
      v_result := mrsdba.mrs_assign_response_value_f(                                         
      p_assessment_id,                                                                        
      p_table[i].question_id,                                                                 
      p_table[i].question_instance,
      p_table[i].response_value,                                                              
      p_table[i].response_value_description,
      p_dbuser);
   END IF;
end Loop;
ELSE
v_result := 1;
END IF;
return v_result;
end;                                                                                    
$$;


ALTER FUNCTION mrsdba.mrs_assign_all_asmt_response_values_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) OWNER TO ni_developers;

--
-- Name: mrs_assign_assessment_value_f(numeric, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_assessment_value_f(p_assessment_id numeric, p_column_name character varying, p_column_value character varying, p_date_format character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE
          v_datatype          varchar(200);
          v_dyn_sql           varchar(800);
          v_dyn_sql_hist      varchar(800);
          v_debug    varchar(100);
          v_entry_code       int;
         BEGIN

           -- Validate params
           IF UPPER(p_column_name) NOT IN (
                      'SITE_ID',
                      'RATER1',
                      'RATER2',
                      'SOURCE_TYPE',
                      'REF_SOURCE_TYPE',
                      'ELAPSED_TIME',
                      'URSI',
                      'INSTRUMENT_ID',
                      'ASSESSMENT_DATE',
                      'DATAENTRY_TYPE_ID',
                      'SEGMENT_INSTANCE',
                      'SEGMENT_INTERVAL',
                      'SUCCESSFULLY_COMPLETED',
                      'MISSING_REASON_ID',
                      'NOTES',
                      'ENTRY_CODE',    -- added ability to update this parameter 1/13/2006 jl
                      'ENTRY_END_DATE', -- added ability to update this parameter 1/13/2006 jl
                      'HASEMPTYFIELDS', -- added 3/8/2010 as
                      'DX_EXCLUDED' -- added 11/5/2013
           ) THEN
             RAISE EXCEPTION 'You tried to update column % Only sited_id, rater1, rater2, source_type, ref_source_type, elapsed_time, ursi, instrument_id, assessment_date, dataentry_type_id, segment_instance, segment_interval, successfully_completed, missing_reason_id, notes, entry_code, entry_end_date, hasemptyfields, dx_excluded are updatable fields.',p_column_name;
           END IF;
           
           BEGIN
             SELECT d.typname
               INTO STRICT v_datatype
            from pg_attribute a, pg_class c, pg_namespace n, pg_tables t, pg_type d  where
            n.nspname='mrsdba'
            and  c.relnamespace = n.oid
            and a.attrelid = c.oid
            and t.schemaname = n.nspname
            and c.relname = t.tablename
            and t.tablename='mrs_assessments'
            and a.atttypid = d.oid
            and a.attname=p_column_name;

           EXCEPTION
             WHEN no_data_found THEN
               RAISE EXCEPTION 'Column % does not exist in mrs_assessments',p_column_name;
           END;

           v_dyn_sql := 'UPDATE mrs_assessments '||
                        '   SET '||p_column_name||' = ';
           v_dyn_sql_hist := 'INSERT INTO mrs_assessments_hist (assessment_id, '
                             ||p_column_name
                             ||', mod_user, mod_date) VALUES ('
                             ||p_assessment_id
                             ||',';

         BEGIN
         v_debug:='1';
           IF v_datatype = 'numeric' THEN
           v_debug:='2';
             IF p_column_value IS NULL or length(p_column_value)=0 THEN
             v_debug:='3';
               v_dyn_sql := v_dyn_sql||'null';
               v_debug:='4';
               v_dyn_sql_hist := v_dyn_sql_hist||'null';
             ELSE
             v_debug:='6';
               v_dyn_sql := v_dyn_sql||TO_NUMBER(p_column_value,'99999999999999999999999999999999.999999999');
               v_dyn_sql_hist := v_dyn_sql_hist||TO_NUMBER(p_column_value,'99999999999999999999999999999999.999999999');
             END IF;
           ELSIF v_datatype = 'timestamp' THEN
             IF p_date_format IS NULL AND
                p_column_value IS NOT NULL THEN
               RAISE EXCEPTION 'A date format is required if the column is a date field';
             END IF;
             IF p_column_value IS NULL OR p_column_value = '' THEN
               v_dyn_sql := v_dyn_sql||'null';
               v_dyn_sql_hist := v_dyn_sql_hist||'null';
             ELSE
               v_dyn_sql := v_dyn_sql||' ''' || p_column_value||'''';
               v_dyn_sql_hist := v_dyn_sql_hist||''''||p_column_value||'''';
             END IF;
           ELSIF v_datatype IN ('varchar','text') THEN
             IF p_column_value IS NULL THEN
               v_dyn_sql := v_dyn_sql||'null';
               v_dyn_sql_hist := v_dyn_sql_hist||'null';
             ELSE
               v_dyn_sql := v_dyn_sql||''''||p_column_value||'''';
               v_dyn_sql_hist := v_dyn_sql_hist||''''||p_column_value||'''';
             END IF;
           ELSIF v_datatype = 'bool' THEN
             IF p_column_value IN ('true','t','1') THEN
               v_dyn_sql := v_dyn_sql||'true';
               v_dyn_sql_hist := v_dyn_sql_hist||'true';
             ELSIF p_column_value IN ('false','f','0') THEN
               v_dyn_sql := v_dyn_sql||'false';
               v_dyn_sql_hist := v_dyn_sql_hist||'false';
             ELSE
               RAISE EXCEPTION 'dx_excluded cannot be: "%". It must be either ("true","t","1") or ("false","f","0").', p_column_value;
             END IF; 
           END IF;
         v_debug:='7';
           v_dyn_sql := v_dyn_sql||' WHERE assessment_id = '||p_assessment_id;
           v_dyn_sql_hist := v_dyn_sql_hist
                             ||', '||''''||p_dbtrans_username_pt||''''
                             ||', '||'now()'
                             ||')';
           EXECUTE v_dyn_sql;
         v_debug:='8';
           EXECUTE v_dyn_sql_hist;
         exception
         -- Catch exception caused by attempting to create a duplicate record, and remedy by changing the entry_code. 
           WHEN unique_violation THEN
                     v_debug:=SQLERRM;
               IF SQLERRM = 'duplicate key value violates unique constraint "mrsassess_uk"' THEN
                  return 'collision_detected';
               END IF;
           when others then
           v_debug:='12';
             RAISE EXCEPTION 'mrs_assign_assessement_value %: % [%] [%] [%]',SQLERRM, v_dyn_sql, p_assessment_id,v_datatype,v_debug;
         END;

         PERFORM mrs_update_asmt_ownership_f(p_assessment_id);

         RETURN '1';

         END;
         $$;


ALTER FUNCTION mrsdba.mrs_assign_assessment_value_f(p_assessment_id numeric, p_column_name character varying, p_column_value character varying, p_date_format character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_assign_doc_category_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_doc_category_f(p_file_id numeric, p_category_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Load record
  INSERT INTO mrs_doc_category_details (
    file_id,
    category_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_file_id,
    p_category_id,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_assign_doc_category_f(p_file_id numeric, p_category_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_assign_doc_project_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_doc_project_f(p_file_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Load record
  INSERT INTO mrs_doc_proj_details (
    file_id,
    project_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_file_id,
    p_project_id,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_assign_doc_project_f(p_file_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_assign_drug_cat_f(character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_drug_cat_f(p_drug_code character varying, p_category_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

  -- Load record
  INSERT INTO mrs_generic_category_details (
    drug_code,
    category_id
  )
  VALUES (
    p_drug_code,
    p_category_id
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_assign_drug_cat_f(p_drug_code character varying, p_category_id numeric) OWNER TO postgres;

--
-- Name: mrs_assign_gdrug_tradenm_f(character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Load record
  INSERT INTO mrs_generic_trade_details (
    drug_code,
    trade_id
  )
  VALUES (
    p_drug_code,
    p_trade_id
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_assign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) OWNER TO postgres;

--
-- Name: mrs_assign_instrument_study_f(numeric, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_assign_instrument_study_f(p_instrument_id numeric, p_study_id numeric, p_is_owner numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_instrument_study_id  numeric; 
   BEGIN

      /* insert study association */
      INSERT INTO mrs_instruments_studies (
         instrument_id,
         study_id,
         is_owner
      )
      VALUES (
         p_instrument_id,
         p_study_id,
         p_is_owner
      )
      RETURNING instrument_study_id
      INTO v_instrument_study_id;

      INSERT INTO mrs_instruments_studies_hist (
         instrument_study_id,
         instrument_id,
         study_id,
         is_owner,
         mod_user,
         mod_date
      )
      VALUES (
         v_instrument_study_id,
         p_instrument_id,
         p_study_id,
         p_is_owner,
         p_mod_user,
         now()
      );

      RETURN v_instrument_study_id;

   END;
$$;


ALTER FUNCTION mrsdba.mrs_assign_instrument_study_f(p_instrument_id numeric, p_study_id numeric, p_is_owner numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_assign_multi_response_value_f(numeric, character varying, numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_multi_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
         -- Note: Used by Tablet Assessment
         DECLARE
         v_response_exist     varchar(1);
         v_asmt_inst_matches_question_id numeric(1);
         v_mc_value_arr    text[];
         v_mc_value_desc_arr  text[];
         v_mc_value  character varying;
         v_mc_value_desc character varying;
         v_response_value  character varying;
         v_response_value_desc text;
         v_response_sort_order   numeric(3,0);
         v_rso numeric(3,0);

         BEGIN
         v_mc_value_arr := string_to_array(p_response_value, ',');
         v_mc_value_desc_arr := string_to_array(p_response_value_description, ',');
         BEGIN
         SELECT 'Y'
         INTO v_response_exist
         FROM mrsdba.mrs_assessment_responses
         WHERE assessment_id = p_assessment_id
         AND question_id = p_question_id
         AND question_instance = p_question_instance;
         EXCEPTION
         WHEN no_data_found THEN
         v_response_exist := 'N';
         END;

         IF v_response_exist = 'Y'
         THEN
            DELETE FROM mrsdba.mrs_assessment_responses
            WHERE assessment_id = p_assessment_id
            AND question_id = p_question_id
            AND question_instance = p_question_instance;
         END IF;

         IF array_upper(v_mc_value_arr, 1) IS NOT NULL
         THEN
         FOR i in 1 .. array_upper(v_mc_value_arr, 1)
         LOOP
         --- |CM| is used to substitue comma when valued saved in asmtResponseObj,
         --- as comma is used to separate multiple responses for multiple choice question
         v_mc_value := replace(v_mc_value_arr[i], '|CM|' ,',');
         v_response_value := substring(v_mc_value, E'(.*)-\\d+$');
         v_response_sort_order := (regexp_matches(substring(v_mc_value, E'-(\\d+)$'), E'\\d+'))[1];
         v_response_value_desc := '';
            IF array_upper(v_mc_value_desc_arr, 1) IS NOT NULL
            THEN
               FOR j in 1 .. array_upper(v_mc_value_desc_arr, 1) 
               LOOP 
                  v_mc_value_desc := v_mc_value_desc_arr[j];
                  v_rso := (regexp_matches(substring(v_mc_value_desc, E'(.*)~.*'), E'\\d+'))[1];
                  IF v_response_sort_order = v_rso 
                  THEN
                     v_response_value_desc := substring(v_mc_value_desc, E'.*~(.*)');
                     EXIT;
                  END IF;
               END LOOP;
            END IF;
         INSERT INTO mrsdba.mrs_assessment_responses (
         assessment_id,
         question_id,
         question_instance,
         response_value,
         response_value_description,
         response_sort_order
         )
         VALUES (
         p_assessment_id,
         p_question_id,
         p_question_instance,
         v_response_value,
         v_response_value_desc,
         v_response_sort_order
         );

         INSERT INTO mrsdba.mrs_assessment_responses_hist (
         assessment_id,
         question_id,
         question_instance,
         response_value,
         response_value_description,
         response_sort_order,
         mod_user,
         mod_date
         )
         VALUES (
         p_assessment_id,
         p_question_id,
         p_question_instance,
         v_response_value,
         v_response_value_desc,
         v_response_sort_order,
         p_dbuser,
         now()
         );
         END LOOP;
         END IF;

         --Check that instrument contains the question that we're inserting.
         BEGIN
         SELECT count(1)
         INTO STRICT v_asmt_inst_matches_question_id
         FROM mrsdba.mrs_assessments a
         INNER JOIN mrsdba.mrs_inst_questions_dets_vw i
         ON i.instrument_id = a.instrument_id
         WHERE a.assessment_id = p_assessment_id
         AND i.question_id = p_question_id;
         EXCEPTION
         WHEN no_data_found THEN
         v_asmt_inst_matches_question_id := 0;
         END; 

         IF v_asmt_inst_matches_question_id = 0 and p_question_id not similar to '%#(CODE|DESC|SPEC)%'
         THEN
         RETURN 'INST_QUEST_MISMATCH';
         ELSE
         RETURN '1';
         END IF;

         end;
         $_$;


ALTER FUNCTION mrsdba.mrs_assign_multi_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) OWNER TO postgres;

--
-- Name: mrs_assign_personaddress_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
v_add_result varchar(100);

BEGIN

   INSERT INTO MRSDBA.mrs_person_role_det_addresses(PRD_ID, ADDRESS_ID)
   VALUES (p_prd_id, p_address_id);

   INSERT INTO MRSDBA.mrs_per_role_det_addrss_hist(PRD_ID, 
    ADDRESS_ID, 
    MOD_USER, 
    MOD_DATE)
   VALUES(p_prd_id, 
    p_address_id, 
    p_dbtrans_username_pt, 
    now());
   v_add_result := 'ADDED';
   RETURN v_add_result;

end;
$$;


ALTER FUNCTION mrsdba.mrs_assign_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_assign_personphone_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

   INSERT INTO MRSDBA.mrs_person_role_det_phones(PRD_ID, PHONE_ID)
   VALUES (p_prd_id, p_phone_id);

   INSERT INTO MRSDBA.mrs_per_role_det_phones_hist(PRD_ID,
      PHONE_ID,
      MOD_USER,
      MOD_DATE)
   VALUES(p_prd_id,
      p_phone_id,
      p_dbtrans_username_pt,
      now());

   RETURN 'ADDED';

end;
$$;


ALTER FUNCTION mrsdba.mrs_assign_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_assign_proj_co_inv_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  INSERT INTO mrs_proj_co_investigator (
    person_id,
    project_id
  )
  VALUES (
    p_person_id,
    p_project_id
  );

  INSERT INTO mrs_proj_co_inv_hist (
    person_id,
    project_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_person_id,
    p_project_id,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_assign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_assign_proj_datadom_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  INSERT INTO mrs_proj_data_dom_details (
    project_id,
    data_domain_id
  )
  VALUES (
    p_project_id,
    p_data_domain_id
  );


  INSERT INTO mrs_proj_data_dom_det_hist (
    project_id,
    data_domain_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_project_id,
    p_data_domain_id,
    p_dbtrans_username_pt,
    now()
  );


  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_assign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_assign_response_value_f(numeric, character varying, numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    -- Note: Used by Tablet Assessment
    DECLARE
    v_response_exist     varchar(1);
    v_asmt_inst_matches_question_id numeric(1);
    BEGIN

    BEGIN
    SELECT 'Y'
    INTO STRICT v_response_exist
    FROM mrsdba.mrs_assessment_responses
    WHERE assessment_id = p_assessment_id
    AND question_id = p_question_id
    AND question_instance = p_question_instance
    LIMIT 1;
    EXCEPTION
    WHEN no_data_found THEN
    v_response_exist := 'N';
    END;

    IF v_response_exist = 'N' AND
    p_response_value IS NOT NULL
    AND (p_response_value != ''
    OR p_question_instance = 1) THEN

    INSERT INTO mrsdba.mrs_assessment_responses (
    assessment_id,
    question_id,
    question_instance,
    response_value,
    response_value_description
    )
    VALUES (
    p_assessment_id,
    p_question_id,
    p_question_instance,
    p_response_value,
    p_response_value_description
    );

    INSERT INTO mrsdba.mrs_assessment_responses_hist (
    assessment_id,
    question_id,
    question_instance,
    response_value,
    response_value_description,
    mod_user,
    mod_date
    )
    VALUES (
    p_assessment_id,
    p_question_id,
    p_question_instance,
    p_response_value,
    p_response_value_description,
    p_dbuser,
    now()
    );
    ELSE
    IF p_response_value IS NULL
    OR (p_question_instance > 1
        AND p_response_value = '') 
    THEN
    DELETE FROM mrsdba.mrs_assessment_responses
    WHERE assessment_id = p_assessment_id
    AND question_id = p_question_id
    AND question_instance = p_question_instance;
    ELSE
    UPDATE mrsdba.mrs_assessment_responses
    SET response_value = p_response_value,
    response_value_description = p_response_value_description
    WHERE assessment_id = p_assessment_id
    AND question_id = p_question_id
    AND question_instance = p_question_instance;

    INSERT INTO mrsdba.mrs_assessment_responses_hist (
    assessment_id,
    question_id,
    question_instance,
    response_value,
    response_value_description,
    mod_user,
    mod_date
    )
    VALUES (
    p_assessment_id,
    p_question_id,
    p_question_instance,
    p_response_value,
    p_response_value_description,
    p_dbuser,
    now()
    );
    END IF;
    END IF;

    --Check that instrument contains the question that we're inserting.
    BEGIN
    SELECT count(1)
    INTO STRICT v_asmt_inst_matches_question_id
    FROM mrsdba.mrs_assessments a
    INNER JOIN mrsdba.mrs_inst_questions_dets_vw i
    ON i.instrument_id = a.instrument_id
    WHERE a.assessment_id = p_assessment_id
    AND i.question_id = p_question_id;
    EXCEPTION
    WHEN no_data_found THEN
    v_asmt_inst_matches_question_id := 0;
    END; 

    IF v_asmt_inst_matches_question_id = 0 and p_question_id not similar to '%#(CODE|DESC|SPEC)%'
    THEN
    RETURN 'INST_QUEST_MISMATCH';
    ELSE
    RETURN '1';
    END IF;

    end;
    $$;


ALTER FUNCTION mrsdba.mrs_assign_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) OWNER TO postgres;

--
-- Name: mrs_assign_role_f(numeric, character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_assign_role_f(p_role_id numeric, p_person_id character varying, p_alias character varying, p_dbtrans_username_pt character varying, p_study_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_alias_id    mrsdba.mrs_person_alias.alias_id%TYPE;
  v_prd_id      numeric(6,0);
  v_is_hidden   boolean := FALSE;
BEGIN

  IF p_alias IS NOT NULL THEN
    v_alias_id := mrsdba.mrs_add_person_alias_f(p_alias,p_dbtrans_username_pt);
  END IF;

  v_prd_id := mrsdba.mrs_add_person_role_detail_f(p_role_id, p_person_id, v_alias_id, p_study_id, v_is_hidden, p_dbtrans_username_pt);
  RETURN v_prd_id;  
end;
$$;


ALTER FUNCTION mrsdba.mrs_assign_role_f(p_role_id numeric, p_person_id character varying, p_alias character varying, p_dbtrans_username_pt character varying, p_study_id numeric) OWNER TO ni_developers;

--
-- Name: mrs_assign_scan_ext_prop_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  INSERT INTO mrs_scan_sessions_ext_props (
    scan_id,
    prop_id,
    prop_value
  )
  VALUES (
    p_scan_id,
    p_prop_id,
    p_prop_value
  );
  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_assign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) OWNER TO postgres;

--
-- Name: mrs_assign_sharing_rule_study_f(numeric, numeric, character varying, timestamp without time zone, character varying, timestamp without time zone, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_assign_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
	v_rule_exists numeric;
BEGIN

--verify that the study-rule relation does not already exist
	BEGIN
		SELECT sharing_rule_id
		INTO STRICT v_rule_exists
		FROM mrs_sharing_rules_studies
		WHERE 
		p_rule_id = sharing_rule_id AND
		p_study_id = study_id;

	EXCEPTION
		WHEN no_data_found THEN
			v_rule_exists := 0;	
	END;

	IF v_rule_exists = 0 THEN
		BEGIN
			INSERT INTO mrs_sharing_rules_studies (
				sharing_rule_id,
				study_id,
				recipient_approved_by,
				recipient_approval_date,
				donor_approved_by,
				donor_approval_date,
				note
			)
			VALUES (
				p_rule_id,
				p_study_id,
				p_recipient_approved_by,
				p_recipient_approval_date,
				p_donor_approved_by,
				p_donor_approval_date,
				p_note
			);

			INSERT INTO mrs_sharing_rules_studies_hist (
				sharing_rule_id,
				study_id,
				recipient_approved_by,
				recipient_approval_date,
				donor_approved_by,
				donor_approval_date,
				note,
				mod_user,
				mod_date
			)
			VALUES (
				p_rule_id,
				p_study_id,
				p_recipient_approved_by,
				p_recipient_approval_date,
				p_donor_approved_by,
				p_donor_approval_date,
				p_note,
				p_dbtrans_username_pt,
				now()
			);
		END;
	ELSE
		RETURN 'RULE_EXISTS';
	END IF;
RETURN 'SUCCESS';

END;
$$;


ALTER FUNCTION mrsdba.mrs_assign_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_assign_subject_tag_detail_f(character varying, numeric, character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_assign_subject_tag_detail_f(p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_subject_tag_details_id int;

   BEGIN

      -- Load record
      INSERT INTO mrsdba.mrs_subject_tag_details (
          usid,
          subject_tag_id,
          value,
          site_id,
          study_id
      )
      VALUES (
          p_usid,
          p_subject_tag_id,
          p_value,
          NULLIF(p_site_id, ''),
          p_study_id
      )
      RETURNING subject_tag_details_id
      INTO v_subject_tag_details_id;

      INSERT INTO mrsdba.mrs_subject_tag_details_hist (
          subject_tag_details_id,
          usid,
          subject_tag_id,
          value,
          site_id,
          study_id,
          mod_user,
          mod_date
      )
      VALUES (
          v_subject_tag_details_id,
          p_usid,
          p_subject_tag_id,
          p_value,
          NULLIF(p_site_id, ''),
          p_study_id,
          p_mod_user,
          NOW()
      );

      RETURN '1';
   end;
$$;


ALTER FUNCTION mrsdba.mrs_assign_subject_tag_detail_f(p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_assign_subject_type_by_ursi_f(character varying, numeric, character varying, character varying, boolean, character varying, character varying, timestamp without time zone); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_assign_subject_type_by_ursi_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_disenrolled numeric;
  v_usid            mrs_subject_type_details.usid%TYPE;
  v_subject_type_id mrs_subject_type_details.subject_type_id%TYPE;
BEGIN
  /* similar to mrs_assing_sbuject_type_f but uses an URSI as an input insted of an USID */

  BEGIN

      -- Get the USID
      
      v_usid:=mrs_URSI_to_USID_f(p_ursi);
  
    /* look for existing enrollment */
    SELECT 
  CASE WHEN disenrolled_date is not null 
    THEN 1 
    ELSE NULL 
  END
      INTO STRICT v_disenrolled
      FROM mrs_subject_type_details
     WHERE ursi=p_ursi
       AND subject_type_id in ( SELECT subject_type_id
                                FROM mrs_subject_types
                                WHERE study_id = ( SELECT study_id
                                                   FROM mrs_subject_types
                                                   WHERE subject_type_id=p_subject_type_id )
                               );

  EXCEPTION
    WHEN no_data_found THEN
    -- THIS URSI IS NOT CURRENTLY ENROLLED IN THE STUDY.
      v_disenrolled := 0;
  END;

  /* if no existing enrollment insert new row */

  BEGIN
     IF v_disenrolled = 0 THEN
     
         INSERT INTO mrs_subject_type_details (
            usid,
            subject_type_id,
            ursi,
            enrolled_date,
            user_enrolled,
            notes,
            agreestosharedata,
            consent_date
         )
         VALUES (
            v_usid,
            p_subject_type_id,
            p_ursi,
            now(),
            p_dbtrans_username_pt,
            p_notes,
            CASE p_agreestosharedata
            WHEN 'NULL' THEN
            NULL
            ELSE p_agreestosharedata END,
            p_consent_date
         );

      /* update history */
         INSERT INTO mrs_subject_type_details_hist (
            usid,
            subject_type_id,
            ursi,
            enrolled_date,
            notes,
            agreestosharedata,
            consent_date,
            mod_user,
            mod_date
         )
         VALUES (
            v_usid,
            p_subject_type_id,
            p_ursi,
            now(),
            p_notes,
             CASE p_agreestosharedata
            WHEN 'NULL' THEN
            NULL
            ELSE p_agreestosharedata END,
            p_consent_date,
            p_dbtrans_username_pt,
            now()
         );

     RETURN p_ursi;

--URSI is already enrolled in this study: update subject-type and return 'UPDATED'
     ELSIF v_disenrolled IS NULL
  THEN
    SELECT subject_type_id
      INTO STRICT v_subject_type_id
      FROM mrs_subject_type_details
     WHERE ursi=p_ursi
       AND subject_type_id in ( SELECT subject_type_id
                                FROM mrs_subject_types
                                WHERE study_id = ( SELECT study_id
                                                   FROM mrs_subject_types
                                                   WHERE subject_type_id=p_subject_type_id )
                               );
                               
    UPDATE mrs_subject_type_details
          SET subject_type_id  = p_subject_type_id,
              disenrolled_date = null,
              notes            = p_notes,
              user_enrolled    = p_dbtrans_username_pt,
              agreestosharedata=CASE p_agreestosharedata
                                WHEN 'NULL' THEN NULL ELSE
                                     p_agreestosharedata
                                END,
              consent_date     = p_consent_date
        WHERE ursi             = p_ursi
          AND subject_type_id  = v_subject_type_id;
  RETURN 'UPDATED';
--URSI is disenrolled from study. Re-enroll URSI and return 'RE-ENROLLED'
      ELSE 
  SELECT subject_type_id
      INTO STRICT v_subject_type_id
      FROM mrs_subject_type_details
     WHERE ursi=p_ursi
       AND subject_type_id in ( SELECT subject_type_id
                                FROM mrs_subject_types
                                WHERE study_id = ( SELECT study_id
                                                   FROM mrs_subject_types
                                                   WHERE subject_type_id=p_subject_type_id )
                               );
                                
  UPDATE mrs_subject_type_details
          SET subject_type_id  = p_subject_type_id,
              disenrolled_date = null,
              notes            = p_notes,
              user_enrolled    = p_dbtrans_username_pt,
              agreestosharedata=CASE p_agreestosharedata
                                WHEN 'NULL' THEN NULL ELSE
                                     p_agreestosharedata
                                END,
              consent_date     = p_consent_date
           WHERE ursi             = p_ursi
              AND subject_type_id  = v_subject_type_id;
     RETURN 'REENROLLED';
  
     END IF;
   EXCEPTION
       WHEN OTHERS THEN
         RAISE EXCEPTION '%',SQLERRM;
   END;

   PERFORM mrs_update_future_contact_permission_f(p_agrees_to_future_studies, v_usid, p_dbtrans_username_pt);

 RETURN p_ursi;

END;
$$;


ALTER FUNCTION mrsdba.mrs_assign_subject_type_by_ursi_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone) OWNER TO ni_developers;

--
-- Name: mrs_assign_subject_type_f(character varying, numeric, character varying, character varying, boolean, character varying, character varying, timestamp without time zone, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_assign_subject_type_f(p_usid character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone, p_ethnicity character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
         v_subject_type_id    mrsdba.mrs_subject_type_details.subject_type_id%TYPE;
         v_ursi               mrsdba.mrs_Subject_type_details.ursi%TYPE;
         v_ursi_prefix        character varying;
         v_enrolled_date      timestamp;
      BEGIN

        BEGIN
          /* look for existing enrollment */
          SELECT subject_type_id
            INTO STRICT v_subject_type_id
            FROM mrsdba.mrs_subject_type_details
           WHERE usid=p_usid
             AND subject_type_id in ( SELECT subject_type_id
                                        FROM mrsdba.mrs_subject_types
                                        WHERE study_id = ( SELECT study_id
                                                             FROM mrsdba.mrs_subject_types
                                                             WHERE subject_type_id=p_subject_type_id )
                                           )
         AND disenrolled_date is NULL;

        EXCEPTION
          WHEN no_data_found THEN
            v_subject_type_id := 0;
        END;

        /* if no existing enrollment insert new row */
        IF v_subject_type_id = 0 THEN

         -- Get ursi prefix with site id
         BEGIN
            -- SET search_path=mrsdba;
            SELECT ursi_prefix
            INTO STRICT v_ursi_prefix
            FROM casdba.cas_sites
            WHERE site_id = p_site_id;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            RAISE EXCEPTION 'No URSI prefix found for site_id:';
         END;

         -- Get the URSI
         BEGIN
            SELECT mrsdba.mrs_get_next_ursi_f(v_ursi_prefix)
            INTO STRICT v_ursi;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            RAISE EXCEPTION 'URSI could not be generated';
         END;

         v_enrolled_date:=now();
         
         INSERT INTO mrsdba.mrs_subject_type_details (
         subject_type_id,
         ursi,
         enrolled_date,
         user_enrolled,
         notes,
         agreestosharedata,
         usid,
         ethnic_category,
         consent_date
         )
         VALUES (
         p_subject_type_id,
         v_ursi,
         v_enrolled_date,
         p_dbtrans_username_pt,
         p_notes,
         CASE p_agreestosharedata
         WHEN 'NULL' THEN
         NULL
         ELSE p_agreestosharedata END,
         p_usid,
         p_ethnicity,
         p_consent_date
         );

         PERFORM mrs_update_future_contact_permission_f(p_agrees_to_future_studies, p_usid, p_dbtrans_username_pt);
        
         /* update history */
         INSERT INTO mrsdba.mrs_subject_type_details_hist (
         subject_type_id,
         ursi,
         enrolled_date,
         user_enrolled,
         notes,
         agreestosharedata,
         usid,
         ethnic_category,
         consent_date,
         mod_user,
         mod_date
         )
         VALUES (
         p_subject_type_id,
         v_ursi,
         v_enrolled_date,
         p_dbtrans_username_pt,
         p_notes,
         CASE p_agreestosharedata
         WHEN 'NULL' THEN
         NULL
         ELSE p_agreestosharedata END,
         p_usid,
         p_ethnicity,
         p_consent_date,
         p_dbtrans_username_pt,
         now()
         );

        ELSE

          RETURN 'ALREADYENROLLED';

        END IF;

       RETURN v_ursi;

      END;
      $$;


ALTER FUNCTION mrsdba.mrs_assign_subject_type_f(p_usid character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone, p_ethnicity character varying) OWNER TO ni_developers;

--
-- Name: mrs_auto_read_no_anat_f(); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_auto_read_no_anat_f() RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_result RECORD;
BEGIN

   /* This function called from /export/ni/rad/sql/autoReadNoAnat.sql */

   FOR v_result IN
      SELECT DISTINCT
         i.scan_id,
         (CASE WHEN study_id=5940
          THEN 'LSR' -- mrnlrrismoke
          ELSE 'MRN'
          END) AS site
      FROM mrsdba.mrs_scan_sessions_vw i
      LEFT OUTER JOIN mrsdba.mrs_series_vw p
         ON p.scan_id = i.scan_id
            AND (p.label ilike '%mprage%'
            OR p.label ilike '%flair%'
            OR p.label ilike 't2%'
            OR p.label ilike 't1%'
            -- include special cases:
            OR p.to_rad_review = true)
         WHERE i.is_phantom = false
            AND i.scan_id IN (
            SELECT r.session_scan_id
            FROM mrs_scan_sessions_review_vw r
            INNER JOIN mrsdba.mrs_scan_sessions_t_vw s
               ON r.session_scan_id = s.scan_id
            WHERE r.review_scan_id IS NULL
            AND (
               r.site_id = '7' OR r.session_scan_id IN
               (SELECT scan_id FROM mrs_scan_sessions_review_include_vw)
               OR r.study_id = 430
            )
            AND r.pi_last_name != 'Hart'
            AND r.pi_last_name != 'Morrison'
            AND r.study_id != 2740
            AND r.study_id != 4500
            AND r.study_id != 4440
            AND r.study_id != 5720
            AND r.study_id != 7160
            AND r.study_id != 5800
            AND INSTR(UPPER(r.scan_label),'DUMMY')= 0
            AND s.modality_id = 1
            AND COALESCE(s.radiology_loaded,'F') != 'T'
         )
      AND i.scan_date < NOW()-interval '2 hours'
      AND p.series_id is null
   LOOP
      -- add review
      INSERT INTO mrs_scan_sessions_review(
         person_id,
         review_date,
         impression,
         recommendation,
         findings,
         recommendation_code,
         recommendation_comments,
         report_template,
         scan_id
      )
      SELECT 
         'AUTOANALYZE',
         now(),
         'N',
         'none',
         'none',
         '7',
         'No anatomical data provided.',
         v_result.site,
         v_result.scan_id;

      -- add hist entry for review
      INSERT INTO mrs_scan_sessions_review_hist(
         person_id,
         review_date,
         impression,
         recommendation,
         findings,
         recommendation_code,
         recommendation_comments,
         report_template,
         scan_id,
         mod_user,
         mod_date
      )
      SELECT 
         person_id,
         review_date,
         impression,
         recommendation,
         findings,
         recommendation_code,
         recommendation_comments,
         report_template,
         scan_id,
         person_id,
         NOW()
      FROM mrs_scan_sessions_review
      WHERE scan_id = v_result.scan_id;

   END LOOP;

   RETURN true;
END;
$$;


ALTER FUNCTION mrsdba.mrs_auto_read_no_anat_f() OWNER TO ni_developers;

--
-- Name: mrs_backfill_all_autopop_questions_f(numeric, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_backfill_all_autopop_questions_f(p_instrument_id numeric, p_fill_blanks boolean, p_dbuser character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
                              -- Note: Used by Tablet Assessment
                              DECLARE                                                                                 
                              v_insert_result_count       int; 
                              v_blank_update_result_count int;
                              v_update_result          text;
                              v_update_result_temp   int;
                              v_update_result_count int;
                              v_from_q_id           character varying(50); 
                              v_from_inst_id        numeric (20);  
                              v_entry_code_array    character varying(1)[];
                              v_question_id	      character varying;
                              v_result_str		character varying;

                              begin
                               v_result_str := '';
				for v_question_id IN 
					SELECT question_id 
					FROM mrs_instrument_questions iq
					INNER JOIN mrs_instrument_section_details isd
					USING (section_id)
					WHERE isd.instrument_id = p_instrument_id
					AND autopop_qid IS NOT NULL
				LOOP
                                     v_insert_result_count:=0; 
				      v_blank_update_result_count :=0;
				      v_update_result          :='';
				      v_update_result_temp   :=0;
				      v_update_result_count :=0;                                
				      begin
				      --define array of entry codes to pull data from (in order)

				      v_entry_code_array := '{"C","R"}';

				      --get instrument to populate data from
				      SELECT instrument_id INTO v_from_inst_id
					 FROM mrsdba.mrs_inst_questions_dets_vw iqd 
					 INNER JOIN mrsdba.mrs_instrument_questions iq 
					 ON iq.autopop_qid = iqd.question_id 
					 WHERE iq.question_id = v_question_id
					 LIMIT 1;
				      --get question_id to populate data from
				      SELECT autopop_qid 
					 INTO v_from_q_id
					 FROM mrsdba.mrs_instrument_questions iq 
					 WHERE iq.question_id = v_question_id
					 LIMIT 1;

				      --insert rows to be modified into hist table:
				      INSERT INTO mrsdba.mrs_assessment_responses_hist (assessment_id, question_id, question_instance, response_value, response_value_description, mod_user, mod_date)
					 SELECT assessment_id, v_question_id, 1, '~<autoPopBlank>~', 'Inserted by Auto Populate on '||now(), p_dbuser, now()
					 FROM mrsdba.mrs_assessments a
					 WHERE assessment_id NOT IN (
							   SELECT a2.assessment_id from mrsdba.mrs_assessments a2 
							   INNER JOIN mrsdba.mrs_assessment_responses ar2 
							   ON ar2.assessment_id = a2.assessment_id
							   WHERE ar2.question_id = v_question_id
							   AND a2.instrument_id = a.instrument_id 
					       ) 
					       AND a.instrument_id = p_instrument_id;

				      --insert missing assessment_response rows 
				      INSERT INTO mrsdba.mrs_assessment_responses (assessment_id, question_id, question_instance, response_value, response_value_description)
					 SELECT assessment_id, v_question_id, 1, '~<autoPopBlank>~', 'Inserted by Auto Populate on '||now()
					 FROM mrsdba.mrs_assessments a
					 WHERE assessment_id NOT IN (
							   SELECT a2.assessment_id from mrsdba.mrs_assessments a2 
							   INNER JOIN mrsdba.mrs_assessment_responses ar2 
							   ON ar2.assessment_id = a2.assessment_id
							   WHERE ar2.question_id = v_question_id
							   AND a2.instrument_id = a.instrument_id 
					       ) AND a.instrument_id = p_instrument_id;

				      --count number of rows inserted
				      GET DIAGNOSTICS v_insert_result_count := ROW_COUNT;

				      --update blank responses if that option is set
				      
				      v_blank_update_result_count := 0;
				      IF p_fill_blanks = true THEN
					 INSERT INTO mrsdba.mrs_assessment_responses_hist (assessment_id, question_id, question_instance, response_value, response_value_description, mod_user, mod_date)
					    SELECT assessment_id, v_question_id, 1, '~<autoPopBlank>~', 'Inserted by Auto Populate on '||now(), p_dbuser, now()
					    FROM mrsdba.mrs_assessments a
					       WHERE assessment_id IN (
								 SELECT a2.assessment_id from mrsdba.mrs_assessments a2 
								 INNER JOIN mrsdba.mrs_assessment_responses ar2 
								 ON ar2.assessment_id = a2.assessment_id
								 WHERE ar2.question_id = v_question_id
								 AND a2.instrument_id = a.instrument_id 
								 AND (ar2.response_value = '' OR ar2.response_value is NULL)
							) 
						  AND a.instrument_id = p_instrument_id;

					 UPDATE mrsdba.mrs_assessment_responses 
					 SET response_value = '~<autoPopBlank>~',
					     response_value_description = 'Inserted by Auto Populate on '||now()
					     WHERE question_id = v_question_id
					     AND assessment_id IN (
							      SELECT a2.assessment_id from mrsdba.mrs_assessments a2
							      INNER JOIN mrsdba.mrs_assessment_responses ar2
							      ON ar2.assessment_id = a2.assessment_id
							      WHERE ar2.question_id = v_question_id
							      AND a2.instrument_id = p_instrument_id
							      AND (ar2.response_value = '' OR ar2.response_value is NULL)
						     );
					 GET DIAGNOSTICS v_blank_update_result_count := ROW_COUNT;
				      END IF;



				      --initialize v_update_result
				      v_update_result := '';
				      v_update_result_count := 0;

				      --loop through each entry code in array and update values that have not yet been updated 
				      for i in 1 .. array_upper(v_entry_code_array,1) LOOP
					 INSERT INTO mrsdba.mrs_assessment_responses_hist (assessment_id, question_id, question_instance, response_value, response_value_description, mod_user, mod_date)
					 SELECT
					 arTo.assessment_id,
					 arTo.question_id,
					 arTo.question_instance,
					 arFrom.response_value as from_response_value, 
					 'Auto Populated from assessment ID:'||aFrom.assessment_id||', question '||v_from_q_id||' on '||now() as from_response_value_description,
					 p_dbuser,
					 now()
					 FROM mrsdba.mrs_assessments aTo 
					 INNER JOIN mrsdba.mrs_assessments aFrom
					    ON aFrom.ursi = aTo.ursi
					 INNER JOIN mrsdba.mrs_assessment_responses arFrom
					    ON arFrom.assessment_id = aFrom.assessment_id
					 INNER JOIN mrsdba.mrs_assessment_responses arTo
					    ON arTo.assessment_id = aTo.assessment_id
					 WHERE
					 aFrom.instrument_id = v_from_inst_id --autopopulate from this instrument
					 AND aFrom.entry_code = v_entry_code_array[i] --only for a specific entry code
					 AND arFrom.question_id = v_from_q_id --autopopulate from this question
					 AND aTo.instrument_id = p_instrument_id  --autopopulate to this instrument
					 AND arTo.question_id = v_question_id --autopopulate to this question
					 --AND arTo.response_value = '~<autoPopBlank>~' --only those questions that were previously backfilled.
					 AND arFrom.question_instance = 1
					 AND aFrom.dataentry_type_id = aTo.dataentry_type_id;
					 

					 UPDATE mrsdba.mrs_assessment_responses ar
					 SET response_value = from_response_value,
					 response_value_description = from_response_value_description
					 FROM (
					    SELECT   
					    arFrom.response_value as from_response_value, 
					    'Auto Populated from assessment ID:'||aFrom.assessment_id||', question '||v_from_q_id||' on '||now() as from_response_value_description,
					    arTo.assessment_id
					    FROM mrsdba.mrs_assessments aTo 
					    INNER JOIN mrsdba.mrs_assessments aFrom
					       ON aFrom.ursi = aTo.ursi
					    INNER JOIN mrsdba.mrs_assessment_responses arFrom
					       ON arFrom.assessment_id = aFrom.assessment_id
					    INNER JOIN mrsdba.mrs_assessment_responses arTo
					       ON arTo.assessment_id = aTo.assessment_id
					    WHERE
					    aFrom.instrument_id = v_from_inst_id --autopopulate from this instrument
					    AND aFrom.entry_code = v_entry_code_array[i] --only for a specific entry code
					    AND arFrom.question_id = v_from_q_id --autopopulate from this question
					    AND aTo.instrument_id = p_instrument_id  --autopopulate to this instrument
					    AND arTo.question_id = v_question_id --autopopulate to this question
					    --AND arTo.response_value = '~<autoPopBlank>~' --only those questions that were previously backfilled.
					    AND arFrom.question_instance = 1
					    AND aFrom.dataentry_type_id = aTo.dataentry_type_id
					 ) subquery
					 WHERE ar.assessment_id IN (SELECT assessment_id from mrsdba.mrs_assessments where instrument_id = p_instrument_id)
					    --AND response_value = '~<autoPopBlank>~'
					    AND question_id = v_question_id
					    AND subquery.assessment_id = ar.assessment_id ; 

					 GET DIAGNOSTICS v_update_result_temp := ROW_COUNT;
					 v_update_result :=v_update_result || v_update_result_temp || ' responses updated from "'||v_entry_code_array[i]||'" records. & ';
					 v_update_result_count := v_update_result_count + v_update_result_temp;

					 end Loop;
					v_result_str := v_result_str || v_question_id || ': ' || v_insert_result_count || '|' || v_blank_update_result_count || '|' || v_update_result || '|' || v_update_result_count ||'   ';
				      

				      end;   
				END LOOP;
				return v_result_str;
				end;                                                                                 
                              $$;


ALTER FUNCTION mrsdba.mrs_backfill_all_autopop_questions_f(p_instrument_id numeric, p_fill_blanks boolean, p_dbuser character varying) OWNER TO postgres;

--
-- Name: mrs_backfill_autopop_questions_f(numeric, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_backfill_autopop_questions_f(p_instrument_id numeric, p_question_id character varying, p_fill_blanks boolean, p_dbuser character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
                              -- Note: Used by Tablet Assessment
                              DECLARE                                                                                 
                              v_insert_result_count       int; 
                              v_blank_update_result_count int;
                              v_update_result          text;
                              v_update_result_temp   int;
                              v_update_result_count int;
                              v_from_q_id           character varying(50); 
                              v_from_inst_id        numeric (20);  
                              v_entry_code_array    character varying(1)[];
                                                                     
                              begin
                              --define array of entry codes to pull data from (in order)

                              v_entry_code_array := '{"C","R"}';

                              --get instrument to populate data from
                              SELECT instrument_id INTO v_from_inst_id
                                 FROM mrsdba.mrs_inst_questions_dets_vw iqd 
                                 INNER JOIN mrsdba.mrs_instrument_questions iq 
                                 ON iq.autopop_qid = iqd.question_id 
                                 WHERE iq.question_id = p_question_id
                                 LIMIT 1;
                              --get question_id to populate data from
                              SELECT autopop_qid 
                                 INTO v_from_q_id
                                 FROM mrsdba.mrs_instrument_questions iq 
                                 WHERE iq.question_id = p_question_id
                                 LIMIT 1;

                              --insert rows to be modified into hist table:
                              INSERT INTO mrsdba.mrs_assessment_responses_hist (assessment_id, question_id, question_instance, response_value, response_value_description, mod_user, mod_date)
                                 SELECT assessment_id, p_question_id, 1, '~<autoPopBlank>~', 'Inserted by Auto Populate on '||now(), p_dbuser, now()
                                 FROM mrsdba.mrs_assessments a
                                 WHERE assessment_id NOT IN (
                                                   SELECT a2.assessment_id from mrsdba.mrs_assessments a2 
                                                   INNER JOIN mrsdba.mrs_assessment_responses ar2 
                                                   ON ar2.assessment_id = a2.assessment_id
                                                   WHERE ar2.question_id = p_question_id
                                                   AND a2.instrument_id = a.instrument_id 
                                       ) 
                                       AND a.instrument_id = p_instrument_id;

                              --insert missing assessment_response rows 
                              INSERT INTO mrsdba.mrs_assessment_responses (assessment_id, question_id, question_instance, response_value, response_value_description)
                                 SELECT assessment_id, p_question_id, 1, '~<autoPopBlank>~', 'Inserted by Auto Populate on '||now()
                                 FROM mrsdba.mrs_assessments a
                                 WHERE assessment_id NOT IN (
                                                   SELECT a2.assessment_id from mrsdba.mrs_assessments a2 
                                                   INNER JOIN mrsdba.mrs_assessment_responses ar2 
                                                   ON ar2.assessment_id = a2.assessment_id
                                                   WHERE ar2.question_id = p_question_id
                                                   AND a2.instrument_id = a.instrument_id 
                                       ) AND a.instrument_id = p_instrument_id;

                              --count number of rows inserted
                              GET DIAGNOSTICS v_insert_result_count := ROW_COUNT;

                              --update blank responses if that option is set
                              
                              v_blank_update_result_count := 0;
                              IF p_fill_blanks = true THEN
                                 INSERT INTO mrsdba.mrs_assessment_responses_hist (assessment_id, question_id, question_instance, response_value, response_value_description, mod_user, mod_date)
                                    SELECT assessment_id, p_question_id, 1, '~<autoPopBlank>~', 'Inserted by Auto Populate on '||now(), p_dbuser, now()
                                    FROM mrsdba.mrs_assessments a
                                       WHERE assessment_id IN (
                                                         SELECT a2.assessment_id from mrsdba.mrs_assessments a2 
                                                         INNER JOIN mrsdba.mrs_assessment_responses ar2 
                                                         ON ar2.assessment_id = a2.assessment_id
                                                         WHERE ar2.question_id = p_question_id
                                                         AND a2.instrument_id = a.instrument_id 
                                                         AND (ar2.response_value = '' OR ar2.response_value is NULL)
                                                ) 
                                          AND a.instrument_id = p_instrument_id;

                                 UPDATE mrsdba.mrs_assessment_responses 
                                 SET response_value = '~<autoPopBlank>~',
                                     response_value_description = 'Inserted by Auto Populate on '||now()
                                     WHERE question_id = p_question_id
                                     AND assessment_id IN (
                                                      SELECT a2.assessment_id from mrsdba.mrs_assessments a2
                                                      INNER JOIN mrsdba.mrs_assessment_responses ar2
                                                      ON ar2.assessment_id = a2.assessment_id
                                                      WHERE ar2.question_id = p_question_id
                                                      AND a2.instrument_id = p_instrument_id
                                                      AND (ar2.response_value = '' OR ar2.response_value is NULL)
                                             );
                                 GET DIAGNOSTICS v_blank_update_result_count := ROW_COUNT;
                              END IF;



                              --initialize v_update_result
                              v_update_result := '';
                              v_update_result_count := 0;

                              --loop through each entry code in array and update values that have not yet been updated 
                              for i in 1 .. array_upper(v_entry_code_array,1) LOOP
                                 INSERT INTO mrsdba.mrs_assessment_responses_hist (assessment_id, question_id, question_instance, response_value, response_value_description, mod_user, mod_date)
                                 SELECT
                                 arTo.assessment_id,
                                 arTo.question_id,
                                 arTo.question_instance,
                                 arFrom.response_value as from_response_value, 
                                 'Auto Populated from assessment ID:'||aFrom.assessment_id||', question '||v_from_q_id||' on '||now() as from_response_value_description,
                                 p_dbuser,
                                 now()
                                 FROM mrsdba.mrs_assessments aTo 
                                 INNER JOIN mrsdba.mrs_assessments aFrom
                                    ON aFrom.ursi = aTo.ursi
                                 INNER JOIN mrsdba.mrs_assessment_responses arFrom
                                    ON arFrom.assessment_id = aFrom.assessment_id
                                 INNER JOIN mrsdba.mrs_assessment_responses arTo
                                    ON arTo.assessment_id = aTo.assessment_id
                                 WHERE
                                 aFrom.instrument_id = v_from_inst_id --autopopulate from this instrument
                                 AND aFrom.entry_code = v_entry_code_array[i] --only for a specific entry code
                                 AND arFrom.question_id = v_from_q_id --autopopulate from this question
                                 AND aTo.instrument_id = p_instrument_id  --autopopulate to this instrument
                                 AND arTo.question_id = p_question_id --autopopulate to this question
                                 AND arTo.response_value = '~<autoPopBlank>~' --only those questions that were previously backfilled.
                                 AND arFrom.question_instance = 1
                                 AND aFrom.dataentry_type_id = aTo.dataentry_type_id;
                                 

                                 UPDATE mrsdba.mrs_assessment_responses ar
                                 SET response_value = from_response_value,
                                 response_value_description = from_response_value_description
                                 FROM (
                                    SELECT   
                                    arFrom.response_value as from_response_value, 
                                    'Auto Populated from assessment ID:'||aFrom.assessment_id||', question '||v_from_q_id||' on '||now() as from_response_value_description,
                                    arTo.assessment_id
                                    FROM mrsdba.mrs_assessments aTo 
                                    INNER JOIN mrsdba.mrs_assessments aFrom
                                       ON aFrom.ursi = aTo.ursi
                                    INNER JOIN mrsdba.mrs_assessment_responses arFrom
                                       ON arFrom.assessment_id = aFrom.assessment_id
                                    INNER JOIN mrsdba.mrs_assessment_responses arTo
                                       ON arTo.assessment_id = aTo.assessment_id
                                    WHERE
                                    aFrom.instrument_id = v_from_inst_id --autopopulate from this instrument
                                    AND aFrom.entry_code = v_entry_code_array[i] --only for a specific entry code
                                    AND arFrom.question_id = v_from_q_id --autopopulate from this question
                                    AND aTo.instrument_id = p_instrument_id  --autopopulate to this instrument
                                    AND arTo.question_id = p_question_id --autopopulate to this question
                                    AND arTo.response_value = '~<autoPopBlank>~' --only those questions that were previously backfilled.
                                    AND arFrom.question_instance = 1
                                    AND aFrom.dataentry_type_id = aTo.dataentry_type_id
                                 ) subquery
                                 WHERE ar.assessment_id IN (SELECT assessment_id from mrsdba.mrs_assessments where instrument_id = p_instrument_id)
                                    AND response_value = '~<autoPopBlank>~'
                                    AND question_id = p_question_id
                                    AND subquery.assessment_id = ar.assessment_id ; 

                                 GET DIAGNOSTICS v_update_result_temp := ROW_COUNT;
                                 v_update_result :=v_update_result || v_update_result_temp || ' responses updated from "'||v_entry_code_array[i]||'" records. & ';
                                 v_update_result_count := v_update_result_count + v_update_result_temp;

                                 end Loop;

                              return v_insert_result_count || '|' || v_blank_update_result_count || '|' || v_update_result || '|' || v_update_result_count;

                              end;                                                                                    
                              $$;


ALTER FUNCTION mrsdba.mrs_backfill_autopop_questions_f(p_instrument_id numeric, p_question_id character varying, p_fill_blanks boolean, p_dbuser character varying) OWNER TO postgres;

--
-- Name: mrs_backfill_inst_question_f(numeric, character varying, character varying[], numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_backfill_inst_question_f(p_instrument_id numeric, p_question_id character varying, p_dep_qids character varying[], p_assessment_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE
         checkVar int;
         result   int;
         BEGIN
            BEGIN

            DELETE from mrsdba.mrs_assessment_responses where question_id = p_question_id
            and CASE WHEN p_assessment_id  = 0 THEN TRUE ELSE assessment_id = p_assessment_id END;
            END;
         /* insert missing question_ids for assessments already entered */
         insert into mrs_assessment_responses (assessment_id, question_id, question_instance, response_value)
         select  distinct 
         r.assessment_id,
         P_QUESTION_ID,
         r.question_instance,
         null
         from mrsdba.mrs_assessment_responses r
         where CASE WHEN p_assessment_id  = 0 THEN TRUE ELSE r.assessment_id = p_assessment_id END
         and r.question_id = any(p_dep_qids);
         /*
         and r.question_instance <=
         (select
         case when max_instance is null then 1 else max_instance end
         from
         (
         select max(question_instance) as max_instance
         from mrs_assessment_responses
         where assessment_id= r.assessment_id
         and question_instance > 1
         and question_id = any(p_dep_qids)
         ) z);
         */
         GET DIAGNOSTICS result = ROW_COUNT;
         RETURN result;

         end;
         $$;


ALTER FUNCTION mrsdba.mrs_backfill_inst_question_f(p_instrument_id numeric, p_question_id character varying, p_dep_qids character varying[], p_assessment_id numeric) OWNER TO postgres;

--
-- Name: mrs_batch_update_q_requirement_f(numeric, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_batch_update_q_requirement_f(instrument_id_f numeric, all_required_f boolean, mod_user_f character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
   questions_tobe_updated CURSOR(v_instrument_id numeric, v_required boolean) FOR
              SELECT q.* 
              FROM mrs_instrument_questions q 
                    JOIN mrs_instrument_section_details d USING(section_id)
              WHERE d.instrument_id = v_instrument_id
                  AND CASE WHEN v_required THEN q.is_required != 't'
                           ELSE q.is_required != 'f'
                      END;
begin
   FOR question IN questions_tobe_updated(instrument_id_f, all_required_f)
   LOOP

      PERFORM mrs_update_inst_question_f(question.question_id, 
                                 question.label, 
                                 question.description, 
                                 question.example_description, 
                                 question.exclusion_description, 
                                 question.max_instances, 
                                 question.section_id, 
                                 question.dsm_question_type, 
                                 question.disp_label_first, 
                                 question.formula_question_type, 
                                 question.formula, 
                                 all_required_f, 
                                 question.is_sa_hidden, 
                                 question.is_sa_radio_type, 
                                 question.is_auto_complete_type, 
                                 question.sa_label, 
                                 question.autopop_qid, 
                                 question.assumed_value, 
                                 question.response_format_id, 
                                 question.other_option_label, 
                                 question.specify_detail, 
                                 question.multiple_choice, 
                                 question.istextquestion, 
                                 question.isvasquestion, 
                                 question.vas_minimum, 
                                 question.vas_maximum, 
                                 question.vas_interval, 
                                 question.vas_display_extrema, 
                                 question.vas_display_cursor_value, 
                                 question.vas_display_center_mark, 
                                 question.vas_min_label, 
                                 question.vas_mid_label, 
                                 question.vas_max_label, 
                                 question.numeric_response_min, 
                                 question.numeric_response_max, 
                                 question.is_media_upload, 
                                 question.vas_recording_interval, 
                                 question.is_de_hidden,
                                 mod_user_f);
   END LOOP;    
   return '1';
end;$$;


ALTER FUNCTION mrsdba.mrs_batch_update_q_requirement_f(instrument_id_f numeric, all_required_f boolean, mod_user_f character varying) OWNER TO ni_developers;

--
-- Name: mrs_cancel_portal_event_auto_email_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_cancel_portal_event_auto_email_f(study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
update mrs_study_messages set auto_send=false where study_id = study_id_f and message_type_id=message_type_id_f;
insert into mrs_study_messages_hist (message_id, study_id, message_type_id, auto_send, mod_user, mod_date) 
select message_id, study_id, message_type_id, auto_send, mod_user_f, now() from mrs_study_messages where study_id = study_id_f and message_type_id=message_type_id_f;
return 1;

end;$$;


ALTER FUNCTION mrsdba.mrs_cancel_portal_event_auto_email_f(study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_clean_old_client_errors_f(); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_clean_old_client_errors_f() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN

         DELETE FROM mrsdba.mrs_client_error_log where error_time < (now() - '2 weeks'::interval);

         ANALYZE mrsdba.mrs_client_error_log;

         RETURN 'true';

         END;
         $$;


ALTER FUNCTION mrsdba.mrs_clean_old_client_errors_f() OWNER TO postgres;

--
-- Name: mrs_clear_subj_ass_queue_f(numeric, numeric, character varying, integer); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_clear_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_mod_user character varying, p_queue_type_id integer) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN
             INSERT INTO mrs_subject_assessments_queue_instruments_hist(
                 login_id,
                 segment_interval_id,
                 queue_type_id,
                 mod_user,
                 mod_date
             )
             VALUES(
                 p_login_id,
                 p_segment_interval_id,
                 p_queue_type_id,
                 p_mod_user,
                 now()
             );
             --delete any instruments from the queue that have not already been started
             DELETE FROM mrs_subject_assessments_queue_instruments
             WHERE login_id = p_login_id
                AND queue_type_id = p_queue_type_id
                AND assessment_id IS NULL
                AND segment_interval_id = p_segment_interval_id;

            RETURN 1;
         END;
         $$;


ALTER FUNCTION mrsdba.mrs_clear_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_mod_user character varying, p_queue_type_id integer) OWNER TO ni_developers;

--
-- Name: mrs_client_assessment_backup_add_f(integer, numeric, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_client_assessment_backup_add_f(p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    DECLARE
        v_backup_id int;
    BEGIN
        INSERT INTO mrs_client_assessment_backups (
            device_id,
            username,
            date,
            assessment_json,
            study_id
        )
        VALUES (
            p_device_id,
            p_db_transaction_username,
            now(),
            p_assessment_json,
            p_study_id
        ) RETURNING backup_id
        INTO v_backup_id;

        INSERT INTO mrs_client_assessment_backups_hist (
            backup_id,
            device_id,
            username,
            date,
            assessment_json,
            study_id,
            mod_user,
            mod_date
        )
        SELECT
            backup_id,
            device_id,
            username,
            date,
            assessment_json,
            study_id,
            p_db_transaction_username,
            now()
        FROM mrs_client_assessment_backups
        WHERE backup_id = v_backup_id;

        RETURN v_backup_id;
    END;
$$;


ALTER FUNCTION mrsdba.mrs_client_assessment_backup_add_f(p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) OWNER TO ni_developers;

--
-- Name: mrs_client_assessment_backup_update_f(integer, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_client_assessment_backup_update_f(p_backup_id integer, p_assessment_json text, p_db_transaction_username character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    DECLARE
        v_backup_id int;
    BEGIN
        UPDATE mrs_client_assessment_backups
        SET
            date = now(),
            assessment_json = p_assessment_json
        WHERE
            backup_id = p_backup_id
        RETURNING backup_id
        INTO v_backup_id;

        INSERT INTO mrs_client_assessment_backups_hist (
            backup_id,
            device_id,
            username,
            date,
            assessment_json,
            mod_user,
            mod_date
        )
        SELECT
            backup_id,
            device_id,
            username,
            date,
            assessment_json,
            p_db_transaction_username,
            now()
        FROM mrs_client_assessment_backups
        WHERE backup_id = v_backup_id;

        RETURN v_backup_id;
    END;
$$;


ALTER FUNCTION mrsdba.mrs_client_assessment_backup_update_f(p_backup_id integer, p_assessment_json text, p_db_transaction_username character varying) OWNER TO ni_developers;

--
-- Name: mrs_complete_assessment_f(numeric, numeric, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_complete_assessment_f(p_assessment_id numeric, p_elapsed_time numeric, p_dbtrans_username_pt character varying, p_study_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE
           v_assessment_id_1         mrsdba.mrs_assessments.assessment_id%TYPE;
           v_instrument_id           mrsdba.mrs_assessments.instrument_id%TYPE;
           v_segment_interval        mrsdba.mrs_assessments.segment_interval%TYPE;
           v_segment_instance        mrsdba.mrs_assessments.segment_instance%TYPE;
           v_ursi                    mrsdba.mrs_assessments.ursi%TYPE;
           v_site_id                 mrsdba.mrs_assessments.site_id%TYPE;
           v_dataentry_type_id       mrsdba.mrs_assessments.dataentry_type_id%TYPE;
           v_entry_code              mrsdba.mrs_assessments.entry_code%TYPE;
           v_rater1                  mrsdba.mrs_assessments.rater1%TYPE;
           v_source_type             mrsdba.mrs_assessments.source_type%TYPE;
           v_entry_end_date          mrsdba.mrs_assessments.entry_end_date%TYPE;
           v_asmt_id                 mrsdba.mrs_assessments.assessment_id%TYPE;
           v_successfully_completed  mrsdba.mrs_assessments.successfully_completed%TYPE;
           v_notes          mrsdba.mrs_assessments.notes%TYPE;
           v_invalid_entries_num     numeric(4);
           v_entry_1_complete        boolean;
           v_entry_2_complete        boolean;
           v_study_id                numeric(4,0);

           c_ae CURSOR (ae_id           mrsdba.mrs_assessments.instrument_id%TYPE,
                        ae_seg_interval mrsdba.mrs_assessments.segment_interval%TYPE,
                        ae_seg_instance mrsdba.mrs_assessments.segment_instance%TYPE,
                        ae_ursi         mrsdba.mrs_assessments.ursi%TYPE,
                        ae_site_id      mrsdba.mrs_assessments.site_id%TYPE,
                        ae_study_id     mrsdba.mrs_assessments.study_id%TYPE,
                        ae_dataentry_type_id     mrsdba.mrs_assessments.dataentry_type_id%TYPE,
                        ae_source_type  mrsdba.mrs_assessments.source_type%TYPE,
                        ae_rater1       mrsdba.mrs_assessments.rater1%TYPE)
           IS
            SELECT entry_code, entry_end_date
              FROM mrsdba.mrs_assessments
             WHERE instrument_id = ae_id
               AND segment_interval = ae_seg_interval
               AND segment_instance = ae_seg_instance
               AND ursi = ae_ursi
               AND site_id = ae_site_id
               AND study_id = p_study_id
               AND dataentry_type_id = ae_dataentry_type_id
               AND coalesce(source_type,0) = coalesce(ae_source_type,0)
               AND rater1 = ae_rater1
               AND entry_code NOT IN ('C','F');

         BEGIN

           BEGIN
             SELECT instrument_id,
                    segment_interval,
                    segment_instance,
                    ursi,
                    entry_code,
                    site_id,
                    rater1,
                    source_type,
                    entry_end_date,
                    dataentry_type_id,
               successfully_completed,
               notes,
              study_id
               INTO STRICT v_instrument_id,
                    v_segment_interval,
                    v_segment_instance,
                    v_ursi,
                    v_entry_code,
                    v_site_id,
                    v_rater1,
                    v_source_type,
                    v_entry_end_date,
                    v_dataentry_type_id,
               v_successfully_completed,
               v_notes,
              v_study_id
               FROM mrsdba.mrs_assessments
              WHERE assessment_id = p_assessment_id;
           EXCEPTION
             WHEN no_data_found THEN
               RAISE EXCEPTION 'Assessment % does not exist',p_assessment_id;
           END;

           IF v_entry_end_date IS NOT NULL THEN
             RAISE EXCEPTION 'Assessment % has already been completed.',p_assessment_id;
           ELSIF v_entry_code IN ('C','F') THEN
             RAISE EXCEPTION  'Cannot complete a completed or failed record';
           END IF;

           -- Determine if the first or second entry has been completed
           FOR r_ae IN c_ae(v_instrument_id, v_segment_interval, v_segment_instance, v_ursi, v_site_id, p_study_id, v_dataentry_type_id, v_source_type, v_rater1)
           LOOP
             IF r_ae.entry_code = '1' AND r_ae.entry_end_date IS NOT NULL THEN
               v_entry_1_complete := true;
             ELSIF r_ae.entry_code = '2' AND r_ae.entry_end_date IS NOT NULL THEN
               v_entry_2_complete := true;
             END IF;
           END LOOP;

           -- Complete assessment event entry
           UPDATE mrsdba.mrs_assessments
              SET entry_end_date = now(),
                  elapsed_time = p_elapsed_time
            WHERE assessment_id = p_assessment_id
              AND entry_end_date IS NULL;

           INSERT INTO mrsdba.mrs_assessments_hist (
             assessment_id,
             entry_end_date,
             elapsed_time,
             mod_user,
             mod_date
           )
           VALUES (
             p_assessment_id,
             now(),
             p_elapsed_time,
             p_dbtrans_username_pt,
             now()
           );

           -- Execute comparison if this is the second entry to complete.
           IF v_entry_1_complete OR v_entry_2_complete THEN
             -- Get the assessment_event_id for other entry.
             BEGIN
               SELECT assessment_id
                 INTO STRICT v_assessment_id_1
                 FROM mrsdba.mrs_assessments
                WHERE instrument_id = v_instrument_id
                  AND segment_interval = v_segment_interval
                  AND segment_instance = v_segment_instance
                  AND ursi = v_ursi
                  AND site_id = v_site_id
                  AND study_id = p_study_id
                  AND dataentry_type_id = v_dataentry_type_id
                  AND coalesce(source_type,0) = coalesce(v_source_type,0)
                  AND rater1 = v_rater1
                  AND entry_code NOT IN ('C','F',v_entry_code);
             EXCEPTION
               WHEN no_data_found THEN
                 RAISE EXCEPTION  'Assessment entry, other than C, F, or % does not exist for ursi %, segment interval %, and study %.', v_entry_code, v_ursi, v_segment_interval, v_study_id;
             END;

             v_invalid_entries_num := 0;

             -- Execute entry comparison
             -- Check event entry then event responses if event entry has no differences.
             BEGIN
               SELECT count(1)
               INTO STRICT v_invalid_entries_num
            FROM mrsdba.mrs_assessments ae1
           WHERE (ae1.entry_code::text <> ALL (ARRAY['C'::character varying, 'F'::character varying]::text[])) --make sure it is not a 'c' or 'f' entry
            AND NOT (EXISTS
               ( SELECT 1
               FROM mrsdba.mrs_assessments ae2
               WHERE ae1.instrument_id = ae2.instrument_id --same instrument
                  AND ae1.assessment_date = ae2.assessment_date --same assessment_date
                  AND ae1.ursi::text = ae2.ursi::text --same ursi
                  AND ae1.site_id::text = ae2.site_id::text --same site_id
                  AND ae1.dataentry_type_id = ae2.dataentry_type_id --same dataentry_type_id
                  AND ae1.segment_interval::text = ae2.segment_interval::text --same segment_interval
                  AND ae1.segment_instance = ae2.segment_instance --same segment_instance
                  AND (ae2.entry_code::text <> ALL (ARRAY['C'::character varying, 'F'::character varying, ae1.entry_code]::text[])) --DIFFERENT entry_code
                  AND ae1.rater1 = ae2.rater1 --same rater
                  AND COALESCE(ae1.rater2, 0::numeric) = COALESCE(ae2.rater2, 0::numeric) --same rater2
                  AND COALESCE(ae1.source_type, 0::numeric) = COALESCE(ae2.source_type, 0::numeric) --same source_type
                  AND ae1.successfully_completed::text = ae2.successfully_completed::text --same successfully completed
                  AND COALESCE(btrim(ae1.notes::text), ''::text) = COALESCE(btrim(ae2.notes::text), ''::text))) --same notes
            AND (ae1.assessment_id IN (v_assessment_id_1, p_assessment_id)); --is one of two assessments?

               /* old query that references view: takes too long
               SELECT count(*)
                 INTO STRICT v_invalid_entries_num
                 FROM mrs_assessment_mismatches_vw
                WHERE assessment_id IN (v_assessment_id_1,p_assessment_id);
                */
             EXCEPTION
               WHEN no_data_found THEN -- Depicts all entries are valid.
                 null;
             END;

             IF v_invalid_entries_num = 0 THEN
               BEGIN

               SELECT COUNT(1)
               INTO STRICT v_invalid_entries_num
               FROM (
               (SELECT
               ar1.question_id, 
               ar1.question_instance, 
               ar1.response_value, 
               iq1.specify_detail,
               CASE WHEN specify_detail = '1' THEN
                  ar1.response_value_description
                  ELSE NULL
               END AS specify_detail_response_value
               FROM mrs_assessment_responses ar1
        
               INNER JOIN mrs_instrument_questions iq1
               ON iq1.question_id = ar1.question_id
               WHERE ar1.assessment_id = v_assessment_id_1
               EXCEPT           
               SELECT
               ar2.question_id, 
               ar2.question_instance, 
               ar2.response_value, 
               iq2.specify_detail,
               CASE WHEN specify_detail = '1' THEN
                  ar2.response_value_description
                  ELSE NULL
               END AS specify_detail_response_value
               FROM mrs_assessment_responses ar2
        
               INNER JOIN mrs_instrument_questions iq2
               ON iq2.question_id = ar2.question_id
               WHERE ar2.assessment_id = p_assessment_id)
               UNION
               (SELECT
               ar3.question_id, 
               ar3.question_instance, 
               ar3.response_value, 
               iq3.specify_detail,
               CASE WHEN specify_detail = '1' THEN
                  ar3.response_value_description
                  ELSE NULL
               END AS specify_detail_response_value
               FROM mrs_assessment_responses ar3
        
               INNER JOIN mrs_instrument_questions iq3
               ON iq3.question_id = ar3.question_id
               WHERE ar3.assessment_id = p_assessment_id
               EXCEPT           
               SELECT
               ar4.question_id, 
               ar4.question_instance, 
               ar4.response_value, 
               iq4.specify_detail,
               CASE WHEN specify_detail = '1' THEN
                  ar4.response_value_description
                  ELSE NULL
               END AS specify_detail_response_value
               FROM mrs_assessment_responses ar4
        
               INNER JOIN mrs_instrument_questions iq4
               ON iq4.question_id = ar4.question_id
               WHERE ar4.assessment_id = v_assessment_id_1)) as subquery;

               EXCEPTION
                 WHEN no_data_found THEN -- Depicts all entries are valid.
                   null;
               END;
             END IF;

             -- Get the next assessment_event_id
             SELECT nextval('mrsdba.mrsassess_assessmentid_seq')
               INTO v_asmt_id;

             IF v_invalid_entries_num = 0 THEN
               -- Copy record entry_code='2' and set the entry_code='C' and the entry_start_date
               -- to entry_code='1' entry_start_date.
               INSERT INTO mrsdba.mrs_assessments (
                 assessment_id,
                 instrument_id,
                 assessment_date,
                 ursi,
                 entry_code,
                 entry_username,
                 entry_start_date,
                 entry_end_date,
                 elapsed_time,
                 rater1,
                 rater2,
                 source_type,
                 site_id,
                 dataentry_type_id,
                 segment_interval,
                 segment_instance,
                 successfully_completed,
                 notes,
                 study_id
               )
               SELECT v_asmt_id,
                      b.instrument_id,
                      b.assessment_date,
                      b.ursi,
                      'C',
                      p_dbtrans_username_pt,
                      a.entry_start_date,
                      b.entry_end_date,
                      0,
                      b.rater1,
                      b.rater2,
                      b.source_type,
                      b.site_id,
                      b.dataentry_type_id,
                      b.segment_interval,
                      b.segment_instance,
                      b.successfully_completed,
                      b.notes,
                      p_study_id
                FROM mrsdba.mrs_assessments a, mrsdba.mrs_assessments b
                WHERE a.assessment_id IN (v_assessment_id_1, p_assessment_id)
                    AND b.assessment_id IN (v_assessment_id_1, p_assessment_id)
                    AND a.entry_code = '1' AND b.entry_code = '2';

               INSERT INTO mrsdba.mrs_assessments_hist (
                 assessment_id,
                 instrument_id,
                 segment_interval,
                 segment_instance,
                 ursi,
                 site_id,
                 dataentry_type_id,
                 source_type,
                 rater1,
                 entry_code,
                 mod_user,
                 mod_date,
                 successfully_completed,
                 notes,
                 study_id
               )
               VALUES (
                 v_asmt_id,
                 v_instrument_id,
                 v_segment_interval,
                 v_segment_instance,
                 v_ursi,
                 v_site_id,
                 v_dataentry_type_id,
                 v_source_type,
                 v_rater1,
                 'C',
                 p_dbtrans_username_pt,
                 now(),
                 v_successfully_completed,
                 v_notes,
                 p_study_id
               );



               -- Keep entry 2 responses and remove entry 1 responses
               UPDATE mrsdba.mrs_assessment_responses
                  SET assessment_id = v_asmt_id
                WHERE assessment_id = (SELECT assessment_id
                                         FROM mrsdba.mrs_assessments
                                        WHERE instrument_id = v_instrument_id
                                          AND segment_interval = v_segment_interval
                                          AND segment_instance = v_segment_instance
                                          AND ursi = v_ursi
                                          AND site_id = v_site_id
                                          AND dataentry_type_id = v_dataentry_type_id
                                          AND coalesce(source_type,0) = coalesce(v_source_type,0)
                                          AND rater1 = v_rater1
                                          AND study_id = p_study_id
                                          AND entry_code = '2');

                --Record change in hist table. Adding this functionality on 10/10/2010-- Dylan
               INSERT INTO mrsdba.mrs_assessment_responses_hist
               SELECT a.*, p_dbtrans_username_pt, now()
               FROM mrsdba.mrs_assessment_responses a
               WHERE assessment_id = v_asmt_id;



               DELETE FROM mrsdba.mrs_assessment_responses
                WHERE assessment_id = (SELECT assessment_id
                                         FROM mrsdba.mrs_assessments
                                        WHERE instrument_id = v_instrument_id
                                          AND segment_interval = v_segment_interval
                                          AND segment_instance = v_segment_instance
                                          AND ursi = v_ursi
                                          AND site_id = v_site_id
                                          AND dataentry_type_id = v_dataentry_type_id
                                          AND coalesce(source_type,0) = coalesce(v_source_type,0)
                                          AND rater1 = v_rater1
                                          AND study_id = p_study_id
                                          AND entry_code = '1');
             ELSIF v_invalid_entries_num > 0 THEN
               -- Copy record entry_code='2' and set the entry_code='F' and the entry_start_date
               -- to entry_code='1' entry_start_date.
               INSERT INTO mrsdba.mrs_assessments (
                 assessment_id,
                 instrument_id,
                 assessment_date,
                 ursi,
                 entry_code,
                 entry_username,
                 entry_start_date,
                 entry_end_date,
                 elapsed_time,
                 rater1,
                 rater2,
                 source_type,
                 site_id,
                 dataentry_type_id,
                 segment_interval,
                 segment_instance,
                 successfully_completed,
                 notes,
                 study_id
               )
               SELECT v_asmt_id,
                      b.instrument_id,
                      b.assessment_date,
                      b.ursi,
                      'F',
                      p_dbtrans_username_pt,
                      a.entry_start_date,
                      b.entry_end_date,
                      0,
                      b.rater1,
                      b.rater2,
                      b.source_type,
                      b.site_id,
                      b.dataentry_type_id,
                      b.segment_interval,
                      b.segment_instance,
                      b.successfully_completed,
                      b.notes,
                      p_study_id
                 FROM mrsdba.mrs_assessments a, mrsdba.mrs_assessments b
                WHERE a.instrument_id = b.instrument_id
                  AND a.segment_interval = b.segment_interval
                  AND a.segment_instance = b.segment_instance
                  AND a.ursi = b.ursi
                  AND a.site_id = b.site_id
                  AND coalesce(a.source_type,0) = coalesce(b.source_type,0)
                  AND a.rater1 = b.rater1
                  AND a.entry_code = '1'
                  AND b.entry_code = '2'
                  AND b.rater1 = v_rater1
                  AND b.site_id = v_site_id
                  AND a.dataentry_type_id = v_dataentry_type_id
                  AND b.dataentry_type_id = v_dataentry_type_id
                  AND coalesce(b.source_type,0) = coalesce(v_source_type,0)
                  AND a.study_id = b.study_id
                  AND b.instrument_id = v_instrument_id
                  AND b.segment_interval = v_segment_interval
                  AND b.segment_instance = v_segment_instance
                  AND b.study_id = p_study_id
                  AND b.ursi = v_ursi;

               INSERT INTO mrsdba.mrs_assessments_hist (
                 assessment_id,
                 instrument_id,
                 segment_interval,
                 segment_instance,
                 ursi,
                 site_id,
                 dataentry_type_id,
                 source_type,
                 rater1,
                 entry_code,
                 mod_user,
                 mod_date,
                 successfully_completed,
                 notes,
                 study_id
               )
               VALUES (
                 v_asmt_id,
                 v_instrument_id,
                 v_segment_interval,
                 v_segment_instance,
                 v_ursi,
                 v_site_id,
                 v_dataentry_type_id,
                 v_source_type,
                 v_rater1,
                 'F',
                 p_dbtrans_username_pt,
                 now(),
                 v_successfully_completed,
                 v_notes,
                 p_study_id
               );
             END IF;  --v_status = 'SUCCESS'

           PERFORM mrsdba.mrs_update_asmt_ownership_f(v_asmt_id);
           END IF;  --v_entry_code = '2'

           RETURN '1';

         end;
         $$;


ALTER FUNCTION mrsdba.mrs_complete_assessment_f(p_assessment_id numeric, p_elapsed_time numeric, p_dbtrans_username_pt character varying, p_study_id numeric) OWNER TO ni_developers;

--
-- Name: mrs_complete_self_assessment_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_complete_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE
         v_aqueue_id numeric;
         v_entry_end_date timestamp without time zone;
         BEGIN

         select entry_end_date into v_entry_end_date
         from mrsdba.mrs_assessments
         where assessment_id = p_assessment_id;

         IF v_entry_end_date IS NULL THEN
         v_entry_end_date := now();
         END IF;

         insert into mrsdba.mrs_assessments_hist(
         assessment_id,
         entry_code,
         entry_end_date,
         entry_username,
         mod_user,
         mod_date)
         values(
         p_assessment_id,
         'C',
         v_entry_end_date,
         p_dbtrans_username_pt,
         p_dbtrans_username_pt,
         now());


         update mrsdba.mrs_assessments
         set entry_code = 'C',
         entry_end_date = v_entry_end_date,
         entry_username = p_dbtrans_username_pt
         where assessment_id = p_assessment_id;

         RETURN '1';

         end;
         $$;


ALTER FUNCTION mrsdba.mrs_complete_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_consolidate_raters_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_consolidate_raters_f(p_old_alias_id numeric, p_new_alias_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
retval            varchar(40);

BEGIN
   BEGIN
      retval := 'REMOVED';
--insert new rater id into hist table for assessments
      INSERT INTO MRS_ASSESSMENTS_HIST (assessment_id, rater1, mod_user, mod_date)
      SELECT assessment_id, p_new_alias_id, p_dbtrans_username_pt, now()
      FROM MRS_ASSESSMENTS 
      WHERE rater1 = p_old_alias_id;
-- ditto for those assessments with this rater_id as rater2
      INSERT INTO MRS_ASSESSMENTS_HIST (assessment_id, rater2, mod_user, mod_date)
      SELECT assessment_id, p_new_alias_id, p_dbtrans_username_pt, now()
      FROM MRS_ASSESSMENTS 
      WHERE rater2 = p_old_alias_id;
--update all assessment records linked to the old raterid
      UPDATE MRS_ASSESSMENTS 
      SET rater1 = p_new_alias_id
      WHERE rater1 = p_old_alias_id;
--ditto for those assessments with this rater_id as rater2
      UPDATE MRS_ASSESSMENTS
      SET rater2 = p_new_alias_id
      WHERE rater2 = p_old_alias_id;
-- Record old person_role_details in the hist table in case we need to reverse things
      
      INSERT INTO MRS_PERSON_ROLE_DETAILS_HIST (is_hidden, prd_id, alias_id, person_id, study_id, role_id, mod_user, mod_date)
      SELECT is_hidden, prd_id, alias_id, person_id, study_id, role_id, p_dbtrans_username_pt, now() FROM  MRS_PERSON_ROLE_DETAILS
      WHERE alias_id = p_old_alias_id
      AND role_id = (select role_id from mrs_roles where label = 'RATER');
--delete person role details for this rater_id
      DELETE FROM MRS_PERSON_ROLE_DETAILS
      WHERE alias_id = p_old_alias_id
      AND role_id = (select role_id from mrs_roles where label = 'RATER');
      
      EXCEPTION
       WHEN no_data_found THEN
       retval := 'NO PRD';
   END;
   RETURN retval;
END;


$$;


ALTER FUNCTION mrsdba.mrs_consolidate_raters_f(p_old_alias_id numeric, p_new_alias_id numeric, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_copy_protocol_f(numeric, numeric, integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_copy_protocol_f(p_from_protocol_id numeric, p_to_subject_type_id numeric, p_to_segment_interval_id integer, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_to_protocol_id numeric;
      v_protocol_type_id numeric;
      v_description character varying;
      v_start_minutes_from_segment_interval numeric;
      v_end_minutes_from_segment_interval numeric;
      v_source_type_id int;
      v_label character varying;
      v_queue_type_id integer;
      v_row record;
   BEGIN
      BEGIN
         SELECT
            protocol_type_id,
            'copied '||description AS description,
            start_minutes_from_segment_interval,
            end_minutes_from_segment_interval,
            source_type_id,
            label,
            queue_type_id
         INTO STRICT 
            v_protocol_type_id,
            v_description,
            v_start_minutes_from_segment_interval,
            v_end_minutes_from_segment_interval,
            v_source_type_id,
            v_label,
            v_queue_type_id
         FROM mrs_protocols
         WHERE protocol_id = p_from_protocol_id;

         EXCEPTION WHEN NO_DATA_FOUND
         THEN RAISE EXCEPTION 'Could not find protocol to copy with protocol ID = %', p_from_protocol_id;
      END;

      -- create a new protocol template
      SELECT mrs_add_protocol_f(
         p_to_subject_type_id, 
         v_protocol_type_id, 
         v_description, 
         v_start_minutes_from_segment_interval, 
         v_end_minutes_from_segment_interval,
         v_source_type_id,
         p_to_segment_interval_id, 
         v_label,
         v_queue_type_id,
         p_mod_user
      )
      INTO v_to_protocol_id;

      FOR v_row IN 
      SELECT 
         protocol_id, 
         table_name, 
         owner, 
         column_name, 
         column_type, 
         column_req_value_string, 
         column_req_value_number
      FROM mrs_protocol_requirements 
      WHERE protocol_id = p_from_protocol_id
      LOOP
         PERFORM mrs_add_protocol_requirement_f(
            v_to_protocol_id, 
            v_row.table_name, 
            v_row.owner, 
            v_row.column_name, 
            v_row.column_type, 
            v_row.column_req_value_string, 
            v_row.column_req_value_number
         );
      END LOOP;

      RETURN v_to_protocol_id;

   END;
$$;


ALTER FUNCTION mrsdba.mrs_copy_protocol_f(p_from_protocol_id numeric, p_to_subject_type_id numeric, p_to_segment_interval_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_copy_queue_template_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_copy_queue_template_f(p_from_template_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
         v_template_id  numeric;
         v_template_name character varying;
         v_row record;
      BEGIN
         SELECT template_name 
         INTO STRICT v_template_name 
         FROM mrs_study_templates
         WHERE template_id = p_from_template_id;

         v_template_id := mrs_add_queue_template_f(v_template_name, p_to_study_id, p_dbtrans_username);
         
         FOR v_row IN 
            SELECT * 
            FROM mrs_template_instruments 
            WHERE template_id = p_from_template_id 
         LOOP
            PERFORM mrs_add_queue_template_inst_f(v_template_id
               , v_row.instrument_id
               , v_row.sort_order
               , p_dbtrans_username);
         END LOOP;
         RETURN v_template_id;
      END;
      $$;


ALTER FUNCTION mrsdba.mrs_copy_queue_template_f(p_from_template_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: mrs_copy_study_templates_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_copy_study_templates_f(p_from_study_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
         v_template_id  numeric;
         v_count numeric;
      BEGIN
         v_count := 0;
         FOR v_template_id IN 
            SELECT template_id 
            FROM mrs_study_templates
            WHERE study_id = p_from_study_id
         LOOP
            v_count := v_count + 1;
            PERFORM mrs_copy_queue_template_f(v_template_id
               , p_to_study_id
               , p_dbtrans_username);
         END LOOP;
         RETURN v_count;
      END;
      $$;


ALTER FUNCTION mrsdba.mrs_copy_study_templates_f(p_from_study_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: mrs_credit_scan_slot_usage_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_credit_scan_slot_usage_f(p_scan_id numeric, p_amount_to_credit numeric, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$   
DECLARE
V_COUNT                mrsdba.MRS_SCAN_SLOTS.COUNT%TYPE;
V_SLOT_CREDIT          mrsdba.MRS_SCAN_SLOT_USES.AMOUNT_USED%TYPE;
V_TOTAL_AMOUNT_USED    mrsdba.MRS_SCAN_SLOT_USES.AMOUNT_USED%TYPE;
V_CREDITS_REMAINING    mrsdba.MRS_SCAN_SLOT_USES.AMOUNT_USED%TYPE;
c_usage CURSOR IS
SELECT SCAN_SLOT_USE_ID,SCAN_SLOT_ID,AMOUNT_USED
FROM MRSDBA.MRS_SCAN_SLOT_USES
WHERE SCAN_ID = P_SCAN_ID
ORDER BY AMOUNT_USED ASC;
BEGIN    

BEGIN
-- get the total amount billed for this
SELECT
SUM(AMOUNT_USED) INTO V_TOTAL_AMOUNT_USED
FROM MRSDBA.MRS_SCAN_SLOT_USES
WHERE SCAN_ID = P_SCAN_ID;

-- don't allow too much crediting
IF P_AMOUNT_TO_CREDIT > V_TOTAL_AMOUNT_USED THEN
RAISE EXCEPTION 'You can not credit more than the charged amount.';
RETURN '0';
END IF;

V_CREDITS_REMAINING := P_AMOUNT_TO_CREDIT;

-- loop through each usage, decrementing 
-- or removing slot uses as necessary
FOR USAGE IN c_usage
LOOP
-- if we're already done, don't change anything else 
IF V_CREDITS_REMAINING > 0 THEN
-- get count for this scan slot
SELECT COUNT INTO V_COUNT
FROM MRSDBA.MRS_SCAN_SLOTS
WHERE SCAN_SLOT_ID = USAGE.SCAN_SLOT_ID;

IF V_CREDITS_REMAINING < USAGE.AMOUNT_USED THEN
-- modify this slot; no need to delete

-- credit this slot with however many are left
V_SLOT_CREDIT := V_CREDITS_REMAINING;
V_CREDITS_REMAINING := 0;

IF USAGE.SCAN_SLOT_ID IS NOT NULL THEN
-- update history table
INSERT INTO MRSDBA.MRS_SCAN_SLOTS_HIST(
SCAN_SLOT_ID,
COUNT,
USER_MOD,
DATE_MOD,
NOTES 
)
VALUES(
USAGE.SCAN_SLOT_ID,
V_COUNT + V_SLOT_CREDIT,
P_USER_ENTERED,
now(),
'Credited ' || V_SLOT_CREDIT || ' slots for scan ' || P_SCAN_ID
);

-- update scan slots table
UPDATE MRSDBA.MRS_SCAN_SLOTS
SET COUNT = V_COUNT + V_SLOT_CREDIT
WHERE SCAN_SLOT_ID = USAGE.SCAN_SLOT_ID;
END IF;

-- update scan_slot_uses table
UPDATE MRSDBA.MRS_SCAN_SLOT_USES
SET AMOUNT_USED = USAGE.AMOUNT_USED - V_SLOT_CREDIT
WHERE SCAN_SLOT_USE_ID = USAGE.SCAN_SLOT_USE_ID;

ELSE -- this slot use is consumed by the credit, so delete it

IF USAGE.SCAN_SLOT_ID IS NOT NULL THEN
-- update history, comment on scan
INSERT INTO MRSDBA.MRS_SCAN_SLOTS_HIST(
SCAN_SLOT_ID,
COUNT,
USER_MOD,
DATE_MOD,
NOTES 
)
VALUES(
USAGE.SCAN_SLOT_ID,
V_COUNT + USAGE.AMOUNT_USED,
P_USER_ENTERED,
now(),
'Credited '|| USAGE.AMOUNT_USED || ' slots for scan ' || P_SCAN_ID
);

-- update scan slot
UPDATE MRSDBA.MRS_SCAN_SLOTS
SET COUNT = V_COUNT + USAGE.AMOUNT_USED
WHERE SCAN_SLOT_ID = USAGE.SCAN_SLOT_ID;
END IF;

-- remove scan slot use
DELETE FROM MRSDBA.MRS_SCAN_SLOT_USES
WHERE SCAN_SLOT_USE_ID = USAGE.SCAN_SLOT_USE_ID;

-- decrement number of credits left
V_CREDITS_REMAINING := V_CREDITS_REMAINING - USAGE.AMOUNT_USED;

END IF;

END IF;

END LOOP;

END;

RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_credit_scan_slot_usage_f(p_scan_id numeric, p_amount_to_credit numeric, p_user_entered character varying) OWNER TO postgres;

--
-- Name: mrs_deactivate_sharing_rule_f(numeric, character varying, timestamp without time zone, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_deactivate_sharing_rule_f(p_sharing_rule_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
	v_rule_exists numeric;
BEGIN

--verify that the study-rule relation does not already exist
	BEGIN
		SELECT sharing_rule_id
		INTO STRICT v_rule_exists
		FROM mrs_sharing_rules
		WHERE 
		p_sharing_rule_id = sharing_rule_id;

	EXCEPTION
		WHEN no_data_found THEN
			v_rule_exists := 0;	
	END;

	IF v_rule_exists > 0 THEN
		BEGIN
			UPDATE mrs_sharing_rules SET 
				deleted_by = p_deleted_by,
				deletion_date = p_deletion_date,
				note = p_note
			WHERE
				sharing_rule_id = p_sharing_rule_id;
				


			INSERT INTO mrs_sharing_rules_hist (
				sharing_rule_id,
				deleted_by,
				deletion_date,
				note,
				mod_user,
				mod_date
			)
			VALUES (
				p_sharing_rule_id,
				p_deleted_by,
				p_deletion_date,
				p_note,
				p_dbtrans_username_pt,
				now()
			);
		END;
	ELSE
		RETURN v_rule_exists;
	END IF;
RETURN 'SUCCESS';

END;
$$;


ALTER FUNCTION mrsdba.mrs_deactivate_sharing_rule_f(p_sharing_rule_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_deactivate_sharing_rule_study_f(numeric, numeric, character varying, timestamp without time zone, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_deactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
	v_rule_exists numeric;
BEGIN

--verify that the study-rule relation does not already exist
	BEGIN
		SELECT sharing_rule_id
		INTO STRICT v_rule_exists
		FROM mrs_sharing_rules_studies
		WHERE 
		p_rule_id = sharing_rule_id AND
		p_study_id = study_id;

	EXCEPTION
		WHEN no_data_found THEN
			v_rule_exists := 0;	
	END;

	IF v_rule_exists > 0 THEN
		BEGIN
			UPDATE mrs_sharing_rules_studies SET 
				deleted_by = p_deleted_by,
				deletion_date = p_deletion_date,
				note = p_note
			WHERE
				sharing_rule_id = p_rule_id
				AND study_id = p_study_id;
				


			INSERT INTO mrs_hist (
				sharing_rule_id,
				study_id,
				deleted_by,
				deletion_date,
				note,
				mod_user,
				mod_date
			)
			VALUES (
				p_rule_id,
				p_study_id,
				p_deleted_by,
				p_deletion_date,
				p_note,
				p_dbtrans_username_pt,
				now()
			);
		END;
	ELSE
		RETURN v_rule_exists;
	END IF;
RETURN 'SUCCESS';

END;
$$;


ALTER FUNCTION mrsdba.mrs_deactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_deassign_doc_category_f(numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_deassign_doc_category_f(p_file_id numeric, p_category_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

 DELETE FROM mrs_doc_category_details
  WHERE file_id  = p_file_id
    AND category_id = p_category_id;

 IF NOT FOUND  THEN
   RAISE EXCEPTION 'File id % has not been assigned to category id %', p_file_id, p_category_id;
 END IF;

 RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_deassign_doc_category_f(p_file_id numeric, p_category_id numeric) OWNER TO postgres;

--
-- Name: mrs_deassign_drug_cat_f(character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_deassign_drug_cat_f(p_drug_code character varying, p_category_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

 DELETE FROM mrs_generic_category_details
  WHERE drug_code  = p_drug_code
    AND category_id = p_category_id;

 IF NOT FOUND  THEN
   RAISE EXCEPTION 'Drug Code % has not been assigned to cateogry_id %',p_drug_code, p_category_id;
 END IF;

 RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_deassign_drug_cat_f(p_drug_code character varying, p_category_id numeric) OWNER TO postgres;

--
-- Name: mrs_deassign_gdrug_tradenm_f(character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_deassign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

 DELETE FROM mrs_generic_trade_details
  WHERE drug_code  = p_drug_code
    AND trade_id = p_trade_id;

 IF NOT FOUND  THEN
   RAISE EXCEPTION 'Drug Code % has not been assigned to trade_id %',p_drug_code,p_trade_id;
 END IF;

 RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_deassign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) OWNER TO postgres;

--
-- Name: mrs_deassign_proj_co_inv_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_deassign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN


  DELETE FROM mrs_proj_co_investigator
  WHERE person_id  = p_person_id
    AND project_id = p_project_id;


  INSERT INTO mrs_proj_co_inv_hist (
    person_id,
    project_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_person_id,
    p_project_id,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_deassign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_deassign_proj_datadom_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_deassign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

 DELETE FROM mrs_proj_data_dom_details
  WHERE data_domain_id  = p_data_domain_id
    AND project_id = p_project_id;



  INSERT INTO mrs_proj_data_dom_det_hist (
    data_domain_id,
    project_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_data_domain_id,
    p_project_id,
    p_dbtrans_username_pt,
    now()
  );


 RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_deassign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_deassign_role_f(numeric, character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_deassign_role_f(p_role_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying, p_study_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

 DELETE FROM mrsdba.mrs_person_role_details
  WHERE role_id  = p_role_id
    AND person_id = p_person_id
    AND study_id = study_id;

 IF NOT FOUND  THEN
   RAISE EXCEPTION 'Role % has not been assigned to person id %', p_role_id, p_person_id;
 END IF;

 INSERT INTO mrsdba.mrs_person_role_details_hist (
  role_id,
  person_id,
  mod_user,
  mod_date,
  study_id
 )
 VALUES (
  p_role_id,
  p_person_id,
  p_dbtrans_username_pt,
  now(),
  p_study_id
 );

 RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_deassign_role_f(p_role_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying, p_study_id numeric) OWNER TO postgres;

--
-- Name: mrs_deassign_scan_ext_prop_f(numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_deassign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

 DELETE
   FROM mrs_scan_sessions_ext_props
  WHERE scan_id  = p_scan_id
    AND prop_id = p_prop_id;

 RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_deassign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric) OWNER TO postgres;

--
-- Name: mrs_deassign_subject_tag_detail_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_deassign_subject_tag_detail_f(p_subject_tag_details_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

   BEGIN
      INSERT INTO mrs_subject_tag_details_hist(
         usid
         , subject_tag_id
         , subject_tag_details_id
         , value
         , study_id
         , site_id
         , mod_user
         , mod_date
      )
      SELECT 
         usid
         , subject_tag_id
         , subject_tag_details_id
         , value
         , study_id
         , site_id
         , p_dbtrans_username_pt
         , now()
      FROM 
         mrs_subject_tag_details
      WHERE 
         subject_tag_details_id = p_subject_tag_details_id;

      DELETE FROM mrs_subject_tag_details
      WHERE subject_tag_details_id     = p_subject_tag_details_id;

    RETURN '1';
   END;
$$;


ALTER FUNCTION mrsdba.mrs_deassign_subject_tag_detail_f(p_subject_tag_details_id numeric, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_deassign_subject_type_f(character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_deassign_subject_type_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

UPDATE mrsdba.mrs_subject_type_details
 SET disenrolled_date = now(), notes = p_notes
  WHERE ursi=p_ursi
  AND subject_type_id=p_subject_type_id;

 IF NOT FOUND  THEN
   RAISE EXCEPTION 'Subject % has not been assigned to subject type id %',p_ursi, p_subject_type_id;
 END IF;

 INSERT INTO mrs_subject_type_details_hist (
  subject_type_id,
  ursi,
  disenrolled_date,
  notes,
  mod_user,
  mod_date
 )
 VALUES (
  p_subject_type_id,
  p_ursi,
  now(),
  p_notes,
  p_dbtrans_username_pt,
  now()
 );

 RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_deassign_subject_type_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_decrement_scan_slot_f(numeric, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_decrement_scan_slot_f(p_scan_slot_id numeric, p_amount numeric, p_notes character varying, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 V_COUNT MRS_SCAN_SLOTS.COUNT%TYPE;
BEGIN

   -- prevent deleting more than exist
   BEGIN
      SELECT
         COUNT INTO V_COUNT
      FROM MRS_SCAN_SLOTS
      WHERE SCAN_SLOT_ID = P_SCAN_SLOT_ID;

      IF NOT FOUND  THEN
        RAISE EXCEPTION 'Scan Slot % does not exist.',P_SCAN_SLOT_ID;
      END IF;

      IF V_COUNT < P_AMOUNT
      THEN
         RAISE EXCEPTION 'Cannot decrement % slots when only % remain.',P_AMOUNT, V_COUNT;
      END IF;
   END;

   -- create entry in history table
   INSERT INTO MRS_SCAN_SLOTS_HIST(
      SCAN_SLOT_ID,
      USER_MOD,
      DATE_MOD,
      NOTES
   )
   VALUES(
      P_SCAN_SLOT_ID,
      P_USER_ENTERED,
      now(),
      'Decremented '||P_AMOUNT||' slots. '||P_NOTES
   );

   -- decrement previous history entries
   UPDATE MRS_SCAN_SLOTS_HIST
      SET COUNT = COUNT - P_AMOUNT
      WHERE SCAN_SLOT_ID = P_SCAN_SLOT_ID
      AND COUNT IS NOT NULL;

   -- decrement actual scan slot
   UPDATE MRS_SCAN_SLOTS
      SET COUNT = V_COUNT - P_AMOUNT
      WHERE SCAN_SLOT_ID = P_SCAN_SLOT_ID;

   RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_decrement_scan_slot_f(p_scan_slot_id numeric, p_amount numeric, p_notes character varying, p_user_entered character varying) OWNER TO postgres;

--
-- Name: mrs_delete_analysis_queue_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_analysis_queue_f(id_f numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin

	delete from mrs_analysis_queue where id=id_f;
	update mrs_analysis_queue_hist set analysis_finish=now() where id=id_f;

	return id_f;
end;$$;


ALTER FUNCTION mrsdba.mrs_delete_analysis_queue_f(id_f numeric) OWNER TO postgres;

--
-- Name: mrs_delete_app_option_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_app_option_f(p_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql STRICT SECURITY DEFINER
    AS $$BEGIN
    INSERT INTO mrs_app_options_hist (id, mod_date, mod_user)
    VALUES (p_id, now(), p_mod_user);

    DELETE FROM mrs_app_options
    WHERE id = p_id;

    RETURN 1;
END;$$;


ALTER FUNCTION mrsdba.mrs_delete_app_option_f(p_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_assessment_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_assessment_f(p_assessment_id numeric, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql STRICT SECURITY DEFINER
    AS $$
BEGIN
    INSERT INTO mrs_assessments_hist (
        assessment_id,
        is_deleted,
        mod_date,
        mod_user
    )
    VALUES (
        p_assessment_id,
        TRUE,
        NOW(),
        p_mod_user
    );

    UPDATE mrs_assessments
    SET is_deleted = TRUE
    WHERE assessment_id = p_assessment_id;

    RETURN 1;
END;
$$;


ALTER FUNCTION mrsdba.mrs_delete_assessment_f(p_assessment_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_assessment_f(numeric, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_assessment_f(p_assessment_id_c numeric, p_assessment_id_match numeric, p_assessment_id_match2 numeric, p_dbtransuser character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
v_cOrF character varying (1);

begin

select entry_code into v_cOrF 
FROM mrsdba.mrs_assessments 
WHERE assessment_id = p_assessment_id_c;

  -- log existing assessment records
INSERT INTO mrs_assessments_hist (
    assessment_id,
    instrument_id,
    assessment_date,
    ursi,
    entry_code,
    entry_username,
    entry_start_date,
    rater1,
    rater2,
    source_type,
    site_id,
    dataentry_type_id,
    segment_interval,
    segment_instance,
    mod_user,
    mod_date,
    successfully_completed,
    study_id
  )
  SELECT     assessment_id,
    instrument_id,
    assessment_date,
    ursi,
    entry_code,
    entry_username,
    entry_start_date,
    rater1,
    rater2,
    source_type,
    site_id,
    dataentry_type_id,
    segment_interval,
    segment_instance,
    p_dbtransuser,
    now(),
    successfully_completed,
    study_id
    FROM mrs_assessments
   WHERE assessment_id = p_assessment_id_c ;

 IF NOT FOUND  THEN
    RAISE EXCEPTION  'ASSESSMENT_ID % does not exist. ',p_assessment_id_c;
  END IF;

INSERT INTO mrs_assessments_hist (
    assessment_id,
    instrument_id,
    assessment_date,
    ursi,
    entry_code,
    entry_username,
    entry_start_date,
    rater1,
    rater2,
    source_type,
    site_id,
    dataentry_type_id,
    segment_interval,
    segment_instance,
    mod_user,
    mod_date,
    successfully_completed,
    study_id
  )
  SELECT     assessment_id,
    instrument_id,
    assessment_date,
    ursi,
    entry_code,
    entry_username,
    entry_start_date,
    rater1,
    rater2,
    source_type,
    site_id,
    dataentry_type_id,
    segment_interval,
    segment_instance,
    p_dbtransuser,
    now(),
    successfully_completed,
    study_id
    FROM mrs_assessments
   WHERE assessment_id = p_assessment_id_match ;

  IF NOT FOUND  THEN
    RAISE EXCEPTION  'ASSESSMENT_ID % does not exist.',p_assessment_id_match;
  END IF;

INSERT INTO mrs_assessments_hist (
    assessment_id,
    instrument_id,
    assessment_date,
    ursi,
    entry_code,
    entry_username,
    entry_start_date,
    rater1,
    rater2,
    source_type,
    site_id,
    dataentry_type_id,
    segment_interval,
    segment_instance,
    mod_user,
    mod_date,
    successfully_completed,
    study_id
  )
  SELECT     assessment_id,
    instrument_id,
    assessment_date,
    ursi,
    entry_code,
    entry_username,
    entry_start_date,
    rater1,
    rater2,
    source_type,
    site_id,
    dataentry_type_id,
    segment_interval,
    segment_instance,
    p_dbtransuser,
    now(),
    successfully_completed,
    study_id
    FROM mrs_assessments
   WHERE assessment_id = p_assessment_id_match2 ;

  IF NOT FOUND  THEN
    RAISE EXCEPTION  'ASSESSMENT_ID % does not exist.',p_assessment_id_match2;
  END IF;

  INSERT INTO mrs_assessment_responses_hist (
    assessment_id,
    question_id,
    question_instance,
    response_value,
    response_value_description,
    mod_user,
    mod_date
  ) select     assessment_id,
    question_id,
    question_instance,
    response_value,
    response_value_description,
    p_dbtransuser,
    now()
  FROM mrsdba.mrs_assessment_responses
  where assessment_id = p_assessment_id_c;
 
  --IF NOT FOUND  THEN
  --  RAISE_APPLICATION_ERROR(-20242, 'ASSESSMENT_ID '||p_assessment_id_c||' does not exist');
  --END IF;
 
  
  update mrsdba.mrs_assessments set entry_username = p_dbtransuser, entry_end_date = null where assessment_id = p_assessment_id_match;
  update mrsdba.mrs_assessments set entry_username = p_dbtransuser, entry_end_date = null where assessment_id = p_assessment_id_match2;

if v_cOrF = 'C' THEN
  update mrsdba.mrs_assessment_responses set assessment_id = p_assessment_id_match2 where assessment_id = p_assessment_id_c;
  Insert into mrsdba.mrs_assessment_responses (assessment_id, question_id, question_instance, response_value, response_value_description)
	(Select p_assessment_id_match, question_id, question_instance, response_value, response_value_description 
		from mrsdba.mrs_assessment_responses where assessment_id = p_assessment_id_match2);
END IF;

  delete from mrsdba.mrs_assessments where assessment_id = p_assessment_id_c;


  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_assessment_f(p_assessment_id_c numeric, p_assessment_id_match numeric, p_assessment_id_match2 numeric, p_dbtransuser character varying) OWNER TO postgres;

--
-- Name: mrs_delete_behavioral_upload_f(character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_behavioral_upload_f(file_name_f character varying, scan_id_f numeric, series_id_f character varying, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare query text;
begin


query:='insert into mrs_behavioral_uploads_hist (
	upload_id,
	file_name,
	file_size_k,
	dest_session_id,
	dest_series_id,
	mod_user,
	mod_date,
	action) 
	select upload_id, file_name, file_size_k, dest_session_id, dest_series_id, ''' || mod_user_f || ''', now(), ''delete''    
	from mrs_behavioral_uploads where file_name='''||file_name_f||''' and ';

IF series_id_f is null THEN query:=query||' dest_session_id = '||scan_id_f||'; delete from mrs_behavioral_uploads where file_name='''||file_name_f||''' and dest_session_id ='||scan_id_f||';';   
ELSE query:=query||' dest_series_id='''||series_id_f||'''; delete from mrs_behavioral_uploads where file_name='''||file_name_f||''' and dest_series_id='''||series_id_f||''';';
END IF;

execute query; 
 

return 1;
end;$$;


ALTER FUNCTION mrsdba.mrs_delete_behavioral_upload_f(file_name_f character varying, scan_id_f numeric, series_id_f character varying, mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_delete_charge_code_site_modality_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_charge_code_site_modality_f(p_site_modality_id numeric, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  BEGIN

  DELETE FROM mrs_charge_code_site_modalities
  WHERE site_modality_id = p_site_modality_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Site Modality ID does not exist %',p_site_modality_id;
  END IF;

  INSERT INTO mrs_charge_code_site_modalities_hist(
  site_modality_id,
  site_charge_id,
  modality_id,
  is_default,
  uses_credits,
  mod_user,
  mod_date
  )
  VALUES(
  p_site_modality_id,
  null,
  null,
  null,
  null,
  p_user_entered,
  now()
  );
  RETURN '1';

  END;
  $$;


ALTER FUNCTION mrsdba.mrs_delete_charge_code_site_modality_f(p_site_modality_id numeric, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_charge_code_study_modality_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_charge_code_study_modality_f(p_study_modality_id numeric, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  BEGIN

  DELETE FROM mrs_charge_code_study_modalities
  WHERE study_modality_id = p_study_modality_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Study Modality ID does not exist %',p_study_modality_id;
  END IF;

  INSERT INTO mrs_charge_code_study_modalities_hist(
  study_modality_id,
  study_charge_id,
  modality_id,
  is_default,
  uses_credits,
  mod_user,
  mod_date
  )
  VALUES(
  p_study_modality_id,
  null,
  null,
  null,
  null,
  p_user_entered,
  now()
  );
  RETURN '1';

  END;
  $$;


ALTER FUNCTION mrsdba.mrs_delete_charge_code_study_modality_f(p_study_modality_id numeric, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_conditional_jump_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_conditional_jump_f(p_question_jump_id integer, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO mrs_instrument_question_jumps_hist (
      question_jump_id, mod_user, mod_date
   ) VALUES (
      p_question_jump_id, p_mod_user, now()
   );

   DELETE FROM mrs_instrument_question_jumps
   WHERE question_jump_id = p_question_jump_id;

   RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_conditional_jump_f(p_question_jump_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_data_qc_constraint_f(integer, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_data_qc_constraint_f(p_constraint_id integer, p_mod_user text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$BEGIN
    DELETE FROM mrs_data_qc_constraints
    WHERE constraint_id = p_constraint_id;

    INSERT INTO mrs_data_qc_constraints_hist (
        constraint_id,
        mod_user,
        mod_date)
    VALUES (
        p_constraint_id,
        p_mod_user,
        now());

    RETURN '1';
END;$$;


ALTER FUNCTION mrsdba.mrs_delete_data_qc_constraint_f(p_constraint_id integer, p_mod_user text) OWNER TO ni_developers;

--
-- Name: mrs_delete_dataentry_type_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_dataentry_type_f(p_dataentry_type_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

 DELETE FROM mrs_dataentry_types
  WHERE dataentry_type_id = p_dataentry_type_id;

 IF NOT FOUND  THEN
   RAISE EXCEPTION 'Dataentry type id does not exist.',p_dataentry_type_id;
 END IF;

 INSERT INTO mrs_dataentry_types_hist (
  dataentry_type_id,
  label,
  description,
  mod_user,
  mod_date
 )
 VALUES (
  p_dataentry_type_id,
  null,
  null,
  p_dbtrans_username_pt,
  now()
 );

 RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_dataentry_type_f(p_dataentry_type_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_delete_document_category_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_document_category_f(p_category_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
v_parents   numeric(4,0);
v_documents numeric(4,0);
BEGIN

  -- Find out if there are any dependent categories
  SELECT COUNT(1) 
  INTO v_parents 
  FROM MRSDBA.MRS_DOCUMENT_CATEGORIES
  WHERE PARENT_ID = p_category_id;
  
  -- Find out if there are any dependent documents
  SELECT COUNT(1)
  INTO v_documents
  FROM MRSDBA.MRS_DOC_CATEGORY_DETAILS
  WHERE CATEGORY_ID = p_category_id;
  
  IF (v_parents > 0 AND v_documents > 0) THEN
    RETURN 'ISPARHASDOC';
  ELSIF v_parents > 0 THEN
    RETURN 'ISPAR';
  ELSIF v_documents > 0 THEN
    RETURN 'HASDOC';
  ELSE
    DELETE FROM MRSDBA.mrs_document_categories where category_id=p_category_id;
    RETURN 'DELETED';
  END IF ;
  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Category % does not exist.',p_category_id;
  END IF;
END;
$$;


ALTER FUNCTION mrsdba.mrs_delete_document_category_f(p_category_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_delete_document_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_document_f(p_document_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  DELETE FROM mrsdba.mrs_doc_category_details where file_id=p_document_id;
  
  DELETE FROM mrsdba.mrs_documents WHERE file_id = p_document_id;

  -- return new id
  RETURN 1;

end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_document_f(p_document_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_delete_inst_question_f(character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_inst_question_f(p_question_id character varying, p_confirmed numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_result   int;

   c_code CURSOR IS
   SELECT question_id, value::varchar, sort_order
   FROM mrs_instrument_code_responses
   WHERE question_id = p_question_id
   OR target_qid = p_question_id;

   c_jump CURSOR IS
   SELECT question_jump_id
   FROM mrs_instrument_question_jumps 
   WHERE question_id = p_question_id
   OR target_qid = p_question_id;

   c_media CURSOR IS
   SELECT question_media_id
   FROM mrs_instrument_question_media
   WHERE question_id = p_question_id;

BEGIN

   /* verify that the question_id exists */
   SELECT COUNT(*)
   FROM mrs_instrument_questions
   WHERE question_id = p_question_id
   INTO v_result;

   IF v_result = 0 THEN
      RAISE EXCEPTION 'Error: it doesnt appear that % is a valid question_id.', p_question_id;
   END IF;

   /* verify that no assessment responses reference this question_id */
   SELECT COUNT(*)
   FROM mrs_assessment_responses
   WHERE question_id = p_question_id
   INTO v_result;

   IF v_result = 0 THEN

      /* Delete all references to the question */

      -- mrs_instrument_question_loops
      PERFORM mrs_delete_question_loops_f(p_question_id, p_mod_user);


      -- mrs_instrument_question_jumps
      FOR JUMP IN c_jump
      LOOP
         PERFORM mrs_delete_conditional_jump_f(JUMP.question_jump_id, p_mod_user);
      END LOOP;


      -- mrs_instrument_question_media
      FOR MEDIA IN c_media
      LOOP
         PERFORM mrs_delete_instrument_question_media_f(MEDIA.question_media_id, p_mod_user);
      END LOOP;


      -- mrs_instrument_code_responses
      FOR CODE IN c_code
      LOOP
         PERFORM mrs_delete_inst_response_f(CODE.question_id, CODE.value, CODE.sort_order, p_mod_user);
      END LOOP;


      -- mrs_instrument_questions
      INSERT INTO mrs_instrument_questions_hist (
         question_id, mod_user, mod_date
      )
      SELECT question_id, p_mod_user, now()
      FROM mrs_instrument_questions
      WHERE question_id = p_question_id;

      DELETE FROM mrs_instrument_questions
      WHERE question_id = p_question_id;

   ELSIF p_confirmed = 1 THEN

      /* fill in deletion_date in mrs_instruments_questions table */

      INSERT INTO mrs_instrument_questions_hist (
         question_id, deletion_date, mod_user, mod_date
      )
      SELECT question_id, now(), p_mod_user, now()
      FROM mrs_instrument_questions
      WHERE question_id = p_question_id;

      UPDATE mrsdba.mrs_instrument_questions
      SET deletion_date = now()
      WHERE question_id = p_question_id;

   ELSE

      RAISE EXCEPTION 'Error: Cannot delete question.  There are % assessment responses that reference question_id: %', v_result, p_question_id;

   END IF;

   RETURN  'question_id ' || p_question_id || ' successfully deleted!';

END;
$$;


ALTER FUNCTION mrsdba.mrs_delete_inst_question_f(p_question_id character varying, p_confirmed numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_inst_question_score_f(character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_inst_question_score_f(question_id_f character varying, study_id_f numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin

	delete from mrsdba.mrs_instrument_question_score where question_id=question_id_f and study_id=study_id_f;

	return '1';
end;$$;


ALTER FUNCTION mrsdba.mrs_delete_inst_question_score_f(question_id_f character varying, study_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_delete_inst_response_f(character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_inst_response_f(p_question_id character varying, p_value character varying, p_sort_order numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
     v_response_exist     int;
   BEGIN

      /* do not permit the delete of response codes that are in use */
      SELECT COUNT(1)
      INTO v_response_exist
      FROM mrs_assessment_responses
      WHERE question_id = p_question_id
      AND response_value = p_value;


      IF v_response_exist = 0 THEN

         INSERT INTO mrs_instrument_code_responses_hist (
            question_id, sort_order, mod_user, mod_date
         )
         SELECT question_id, sort_order, p_mod_user, now()
         FROM mrs_instrument_code_responses
         WHERE question_id = p_question_id
         AND sort_order = p_sort_order;

         DELETE FROM mrs_instrument_code_responses
         WHERE question_id = p_question_id
         AND sort_order = p_sort_order;

      ELSE

         RETURN 'InUse';

      END IF;

      RETURN 1;

   END;
   $$;


ALTER FUNCTION mrsdba.mrs_delete_inst_response_f(p_question_id character varying, p_value character varying, p_sort_order numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_inst_responses_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_inst_responses_f(p_question_id character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_response_exist     int;
    v_response_record    record;
BEGIN

    /* do not permit the delete of responses if an assessment has been started */
    SELECT COUNT(1)
    INTO v_response_exist
    FROM mrs_assessment_responses
    WHERE question_id = p_question_id
        AND response_value IS NOT NULL;

    IF v_response_exist = 0 THEN

        FOR v_response_record IN
            SELECT question_id, label, value, sort_order
            FROM mrs_instrument_code_responses
            WHERE question_id = p_question_id
        LOOP
            PERFORM mrs_delete_inst_response_f(v_response_record.question_id, v_response_record.value::character varying, v_response_record.sort_order, p_mod_user);
        END LOOP;

    ELSE

        RETURN 'InUse';

    END IF;

    RETURN 1;

END;
$$;


ALTER FUNCTION mrsdba.mrs_delete_inst_responses_f(p_question_id character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_inst_section_f(numeric, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_inst_section_f(p_section_id numeric, p_confirmed numeric, p_delete_questions numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_result           int;

   c_questions CURSOR IS
   SELECT question_id
   FROM mrs_instrument_questions
   WHERE section_id = p_section_id;

BEGIN

   /* verify that the section_id exists */
   SELECT COUNT(*)
   FROM mrs_instrument_sections
   WHERE section_id = p_section_id
   INTO v_result;

   IF v_result = 0 THEN
      RAISE EXCEPTION 'Error: It doesnt appear that % is a valid section_id.', p_section_id;
   END IF;


   IF p_delete_questions = 1 THEN

      /* delete all questions out of the section */
      FOR QUESTION IN c_questions
      LOOP
         PERFORM mrsdba.mrs_delete_inst_question_f(QUESTION.question_id, 0, p_mod_user);
      END LOOP;

   END IF;


   SELECT COUNT(*)
   FROM mrs_instrument_questions
   WHERE section_id = p_section_id
   INTO v_result;

   IF v_result = 0 THEN

      /* Delete all references to the section */

      -- mrs_instrument_section_details
      INSERT INTO mrs_instrument_section_details_hist (
         instrument_id, section_id, mod_user, mod_date
      )
      SELECT instrument_id, section_id, p_mod_user, now()
      FROM mrs_instrument_section_details
      WHERE section_id = p_section_id;

      DELETE FROM mrs_instrument_section_details
      WHERE section_id = p_section_id;

      -- mrs_instrument_sections
      INSERT INTO mrs_instrument_sections_hist (
         section_id, mod_user, mod_date
      )
      SELECT section_id, p_mod_user, now()
      FROM mrs_instrument_sections
      WHERE section_id = p_section_id;

      DELETE FROM mrs_instrument_sections
      WHERE section_id = p_section_id;

   ELSIF p_confirmed = 1 THEN

      /* fill in deletion_date in mrs_instrument_section_details table */

      -- mrs_instrument_section_details
      INSERT INTO mrs_instrument_section_details_hist (
         instrument_id, section_id, deletion_date, mod_user, mod_date
      )
      SELECT instrument_id, section_id, now(), p_mod_user, now()
      FROM mrs_instrument_section_details
      WHERE section_id = p_section_id;

      UPDATE mrs_instrument_section_details
      SET deletion_date = now() 
      WHERE section_id = p_section_id;

   ELSE

      RAISE EXCEPTION 'Error: Cannot delete section.  There are % assessment responses that reference section_id: %', v_result, p_section_id;

   END IF;


   RETURN 'section_id ' || p_section_id || ' successfully deleted!';

END;
$$;


ALTER FUNCTION mrsdba.mrs_delete_inst_section_f(p_section_id numeric, p_confirmed numeric, p_delete_questions numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_instrument_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_instrument_f(p_instrument_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_result         int;
      v_section_id     numeric;
      v_instrument_study_id int;

   BEGIN
   
   -- verify that the instrument_id exists
   SELECT COUNT(*)
   FROM mrs_instruments
   WHERE instrument_id = p_instrument_id
   INTO v_result;

   IF v_result = 0 THEN
      RAISE EXCEPTION 'Error: It doesnt appear that % is a valid instrument_id.', p_instrument_id;
   END IF;
   
   /* Before deleting an instrument we must first GUARANTEE that it does not have any assessment/question data associated with it */
   /* Assessments are checked here.  Question data will be checked before deleteing the individual questions */

   -- verify no assessments reference this instrument_id
   SELECT COUNT(*) 
   FROM mrs_assessments 
   WHERE instrument_id = p_instrument_id
   INTO v_result;

   IF v_result <> 0 THEN
      RAISE EXCEPTION 'Error: Cannot delete instrument.  There are % assessment(s) that reference instrument_id: %', v_result, p_instrument_id;
   END IF;


   -- verify no assessment queues reference this instrument_id
   SELECT COUNT(*) 
   FROM mrs_subject_assessments_queue_instruments
   WHERE instrument_id = p_instrument_id
   INTO v_result;

   IF v_result <> 0 THEN
      RAISE EXCEPTION 'Error: Cannot delete instrument.  There are % assessment queue(s) that reference instrument_id: %', v_result, p_instrument_id;
   END IF;

   
   -- FIRST, delete all sections out of the instrument
   FOR v_section_id IN (
      SELECT section_id 
      FROM mrs_instrument_section_details
      WHERE instrument_id = p_instrument_id)
   LOOP
      PERFORM mrsdba.mrs_delete_instrument_sections_f(v_section_id, p_mod_user);
   END LOOP;


   -- SECOND, delete the instrument
   -- mrs_instruments_studies

   FOR v_instrument_study_id IN (
       SELECT instrument_study_id 
       FROM mrs_instruments_studies
       WHERE instrument_id = p_instrument_id
   )
   LOOP
       PERFORM mrs_delete_instrument_study_f(v_instrument_study_id, p_mod_user);
   END LOOP;

   -- mrs_template_instruments
   INSERT INTO mrs_template_instruments_hist (
      instrument_id, template_id, sort_order, mod_user, mod_date
   )
   SELECT instrument_id, template_id, sort_order, p_mod_user, now()
   FROM mrs_template_instruments
   WHERE instrument_id = p_instrument_id;

   DELETE FROM mrs_template_instruments
   WHERE instrument_id = p_instrument_id;


   -- mrs_instruments
   INSERT INTO mrs_instruments_hist (
      instrument_id, mod_user, mod_date
   )
   SELECT instrument_id, p_mod_user, now()
   FROM mrs_instruments
   WHERE instrument_id = p_instrument_id;

   DELETE FROM mrs_instruments
   WHERE instrument_id = p_instrument_id;


  
   RETURN 'instrument_id ' || p_instrument_id || ' successfully deleted!';

   END;
   $$;


ALTER FUNCTION mrsdba.mrs_delete_instrument_f(p_instrument_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_instrument_question_media_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_instrument_question_media_f(p_question_media_id integer, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN
            INSERT INTO mrs_instrument_question_media_hist
            (question_media_id,
             question_id,
             media_type_id,
             sort_order,
             url,
             attributes,
             caption,
             position,
             mod_user,
             mod_date)
            SELECT
            question_media_id,
             question_id,
             media_type_id,
             sort_order,
             url,
             attributes,
             caption,
             position,
             p_dbtrans_username,
             now()
            FROM mrs_instrument_question_media
            WHERE question_media_id = p_question_media_id;
            
            DELETE FROM mrs_instrument_question_media
            WHERE question_media_id = p_question_media_id;

            RETURN p_question_media_id;
         END;
      $$;


ALTER FUNCTION mrsdba.mrs_delete_instrument_question_media_f(p_question_media_id integer, p_dbtrans_username character varying) OWNER TO postgres;

--
-- Name: mrs_delete_instrument_questions_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_instrument_questions_f(p_question_id character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
         v_result   int;

      BEGIN

      /* Before deleting a question_id we must first GUARANTEE that it does not have any data associated with it */

      -- verify that no assessment responses reference this question_id
      SELECT COUNT(*)
      FROM mrs_assessment_responses
      WHERE question_id = p_question_id
      INTO v_result;

      IF v_result <> 0 THEN
         RAISE EXCEPTION 'Error: Cannot delete question.  There are % assessment responses that reference question_id: %', v_result, p_question_id;
      END IF;

      -- verify that the question_id exists
      SELECT COUNT(*)
      FROM mrs_instrument_questions
      WHERE question_id = p_question_id
      INTO v_result;

      IF v_result = 0 THEN
         RAISE EXCEPTION 'Error: it doesnt appear that % is a valid question_id.', p_question_id;
      END IF;


      /* Delete all references to the question */
      -- mrs_instrument_question_loops
      INSERT INTO mrs_instrument_question_loops_hist (
         loop_id, question_id, target_qid, operand1, operand2, test_operator, mod_user, mod_date
      )
      SELECT loop_id, question_id, target_qid, 'deleted', 'deleted', 'del', p_mod_user, now()
      FROM mrs_instrument_question_loops 
      WHERE question_id = p_question_id;

      DELETE FROM mrs_instrument_question_loops
      WHERE question_id = p_question_id;


      -- mrs_instrument_question_jumps :: question_id
      INSERT INTO mrs_instrument_question_jumps_hist (
         question_jump_id, question_id, target_qid, formula, sort_order, mod_user, mod_date
      )
      SELECT question_jump_id, question_id, target_qid, 'deleted', sort_order, p_mod_user, now()
      FROM mrs_instrument_question_jumps 
      WHERE question_id = p_question_id;

      DELETE FROM mrs_instrument_question_jumps
      WHERE question_id = p_question_id;


      -- mrs_instrument_question_jumps :: target_qid
      INSERT INTO mrs_instrument_question_jumps_hist (
         question_jump_id, question_id, target_qid, formula, sort_order, mod_user, mod_date
      )
      SELECT question_jump_id, question_id, target_qid, 'deleted', sort_order, p_mod_user, now()
      FROM mrs_instrument_question_jumps 
      WHERE target_qid = p_question_id;

      DELETE FROM mrs_instrument_question_jumps
      WHERE target_qid = p_question_id;


      -- mrs_instrument_code_responses::question_id
      INSERT INTO mrs_instrument_code_responses_hist (
         question_id, mod_user, mod_date
      )
      SELECT question_id, p_mod_user, now()
      FROM mrs_instrument_code_responses
      WHERE question_id = p_question_id;

      DELETE FROM mrs_instrument_code_responses
      WHERE question_id = p_question_id;


      -- mrs_instrument_code_responses::target_qid
      INSERT INTO mrs_instrument_code_responses_hist (
         question_id, target_qid, mod_user, mod_date
      )
      SELECT question_id, target_qid, p_mod_user, now()
      FROM mrs_instrument_code_responses
      WHERE target_qid = p_question_id;

      DELETE FROM mrs_instrument_code_responses
      WHERE target_qid = p_question_id;


      -- mrs_instrument_question_media
      INSERT INTO mrs_instrument_question_media_hist (
         question_media_id, question_id, mod_user, mod_date
      )
      SELECT question_media_id, question_id, p_mod_user, now()
      FROM mrs_instrument_question_media 
      WHERE question_id = p_question_id;

      DELETE FROM mrs_instrument_question_media
      WHERE question_id = p_question_id;


      -- mrs_instrument_questions
      INSERT INTO mrs_instrument_questions_hist (
         question_id, mod_user, mod_date
      )
      SELECT question_id, p_mod_user, now()
      FROM mrs_instrument_questions
      WHERE question_id = p_question_id;

      DELETE FROM mrs_instrument_questions
      WHERE question_id = p_question_id;


      RETURN  'question_id ' || p_question_id || ' successfully deleted!';

      END;
      $$;


ALTER FUNCTION mrsdba.mrs_delete_instrument_questions_f(p_question_id character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_instrument_sections_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_instrument_sections_f(p_section_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_result         int;
      v_question_id    varchar;

   BEGIN

   -- verify that the section_id exists
   SELECT COUNT(*)
   FROM mrs_instrument_sections
   WHERE section_id = p_section_id
   INTO v_result;

   IF v_result = 0 THEN
      RAISE EXCEPTION 'Error: It doesnt appear that % is a valid section_id.', p_section_id;
   END IF;


   -- FIRST, delete all questions out of the section
   FOR v_question_id IN (
      SELECT question_id 
      FROM mrs_instrument_questions
      WHERE section_id = p_section_id)
   LOOP
      PERFORM mrsdba.mrs_delete_instrument_questions_f(v_question_id, p_mod_user);
   END LOOP;


   -- SECOND, delete all references to the section
   -- mrs_instrument_section_details
   INSERT INTO mrs_instrument_section_details_hist (
      instrument_id, section_id, mod_user, mod_date
   )
   SELECT instrument_id, section_id, p_mod_user, now()
   FROM mrs_instrument_section_details
   WHERE section_id = p_section_id;

   DELETE FROM mrs_instrument_section_details
   WHERE section_id = p_section_id;


   -- mrs_instrument_sections
   INSERT INTO mrs_instrument_sections_hist (
      section_id, mod_user, mod_date
   )
   SELECT section_id, p_mod_user, now()
   FROM mrs_instrument_sections
   WHERE section_id = p_section_id;

   DELETE FROM mrs_instrument_sections
   WHERE section_id = p_section_id;

  
   RETURN 'section_id ' || p_section_id || ' successfully deleted!';

   END;
   $$;


ALTER FUNCTION mrsdba.mrs_delete_instrument_sections_f(p_section_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_instrument_study_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_instrument_study_f(p_instrument_study_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
        v_affected_rows int;
   BEGIN

      INSERT INTO mrs_instruments_studies_hist (
         instrument_study_id,
         instrument_id,
         study_id,
         mod_user,
         mod_date
      )
      SELECT
         instrument_study_id,
         instrument_id,
         study_id,
         p_mod_user, 
         now()
      FROM mrs_instruments_studies
      WHERE instrument_study_id = p_instrument_study_id;

      DELETE FROM mrs_instruments_studies
      WHERE instrument_study_id = p_instrument_study_id;

      GET DIAGNOSTICS v_affected_rows = ROW_COUNT;

      IF (v_affected_rows != 1) THEN
          RAISE EXCEPTION 'Nonexistent instrument_study_id => %', p_instrument_study_id;
      END IF;

      RETURN v_affected_rows;

   END;
$$;


ALTER FUNCTION mrsdba.mrs_delete_instrument_study_f(p_instrument_study_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_instrument_table_col_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_instrument_table_col_f(p_col_id numeric, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_row mrs_instrument_questions%rowtype;

BEGIN
    -- delete questions (those question may already been deleted from mrs_delete_instrument_table_row_f)
    FOR v_row IN SELECT question_id FROM mrs_instrument_questions WHERE table_col_id = p_col_id
    LOOP
        PERFORM mrs_delete_inst_question_f(v_row.question_id, 1, p_mod_user);
    END LOOP;

    INSERT INTO mrs_instrument_table_cols_hist (col_id, mod_user, mod_date) 
    VALUES (p_col_id, p_mod_user, now()) ;
       
    DELETE FROM mrs_instrument_table_cols WHERE col_id = p_col_id;

    RETURN p_col_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_delete_instrument_table_col_f(p_col_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_instrument_table_f(numeric, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_instrument_table_f(p_table_id numeric, p_confirmed boolean, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

DECLARE 
    v_row1 mrs_instrument_table_rows%rowtype;
    v_row2 mrs_instrument_table_cols%rowtype;
    v_rec record;
BEGIN
    IF p_confirmed = false THEN
        -- check whether there is asmt response associated with any of the questions in the table
        SELECT * INTO v_rec 
        FROM mrs_instrument_tables t 
            JOIN mrs_instrument_table_rows r USING(table_id)
            JOIN mrs_instrument_questions q ON q.table_row_id=r.row_id
            JOIN mrs_assessment_responses a USING(question_id)
        WHERE t.table_id = p_table_id;
        IF FOUND THEN
            RAISE EXCEPTION 'Assessment Data Found';
        END IF;

    END IF;

    -- delete rows and cols from mrs_instrument_table_rows/cols

    FOR v_row1 IN SELECT row_id FROM mrs_instrument_table_rows WHERE table_id = p_table_id
    LOOP 
        PERFORM mrs_delete_instrument_table_row_f(v_row1.row_id, p_mod_user);
    END LOOP;

    FOR v_row2 IN SELECT col_id FROM mrs_instrument_table_cols WHERE table_id = p_table_id
    LOOP 
        PERFORM mrs_delete_instrument_table_col_f(v_row2.col_id, p_mod_user);
    END LOOP;

    INSERT INTO mrs_instrument_tables_hist (
        table_id, 
        section_id, 
        num_rows, 
        num_cols, 
        label, 
        description, 
        sort_order,
        mod_user,
        mod_date)
    SELECT 
        table_id, 
        section_id, 
        num_rows, 
        num_cols, 
        label, 
        description, 
        sort_order,
        p_mod_user,
        now()
    FROM mrs_instrument_tables 
    WHERE table_id = p_table_id;
  
    DELETE FROM mrs_instrument_tables WHERE table_id = p_table_id;
 
    RETURN p_table_id;

END;
$$;


ALTER FUNCTION mrsdba.mrs_delete_instrument_table_f(p_table_id numeric, p_confirmed boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_instrument_table_row_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_instrument_table_row_f(p_row_id numeric, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE 
    v_row mrs_instrument_questions%rowtype;

BEGIN
    -- delete questions
    FOR v_row IN SELECT question_id FROM mrs_instrument_questions WHERE table_row_id = p_row_id
    LOOP 
        PERFORM mrs_delete_inst_question_f(v_row.question_id, 1, p_mod_user);
    END LOOP;

    INSERT INTO mrs_instrument_table_rows_hist (row_id, mod_user, mod_date) 
    VALUES (p_row_id, p_mod_user, now()) ;
       
    DELETE FROM mrs_instrument_table_rows WHERE row_id = p_row_id;

    RETURN p_row_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_delete_instrument_table_row_f(p_row_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_legacy_sharing_rules_asmts_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_legacy_sharing_rules_asmts_f(p_min_rule numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

DELETE FROM MRS_LEGACY_SHARING_RULES_ASMTS_MV
WHERE legacy_sharing_rules_asmts_rule_id >= p_min_rule;

Return '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_legacy_sharing_rules_asmts_f(p_min_rule numeric) OWNER TO postgres;

--
-- Name: mrs_delete_mail_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_mail_f(p_mail_id integer, p_user_entered character varying) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        BEGIN
            DELETE FROM mrs_mail
            WHERE mail_id = p_mail_id;

            IF NOT FOUND  THEN
                RAISE EXCEPTION 'mail_id % does not exist.',p_mail_id;
            END IF;

            INSERT INTO mrs_mail_hist (
                mail_id
                ,mod_user
                ,mod_date
            )
            VALUES (
                p_mail_id
                ,p_user_entered
                ,now()
            );

            RETURN TRUE;
        END;
    $$;


ALTER FUNCTION mrsdba.mrs_delete_mail_f(p_mail_id integer, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_match_tmp_f(character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_match_tmp_f(p_session_id character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

       BEGIN

       DELETE FROM mrsdba.mrs_subject_match_tmp
       WHERE session_id = p_session_id;


       RETURN '1';
       end;
       $$;


ALTER FUNCTION mrsdba.mrs_delete_match_tmp_f(p_session_id character varying) OWNER TO postgres;

--
-- Name: mrs_delete_matched_per_f(character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_matched_per_f(p_sid character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$


BEGIN

   DELETE FROM MRSDBA.MRS_PERSON_MATCH_TMP
      WHERE SESSION_ID = p_sid;

RETURN 'DELETED';

end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_matched_per_f(p_sid character varying) OWNER TO postgres;

--
-- Name: mrs_delete_message_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_message_f(message_id_f numeric, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
insert into mrs_messages_hist(message_id, message_subject, message_body, message_from, message_to, mod_user, mod_date)
select message_id, message_subject, message_body, message_from, message_to, mod_user_f, now() from mrs_messages where message_id=message_id_f;

delete from mrs_messages where message_id=message_id_f;
return 1;
end;$$;


ALTER FUNCTION mrsdba.mrs_delete_message_f(message_id_f numeric, mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_delete_person_role_detail_f(numeric, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_person_role_detail_f(p_alias_id numeric, p_study_id numeric, p_role_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
retval            varchar(40);

BEGIN
   BEGIN
      retval := 'REMOVED';
      
      INSERT INTO MRS_PERSON_ROLE_DETAILS_HIST (is_hidden, prd_id, alias_id, person_id, study_id, role_id, mod_user, mod_date)
      SELECT is_hidden, prd_id, alias_id, person_id, study_id, role_id, p_dbtrans_username_pt, now() FROM  MRS_PERSON_ROLE_DETAILS
      WHERE alias_id = p_alias_id
      AND study_id = p_study_id
      AND role_id = p_role_id;

      DELETE FROM MRS_PERSON_ROLE_DETAILS
      WHERE alias_id = p_alias_id
      AND study_id = p_study_id
      AND role_id = p_role_id;
      
      EXCEPTION
       WHEN no_data_found THEN
       retval := 'NO PRD';
   END;
   RETURN retval;
END;


$$;


ALTER FUNCTION mrsdba.mrs_delete_person_role_detail_f(p_alias_id numeric, p_study_id numeric, p_role_id numeric, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_personaddress_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
retval            varchar(40);
v_row_count       integer;

BEGIN

   SELECT COUNT(1) INTO v_row_count FROM MRS_PERSON_ROLE_DET_ADDRESSES
      WHERE address_id = p_address_id;

   IF v_row_count = 1  THEN
      INSERT INTO mrs_personaddresses_hist (
            address_id,
            address_line_1,
            address_line_2,
            msc,
            city,
            state,
            zip,
            country,
            address_type_id,
            preference_id,
            mod_user,
            mod_date
            )
         SELECT address_id,
            address_line_1,
            address_line_2,
            msc,
            city,
            state,
            zip,
            country,
            address_type_id,
            preference_id,
            p_dbtrans_username_pt,
            now()
         FROM MRSDBA.MRS_PERSONADDRESSES
         WHERE address_id = p_address_id;

      retval := MRSDBA.MRS_UNASSIGN_PER_ROL_DET_ADD_F(p_address_id, p_prd_id, p_dbtrans_username_pt);

      DELETE FROM MRSDBA.MRS_PERSONADDRESSES
         WHERE address_id = p_address_id;
   ELSE
      retval := MRSDBA.MRS_UNASSIGN_PER_ROL_DET_ADD_F(p_address_id, p_prd_id, p_dbtrans_username_pt);
   END IF;

   IF retval ='DELETED' THEN
      RETURN 'DELETED';
   END IF;

end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_delete_personphone_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
retval            varchar(40);
v_row_count       integer;

BEGIN

   SELECT COUNT(1) INTO v_row_count FROM MRS_PERSON_ROLE_DET_PHONES
      WHERE phone_id = p_phone_id;

   IF v_row_count = 1  THEN
      INSERT INTO mrs_personphones_hist (
         phone_id,
         country_code,
         area_code,
         phone_number,
         phone_type_id,
         sms_preference_id,
         preference_id,
         mod_user,
         mod_date
      )
       SELECT
         phone_id,
         country_code,
         area_code,
         phone_number,
         phone_type_id,
         sms_preference_id,
         preference_id,
         p_dbtrans_username_pt,
         now()
         FROM MRSDBA.MRS_PERSONPHONES
         WHERE phone_id = p_phone_id;


      retval := MRSDBA.MRS_UNASSIGN_PERSONPHONE_F(p_phone_id, p_prd_id, p_dbtrans_username_pt);

      DELETE FROM MRSDBA.MRS_PERSONPHONES
         WHERE phone_id = p_phone_id;
   ELSE
      retval := MRSDBA.MRS_UNASSIGN_PERSONPHONE_F(p_phone_id, p_prd_id, p_dbtrans_username_pt);
   END IF;

   IF retval ='DELETED' THEN
      RETURN 'DELETED';
   END IF;

end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_delete_phone_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_phone_f(p_phone_id numeric, p_dbtransuser character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

begin

  -- log existing phone record
  INSERT INTO mrs_phones_hist (
    phone_id,
    area_code,
    phone_num,
    extension,
    notes,
    mod_user,
    mod_date
  )
  SELECT phone_id,
         area_code,
         phone_num,
         extension,
         notes,
         p_dbtransuser,
         now()
    FROM mrs_phones
   WHERE phone_id = p_phone_id;



  IF NOT FOUND  THEN
    RAISE EXCEPTION  'PHONE_ID % does not exist',p_phone_id;
  END IF;



  -- remove link between subject and phone record
  delete from  mrs_subject_phone_details
         where phone_id = p_phone_id;

  -- remove link between person and phone record
  delete from  mrs_person_phone_details
         where phone_id = p_phone_id;


  -- delete phone record
  delete from  mrs_phones
         where phone_id = p_phone_id;


  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_phone_f(p_phone_id numeric, p_dbtransuser character varying) OWNER TO postgres;

--
-- Name: mrs_delete_question_loops_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_question_loops_f(p_question_id character varying, p_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
v_count numeric;

BEGIN

SELECT count(1) INTO v_count
FROM mrsdba.mrs_instrument_question_loops
Where question_id = p_question_id;

IF v_count > 0 THEN
INSERT INTO mrsdba.mrs_instrument_question_loops_hist (loop_id, question_id, target_qid, operand1, operand2, test_operator, mod_user, mod_date) (SELECT loop_id, question_id, target_qid, operand1, operand2, test_operator, p_username, now() from mrsdba.mrs_instrument_question_loops where question_id = p_question_id);

DELETE from mrsdba.mrs_instrument_question_loops WHERE question_id = p_question_id;
END IF;
RETURN v_count;
END;
$$;


ALTER FUNCTION mrsdba.mrs_delete_question_loops_f(p_question_id character varying, p_username character varying) OWNER TO postgres;

--
-- Name: mrs_delete_queued_time_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_queued_time_f(p_aqueue_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_auto_queue_generated     boolean;
BEGIN

   SELECT auto_queue_generated
   INTO v_auto_queue_generated
   FROM mrs_subject_assessments_queue
   WHERE aqueue_id = p_aqueue_id;

   IF v_auto_queue_generated IS TRUE
   THEN
      -- queue has already been generated, do NOT delete the queue

      RAISE EXCEPTION 'Sorry, a queue has already been generated for this protocol, you cannot delete the queue NOR reschedule the associated visit.';
   END IF;

   -- ELSE, delete the queue

   INSERT INTO mrs_subject_assessments_queue_hist(
      aqueue_id,
      mod_user,
      mod_date
   )
   VALUES (
      p_aqueue_id,
      p_mod_user,
      NOW()
   );
   
   DELETE FROM mrs_subject_assessments_queue
   WHERE aqueue_id = p_aqueue_id;

   RETURN 1;

END;
$$;


ALTER FUNCTION mrsdba.mrs_delete_queued_time_f(p_aqueue_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_saved_query_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_saved_query_f(p_username character varying, p_label character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
    v_result int;
    v_id    int;
BEGIN
    INSERT INTO mrsdba.mrs_saved_user_queries_hist (
        id,
        username,
        label,
        mod_user,
        mod_date
    ) 
    SELECT id, username, label, p_username, now()
    FROM mrs_saved_user_queries
    WHERE username = p_username
        AND label = p_label;

    DELETE FROM mrsdba.mrs_saved_user_queries 
    WHERE username = p_username
        AND label = p_label
    RETURNING query_id INTO v_id;

    SELECT COUNT(1) INTO v_result
    FROM mrsdba.mrs_saved_user_queries
    WHERE query_id = v_id;

    IF v_result =0 THEN
        DELETE FROM mrsdba.mrs_saved_queries
        WHERE id = v_id;
    
        INSERT INTO mrsdba.mrs_saved_queries_hist (
            id,
            mod_user,
            mod_date
        ) VALUES (
            v_id,
            p_username,
            now()
        );
    END IF;

    RETURN 1;

end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_saved_query_f(p_username character varying, p_label character varying) OWNER TO ni_developers;

--
-- Name: mrs_delete_scan_slot_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_scan_slot_f(p_scan_slot_id numeric, p_notes character varying, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 V_SCAN_SLOT_USES_COUNT NUMERIC(10,0);
BEGIN
   
   -- prevent deleting used slots
   BEGIN
      SELECT COUNT(*) INTO V_SCAN_SLOT_USES_COUNT
      FROM MRS_SCAN_SLOT_USES 
      WHERE SCAN_SLOT_ID = P_SCAN_SLOT_ID;

      IF NOT FOUND  THEN
        RAISE EXCEPTION 'Scan Slot % does not exist.',P_SCAN_SLOT_ID;
      END IF;

      IF V_SCAN_SLOT_USES_COUNT > 0
      THEN
         RAISE EXCEPTION 'Cannot delete: Slot %  has already been used.',p_scan_slot_id;
      END IF;
   END;

   -- create entry in history table
   INSERT INTO MRS_SCAN_SLOTS_HIST(
      SCAN_SLOT_ID,
      COUNT,
      USER_MOD,
      DATE_MOD,
      NOTES
   )
   VALUES(
      P_SCAN_SLOT_ID,
      0,
      P_USER_ENTERED,
      now(),
      'Deleted slot. '||P_NOTES
   );

   DELETE FROM MRS_SCAN_SLOTS
   WHERE SCAN_SLOT_ID = P_SCAN_SLOT_ID;

   RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_scan_slot_f(p_scan_slot_id numeric, p_notes character varying, p_user_entered character varying) OWNER TO postgres;

--
-- Name: mrs_delete_sharing_rules_asmts_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_sharing_rules_asmts_f(p_min_rule numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

DELETE FROM MRS_SHARING_RULES_ASMTS_MV
WHERE sharing_rules_asmts_rule_id >= p_min_rule;

Return '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_sharing_rules_asmts_f(p_min_rule numeric) OWNER TO postgres;

--
-- Name: mrs_delete_sitewise_missing_assessment_reason_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_sitewise_missing_assessment_reason_f(reason_id_f numeric, site_id_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
	delete from mrs_study_missing_assessment_reasons 
	where reason_id=reason_id_f and study_id in (
		select study_id 
		from mrs_studies
		where site_id=site_id_f);

	return reason_id_f;
end;

$$;


ALTER FUNCTION mrsdba.mrs_delete_sitewise_missing_assessment_reason_f(reason_id_f numeric, site_id_f character varying) OWNER TO postgres;

--
-- Name: mrs_delete_study_interval_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_study_interval_f(p_study_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

 
 DELETE FROM mrs_study_intervals
  WHERE study_id = p_study_id
    AND segment_interval = p_segment_interval;

 IF NOT FOUND  THEN
   RAISE EXCEPTION 'Segment interval % does not exist.',p_segment_interval;
 END IF;

 insert into mrs_study_intervals(study_id,label,time_from_baseline,time_unit,segment_interval)
 select study_id, label, time_from_baseline, time_unit, p_dbtrans_username_pt, now()
   from mrs_study_intervals
  where study_id = p_study_id
    and segment_interval = p_segment_interval;
    
 RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_study_interval_f(p_study_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_delete_study_message_f(numeric, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
insert into mrs_study_messages_hist (message_id, study_id, message_type_id, auto_send, days_in_advance, mod_user, mod_date)
select message_id, study_id, message_type_id, auto_send, days_in_advance, mod_user_f, now() from mrs_study_messages 
where message_id=message_id_f and study_id=study_id_f and message_type_id=message_type_id_f;

delete from mrs_study_messages
where message_id=message_id_f and study_id=study_id_f and message_type_id=message_type_id_f;

return 1;
end;$$;


ALTER FUNCTION mrsdba.mrs_delete_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_delete_study_missing_assessment_reason_f(numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_study_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare
    count numeric:=0;
begin
    delete from mrs_study_missing_assessment_reasons where reason_id=reason_id_f and study_id=study_id_f;
    /*
    select count(1) into count from mrs_study_missing_assessment_reasons where reason_id = reason_id_f;
    IF count = 0 THEN
        delete from mrs_missing_assessment_reasons where id = reason_id_f;
    END IF;
    */
    return reason_id_f;
end;$$;


ALTER FUNCTION mrsdba.mrs_delete_study_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_delete_study_recruitment_criteria_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_study_recruitment_criteria_f(study_id_f numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin

delete from mrs_study_recruitment_criteria where study_id = study_id_f;

return '1';

end;$$;


ALTER FUNCTION mrsdba.mrs_delete_study_recruitment_criteria_f(study_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_delete_subject_type_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_delete_subject_type_f(p_subject_type_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

 DELETE FROM mrs_subject_types
  WHERE subject_type_id = p_subject_type_id;

 IF NOT FOUND  THEN
   RAISE EXCEPTION 'Subject type id % does not exist.',p_subject_type_id;
 END IF;

 INSERT INTO mrs_subject_types_hist (
  subject_type_id,
  label,
  description,
  mod_user,
  mod_date
 )
 VALUES (
  p_subject_type_id,
  null,
  null,
  p_dbtrans_username_pt,
  now()
 );

 RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_delete_subject_type_f(p_subject_type_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_delete_user_app_option_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_delete_user_app_option_f(p_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql STRICT SECURITY DEFINER
    AS $$BEGIN
    INSERT INTO mrs_user_app_options_hist (id, mod_date, mod_user)
    VALUES(p_id, now(), p_mod_user);

    DELETE FROM mrs_user_app_options 
    WHERE id = p_id;

    RETURN 1;
END;$$;


ALTER FUNCTION mrsdba.mrs_delete_user_app_option_f(p_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_deny_self_assessment_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_deny_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
                  DECLARE
                  v_usid text;
                  v_ursi text;
                  v_login_id numeric;
                  v_study_id numeric;
                  v_instrument_id numeric;
                  v_aqueue_id numeric;
                  v_queue_instrument_id numeric;
                  v_segint numeric;
                  v_source_type numeric;
                  v_queue_type_id int;
                  v_protocol_id numeric;
                  v_auto_queue_generated boolean;
                  BEGIN

                  -- get useful values from assessment
                  SELECT ursi,auto_queue_generated 
                  INTO v_ursi,v_auto_queue_generated
                  FROM mrs_assessments_vw
                  WHERE assessment_id = p_assessment_id;

                  select study_id into v_study_id
                  from mrs_assessments_vw
                  where assessment_id=p_assessment_id;

                  SELECT instrument_id INTO v_instrument_id
                  FROM mrs_assessments_vw
                  WHERE assessment_id=p_assessment_id; 

                  SELECT segment_interval_id INTO v_segint
                  FROM mrs_study_intervals AS s
                  INNER JOIN mrs_assessments_vw AS a
                  ON s.segment_interval = a.segment_interval
                  AND a.study_id = s.study_id
                  WHERE a.assessment_id = p_assessment_id;

                  SELECT source_type INTO v_source_type
                  FROM mrs_assessments_vw
                  WHERE assessment_id = p_assessment_id; 

                  IF v_auto_queue_generated = TRUE THEN
                     --its an auto queue, grab the protocol_id
                     --so that we can put it in its old queue
                     SELECT from_protocol_id
                     INTO v_protocol_id
                     FROM mrs_assessments
                     WHERE assessment_id = p_assessment_id;
                  ELSE
                     -- if there was no auto queue the protocol_id
                     -- should be null so that it wont be appended to an existing queue
                     v_protocol_id := NULL;
                  END IF;


                  begin
                     select CASE 
                        WHEN queue_type_id is null THEN 1 
                        ELSE queue_type_id END 
                     into strict v_queue_type_id
                     from mrs_subject_assessments_queue_instruments_hist
                     where assessment_id = p_assessment_id
                     order by queue_type_id DESC
                     limit 1;

                     EXCEPTION WHEN NO_DATA_FOUND THEN
                     v_queue_type_id := 1;
                  end;

                  -- get usid from ursi
                  select mrsdba.mrs_ursi_to_usid_f(v_ursi) into v_usid;

                  -- get login_id from study_id and usid
                  select login_id into v_login_id
                  from mrs_subject_logins_vw
                  where usid = v_usid
                  and study_id = v_study_id
                  and source_type = v_source_type;


                  -- update assessments to reflect move back to queue
                  insert into mrsdba.mrs_assessments_hist(
                  assessment_id,
                  entry_code,
                  mod_user,
                  mod_date)
                  values(
                  p_assessment_id,
                  'P',
                  p_dbtrans_username_pt,
                  now());

                  update mrsdba.mrs_assessments
                  set entry_code = 'P'
                  where assessment_id = p_assessment_id;

                  -- increment existing sort orders
                  update mrsdba.mrs_subject_assessments_queue_instruments x 
                  set sort_order = sort_order+1 
                  where login_id = v_login_id
                  and queue_type_id = v_queue_type_id; 

                  -- add to queue in first order
                  select mrsdba.mrs_queue_subject_assessment_f(
                  v_login_id,
                  v_instrument_id,
                  v_segint,
                  1,
                  p_dbtrans_username_pt,
                  v_queue_type_id,
                  v_protocol_id,
                  NULL,
                  NULL
                  ) into v_queue_instrument_id;

                  perform mrsdba.mrs_update_subj_ass_queue_item_f(
                  v_queue_instrument_id,
                  p_assessment_id,
                  p_dbtrans_username_pt
                  );

                  RETURN '1';

                  end;
                  $$;


ALTER FUNCTION mrsdba.mrs_deny_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_disambiguate_assessments_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_disambiguate_assessments_f(p_assessment_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
v_ret_val character varying (1);
v_study_count numeric(3); --number of studies returned 


v_study_id numeric (5);

BEGIN
-- start simple, by trying to match based on one single criteria alone
------------------
--INSTRUMENT_ID-- |
------------------
-- Fetch the number of study ids linked to this assessment based on instrument_id
select count(distinct(i.study_id)) 
into v_study_count
from mrsdba.mrs_assessments a

	inner join mrsdba.mrs_instruments_studies i
		on a.instrument_id = a.instrument_id
		
where a.assessment_id = p_assessment_id;

--Insert results into log table
Insert into mrsdba.mrs_disambig_asmts_log (assessment_id, study_id, match_criteria) 
		Select distinct a.assessment_id, i.study_id, 'instrument' 
	from mrsdba.mrs_assessments a
		inner join mrsdba.mrs_instruments_studies i
			on a.instrument_id = i.instrument_id
	where a.assessment_id = p_assessment_id;
	
--If only one study is linked to this assessment, add the study and assessment to mrs_disambiguated_asmts table and exit.
IF v_study_count = 1 THEN
	Insert into mrsdba.mrs_disambiguated_asmts (assessment_id, study_id, match_criteria) 
		Select distinct a.assessment_id, i.study_id, 'instrument'
		from mrsdba.mrs_assessments a
			inner join mrsdba.mrs_instruments_studies i
				on a.instrument_id = i.instrument_id
		where a.assessment_id = p_assessment_id;

	--remove entries from the log, so we don't go through this again
	delete from mrsdba.mrs_disambig_asmts_log where assessment_id = p_assessment_id;

	Return 'matched';
END IF;

	
---------------------
--SEGMENT_INTERVAL-- |
---------------------
-- Fetch the number of study ids linked to this assessment based on segment_interval
select count(distinct(si.study_id)) 
into v_study_count
from mrsdba.mrs_assessments a

	inner join mrsdba.mrs_study_intervals si
		on a.segment_interval = si.segment_interval
		
where a.assessment_id = p_assessment_id;

--Insert results into log table
Insert into mrsdba.mrs_disambig_asmts_log (assessment_id, study_id, match_criteria) 
	Select distinct a.assessment_id, si.study_id, 'seg_int'
	from mrsdba.mrs_assessments a
		inner join mrsdba.mrs_study_intervals si
			on a.segment_interval = si.segment_interval
	where a.assessment_id = p_assessment_id;
	
--If only one study is linked to this assessment, add the study and assessment to mrs_disambiguated_asmts table and exit.
IF v_study_count = 1 THEN
	Insert into mrsdba.mrs_disambiguated_asmts (assessment_id, study_id, match_criteria) 
		Select distinct a.assessment_id, si.study_id, 'seg_int' 
		from mrsdba.mrs_assessments a
			inner join mrsdba.mrs_study_intervals si
				on a.segment_interval = si.segment_interval
		where a.assessment_id = p_assessment_id;

		--remove entries from the log, so we don't go through this again
	delete from mrsdba.mrs_disambig_asmts_log where assessment_id = p_assessment_id;

	Return 'matched';
END IF;


-----------------------
--SUBJECT_ENROLLMENT-- |
-----------------------
-- Fetch the number of study ids linked to this assessment based on subject enrollment
select count(distinct(s.study_id)) 
into v_study_count
from mrsdba.mrs_assessments a

	inner join mrsdba.mrs_subject_type_details std
		on a.ursi = std.ursi
	inner join mrsdba.mrs_subject_types s
		on std.subject_type_id = s.subject_type_id
		
where a.assessment_id = p_assessment_id;

--Insert results into log table
Insert into mrsdba.mrs_disambig_asmts_log (assessment_id, study_id, match_criteria) 
Select distinct a.assessment_id, s.study_id, 'subject'
	from mrsdba.mrs_assessments a
		inner join mrsdba.mrs_subject_type_details std
			on a.ursi = std.ursi
		inner join mrsdba.mrs_subject_types s
			on std.subject_type_id = s.subject_type_id
	where a.assessment_id = p_assessment_id;
	
--If only one study is linked to this assessment, add the study and assessment to mrs_disambiguated_asmts table and exit.
IF v_study_count = 1 THEN
	Insert into mrsdba.mrs_disambiguated_asmts (assessment_id, study_id, match_criteria) 
		Select distinct a.assessment_id, s.study_id, 'subject'
	from mrsdba.mrs_assessments a
		inner join mrsdba.mrs_subject_type_details std
			on a.ursi = std.ursi
		inner join mrsdba.mrs_subject_types s
			on std.subject_type_id = s.subject_type_id
	where a.assessment_id = p_assessment_id;

	--remove entries from the log, so we don't go through this again
	delete from mrsdba.mrs_disambig_asmts_log where assessment_id = p_assessment_id;

	Return 'matched';
END IF;


-----------------------
--RATER_ID-- |
-----------------------
-- Fetch the number of study ids linked to this assessment based on rater1
select count(distinct(prd2.study_id)) 
into v_study_count
from mrsdba.mrs_assessments a

	inner join mrsdba.mrs_person_role_details prd1
		on a.rater1 = prd1.alias_id
	inner join mrsdba.mrs_person_role_details prd2
		on prd1.person_id = prd2.person_id
		
where a.assessment_id = p_assessment_id;

--Insert results into log table
Insert into mrsdba.mrs_disambig_asmts_log (assessment_id, study_id, match_criteria) 
Select distinct a.assessment_id, prd2.study_id, 'rater1'
	from mrsdba.mrs_assessments a
		inner join mrsdba.mrs_person_role_details prd1
			on a.rater1 = prd1.alias_id
		inner join mrsdba.mrs_person_role_details prd2
			on prd1.person_id = prd2.person_id
	where a.assessment_id = p_assessment_id;
	
--If only one study is linked to this assessment, add the study and assessment to mrs_disambiguated_asmts table and exit.
IF v_study_count = 1 THEN
	Insert into mrsdba.mrs_disambiguated_asmts (assessment_id, study_id, match_criteria) 
		Select distinct a.assessment_id, prd2.study_id, 'rater1'
	from mrsdba.mrs_assessments a
		inner join mrsdba.mrs_person_role_details prd1
			on a.rater1 = prd1.alias_id
		inner join mrsdba.mrs_person_role_details prd2
			on prd1.person_id = prd2.person_id
	where a.assessment_id = p_assessment_id;

	--remove entries from the log, so we don't go through this again
	delete from mrsdba.mrs_disambig_asmts_log where assessment_id = p_assessment_id;

	Return 'matched';
END IF;

-----------------------
--ENTRY_USERNAME-- |
-----------------------
-- Fetch the number of study ids linked to this assessment based on user name
select count(distinct(r.study_id)) 
into v_study_count
from mrsdba.mrs_assessments a

	inner join casdba.cas_study_user_role_privs r
		on upper(a.entry_username) = upper(mrsdba.mrs_get_header(r.username, '7c2ba77b877ed711821ea53842bda69d', 'uG0y3arlb8w='))  
		
where a.assessment_id = p_assessment_id
	and r.role_id IN (241, 23, 42);


--Insert results into log table
Insert into mrsdba.mrs_disambig_asmts_log (assessment_id, study_id, match_criteria) 
Select distinct a.assessment_id, r.study_id, 'entry_user'
from mrsdba.mrs_assessments a
	inner join casdba.cas_study_user_role_privs r
		on upper(a.entry_username) = upper(mrsdba.mrs_get_header(r.username, '7c2ba77b877ed711821ea53842bda69d', 'uG0y3arlb8w='))  
where a.assessment_id = p_assessment_id
		and r.role_id IN (241, 23, 42);

	
--If only one study is linked to this assessment, add the study and assessment to mrs_disambiguated_asmts table and exit.
IF v_study_count = 1 THEN
	Insert into mrsdba.mrs_disambiguated_asmts (assessment_id, study_id, match_criteria) 
		Select distinct a.assessment_id, r.study_id, 'entry_user'
	from mrsdba.mrs_assessments a
		inner join casdba.cas_study_user_role_privs r
		on upper(a.entry_username) = upper(mrsdba.mrs_get_header(r.username, '7c2ba77b877ed711821ea53842bda69d', 'uG0y3arlb8w=')) 
	where a.assessment_id = p_assessment_id
		and r.role_id IN (241, 23, 42); --DataEntry2, DataEntry, Coordinator only

	--remove entries from the log, so we don't go through this again
	delete from mrsdba.mrs_disambig_asmts_log where assessment_id = p_assessment_id;

	Return 'matched';
END IF;

Return 'try again';

END;
$$;


ALTER FUNCTION mrsdba.mrs_disambiguate_assessments_f(p_assessment_id numeric) OWNER TO postgres;

--
-- Name: mrs_duplicate_instrument_f(numeric, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_duplicate_instrument_f(p_instrument_id numeric, p_prefix character varying, p_study_id numeric, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
DECLARE
   v_new_instrument_id      numeric;
   v_new_section_id         numeric;
   v_question_suffix        numeric;
   v_question_suffix_txt    text;
   v_sort_order             numeric;
   v_target_qid             varchar;
   v_sql                    text;
   v_result                 text;
   v_table_grid             boolean;
   v_table_id               numeric;
   v_new_row_id             numeric;
   v_new_col_id             numeric;

   c_sections CURSOR IS
   SELECT section_id
   FROM MRSDBA.MRS_instrument_section_details
   WHERE instrument_id = p_instrument_id
   AND deletion_date IS NULL
   ORDER BY sort_order;

   c_question_jumps CURSOR IS
   SELECT question_jump_id, target_qid
   FROM mrsdba.mrs_instrument_question_jumps
   WHERE question_id IN (
      SELECT iq.question_id
      FROM mrs_instrument_questions iq
      INNER JOIN mrs_instrument_section_details isd ON iq.section_id = isd.section_id
      WHERE isd.instrument_id = v_new_instrument_id);

   c_question_details CURSOR IS
   SELECT iq.question_id, iq.copied_from_question_id
   FROM mrs_instrument_questions iq
   INNER JOIN mrs_instrument_section_details isd ON iq.section_id = isd.section_id
   WHERE isd.instrument_id = v_new_instrument_id;

   c_inst CURSOR IS
   SELECT
      CASE WHEN label IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(label, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN salabel IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(salabel, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN description IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(description, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN copyright_notice IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(copyright_notice, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN version IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(version, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN display_type IS NULL THEN 'NULL' ELSE $a$'$a$ || display_type || $a$'$a$ END || $a$,$a$
      || CASE WHEN max_per_segment IS NULL THEN 'NULL' ELSE $a$'$a$ || max_per_segment || $a$'$a$ END || $a$,$a$
      || $a$'$a$ || p_study_id || $a$',$a$
      || CASE WHEN hide_sa_previous IS NULL THEN 'NULL' ELSE $a$'$a$ || hide_sa_previous || $a$'$a$ END || $a$,$a$
      || CASE WHEN skip_question_text IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(skip_question_text, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN sa_hide_skipped_questions IS NULL THEN 'NULL' ELSE $a$'$a$ || sa_hide_skipped_questions || $a$'$a$ || $a$,$a$
      || $a$'$a$ || p_mod_user || $a$'$a$ END AS sql_text
   FROM mrsdba.mrs_instruments
   WHERE instrument_id = p_instrument_id;

   QUESTION        mrsdba.mrs_instrument_questions%rowtype;
   NEW_QUEST_ID    mrsdba.mrs_instrument_questions%rowtype;
   "TABLE"           mrsdba.mrs_instrument_tables%rowtype;
   TBLROW          mrsdba.mrs_instrument_table_rows%rowtype;
   TBLCOL          mrsdba.mrs_instrument_table_cols%rowtype;

BEGIN

   v_question_suffix := 0;


   /* mrs_instruments */
   FOR INST IN c_inst
   LOOP

      v_sql := 'SELECT mrs_add_inst_f(' || INST.sql_text || ');';
      EXECUTE v_sql INTO v_new_instrument_id;

   END LOOP;

   -- create sections and link to instrument
   FOR SECTION IN c_sections
   LOOP

      /* mrs_instrument_sections */
      SELECT INTO v_sql, v_table_grid
         CASE WHEN label IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(label, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
         || CASE WHEN description IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(description, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
         || CASE WHEN multi_inst_grid IS NULL THEN 'NULL' ELSE $a$'$a$ || multi_inst_grid || $a$'$a$ END || $a$,$a$
         || CASE WHEN sa_label IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(sa_label, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
         || CASE WHEN sa_description IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(sa_description, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
         || CASE WHEN is_likert_grid IS NULL THEN 'NULL' ELSE $a$'$a$ || is_likert_grid || $a$'$a$ END || $a$,$a$
         || CASE WHEN is_table_grid IS NULL THEN 'NULL' ELSE $a$'$a$ || is_table_grid || $a$'$a$ END || $a$,$a$
         || $a$'$a$ || p_mod_user || $a$'$a$ , is_table_grid
      FROM  mrsdba.mrs_instrument_sections
      WHERE section_id = SECTION.section_id;

      v_sql := 'SELECT mrs_add_inst_section_f(' || v_sql || ');';
      EXECUTE v_sql INTO v_new_section_id;



      /* mrs_instrument_section_details */
      SELECT
         $a$'$a$ || v_new_instrument_id || $a$',$a$
         || $a$'$a$ || v_new_section_id || $a$',$a$
         || CASE WHEN sa_questions_per_page IS NULL THEN 'NULL' ELSE $a$'$a$ || sa_questions_per_page || $a$'$a$ END || $a$,$a$
         || $a$'$a$ || p_mod_user || $a$'$a$
      INTO v_sql
      FROM mrsdba.mrs_instrument_section_details
      WHERE section_id = SECTION.section_id;

      v_sql := 'SELECT mrs_add_inst_section_details_f(' || v_sql || ');';
      EXECUTE v_sql INTO v_result;

      FOR QUESTION in 
        (SELECT iqlv.question_id
         FROM mrsdba.mrs_inst_questions_lov_vw iqlv
         WHERE iqlv.instrument_id = p_instrument_id
         AND iqlv.section_id = SECTION.section_id
         ORDER BY iqlv.question_sort_order)
      LOOP
         v_question_suffix := v_question_suffix + 1;

         IF v_question_suffix < 10 THEN
            v_question_suffix_txt = '00'||v_question_suffix;
         ELSEIF v_question_suffix < 100 THEN
            v_question_suffix_txt = '0'||v_question_suffix;
         ELSE
            v_question_suffix_txt = v_question_suffix;
         END IF;

         SELECT sort_order
         INTO v_sort_order
         FROM mrs_instrument_questions
         WHERE question_id = QUESTION.question_id;

         SELECT mrs_duplicate_instrument_question_f(p_prefix || '_' || v_question_suffix_txt, QUESTION.question_id, v_new_section_id, v_sort_order, p_mod_user)
         INTO v_result;

      END LOOP;

      -- duplicate instrument table if the section is_table_grid
      IF v_table_grid THEN
         FOR "TABLE" IN 
            (SELECT * FROM mrs_instrument_tables WHERE section_id = SECTION.section_id)
         LOOP
            SELECT mrs_add_instrument_table_f(v_new_section_id, "TABLE".num_rows, "TABLE".num_cols, "TABLE".label, "TABLE".description, p_mod_user)
            INTO v_table_id;
    
            FOR TBLROW IN
               (SELECT * FROM mrs_instrument_table_rows WHERE table_id = "TABLE".table_id)
            LOOP
               SELECT mrs_add_instrument_table_row_f(v_table_id, TBLROW.label, TBLROW.sort_order, p_mod_user)
               INTO v_new_row_id;

               UPDATE mrs_instrument_questions SET table_row_id = v_new_row_id
               WHERE section_id = v_new_section_id AND table_row_id = TBLROW.row_id;
            END LOOP;

            FOR TBLCOL IN
               (SELECT * FROM mrs_instrument_table_cols WHERE table_id = "TABLE".table_id)
            LOOP
               SELECT mrs_add_instrument_table_col_f(v_table_id, TBLCOL.label, TBLCOL.sort_order, p_mod_user)
               INTO v_new_col_id;

               UPDATE mrs_instrument_questions SET table_col_id = v_new_col_id
               WHERE section_id = v_new_section_id AND table_col_id = TBLCOL.col_id;
            END LOOP;
         END LOOP;
      END IF;
   END LOOP;

   /* the below update, MUST be done at the end of the function, because it is dependent on the fact that all question_id's from
    * the OLD instrument have been mapped to NEW question_id's in the new instrument */
   
   -- update target_qid for question_jumps
   FOR QUESTION_JUMPS in c_question_jumps
   LOOP

      SELECT iq.question_id
      INTO v_target_qid
      FROM mrs_instrument_questions iq
      INNER JOIN mrs_instrument_section_details isd ON iq.section_id = isd.section_id
      WHERE isd.instrument_id = v_new_instrument_id
      AND iq.copied_from_question_id = QUESTION_JUMPS.target_qid;

      IF v_target_qid IS NOT NULL THEN
         -- update target_qid
         UPDATE mrs_instrument_question_jumps 
         SET target_qid = v_target_qid
         WHERE question_jump_id = QUESTION_JUMPS.question_jump_id;

         --update formula
         FOR QUESTION_DETAILS IN c_question_details
         LOOP
            UPDATE mrs_instrument_question_jumps
            SET formula = replace(formula, '['||QUESTION_DETAILS.copied_from_question_id||']', '['||QUESTION_DETAILS.question_id||']')
            WHERE question_jump_id = QUESTION_JUMPS.question_jump_id;
         END LOOP;

         -- insert updated values in hist table
         INSERT INTO mrs_instrument_question_jumps_hist(
            question_jump_id, question_id, target_qid, formula, sort_order, mod_user, mod_date
         )
         SELECT question_jump_id, question_id, target_qid, formula, sort_order, p_mod_user, now()
         FROM mrs_instrument_question_jumps
         WHERE question_jump_id = QUESTION_JUMPS.question_jump_id;

      END IF;

   END LOOP;

   RETURN v_new_instrument_id;
END;
$_$;


ALTER FUNCTION mrsdba.mrs_duplicate_instrument_f(p_instrument_id numeric, p_prefix character varying, p_study_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_duplicate_instrument_question_f(character varying, character varying, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_duplicate_instrument_question_f(p_new_question_id character varying, p_old_question_id character varying, p_section_id numeric, p_sort_order numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$ 
DECLARE
   v_section_id               numeric;
   v_sort_order               numeric;
   v_loop_id                  numeric;
   v_old_question_media_id    int;
   v_sql                      text;
   v_result                   text;

   c_inst_code_resp CURSOR IS
   SELECT
      $a$'$a$ || p_new_question_id || $a$',$a$
      || CASE WHEN label IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(label, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN description IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(description, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN value IS NULL THEN 'NULL' ELSE $a$'$a$ || value || $a$'$a$ END || $a$,$a$
      || CASE WHEN is_critical IS NULL THEN 'NULL' ELSE $a$'$a$ || is_critical || $a$'$a$ END || $a$,$a$
      || CASE WHEN is_hidden IS NULL THEN 'NULL' ELSE $a$'$a$ || is_hidden || $a$'$a$ END || $a$,$a$
      || CASE WHEN skip_revscore IS NULL THEN 'NULL' ELSE $a$'$a$ || skip_revscore || $a$'$a$ END || $a$,$a$
      || CASE WHEN specify_detail IS NULL THEN 'NULL' ELSE $a$'$a$ || specify_detail || $a$'$a$ END || $a$,$a$
      || $a$'$a$ || p_mod_user || $a$'$a$ AS sql_text
   FROM mrsdba.mrs_instrument_code_responses 
   WHERE question_id = p_old_question_id
   ORDER BY sort_order;

   c_inst_quest_media CURSOR IS
   SELECT
      $a$'$a$ || p_new_question_id || $a$',$a$
      || CASE WHEN media_type_id IS NULL THEN 'NULL' ELSE $a$'$a$ || media_type_id || $a$'$a$ END || $a$,$a$
      || CASE WHEN sort_order IS NULL THEN 'NULL' ELSE $a$'$a$ || sort_order || $a$'$a$ END || $a$,$a$
      || CASE WHEN url IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(url, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN attributes IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(attributes, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN caption IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(caption, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN position IS NULL THEN 'NULL' ELSE $a$'$a$ || position || $a$'$a$ END || $a$,$a$
      || $a$'$a$ || p_mod_user || $a$'$a$ AS sql_text
   FROM mrsdba.mrs_instrument_question_media
   WHERE question_id = p_old_question_id
   AND question_media_id IS NOT NULL;

   c_inst_quest_jumps CURSOR IS
   SELECT
      $a$'$a$ || p_new_question_id || $a$',$a$
      || CASE WHEN target_qid IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(target_qid, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN formula IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(formula, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || $a$'$a$ || p_mod_user || $a$'$a$ AS sql_text
   FROM mrs_instrument_question_jumps
   WHERE question_id = p_old_question_id
   ORDER BY sort_order;

BEGIN

   /* This function created to serve a dual purpose:
    * 1) Ability to duplicate a question from COINS via a GUI
    * 2) Ability to be called from mrs_duplicate_instrument_f() from the SQL DB
    */

   IF p_section_id IS NOT NULL THEN
      v_section_id = p_section_id;
   ELSE
      SELECT section_id 
      INTO v_section_id
      FROM mrs_instrument_questions 
      WHERE question_id = p_old_question_id;
   END IF;

   IF p_sort_order IS NOT NULL THEN
      v_sort_order = p_sort_order;
   ELSE
      SELECT MAX(sort_order)+1
      INTO v_sort_order
      FROM mrs_instrument_questions 
      WHERE section_id IN (
         SELECT section_id FROM mrs_instrument_questions WHERE question_id = p_old_question_id
      );
   END IF;

   /* mrs_instrument_questions */
   SELECT
      $a$'$a$ || p_new_question_id || $a$',$a$
      || CASE WHEN label IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(label, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN description IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(description, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN example_description IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(example_description, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN exclusion_description IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(exclusion_description, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN max_instances IS NULL THEN 'NULL' ELSE $a$'$a$ || max_instances || $a$'$a$ END || $a$,$a$
      || $a$'$a$ || v_section_id || $a$',$a$
      || CASE WHEN v_sort_order IS NULL THEN '1' ELSE $a$'$a$ || v_sort_order || $a$'$a$ END || $a$,$a$
      || CASE WHEN dsm_question_type IS NULL THEN 'NULL' ELSE $a$'$a$ || dsm_question_type || $a$'$a$ END || $a$,$a$
      || CASE WHEN disp_label_first IS NULL THEN 'NULL' ELSE $a$'$a$ || disp_label_first || $a$'$a$ END || $a$,$a$
      || CASE WHEN formula_question_type IS NULL THEN 'NULL' ELSE $a$'$a$ || formula_question_type || $a$'$a$ END || $a$,$a$
      || CASE WHEN formula IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(formula, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN is_required IS NULL THEN 'NULL' ELSE $a$'$a$ || is_required || $a$'$a$ END || $a$,$a$
      || CASE WHEN is_sa_hidden IS NULL THEN 'NULL' ELSE $a$'$a$ || is_sa_hidden || $a$'$a$ END || $a$,$a$
      || CASE WHEN is_sa_radio_type IS NULL THEN 'NULL' ELSE $a$'$a$ || is_sa_radio_type || $a$'$a$ END || $a$,$a$
      || CASE WHEN is_auto_complete_type IS NULL THEN 'NULL' ELSE $a$'$a$ || is_auto_complete_type || $a$'$a$ END || $a$,$a$
      || CASE WHEN sa_label IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(sa_label, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN autopop_qid IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(autopop_qid, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN assumed_value IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(assumed_value, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN response_format_id IS NULL THEN 'NULL' ELSE $a$'$a$ || response_format_id || $a$'$a$ END || $a$,$a$
      || CASE WHEN other_option_label IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(other_option_label, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN specify_detail IS NULL THEN 'NULL' ELSE $a$'$a$ || specify_detail || $a$'$a$ END || $a$,$a$
      || CASE WHEN multiple_choice IS NULL THEN 'NULL' ELSE $a$'$a$ || multiple_choice || $a$'$a$ END || $a$,$a$
      || CASE WHEN istextquestion IS NULL THEN 'NULL' ELSE $a$'$a$ || istextquestion || $a$'$a$ END || $a$,$a$
      || CASE WHEN isvasquestion IS NULL THEN 'NULL' ELSE $a$'$a$ || isvasquestion || $a$'$a$ END || $a$,$a$
      || CASE WHEN vas_minimum IS NULL THEN 'NULL' ELSE $a$'$a$ || vas_minimum || $a$'$a$ END || $a$,$a$
      || CASE WHEN vas_maximum IS NULL THEN 'NULL' ELSE $a$'$a$ || vas_maximum || $a$'$a$ END || $a$,$a$
      || CASE WHEN vas_interval IS NULL THEN 'NULL' ELSE $a$'$a$ || vas_interval || $a$'$a$ END || $a$,$a$
      || CASE WHEN vas_display_extrema IS NULL THEN 'NULL' ELSE $a$'$a$ || vas_display_extrema || $a$'$a$ END || $a$,$a$
      || CASE WHEN vas_display_cursor_value IS NULL THEN 'NULL' ELSE $a$'$a$ || vas_display_cursor_value || $a$'$a$ END || $a$,$a$
      || CASE WHEN vas_display_center_mark IS NULL THEN 'NULL' ELSE $a$'$a$ || vas_display_center_mark || $a$'$a$ END || $a$,$a$
      || CASE WHEN vas_min_label IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(vas_min_label, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN vas_mid_label IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(vas_mid_label, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN vas_max_label IS NULL THEN 'NULL' ELSE $a$'$a$ || replace(vas_max_label, $b$'$b$, $b$''$b$) || $a$'$a$ END || $a$,$a$
      || CASE WHEN numeric_response_min IS NULL THEN 'NULL' ELSE $a$'$a$ || numeric_response_min || $a$'$a$ END || $a$,$a$
      || CASE WHEN numeric_response_max IS NULL THEN 'NULL' ELSE $a$'$a$ || numeric_response_max || $a$'$a$ END || $a$,$a$
      || CASE WHEN is_media_upload IS NULL THEN 'NULL' ELSE $a$'$a$ || is_media_upload || $a$'$a$ END || $a$,$a$
      || CASE WHEN vas_recording_interval IS NULL THEN 'NULL' ELSE $a$'$a$ || vas_recording_interval || $a$'$a$ END || $a$,$a$
      || $a$'$a$ || p_old_question_id || $a$',$a$
      || CASE WHEN table_row_id IS NULL THEN 'NULL' ELSE $a$'$a$ || table_row_id || $a$'$a$ END || $a$,$a$
      || CASE WHEN table_col_id IS NULL THEN 'NULL' ELSE $a$'$a$ || table_col_id || $a$'$a$ END || $a$,$a$
      || CASE WHEN is_de_hidden IS NULL THEN 'NULL' ELSE $a$'$a$ || is_de_hidden || $a$'$a$ END || $a$,$a$
      || $a$'$a$ || p_mod_user || $a$'$a$
   INTO v_sql
   FROM mrsdba.mrs_instrument_questions
   WHERE question_id = p_old_question_id;

   v_sql := 'SELECT mrs_add_inst_question_f(' || v_sql || ');';
   EXECUTE v_sql INTO v_result;



   /* mrs_instrument_code_responses */
   FOR INST_CODE_RESP IN c_inst_code_resp
   LOOP

      v_sql := 'SELECT mrs_add_inst_response_f(' || INST_CODE_RESP.sql_text || ');';
      EXECUTE v_sql INTO v_result;

   END LOOP;



   /* mrs_instrument_question_media */
   FOR INST_QUEST_MEDIA IN c_inst_quest_media
   LOOP

      v_sql := 'SELECT mrs_add_instrument_question_media_f(' || INST_QUEST_MEDIA.sql_text || ');';
      EXECUTE v_sql INTO v_result;

   END LOOP;



   /* mrs_instrument_question_jumps */
   FOR INST_QUEST_JUMPS IN c_inst_quest_jumps
   LOOP

      v_sql := 'SELECT mrs_add_conditional_jump_f(' || INST_QUEST_JUMPS.sql_text || ');';
      EXECUTE v_sql INTO v_result;

   END LOOP;


   RETURN '1';

END;
$_$;


ALTER FUNCTION mrsdba.mrs_duplicate_instrument_question_f(p_new_question_id character varying, p_old_question_id character varying, p_section_id numeric, p_sort_order numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_edit_rad_comment_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_edit_rad_comment_f(p_comment_id numeric, p_comment_text character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

begin
 update mrsdba.mrs_radiologist_comments
  set comment_text = p_comment_text
  where comment_id = p_comment_id;
 return '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_edit_rad_comment_f(p_comment_id numeric, p_comment_text character varying) OWNER TO postgres;

--
-- Name: mrs_exact_match_ursi_f(character varying, character varying, timestamp without time zone, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_exact_match_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_ursi          mrs_subjects.ursi%TYPE;    -- variable to store return message
BEGIN


  /* find exact match */
        SELECT  ursi
        INTO    STRICT v_ursi
        FROM    mrs_subjects s
        WHERE   s.gender = p_gender
        and     UPPER(decrypt_str(s.first_name))  = UPPER(p_first_name)
        and     UPPER(decrypt_str(s.last_name))   = UPPER(p_last_name)
        and     s.birth_date = p_birthdate;

        RETURN v_ursi;

EXCEPTION
    WHEN no_data_found THEN
      RETURN '';


END;
$$;


ALTER FUNCTION mrsdba.mrs_exact_match_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) OWNER TO postgres;

--
-- Name: mrs_find_asmt_studies_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_find_asmt_studies_f(p_assessment_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
v_assessment_count numeric(4);
v_study_count numeric(3); --number of studies that were matched my the most criteria (hopefully 1)
v_max_criteria numeric(3); --maximum number of criteria that a single study matches
v_study_id numeric (5);
v_match_criteria_str character varying (400);

BEGIN
--First, check to see if this assessment has already been entered into the disambiguated table:
select count(assessment_id)
INTO v_assessment_count
from mrsdba.mrs_disambiguated_asmts
where assessment_id = p_assessment_id;

IF v_assessment_count = 0 THEN
	--Next, make sure that there is at least one entry in the table for this assessment. If not, the assessment is not linked to any studies.
	--In that case, we'll record the assessment_id in another table.
	Select count(assessment_id) 
	INTO v_assessment_count
	from mrsdba.mrs_disambig_asmts_log
	where assessment_id = p_assessment_id;

	IF v_assessment_count = 0 THEN
		INSERT into mrsdba.mrs_disambig_asmts_nomatch (assessment_id)
		VALUES (p_assessment_id);

		RETURN 'no match';
	ELSE

		--Retrieve maximum number of match-criteria that produced the same study_id:
		select max(subquery.num_criteria) 
		into v_max_criteria
		from 
			(select study_id, count(*) as num_criteria
			from mrsdba.mrs_disambig_asmts_log 
			where assessment_id = p_assessment_id 
			group by study_id) as subquery;

		--This function is supposed to be run after we've attempted to disambiguate these assessments. 
		--So all the assessments passed to this function have multi-study ambiguity.
		--Therefore, we want to grab the ambiguous matches and tabulate them.
		Insert into mrsdba.mrs_disambig_asmts_multi 
			(select p_assessment_id, subquery.study_id, null
			from
				(select subsubquery.study_id, subsubquery.num_criteria from
					(select study_id, count(*) as num_criteria
					from mrsdba.mrs_disambig_asmts_log 
					where assessment_id = p_assessment_id 
					group by study_id) as subsubquery 
				where num_criteria = v_max_criteria) as subquery);
		Return 'Matches Inserted';
	END IF;
END IF; 
RETURN NULL;
END;
$$;


ALTER FUNCTION mrsdba.mrs_find_asmt_studies_f(p_assessment_id numeric) OWNER TO postgres;

--
-- Name: mrs_find_asmt_study_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_find_asmt_study_f(p_assessment_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
v_assessment_count numeric(4);
v_study_count numeric(3); --number of studies that were matched my the most criteria (hopefully 1)
v_max_criteria numeric(3); --maximum number of criteria that a single study matches
v_study_id numeric (5);
v_match_criteria_str character varying (400);

BEGIN
--First, check to see if this assessment has already been entered into the disambiguated table:
select count(assessment_id)
INTO v_assessment_count
from mrsdba.mrs_disambiguated_asmts
where assessment_id = p_assessment_id;

IF v_assessment_count = 0 THEN
	--Next, make sure that there is at least one entry in the table for this assessment. If not, the assessment is not linked to any studies.
	--In that case, we'll record the assessment_id in another table.
	Select count(assessment_id) 
	INTO v_assessment_count
	from mrsdba.mrs_disambig_asmts_log
	where assessment_id = p_assessment_id;

	IF v_assessment_count = 0 THEN
		INSERT into mrsdba.mrs_disambig_asmts_nomatch (assessment_id)
		VALUES (p_assessment_id);

		RETURN 'no match';
	ELSE

		-- Painstakingly go through all possible combinations of match_criteria, looking for a single-study in common
		-- Psych!! why do that when we can do this:

		--Retrieve maximum number of match-criteria (including at least subject enrollment) that produced the same study_id:
		select max(subquery.num_criteria) 
		into v_max_criteria
		from 
			(select study_id, count(*) as num_criteria
			from mrsdba.mrs_disambig_asmts_log a 
			where a.assessment_id = p_assessment_id 
			and exists 
				(select 1 from mrsdba.mrs_disambig_asmts_log
				where assessment_id = p_assessment_id
				and study_id = a.study_id
				and match_criteria = 'subject') 
			group by study_id) as subquery;

		--Retrieve the number of study_ids that matched the maximum number of criteria from above
		select count(subquery.study_id)
		into v_study_count
		from
			(select subsubquery.study_id, subsubquery.num_criteria from
				(select study_id, count(*) as num_criteria
				from mrsdba.mrs_disambig_asmts_log a
				where assessment_id = p_assessment_id 
				and exists 
					(select 1 from mrsdba.mrs_disambig_asmts_log
					where assessment_id = p_assessment_id
					and study_id = a.study_id
					and match_criteria = 'subject') 
				group by study_id) as subsubquery 
			where num_criteria = v_max_criteria) as subquery;
			
		--If only one study matched more criteria than any other, that's our study
		IF v_study_count = 1 THEN
			--Get the study_id
			select subquery.study_id
			into v_study_id
			from
				(select subsubquery.study_id, subsubquery.num_criteria from
					(select study_id, count(*) as num_criteria
					from mrsdba.mrs_disambig_asmts_log a
					where assessment_id = p_assessment_id 
					and exists 
						(select 1 from mrsdba.mrs_disambig_asmts_log
						where assessment_id = p_assessment_id
						and study_id = a.study_id
						and match_criteria = 'subject') 
					group by study_id) as subsubquery 
				where num_criteria = v_max_criteria) as subquery;

			--get string to signify the matching criteria used
			SELECT subquery.str 
			INTO v_match_criteria_str
			FROM
				(SELECT study_id, array_to_string(array_agg(match_criteria), ' & ') as str
				FROM mrsdba.mrs_disambig_asmts_log
				WHERE study_id = v_study_id
					AND assessment_id = p_assessment_id
				GROUP BY study_id) as subquery;

			-- now insert all that into mrsdba.mrs_disambiguated_asmts	
			Insert into mrsdba.mrs_disambiguated_asmts (assessment_id, study_id, match_criteria)
			VALUES (p_assessment_id, v_study_id, v_match_criteria_str);

			-- finally, delete entries for this assessment from the log table
			Delete from mrsdba.mrs_disambig_asmts_log 
			Where assessment_id = p_assessment_id;

			-- return to signify that the assessment was resolved
			RETURN 'matched';
		END IF;
		-- Getting here means that the assessment remains ambiguous return an appropriate message:
		RETURN 'ambiguous';
	END IF;
END IF; 
RETURN NULL;
END;
$$;


ALTER FUNCTION mrsdba.mrs_find_asmt_study_f(p_assessment_id numeric) OWNER TO postgres;

--
-- Name: mrs_generate_instrument_sql_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_generate_instrument_sql_f(p_instrument_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_qry               text;
      v_sql               text;
      v_return            text;
      v_select            text;
      v_row_id            integer;
      v_table_name        text;
      v_col1              text;
      v_value1            text;
      v_col2              text;
      v_value2            text;
   BEGIN
      /*
       * The purpose of this function is to create a script that will recreate a deleted instrument.
       * This function should be run from nirep (or another db that still contains the UN-DELETED instrument!
       * Then, you can take the output and run it on a production server (or wherever it is that you want to
       * recreate the instrument)
       *
       * WARNING, be careful about mrs_template_instruments, see message below
       */

  -- this used for debugging...
  --RETURNS text AS
  --RETURNS TABLE(t_row_id integer, t_table_name character varying, t_col1 character varying, t_value1 character varying, t_col2 character varying, t_value2 character varying) AS


      CREATE TEMP TABLE mrs_row_generator_temp (
         row_id serial, 
         table_name character varying, 
         col1 character varying,
         value1 character varying,
         col2 character varying,
         value2 character varying
      ) ON COMMIT DROP;

      -- mrs_instruments
      INSERT INTO mrs_row_generator_temp (table_name, col1, value1, col2, value2)
      VALUES ('mrs_instruments', 'instrument_id', p_instrument_id, NULL, NULL);


      --mrs_template_instruments
      -- this could get tricky if a user has changed any of the instrument templates between the time that they delete
      -- the instrument and the time that the instrument gets replaced as there is a UK constraint on template_id
      -- and sort_order
      INSERT INTO mrs_row_generator_temp (
         table_name,
         col1,
         value1,
         col2,
         value2
      )
      SELECT 
         'mrs_template_instruments',
         'template_id',
         template_id,
         'sort_order',
         sort_order
      FROM mrs_template_instruments
      WHERE instrument_id = p_instrument_id;


      --mrs_instruments_studies
      INSERT INTO mrs_row_generator_temp (
         table_name,
         col1,
         value1,
         col2,
         value2
      )
      SELECT 
         'mrs_instruments_studies',
         'instrument_id', 
         p_instrument_id,
         'study_id',
         study_id
      FROM mrs_instruments_studies 
      WHERE instrument_id = p_instrument_id;


      --mrs_instrument_sections
      INSERT INTO mrs_row_generator_temp (
         table_name,
         col1,
         value1,
         col2,
         value2
      )
      SELECT 
         'mrs_instrument_sections',
         'section_id',
         mis.section_id,
         NULL,
         NULL
      FROM mrs_instrument_sections mis
      INNER JOIN mrs_instrument_section_details misd
         ON mis.section_id = misd.section_id
      WHERE misd.instrument_id = p_instrument_id;


      --mrs_instrument_section_details
      INSERT INTO mrs_row_generator_temp (
         table_name,
         col1,
         value1,
         col2,
         value2
      )
      SELECT 
         'mrs_instrument_section_details',
         'instrument_id',
         p_instrument_id,
         'section_id',
         section_id
      FROM mrs_instrument_section_details
      WHERE instrument_id = p_instrument_id;


      --mrs_instrument_questions
      INSERT INTO mrs_row_generator_temp (
         table_name,
         col1,
         value1,
         col2,
         value2
      )
      SELECT 
         'mrs_instrument_questions',
         'question_id',
         miq.question_id,
         NULL,
         NULL
      FROM mrs_instrument_questions miq
      INNER JOIN mrs_instrument_section_details misd
         ON miq.section_id = misd.section_id
      WHERE misd.instrument_id = p_instrument_id;


      --mrs_instrument_question_media
      INSERT INTO mrs_row_generator_temp (
         table_name,
         col1,
         value1,
         col2,
         value2
      )
      SELECT 
         'mrs_instrument_question_media',
         'question_media_id',
         miqm.question_media_id,
         NULL,
         NULL
      FROM mrs_instrument_question_media miqm
      INNER JOIN mrs_instrument_questions miq
         ON miqm.question_id = miq.question_id
      INNER JOIN mrs_instrument_section_details misd
         ON miq.section_id = misd.section_id
      WHERE misd.instrument_id = p_instrument_id;


      --mrs_instrument_code_responses
      INSERT INTO mrs_row_generator_temp (
         table_name,
         col1,
         value1,
         col2,
         value2
      )
      SELECT 
         'mrs_instrument_code_responses',
         'response_id',
         micr.response_id,
         NULL,
         NULL
      FROM mrs_instrument_code_responses micr
      INNER JOIN mrs_instrument_questions miq
         ON (micr.question_id = miq.question_id)
      INNER JOIN mrs_instrument_section_details misd
         ON miq.section_id = misd.section_id
      WHERE misd.instrument_id = p_instrument_id
      ORDER BY micr.question_id, micr.sort_order;


      --mrs_instrument_question_jumps :: target_qid + question_id
      INSERT INTO mrs_row_generator_temp (
         table_name,
         col1,
         value1,
         col2,
         value2
      )
      SELECT 
         'mrs_instrument_question_jumps',
         'question_jump_id',
         miqj.question_jump_id,
         NULL,
         NULL
      FROM mrs_instrument_question_jumps miqj
      INNER JOIN mrs_instrument_questions miq
         ON (miqj.question_id = miq.question_id OR miqj.target_qid = miq.question_id)
      INNER JOIN mrs_instrument_section_details misd
         ON miq.section_id = misd.section_id
      WHERE misd.instrument_id = p_instrument_id;


      --mrs_instrument_question_loops
      INSERT INTO mrs_row_generator_temp (
         table_name,
         col1,
         value1,
         col2,
         value2
      )
      SELECT 
         'mrs_instrument_question_loops',
         'loop_id',
         miql.loop_id,
         NULL,
         NULL
      FROM mrs_instrument_question_loops miql
      INNER JOIN mrs_instrument_questions miq
         ON (miql.question_id = miq.question_id OR miql.target_qid = miq.question_id)
      INNER JOIN mrs_instrument_section_details misd
         ON miq.section_id = misd.section_id
      WHERE misd.instrument_id = p_instrument_id;


      -- build the SQL output for the user to run on the database missing the given instrument
      v_return = '';
      FOR v_row_id IN (
         SELECT row_id
         FROM mrs_row_generator_temp)
      LOOP
         SELECT 
            table_name,
            col1,
            value1,
            col2,
            value2
         INTO
            v_table_name,
            v_col1,
            v_value1,
            v_col2,
            v_value2
         FROM mrs_row_generator_temp
         WHERE row_id = v_row_id;


         v_qry := mrs_generate_table_row_sql_f(v_table_name, v_col1, v_value1, v_col2, v_value2, p_mod_user);
         
         SELECT v_qry INTO v_sql;

         v_return := v_return|| '--' ||v_table_name|| E'\n' ||v_sql;

      END LOOP;



      RETURN v_return;

      -- this used for debugging...
      -- v_select = 'SELECT * FROM mrs_row_generator_temp;';
      -- RETURN QUERY EXECUTE v_select;

   END;
$$;


ALTER FUNCTION mrsdba.mrs_generate_instrument_sql_f(p_instrument_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_generate_table_row_sql_f(character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_generate_table_row_sql_f(p_table_name character varying, p_col1 character varying, p_value1 character varying, p_col2 character varying, p_value2 character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
   DECLARE
      v_sql                text;
      v_sql_hist           text;
      v_columns            text;
      v_values             text;
      v_value              text;
      v_column_name        character varying;
      v_qry                text;
   BEGIN
      /*
       * The purpose of this function is to build a script that will recreate a deleted row.
       * It was initially designed to work with mrs_generate_instrument_sql_f to recreate deleted instruments,
       * however, it should be easy to reuse this function if you wanted to create a script to rebuild other deleted info.
       *
       * This function expects p_col1 and p_col2 to be either PK or UK column names.  Here is an example of how to call it...
       *
       * PK:
       * SELECT mrs_generate_table_row_sql_f('mrs_instruments','instrument_id','27563',NULL,NULL,'<username>')
       *
       * UK:
       * SELECT mrs_generate_table_row_sql_f('mrs_instruments_studies','instrument_id','27563','study_id','6860','<username>')
       */

      v_columns = '';
      v_values = '';
      FOR v_column_name IN (
         SELECT column_name, data_type, udt_name
         FROM information_schema.columns
         WHERE table_name = p_table_name
         ORDER BY ordinal_position)
      LOOP
         v_columns := v_columns || ', ' || v_column_name || E'\n';

         v_qry := 'SELECT ' ||v_column_name|| ' FROM ' ||p_table_name|| ' WHERE ' ||p_col1|| $A$ = '$A$ ||p_value1|| $A$'$A$;

         IF p_col2 IS NOT NULL
         THEN
            v_qry := v_qry|| ' AND ' ||p_col2|| $A$ = '$A$ ||p_value2|| $A$'$A$;
         END IF;

         EXECUTE v_qry INTO v_value;

         IF v_value IS NULL
         THEN
            v_values := v_values || $A$, NULL --$A$ || v_column_name || E'\n';
         ELSE
            -- escape single quotes by replacing with two single quotes
            v_value = regexp_replace(v_value, $A$'$A$, $A$''$A$, 'g');

            v_values := v_values || $A$, '$A$ || v_value || $A$' --$A$ || v_column_name || E'\n';
         END IF;

      END LOOP;

      -- remove trailing [comma]
      v_columns = regexp_replace(v_columns, '^, ', '');
      v_values = regexp_replace(v_values, ', ', '');

      v_sql := 'INSERT INTO ' 
          || p_table_name 
          || E' (\n' 
          || v_columns
          || E')\nVALUES (\n' 
          || v_values
          || E');\n\n';

      v_sql_hist := 'INSERT INTO '
        || p_table_name
        || E'_hist (\n' 
        || v_columns
        || E', mod_user\n, mod_date)\nVALUES (' 
        ||v_values
        || E', ' 
        || $A$'$A$
        ||p_mod_user
        || $A$'$A$ 
        || E' --mod_user\n'
        || $A$, NOW()$A$
        || E' --mod_date\n);\n\n';

      RETURN v_sql || v_sql_hist;
   END;
$_$;


ALTER FUNCTION mrsdba.mrs_generate_table_row_sql_f(p_table_name character varying, p_col1 character varying, p_value1 character varying, p_col2 character varying, p_value2 character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_get_age_at_scan_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_age_at_scan_f(p_ursi character varying, p_scan_label character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_scan_date		mrs_scan_sessions.scan_date%TYPE;
  v_birth_date		date;
  v_format		numeric(5);
  v_temp1		numeric(3);
  v_temp2		numeric(3);
BEGIN

  BEGIN
    SELECT scan_date
    INTO   STRICT v_scan_date
    FROM   mrs_scan_sessions
    WHERE  ursi = p_ursi
    AND    label = p_scan_label
    AND    segment_interval = 'month000';

    EXCEPTION
      WHEN no_data_found THEN
        RETURN '.';
  END;
  
  BEGIN
    SELECT birth_date
    INTO   STRICT v_birth_date
    FROM   mrs_subjects
    WHERE  ursi = p_ursi;

    EXCEPTION
      WHEN no_data_found THEN
        RETURN '.';
  END;
  
  v_temp1 := instr(to_char(v_scan_date,'MM/DD/YYYY'),'900');

  IF(v_temp1 <> 0) THEN
    RETURN '.';
  ELSE
    v_format := floor(abs((v_scan_date - v_birth_date))/365.25);
    RETURN v_format;
  END IF;

end;
$$;


ALTER FUNCTION mrsdba.mrs_get_age_at_scan_f(p_ursi character varying, p_scan_label character varying) OWNER TO postgres;

--
-- Name: mrs_get_alias_per_role_det_f(character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_alias_per_role_det_f(p_person_id character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
v_match_found     varchar(50);
v_row_count         integer;

BEGIN
   SELECT count (DISTINCT alias_id)
   INTO v_row_count
   FROM MRSDBA.mrs_person_role_details
   WHERE person_id = p_person_id;

   IF v_row_count < 1 THEN
      v_match_found := 'NOALIAS';
   ELSIF v_row_count =1
   THEN
      SELECT DISTINCT alias_id
      INTO v_match_found
      FROM MRSDBA.mrs_person_role_details
      Where Person_Id = P_Person_Id
      AND alias_id is not null;
   ELSE
      v_match_found := 'MULTIALIAS';
   END IF;
   RETURN v_match_found;
end;
$$;


ALTER FUNCTION mrsdba.mrs_get_alias_per_role_det_f(p_person_id character varying) OWNER TO postgres;

--
-- Name: mrs_get_anchor_date_f(character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_anchor_date_f(p_ursi character varying) RETURNS date
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
    v_anchor_date mrsdba.mrs_scan_sessions.scan_date%TYPE;   -- return anchor_date

    v_study_start_date date := to_date('01/01/2000','MM/DD/YYYY'); -- the start date for valid scans
                                                                   -- filters out scan sessions for
                                                                   -- which we have comment data
    v_instrument_id numeric(3) := 25; -- instrument_id for instrument used for anchor date; neuropsych

BEGIN

    -- 1) use fMR scan date if we have one

    SELECT scan_date
      INTO STRICT v_anchor_date
      FROM mrs_scan_sessions_vw
      WHERE ursi = p_ursi
      AND scan_label = 'fMR'
      AND segment_interval = 'month000'
      AND scan_date > v_study_start_date;


    RETURN v_anchor_date;

EXCEPTION
  WHEN NO_DATA_FOUND THEN

      -- 2) use structural scan if we have one

      BEGIN

      SELECT scan_date
      INTO STRICT v_anchor_date
      FROM mrs_scan_sessions_vw
      WHERE ursi = p_ursi
      AND scan_label = 'structural'
      AND segment_interval = 'month000'
      AND scan_date > v_study_start_date;


      RETURN v_anchor_date;


      EXCEPTION
        WHEN NO_DATA_FOUND THEN

            -- use assessment date of instrument if they have one

            BEGIN

            SELECT assessment_date
            INTO STRICT v_anchor_date
            FROM mrs_assessments_vw
            WHERE ursi = p_ursi
            AND segment_interval = 'month000'
            AND entry_code = '1'
            AND instrument_id = v_instrument_id
            order by assessment_date ASC         -- make it the earliest one
            LIMIT 1;                       -- make sure we only grab one row


            RETURN v_anchor_date;

            EXCEPTION
              WHEN NO_DATA_FOUND THEN

                RETURN null;

             END;

      END;

end;
$$;


ALTER FUNCTION mrsdba.mrs_get_anchor_date_f(p_ursi character varying) OWNER TO postgres;

--
-- Name: mrs_get_asmts_4_olin_f(); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_asmts_4_olin_f() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
v_ret_val character varying (1);
ursi_cursor_cv  cursor(c_go numeric (1))
		FOR SELECT URSI from mrsdba.mrs_query_temp where dbuser = 'bmturner';

BEGIN
	FOR current_ursi IN ursi_cursor_cv(1) LOOP
		v_ret_val:=mrsdba.mrs_insert_asmts_4_olin_f(current_ursi.ursi);
	END LOOP;

	Return ('1');
END;

$$;


ALTER FUNCTION mrsdba.mrs_get_asmts_4_olin_f() OWNER TO postgres;

--
-- Name: mrs_get_col_list_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_col_list_f(p_project_id numeric, p_incol character varying, p_indel character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    l_value varchar(32767);
    l_result varchar(32767);
    p_cursor refcursor;
    p_col varchar;
    p_del varchar;
BEGIN


  -- crude mechanism for returning either person_id list or full name list
  -- must be better way to do this but i could not access column in cursor scope
  -- of a cursor built from two tables.
  --
  if p_incol = '' then
	p_col :='domains';
  else
	p_col := p_incol;
  end if;
  if p_indel = '' then
	p_del :=',';
  else
	p_del :=p_indel;
  end if;

  if p_col = 'coinvestigators' then

  OPEN p_cursor for select (per.first_name || ' ' || per.last_name) as name
      from
        mrsdba.mrs_proj_co_investigator co,
        mrsdba.mrs_persons per

      where co.project_id = p_project_id
      and   co.person_id = per.person_id
      order by per.last_name;


   else

    OPEN p_cursor for select domains.label
        from
          mrsdba.mrs_proj_data_dom_details domaindetails,
          mrsdba.mrs_data_domains domains

        where domaindetails.project_id = p_project_id
        and   domaindetails.data_domain_id = domains.data_domain_id
        order by domains.label;

   end if;



  -- put together list
  loop

   fetch p_cursor into l_value;

   exit when p_cursor%notfound;


   if l_result is not null then
     l_result := l_result || p_del;
   end if;

   l_result := l_result || l_value;

  end loop;



  close p_cursor;

  return l_result;


end;
$$;


ALTER FUNCTION mrsdba.mrs_get_col_list_f(p_project_id numeric, p_incol character varying, p_indel character varying) OWNER TO postgres;

--
-- Name: mrs_get_header(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_header(p_string character varying, p_location character varying, p_location2 character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
v_result varchar(256);
BEGIN
  -- set search_path=public;
  select btrim(decrypt_iv(decode(p_string,'base64'), cast(p_location as bytea) ,cast(decode(p_location2,'base64') as bytea) , 'aes-ecb'),E'\\000') into v_result;
RETURN v_result;
end;
$$;


ALTER FUNCTION mrsdba.mrs_get_header(p_string character varying, p_location character varying, p_location2 character varying) OWNER TO postgres;

--
-- Name: mrs_get_mcic_has_imaging_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_mcic_has_imaging_f(p_ursi character varying, p_type character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
 v_response_value     mrs_assessment_responses.response_value%type;
BEGIN

BEGIN

  case
    when p_type = 'T1' then
         SELECT t1 into STRICT v_response_value FROM MRS_MCIC_HAS_IMAGING_SMR
         WHERE URSI = p_ursi;
    when p_type = 'T2' then
         SELECT t2 into STRICT v_response_value FROM MRS_MCIC_HAS_IMAGING_SMR
         WHERE URSI = p_ursi;
    when p_type = 'DTI' then
         SELECT DTI into STRICT v_response_value FROM MRS_MCIC_HAS_IMAGING_DTI
         WHERE URSI = p_ursi;
    when p_type = 'DTI_FIELDMAG' then
         SELECT FIELDMAG into STRICT v_response_value FROM MRS_MCIC_HAS_IMAGING_DTI_FM
         WHERE URSI = p_ursi;
    when p_type = 'DTI_FIELDPHASE' then
         SELECT FIELDPHASE into STRICT v_response_value FROM MRS_MCIC_HAS_IMAGING_DTI_FM
         WHERE URSI = p_ursi;
    when p_type = 'FMR_FIELDMAG' then
         SELECT FIELDMAG into STRICT v_response_value FROM MRS_MCIC_HAS_IMAGING_FMR_FM
         WHERE URSI = p_ursi;
    when p_type = 'FMR_FIELDPHASE' then
         SELECT FIELDPHASE into STRICT v_response_value FROM MRS_MCIC_HAS_IMAGING_FMR_FM
         WHERE URSI = p_ursi;
    when p_type = 'FMRI_SENSORI_MOTOR' then
         SELECT smtask into STRICT v_response_value FROM MRS_MCIC_HAS_IMAGING_FMRI
         WHERE URSI = p_ursi;
    when p_type = 'FMRI_SIRP' then
         SELECT sirptask into STRICT v_response_value FROM MRS_MCIC_HAS_IMAGING_FMRI
         WHERE URSI = p_ursi;
    when p_type = 'FMRI_BREATHHOLD' then
         SELECT breathtask into STRICT v_response_value FROM MRS_MCIC_HAS_IMAGING_FMRI
         WHERE URSI = p_ursi;
    when p_type = 'FMRI_AOD' then
         SELECT oddtask into STRICT v_response_value FROM MRS_MCIC_HAS_IMAGING_FMRI
         WHERE URSI = p_ursi;
  end case;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    v_response_value := '.';
  WHEN TOO_MANY_ROWS THEN
--    v_response_value := 'ERROR - Too Many Rows';
    v_response_value := 'ERROR';    
END;
  RETURN v_response_value;

END;
$$;


ALTER FUNCTION mrsdba.mrs_get_mcic_has_imaging_f(p_ursi character varying, p_type character varying) OWNER TO postgres;

--
-- Name: mrs_get_mcic_response_value_f(numeric, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_mcic_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
 v_response_value     mrs_assessment_responses.response_value%type;
BEGIN
  SELECT response_value
    INTO STRICT v_response_value
    FROM mrs_assessment_responses
   WHERE assessment_id = p_assessment_id
   and question_id = p_question_id
   and question_instance = p_question_instance;

  RETURN v_response_value;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN '.';
end;
$$;


ALTER FUNCTION mrsdba.mrs_get_mcic_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric) OWNER TO postgres;

--
-- Name: mrs_get_next_ursi_f(character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_next_ursi_f(p_ursi_prefix character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_ursi     mrs_subject_type_details.ursi%TYPE;
  v_exist_enrolled numeric(1) := null;
  v_exist_reserved numeric(1) := null;
BEGIN

/*
Change Log:

Jan. 7 2011		Dylan Wood		Added CASE statement to filter count of subject_type_details entries to be a boolean
						This was in response to a bug reported wherein a numeric variable was overflowed
*/

  -- generates ursis until it finds one not already in use.

  -- Validate params
  IF LENGTH(p_ursi_prefix) != 4
  THEN
    RAISE EXCEPTION 'The ursi prefix must be exactly four characters long';
  END IF;

  -- Get the next ursi and check if it exists already.  If so, then do it again.
    LOOP

      v_exist_enrolled := null;
      v_exist_reserved := null;

      v_ursi := UPPER(p_ursi_prefix)||TO_CHAR(ROUND(RANDOM()*99999),'FM00009');

      -- select '1' into v_exist_enrolled if ursi found in subjects table
      begin

      SELECT CASE WHEN count(1) > 0 THEN 1
		   ELSE 0
	      END	
        INTO STRICT v_exist_enrolled
        FROM mrs_subject_type_details
       WHERE UPPER(ursi) = UPPER(v_ursi);

       EXCEPTION
        WHEN NO_DATA_FOUND THEN
          null;
        WHEN OTHERS THEN
          RAISE EXCEPTION '%',SQLERRM;
      end;



      begin

      -- select '1' into v_exist_reserved if ursi found in subjects reserved table
      SELECT count(1)
        INTO STRICT v_exist_reserved
        FROM mrs_subjects_reserved
       WHERE UPPER(ursi) = UPPER(v_ursi);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          null;
        WHEN OTHERS THEN
          RAISE EXCEPTION '%',SQLERRM;
      END;


      -- if ursi does not exist v_exist_enrolled is null. Use NVL to substitute 0 for null, make statement true, and exit.
      -- when ursi does not exist exit loop
      EXIT WHEN ( v_exist_enrolled IS NULL or v_exist_enrolled = 0 ) AND ( v_exist_reserved IS NULL or v_exist_reserved = 0 );


    END LOOP;

  RETURN v_ursi;
end;
$$;


ALTER FUNCTION mrsdba.mrs_get_next_ursi_f(p_ursi_prefix character varying) OWNER TO postgres;

--
-- Name: mrs_get_next_usid_f(character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_next_usid_f(p_stub character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_usid     mrsdba.mrs_subjects.usid%TYPE;
  v_exist_enrolled numeric(1) := null;
  v_exist_reserved numeric(1) := null;
BEGIN

  -- generates ursis until it finds one not already in use.


  -- Get the next usid and check if it exists already.  If so, then do it again.
    LOOP

      v_exist_enrolled := null;
      v_exist_reserved := null;

      v_usid := 'U'||TO_CHAR(ROUND(RANDOM()*99999999),'FM00000009');

      -- select '1' into v_exist_enrolled if ursi found in subjects table
      begin

      SELECT 1
        INTO STRICT v_exist_enrolled
        FROM mrsdba.mrs_subjects
       WHERE UPPER(usid) = UPPER(v_usid);

       EXCEPTION
        WHEN NO_DATA_FOUND THEN
          null;
        WHEN OTHERS THEN
          RAISE EXCEPTION '%',SQLERRM;
      end;

      begin
       SELECT 1
        INTO STRICT v_exist_enrolled
        FROM mrsdba.mrs_subjects_reserved
       WHERE UPPER(usid) = UPPER(v_usid);

       EXCEPTION
        WHEN NO_DATA_FOUND THEN
          null;
        WHEN OTHERS THEN
          RAISE EXCEPTION '%',SQLERRM;
      end;

      -- if usid does not exist v_exist_enrolled is null. Use NVL to substitute 0 for null, make statement true, and exit.
      -- when usid does not exist exit loop
      -- 'U99999997','U99999998','U99999997' are reserved for anonymous subjects and permanently delinked subjects
      EXIT WHEN ( (v_exist_enrolled IS NULL or v_exist_enrolled = 0) and (v_usid != 'U99999999' and v_usid != 'U99999998' and v_usid != 'U99999997'));

    END LOOP;

  RETURN v_usid;
end;
$$;


ALTER FUNCTION mrsdba.mrs_get_next_usid_f(p_stub character varying) OWNER TO postgres;

--
-- Name: mrs_get_prd_id_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_get_prd_id_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_role_id numeric, p_study_id numeric, p_alias_label character varying, p_force_add character varying, p_sid character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         declare
         v_match_result        varchar(200);
         v_alias_id            numeric;
         v_prd_id              numeric;
         v_contact_email       varchar(200) := NULL;
         v_person_id           varchar(50);
         v_is_hidden           boolean := FALSE;
         BEGIN
         v_person_id := UPPER(p_person_id);
         ------------------------------------------------
         --check for person_id, first and last name in mrs_persons
         ------------------------------------------------
         v_match_result := mrs_match_persons_f(
         v_person_id,
         p_first_name,
         p_middle_name,
         p_last_name,
         p_sid
         );
         IF v_match_result = 'EXACTPER' THEN
            -------------------------------
            -- Found exact match: Continue by checking for the person_id in mrs_person_role_details
            ------------------------------------------------
            v_match_result := mrs_match_person_role_det_f(
            UPPER(v_person_id),
            p_role_id,
            p_study_id
            );
            IF v_match_result = 'NOPRD' THEN
               ------------------------------------------------
               -- Found no match for person, study, role combo, look for alias using just person, prompt for alias if needed.
               ------------------------------------------------
               IF p_alias_label IS NOT NULL AND p_alias_label != '' THEN
                  v_alias_id := mrsdba.mrs_add_person_alias_f(p_alias_label,p_dbtrans_username_pt);
               ELSE
                  ------------------------------------------------
                  -- If no Alias Id has been provided, attempt to get the alias from other instances of PERSON_ID in MRS_PERSON_ROLE_DETAILS
                  ------------------------------------------------
                  v_match_result := mrs_get_alias_per_role_det_f(UPPER(v_person_id));
                  IF v_match_result = 'NOALIAS' THEN
                     RETURN v_match_result;
                  ELSIF v_match_result = 'MULTIALIAS' THEN
                     RAISE EXCEPTION 'Multiple alias_ids assigned to individual';
                     RETURN v_match_result;
                  ELSE
                     v_alias_id := v_match_result;
                  END IF;
               END IF;
               ------------------------------------------------
               -- Given the found/provided Alias ID, proceed to add person, role and study to MRS_PERSON_ROLE_DETAILS
               ------------------------------------------------
               v_prd_id := mrsdba.mrs_add_person_role_detail_f(p_role_id, v_person_id, v_alias_id, p_study_id, v_is_hidden, p_dbtrans_username_pt);
               v_match_result := v_prd_id;
            ELSE
               ------------------------------------------------
               --Found Exact match for person, study, role combo:
               ------------------------------------------------
               v_prd_id := v_match_result;
            END IF;
            RETURN v_match_result;

         ELSIF (v_match_result = 'NOPER' OR p_force_add = 'yes') THEN
            ------------------------------------------------
            --Did not find any persons maching given info. Must add to MRS_PERSONS, then tell APP to ask for alias_label.
            ------------------------------------------------
            v_match_result := mrsdba.mrs_add_person_f(
            v_person_id,
            p_first_name,
            p_middle_name,
            p_last_name,
            p_site_id,
            p_department,
            p_institution,
            v_contact_email,
            p_dbtrans_username_pt);

            v_match_result := 'NOALIAS';
            RETURN v_match_result;

         ELSIF (v_match_result = 'MULTIPER') THEN
            ------------------------------------------------
            -- Found multiple matches for person_id, first_name or last_name: info is placed temporarilly in MRS_PERSONS_MATCHED_VW
            ------------------------------------------------
            RETURN v_match_result;

         ELSE
            ------------------------------------------------
            -- SOMETHING WIERD HAPPENED, v_match_result is not an expected value
            ------------------------------------------------
            RAISE EXCEPTION 'Unexpected result when checking against mrs_persons';

         END IF;


         END;

         $$;


ALTER FUNCTION mrsdba.mrs_get_prd_id_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_role_id numeric, p_study_id numeric, p_alias_label character varying, p_force_add character varying, p_sid character varying, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_get_study_scan_count_f(numeric, numeric, date, date); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_study_scan_count_f(p_study_id numeric, p_field_strength numeric, p_start_date date, p_end_date date) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
 v_scan_count      numeric := 0;
 v_start_date      date := nvl(p_start_date,now()-365);
 v_end_date        date := nvl(p_end_date,now());
begin
 -- Validate params
 if p_study_id is null or
    p_field_strength is null then
  return 0;
 end if;

 select count(ise.scan_id)
   into STRICT v_scan_count
   from mrs_scan_sessions ise, mrs_scanners s
  where ise.scanner_id = s.scanner_id
    and ise.study_id = p_study_id
    and s.field_strength = p_field_strength
    and ise.scan_date between v_start_date and v_end_date;

 return v_scan_count;
exception
 when no_data_found then
  return 0;
end;
$$;


ALTER FUNCTION mrsdba.mrs_get_study_scan_count_f(p_study_id numeric, p_field_strength numeric, p_start_date date, p_end_date date) OWNER TO postgres;

--
-- Name: mrs_get_subject_info_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_subject_info_f(p_id character varying, p_idtype character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
 v_first_name     mrs_subjects.first_name%type;
 v_middle_name    mrs_subjects.middle_name%type;
 v_last_name      mrs_subjects.last_name%type;
BEGIN
  IF p_idtype='URSI' THEN
     SELECT distinct first_name,
            middle_name,
            last_name
       INTO STRICT v_first_name,
            v_middle_name,
            v_last_name
       FROM mrs_subjects s INNER JOIN mrs_subject_type_details u
         ON s.usid = u.usid
      WHERE u.ursi = p_id;
  ELSIF p_idtype='USID' THEN
     SELECT distinct first_name,
            middle_name,
            last_name
       INTO STRICT v_first_name,
            v_middle_name,
            v_last_name
       FROM mrs_subjects s
       WHERE  s.usid = p_id;
  ELSE
      RAISE EXCEPTION 'Invalid idtype specified.';
  END IF;
  
  RETURN v_first_name||'|'||v_middle_name||'|'||v_last_name;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    IF p_idtype='URSI' THEN
      RAISE EXCEPTION 'Subject % does not exist.',p_id;
    ELSE
      RAISE EXCEPTION 'Subject  does not exist.';  --WE NEVER want to display the USID
    END IF;
END;
$$;


ALTER FUNCTION mrsdba.mrs_get_subject_info_f(p_id character varying, p_idtype character varying) OWNER TO postgres;

--
-- Name: mrs_get_subject_race_f(character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_subject_race_f(p_ursi character varying, p_study_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_racecats varchar(200);
        
      BEGIN
       SELECT array_to_string(array_agg(rc.label),',') 
       INTO v_racecats
       FROM mrs_subjects_race_cats_vw sr
       INNER JOIN mrs_racial_categories_vw rc
       ON sr.racial_category_id = rc.racial_category_id
       WHERE sr.ursi       = p_ursi
       AND   sr.study_id   = p_study_id;

       RETURN v_racecats;
      END;
      $$;


ALTER FUNCTION mrsdba.mrs_get_subject_race_f(p_ursi character varying, p_study_id numeric) OWNER TO postgres;

--
-- Name: mrs_get_subject_ursi_f(character varying, character varying, timestamp without time zone, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_subject_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_ursi  mrs_subjects.ursi%TYPE;
BEGIN
  SELECT ursi
    INTO STRICT v_ursi
    FROM mrs_subjects
   WHERE UPPER(first_name) = UPPER(p_first_name)
     AND UPPER(last_name) = UPPER(p_last_name)
     AND gender = UPPER(p_gender)
     AND birth_date = TRUNC(p_birthdate);

  RETURN v_ursi;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RAISE EXCEPTION 'Subject does not exist';
END;
$$;


ALTER FUNCTION mrsdba.mrs_get_subject_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) OWNER TO postgres;

--
-- Name: mrs_get_ursi_scan_count_f(character varying, numeric, date, date); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_get_ursi_scan_count_f(p_ursi character varying, p_field_strength numeric, p_start_date date, p_end_date date) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
 v_scan_count      numeric := 0;
 v_start_date      date := nvl(p_start_date,now()-365);
 v_end_date        date := nvl(p_end_date,now());
begin

 -- Validate params
 if p_ursi is null or
    p_field_strength is null then
  return 0;
 end if;

 select count(ise.scan_id)
   into STRICT v_scan_count
   from mrs_scan_sessions ise, mrs_scanners s
  where ise.scanner_id = s.scanner_id
    and ise.ursi = p_ursi
    and s.field_strength = p_field_strength
    and ise.scan_date between v_start_date and v_end_date;

 return v_scan_count;
exception
 when no_data_found then
  return 0;
end;
$$;


ALTER FUNCTION mrsdba.mrs_get_ursi_scan_count_f(p_ursi character varying, p_field_strength numeric, p_start_date date, p_end_date date) OWNER TO postgres;

--
-- Name: mrs_insert_asmts_4_olin_f(character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_insert_asmts_4_olin_f(p_ursi character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
 Begin
 
Insert into mrsdba.mrs_asmts_4_olin(ursi,
rater1 ,  
entry_code ,  
successfully_completed ,
segment_interval ,  
segment_instance ,  
assessment_date,
assessment_id,  
notes,  
question_id,  
sort_order,  
label,  
question_instance,
RESPONSE_VALUE)
		SELECT DISTINCT ar.ursi,  
			(r.first_name||r.last_name) AS rater1,  
			ar.entry_code,  
			ar.successfully_completed,
                       ar.segment_interval,  
                       ar.segment_instance,  
                       TO_CHAR(ar.assessment_date,'MM-DD-YYYY HH:MI:SS AM') AS assessment_date,
                       ar.assessment_id,  ar.notes,  
                       iq.question_id,  
                       iq.sort_order,  
                       ar.label,  
                       TO_CHAR(ar.QUESTION_INSTANCE,'FM999999') AS question_instance,
                       ar.RESPONSE_VALUE
		FROM mrsdba.MRS_INST_STUDIES_VW si,
                      mrsdba.mrs_subjects_vw s,
                      mrsdba.mrs_inst_questions_vw iq
		      LEFT OUTER JOIN mrsdba.mrs_asmts_and_responses_vw ar
			ON iq.question_id = ar.question_id
                      LEFT OUTER JOIN mrsdba.mrs_raters_vw r
			ON ar.rater1         = r.alias_id
                WHERE ar.ursi        = s.ursi
                  AND ar.instrument_id = si.instrument_id
                  AND ar.entry_code   ='C' 
                  AND (   ( si.study_id in ( '511','512','518','540','533','427','1048','1036','350','537','1047','514','707','532','513','2319','1300','1539','2039','557','1310','1311','1309','1306','566','1043','1759','1199','468','551','1033','1301','346','1303','554','1307','1030','946','509','553','1302','1317','727','552','1315','886','1313','1240','1999','550','347','2239','371','556','2359','530','545','354','368','369','370','587','706','534','386','906','1032','353','1038','542','539','555','546','355','586','536','541','515','406','606','1028','374','529','544','568','1042','1040','1041','520','519','446','1039','357','1044','535','387','1046','516','1029','538','531','543','426','1035','348','1540','1316','1312','567','1439','1304','548','1314','1619','1305','1031','1034','1541','1339','1308','1037','549','547','1119')  
                  AND  ar.instrument_id = 222 )  )  
                  AND ar.ursi = p_ursi
                  AND ar.dataentry_type_id = 1 
                order by segment_interval, segment_instance, ursi, iq.sort_order /* 3 */ 
                limit 500;
return ('1');
	
END;

$$;


ALTER FUNCTION mrsdba.mrs_insert_asmts_4_olin_f(p_ursi character varying) OWNER TO postgres;

--
-- Name: mrs_insert_client_error_f(character varying, character varying, character varying, character varying, text, text, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_insert_client_error_f(p_error_message character varying, p_src_url character varying, p_line_number character varying, p_page_url character varying, p_shared_vars text, p_user_note text, p_client_agent character varying, p_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN

         INSERT INTO mrsdba.mrs_client_error_log (
            error_message,
            src_url,
            line_number,
            page_url,
            shared_vars,
            user_note,
            client_agent,
            username,
            error_timestamp)
            VALUES (
            p_error_message,
            p_src_url,
            p_line_number,
            p_page_url,
            p_shared_vars,
            p_user_note,
            p_client_agent,
            p_username,
            now());
         RETURN true;
         END;
         $$;


ALTER FUNCTION mrsdba.mrs_insert_client_error_f(p_error_message character varying, p_src_url character varying, p_line_number character varying, p_page_url character varying, p_shared_vars text, p_user_note text, p_client_agent character varying, p_username character varying) OWNER TO postgres;

--
-- Name: mrs_insert_qa_threshold_f(character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_insert_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_value numeric) RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare f_id mrsdba.mrs_qa_threshold.id%TYPE;

BEGIN
    select nextval('mrs_qa_threshold_counter') into f_id;
    insert into mrsdba.mrs_qa_threshold (
        id,
        label,
        threshold,
        study_id,
        user_id
    )
    values (
        f_id,
        f_label,
        f_value,
        f_study,
        f_user
    );
    return f_id;

END;$$;


ALTER FUNCTION mrsdba.mrs_insert_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_value numeric) OWNER TO postgres;

--
-- Name: mrs_insert_row(character varying, character varying, character varying, character varying[], character varying[], character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_insert_row(p_tblname character varying, p_key_col character varying, p_key_col_seq_name character varying, p_cols character varying[], p_vals character varying[], p_dbtrans_username_pt character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   affected_count INTEGER;
   cmd VARCHAR:='';
   cmd_vals VARCHAR:='';
   cmd_cols VARCHAR:='';
   v_history_table VARCHAR:='';
   tab_cols RECORD;
   seq_val NUMERIC;
   
BEGIN
   /* protect from updating any other tables */
   IF UPPER(p_tblName) NOT LIKE 'MRS_%' THEN
      RAISE EXCEPTION 'Invalid table name.';
   END IF;

   select nextval(p_key_col_seq_name ) into seq_val;
    
   /* build INSERT INTO ... */   
   cmd := 'INSERT INTO mrsdba.' || quote_ident(p_tblName) || ' ( '
          || quote_ident(p_key_col) || ', ';
   cmd_vals := seq_val || ',';
   FOR ndx IN 1..array_upper(p_cols,1) LOOP
      cmd := cmd || quote_ident(p_cols[ndx]) || ',';
      if p_vals[ndx]='' then
         cmd_vals := cmd_vals || 'NULL,';
      ELSE
         cmd_vals := cmd_vals || quote_literal(p_vals[ndx]) || ',';
      END IF;
   END LOOP;
   cmd_vals:=SUBSTRING(cmd_vals FROM 1 FOR length(cmd_vals)-1);
   
   cmd:=substring(cmd from 1 for length(cmd)-1) || ') VALUES (' ||
        cmd_vals || ')';

   

   /* execute insert first instead of storing history; if it fails the
      transaction remains atomic
    */

   EXECUTE cmd;

   
    
   /* build statement to save history; we loop using the column names of p_tblName
      and not v_history_table because that would assume the history table has
      the same columns; if they are not the same this will produce an error
      which is what we want */
   v_history_table = lower(p_tblName) || '_hist';
   cmd:='INSERT INTO mrsdba.' || quote_ident(v_history_table) || ' (';
   FOR tab_Cols IN SELECT column_name from information_schema.columns 
                  WHERE table_schema='mrsdba'
                    AND  table_name=LOWER(p_tblName)

   LOOP
      cmd_cols := cmd_cols || quote_ident(tab_Cols.column_name) || ',';
   END LOOP;
   IF(LENGTH(cmd_cols)=0) THEN
      RAISE EXCEPTION 'Missing history table %', v_history_table;
   END IF;
   
   cmd:=cmd||cmd_cols||'mod_date, mod_user) select '||cmd_cols||
        'now(),''' || p_dbtrans_username_pt || ''' FROM ' ||
        quote_ident(p_tblName);

   EXECUTE cmd;
   
   GET DIAGNOSTICS affected_count = ROW_COUNT;
   IF affected_count=0 THEN
      RAISE EXCEPTION 'Row not found while trying to update %', quote_ident(p_tblName);
   END IF;

   RETURN seq_val;
EXCEPTION WHEN SQLSTATE '22004' THEN
    RAISE NOTICE 'It may be the number of columns is not equal to the number of values. One of the query string arguments of EXECUTE is null.  SQL state:22004';
END;
$$;


ALTER FUNCTION mrsdba.mrs_insert_row(p_tblname character varying, p_key_col character varying, p_key_col_seq_name character varying, p_cols character varying[], p_vals character varying[], p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_insert_trgt_enrllmnt_note_f(numeric, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_insert_trgt_enrllmnt_note_f(p_study_id numeric, p_dbuser character varying, p_enrollment numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
	INSERT INTO mrs_trgt_enrllmnt_temp 
		(dbuser, 
		study_id,
		date,
		enrollment)
	VALUES
		(p_dbuser,
		p_study_id,
		now(),
		p_enrollment);


  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_insert_trgt_enrllmnt_note_f(p_study_id numeric, p_dbuser character varying, p_enrollment numeric) OWNER TO postgres;

--
-- Name: mrs_match_email_confirmation_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_match_email_confirmation_f(p_email_code character varying, p_dbtrans_username_pt character varying) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
   IF EXISTS (SELECT 1 FROM mrs_subjects WHERE email_address_confirmation_code = p_email_code) THEN
      UPDATE mrs_subjects
      SET 
         email_address_confirmation_code = NULL,
         email_address_confirmed_date = NULL,
         email_address_confirmed = true,
         is_p2_active = true
      WHERE email_address_confirmation_code = p_email_code;
      
      INSERT INTO mrs_subjects_hist (
         usid                        
         , email_address_confirmation_code
         , email_address_confirmed_date
         , email_address_confirmed
         , is_p2_active
         , mod_user                  
         , mod_date                  
      )                              
      SELECT                       
         usid
         , email_address_confirmation_code
         , email_address_confirmed_date
         , email_address_confirmed
         , is_p2_active
         , p_dbtrans_username_pt     
         , now()                     
      FROM mrs_subjects
      WHERE email_address_confirmation_code = p_email_code;
   
      RETURN 't';
   ELSE

      RETURN 'f';

   END IF;

END;
$$;


ALTER FUNCTION mrsdba.mrs_match_email_confirmation_f(p_email_code character varying, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_match_person_role_det_f(character varying, numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_match_person_role_det_f(p_person_id character varying, p_role_id numeric, p_study_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
v_match_found        varchar(50);
v_row_count integer;

BEGIN

   --check if person_id, role_id, and study_id already exist. if they do, return PRD_ID
   SELECT count(1)
   INTO v_row_count
   FROM MRSDBA.MRS_PERSON_ROLE_DETAILS r
   WHERE r.person_id = p_person_id AND
         r.role_id = p_role_id AND
         r.study_id = p_study_id;
   IF v_row_count = 1
   THEN
   --return prd_id
      SELECT prd_id
      INTO v_match_found
      FROM MRSDBA.mrs_person_role_details r
      WHERE r.person_id = p_person_id AND
            r.role_id = p_role_id AND
            r.study_id = p_study_id;
   ELSE
   --return no-match
      v_match_found := 'NOPRD';

   END IF;
  RETURN v_match_found;
end;
$$;


ALTER FUNCTION mrsdba.mrs_match_person_role_det_f(p_person_id character varying, p_role_id numeric, p_study_id numeric) OWNER TO postgres;

--
-- Name: mrs_match_persons_f(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_match_persons_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_sid character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
v_match_found varchar(50);
v_row_count integer;
v_row_count_2 integer;
v_tmp       varchar(50);

c_persons CURSOR IS
  SELECT p.person_id,
               p.first_name,
               p.middle_name,
               p.last_name,
               p.site_id
            FROM MRSDBA.mrs_persons p
            WHERE UPPER(person_id) = UPPER(p_person_id) OR
               UPPER(first_name) = UPPER(p_first_name) OR
               UPPER(last_name) = UPPER(p_last_name);

BEGIN
   SELECT count (1)
   INTO v_row_count
   FROM MRSDBA.MRS_PERSONS
   WHERE UPPER(person_id) = UPPER(p_person_id) AND
         UPPER(first_name) = UPPER(p_first_name) AND
         UPPER(last_name) = UPPER(p_last_name);
--check to see if there are no exact matches for information entered
   IF v_row_count < 1
   THEN
   -- check to see if any of the information enterend matches
      SELECT count (1)
      INTO v_row_count_2
      FROM MRSDBA.MRS_PERSONS
      WHERE UPPER(person_id) = UPPER(p_person_id) OR
           UPPER(first_name) = UPPER(p_first_name) OR
           UPPER(last_name) = UPPER(p_last_name);
   -- if not, there are no matches
      IF v_row_count_2 < 1
         THEN
         v_match_found := 'NOPER';
   -- if yes, populate a temporary view with the matches for the app user to select from
      ELSE
        v_match_found := 'MULTIPER';
        v_tmp := MRSDBA.MRS_DELETE_MATCHED_PER_F(p_sid);
         FOR i in c_persons
         LOOP
         INSERT INTO mrs_person_match_tmp(session_id, person_id, first_name, middle_name, last_name, site_id)
         VALUES (p_sid,i.person_id, i.first_name, i.middle_name, i.last_name, i.site_id);
         END LOOP;
      END IF;
--check to see if there is one exact match for information entered (multiple matches are impossible)
   ELSIF v_row_count = 1
   THEN
         v_match_found := 'EXACTPER';
END IF;
RETURN v_match_found;
end;
$$;


ALTER FUNCTION mrsdba.mrs_match_persons_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_sid character varying) OWNER TO postgres;

--
-- Name: mrs_match_subject_f(character varying, character varying, character varying, timestamp without time zone, character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_match_subject_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_ext_id numeric, p_identifier character varying, p_match_level character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_match_found        varchar(50);
  v_str_match_level    numeric(3);
  v_date_match_level   numeric(1);
  v_exact_match        boolean := false;

   c_match_levels CURSOR (cml_level mrs_configs.config_label%TYPE) is
   SELECT config_label, config_value
     FROM mrs_configs
    WHERE group_label = 'MATCH_LEVELS'
      AND config_label IN (
           'STR_MATCH_'||cml_level,
           'DATE_MATCH_'||cml_level
          );

   c_subjects CURSOR IS
   SELECT decrypt_str(s.first_name) first_name,
          decrypt_str(s.last_name) last_name,
          s.birth_date birth_date,
          s.gender gender,
          s.ursi ursi,
          a.line1 line1
     FROM mrs_subjects s,
          mrs_addresses a
    WHERE s.ursi = a.ursi;

  c_subject_ext_ids CURSOR (csei_ext_id  mrs_subject_external_details.ext_id%TYPE,
                           csei_ursi    mrs_subject_external_details.ursi%TYPE
  ) IS
   SELECT decrypt_str(ised.identifier) identifier
     FROM mrs_subject_external_details ised, mrs_subjects s
    WHERE s.ursi = ised.ursi
      AND s.ursi = csei_ursi
      AND ised.ext_id = csei_ext_id;

BEGIN
  -- Validate param values
  IF p_first_name IS NULL OR
     p_last_name IS NULL OR
     p_birthdate IS NULL OR
     p_gender IS NULL OR
     p_match_level IS NULL THEN
   RAISE EXCEPTION 'First name, Last name, Birthdate, Gender, and Match Level are required to perform subject match search';
  END IF;

  -- Get match level from database
  FOR i IN c_match_levels(p_match_level)
  LOOP
    IF UPPER(i.config_label) = 'STR_MATCH_'||UPPER(p_match_level) THEN
      v_str_match_level := TO_NUMBER(i.config_value);
    ELSIF UPPER(i.config_label) = 'DATE_MATCH_'||UPPER(p_match_level) THEN
      v_date_match_level := TO_NUMBER(i.config_value);
    END IF;
  END LOOP;

  -- Validate config values
  IF v_str_match_level IS NULL OR
     v_date_match_level IS NULL THEN
    RAISE EXCEPTION 'Match Level config parameters have not been set up for level % ',p_match_level;
  END IF;

  -- Search for a match
  BEGIN
    FOR i IN c_subjects
    LOOP
      -- Determine if current subject in loop is a possible match
      IF p_identifier IS NOT NULL THEN
        FOR csei IN c_subject_ext_ids(p_ext_id,i.ursi)
        LOOP
          IF mrs_matchstr_f(replace(p_identifier,'-',''),
                            replace(csei.identifier,'-',''),
                            90) THEN
            IF mrs_matchdate_f(p_birthdate,i.birth_date,v_date_match_level) THEN
              insert into mrs_subject_match_tmp(session_id,ursi,first_name,last_name,
                                                address_line1,transaction_date)
              values (p_sid,i.ursi,i.first_name,i.last_name,i.line1,now());
              v_match_found := 'MATCH_FOUND';
            END IF; -- p_birthdate
          ELSE -- p_identifier is not matched
            IF mrs_matchdate_f(p_birthdate,i.birth_date,v_date_match_level) THEN
              IF UPPER(p_gender) = i.gender THEN
                IF mrs_matchstr_f(p_last_name, i.last_name, v_str_match_level) OR
                   SOUNDEX(p_last_name) = SOUNDEX(i.last_name) THEN
                  IF mrs_matchstr_f(p_first_name, i.first_name, v_str_match_level) OR
                     SOUNDEX(p_first_name) = SOUNDEX(i.first_name) THEN
                    INSERT INTO mrs_subject_match_tmp(session_id,ursi,first_name,
                                                      last_name,address_line1,transaction_date)
                    VALUES (p_sid,i.ursi,i.first_name,i.last_name,i.line1,now());
                    v_match_found := 'MATCH_FOUND';
                    IF TRUNC(p_birthdate) = TRUNC(i.birth_date) AND
                       UPPER(p_gender) = UPPER(i.gender) AND
                       UPPER(p_last_name) = UPPER(i.last_name) AND
                       UPPER(p_first_name) = UPPER(i.first_name) THEN
                      v_exact_match := true;
                    END IF;
                  END IF; -- p_first_name
                END IF; -- p_last_name
              END IF; -- p_gender
            END IF; -- p_birthdate
          END IF; -- p_identifier is matched
        END LOOP; --csei cursor
      ELSE -- p_identifier is null
        IF mrs_matchdate_f(p_birthdate,i.birth_date,v_date_match_level) THEN
          IF UPPER(p_gender) = i.gender THEN
            IF mrs_matchstr_f(p_last_name, i.last_name, v_str_match_level) OR
               SOUNDEX(p_last_name) = SOUNDEX(i.last_name) THEN
              IF mrs_matchstr_f(p_first_name, i.first_name, v_str_match_level) OR
                 SOUNDEX(p_first_name) = SOUNDEX(i.first_name) THEN
                INSERT INTO mrs_subject_match_tmp(session_id,ursi,first_name,last_name,
                                                  address_line1,transaction_date)
                VALUES (p_sid,i.ursi,i.first_name,i.last_name,i.line1,now());
                v_match_found := 'MATCH_FOUND';
                IF TRUNC(p_birthdate) = TRUNC(i.birth_date) AND
                   UPPER(p_gender) = UPPER(i.gender) AND
                   UPPER(p_last_name) = UPPER(i.last_name) AND
                   UPPER(p_first_name) = UPPER(i.first_name) THEN
                  v_exact_match := true;
                END IF;
              END IF; -- p_first_name
            END IF; -- p_last_name
          END IF; -- p_gender
        END IF; -- p_birthdate
      END IF; -- p_identifier
    END LOOP;

    IF v_exact_match THEN
      v_match_found := 'EXACT_MATCH';
    END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
  END;

  RETURN v_match_found;
END;
$$;


ALTER FUNCTION mrsdba.mrs_match_subject_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_ext_id numeric, p_identifier character varying, p_match_level character varying) OWNER TO postgres;

--
-- Name: mrs_matchdate_f(date, date, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_matchdate_f(p1 date, p2 date, p1_elements_to_match numeric) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_p1_mm         varchar(2);
  v_p1_dd         varchar(2);
  v_p1_yyyy       varchar(4);
  v_p2_mm         varchar(2);
  v_p2_dd         varchar(2);
  v_p2_yyyy       varchar(4);
  v_match         numeric(1) := 0;
begin
  v_p1_mm   := to_char(p1,'MM');
  v_p1_dd   := to_char(p1,'DD');
  v_p1_yyyy := to_char(p1,'YYYY');
  v_p2_mm   := to_char(p2,'MM');
  v_p2_dd   := to_char(p2,'DD');
  v_p2_yyyy := to_char(p2,'YYYY');

  if v_p1_mm = v_p2_mm then
    v_match := v_match + 1;
  end if;

  if v_p1_dd = v_p2_dd then
    v_match := v_match + 1;
  end if;

  if v_p1_yyyy = v_p2_yyyy then
    v_match := v_match + 1;
  end if;

  if v_match >= p1_elements_to_match  then
    return true;
  else
    return false;
  end if;
end;
$$;


ALTER FUNCTION mrsdba.mrs_matchdate_f(p1 date, p2 date, p1_elements_to_match numeric) OWNER TO postgres;

--
-- Name: mrs_matched_subjects_f(character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, numeric, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_matched_subjects_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_area_code character varying, p_phone_number character varying, p_email character varying, p_subject_tag_id numeric, p_encrypted_tag_value character varying, p_match_style character varying, p_key character varying, p_iv character varying, p_site_id character varying, p_user_study_ids character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
   /*
      -------------------------------------------------------------------------

      -- Provides a way for webapp to check for subject matches
      -- Should be executable by webapp
      --
      -- used in two ways:
      --    1) use all the input to find the closest match or fastest match p_match_style='less'
      --    2) use each of the input parameters to find any close match on that input p_match_style='more'
      -- Defaults to 'more' hits.
      --
      -- jl: 07-28-2005
      -- Significant differences from Bobby's version:
      -- 1) relaxed matching algorithm, errs toward false positives when given names only
      -- 2) will handle nulls if sent and work with what it gets. However, gender is required except when
      -- searching by external id.

      -- jl: 08-15-2006
      -- Updated selection of subjects so that it is conditional on birthdate
      -- if a birthdate is provided the set of subjects will be narrowed to that
      -- otherwise it will be all subjects
      -- added p_match_style as the use of this was diverging

      -- jl: 02-22-2007
      -- address record line1 is no longer considered in matching as an address is no longer required
      -- for subjects.

      -- jl: 07-10-2007
      -- call to matchstr_f on line 166 replaced with simple string compare because we want an exact match on external id.
      -- matchstr_f with matchlevel at 90 was finding false matches.

      -- acs: 06-30-2008
      -- added support for address line1 and birth_date for PHI linkage project 1 and 2

      -- Dylan Wood: 07-24-2010
      -- modified to support (partial) app-side de/encryption and postgres

      -- rw: 12-09-2013
      -- modified to prevent cross-site matching

      -- Dylan Wood: 01-21-2014
      -- Formatted to have propper whitespace

      -- Dylan Wood: 01-21-2014
      -- Modified to support new subject tag schema

      -- Dylan Wood: 02-15-2015
      -- Modify to match across sites if subject is in user's study
      
      -- Cory Reed: 06-18-2015
      -- Add email parameter, search functionality
   */

   DECLARE 
      v_match_found        character varying(50);    -- variable to store return message
      v_match_level        numeric(3) := 90; -- matchlevel to feed into "mrs_matchstr_f()"
      v_first_name         character varying(50);
      v_last_name          character varying(50);
      v_tag_value          character varying(50);
      v_gender             character varying(50);
      v_area_code          character varying(3);
      v_phone_number       character varying(8);
      v_email              character varying(50);
      v_ret                character varying(50) := '';
      v_subject_tag_count   int;
      v_usid_found         varchar[];

      subject_match_cv  CURSOR (
         c_birthdate timestamp without time zone
         , c_gender character varying
         , c_phone_number character varying
         , c_area_code character varying
         , c_email character varying
         , c_match_style character varying
         , c_site_id character varying)
         FOR SELECT 
            mrs_get_header(s.first_name, p_key, p_iv) as first_name
            , mrs_get_header(s.last_name, p_key, p_iv) as last_name
            , mrs_get_header(s.suffix, p_key, p_iv) as suffix
            , s.birth_date as birth_date
            , s.gender as gender
            , s.usid as usid
            , a.line1 as address_line1
            , p.area_code
            , p.phone_num
            , s.email_address as email
         FROM  mrs_subjects s 
            LEFT JOIN mrs_addresses a ON s.usid = a.usid
            LEFT JOIN mrs_subject_phone_details d ON s.usid = d.usid
            LEFT JOIN mrs_phones p ON p.phone_id = d.phone_id   
         WHERE (
                s.site_id = c_site_id
                OR s.usid IN (
                    SELECT DISTINCT USID
                    FROM mrs_subject_details_vw
                    WHERE study_id IN (
                        SELECT study_id
                        FROM cas_user_study_privs_tmp
                        WHERE session_id = p_sid
                   )
                )
            )
            AND CASE WHEN (c_gender is not null and c_match_style = 'less') 
               THEN s.gender =  c_gender 
               ELSE true  
               END
            AND CASE WHEN (c_birthdate is not null and c_match_style = 'less') 
               THEN s.birth_date =  c_birthdate 
               ELSE true  
               END
            AND CASE WHEN (c_phone_number is not null and c_match_style = 'less')
               THEN replace(p.phone_num, '-', '') = c_phone_number and p.area_code = c_area_code
               ELSE true
               END
            AND CASE WHEN (c_email is not null and c_match_style = 'less')
               THEN s.email_address =  c_email
               ELSE true
               END;

   BEGIN
      -- First, delete any user privs already present for this session id
      DELETE FROM cas_user_study_privs_tmp WHERE session_id = p_sid;

      -- Add studies that user has access to to tmp_table
      EXECUTE '
          INSERT INTO cas_user_study_privs_tmp (session_id, study_id, insert_date) 
          SELECT $1, study_id, now()
          FROM mrs_studies
          WHERE study_id IN (' || p_user_study_ids || ');'
     USING p_sid;

      /* get a record set of subjects */
      v_first_name := NULLIF(p_first_name, '');
      v_last_name := NULLIF(p_last_name, '');
      v_gender := NULLIF(p_gender, '');
      v_phone_number := NULLIF(p_phone_number, '');
      v_area_code := NULLIF(p_area_code, '');
      v_email := NULLIF(p_email, '');
      v_tag_value := NULLIF(p_encrypted_tag_value, '');
      
      -- decrypt first, last name
      IF v_first_name IS NOT NULL THEN
         SELECT mrs_get_header(p_first_name, p_key, p_iv) into v_first_name;
      END IF;
      IF v_last_name IS NOT NULL THEN
         SELECT mrs_get_header(p_last_name, p_key, p_iv) into v_last_name;
      END IF;


      -- check tag value first, if provided
      IF v_tag_value IS NOT NULL THEN
         EXECUTE '
            INSERT INTO mrs_subject_match_tmp(session_id,usid,first_name,last_name,suffix,address_line1,transaction_date,birth_date)
            (SELECT $1
               , std.usid
               , mrs_get_header(s.first_name, $5, $6) as first_name
               , mrs_get_header(s.last_name, $5, $6) as last_name
               , mrs_get_header(s.suffix, $5, $6) as suffix
               , a.line1 as address_line1
               , now()
               , s.birth_date as birth_date
            FROM mrs_subjects s
               INNER JOIN mrs_subject_tag_details_vw std
                  ON s.usid = std.usid
               LEFT JOIN mrs_addresses a ON s.usid = a.usid
            WHERE 
               std.subject_tag_id = $2
               AND (std.study_id IS NULL OR std.study_id IN (' || p_user_study_ids || '))
               AND (std.site_id IS NULL OR std.site_id IN ($3))
               AND trim(std.value) = trim($4)
               AND (
                    s.site_id = $3
                    OR s.usid IN (
                        SELECT DISTINCT USID
                        FROM mrs_subject_details_vw
                        WHERE study_id IN (
                            SELECT study_id
                            FROM cas_user_study_privs_tmp
                            WHERE session_id = $1
                        )
                    )
                )
            )'
         USING p_sid, p_subject_tag_id, p_site_id, v_tag_value, p_key, p_iv;
         GET DIAGNOSTICS v_subject_tag_count = ROW_COUNT;
         IF v_subject_tag_count > 0 THEN
            v_ret := 'MATCH_FOUND';
            SELECT INTO v_usid_found array_agg(DISTINCT usid) FROM mrs_subject_match_tmp WHERE session_id = p_sid; 
            -- in a 'less' query assume that an external id is good and all we need 
            IF p_match_style = 'less' 
              THEN
                  RETURN v_ret;
            END IF;
         END IF;
      END IF;

      -- check subject info match
      IF v_first_name IS NOT NULL OR v_last_name IS NOT NULL OR p_birthdate IS NOT NULL OR v_gender IS NOT NULL OR v_phone_number IS NOT NULL OR v_email IS NOT NULL THEN
         FOR subject_match_record IN subject_match_cv (p_birthdate, v_gender, v_phone_number, v_area_code, v_email, p_match_style, p_site_id) LOOP
            IF p_match_style = 'more' THEN
               /* call it a 'more' match if
                  1) the birth_date match
                  2) the phone number match
                  3) the last and first names are close
                  4) the last or fist name is close, if only one of them is provided
                  5) ext id matches
                  - gender always considered
               */
               IF ((v_gender IS NULL OR v_gender = subject_match_record.gender) 
                     AND (
                                 -- check birthdate match
                              (p_birthdate IS NOT NULL AND p_birthdate = subject_match_record.birth_date)
                                 -- check phone number match
                           OR   (v_phone_number IS NOT NULL AND p_phone_number = replace(subject_match_record.phone_num, '-','') AND p_area_code = subject_match_record.area_code)
                                 -- check both first and last name match, if provided
                           OR   (v_first_name IS NOT NULL AND v_last_name IS NOT NULL
                                 AND ( levenshtein(lower(v_first_name), lower(subject_match_record.first_name)) < 1 OR SOUNDEX(v_first_name) = SOUNDEX(subject_match_record.first_name) )
                                 AND ( levenshtein(lower(v_last_name), lower(subject_match_record.last_name)) < 1 OR SOUNDEX(v_last_name) = SOUNDEX(subject_match_record.last_name) ) )
                                 -- check first name match, if last name not provided
                           OR (v_first_name IS NOT NULL AND v_last_name IS NULL 
                                 AND ( levenshtein(lower(v_first_name), lower(subject_match_record.first_name)) < 1 OR SOUNDEX(v_first_name) = SOUNDEX(subject_match_record.first_name) ) )
                                 -- check last name match, if first name not provided
                           OR   (v_last_name IS NOT NULL AND v_first_name IS NULL
                                 AND ( levenshtein(lower(v_last_name), lower(subject_match_record.last_name)) < 1 OR SOUNDEX(v_last_name) = SOUNDEX(subject_match_record.last_name) ) )
                                 -- check email match
                           OR   (v_email IS NOT NULL AND v_email = subject_match_record.email)
                        ))
                     THEN v_match_found := 'MATCH_FOUND';
               END IF;
            ELSIF p_match_style = 'less' THEN
               --call it a 'less' match if
               --we find records that match on every parameter provided
               IF (
                     (v_last_name IS NULL OR levenshtein(lower(v_last_name), lower(subject_match_record.last_name)) < 1 OR SOUNDEX(v_last_name) = SOUNDEX(subject_match_record.last_name))
                     AND 
                     (v_first_name IS NULL OR levenshtein(lower(v_first_name), lower(subject_match_record.first_name)) < 1 OR SOUNDEX(v_first_name) = SOUNDEX(subject_match_record.first_name))
                     AND
                     (v_email IS NULL OR v_email = subject_match_record.email)
                  )
                  THEN v_match_found := 'MATCH_FOUND';
               END IF;

            END IF;
      
            -- add to match stack if match found
            IF v_match_found = 'MATCH_FOUND' --AND subject_match_record.usid != all(v_usid_found)
               THEN
                  IF v_usid_found @> ARRAY[subject_match_record.usid] THEN
                       -- do nothing
                  ELSE                
                     INSERT INTO mrs_subject_match_tmp(session_id,usid,first_name,last_name,suffix,address_line1,transaction_date,birth_date, area_code, phone_num)
                     VALUES (p_sid
                            , subject_match_record.usid
                            , subject_match_record.first_name
                            , subject_match_record.last_name
                            , subject_match_record.suffix
                            , subject_match_record.address_line1
                            , now()
                            , subject_match_record.birth_date
                            , subject_match_record.area_code
                            , subject_match_record.phone_num);
                     -- reset v_match_found
                     v_match_found := '';
                     v_ret := 'MATCH_FOUND';
                     v_usid_found := v_usid_found || subject_match_record.usid;
                  END IF;
             END IF;
         END LOOP;
      END IF; 
      --return empty string if no match found
      -- otherwise return string 'MATCH_FOUND'
      RETURN v_ret;
   END;
$_$;


ALTER FUNCTION mrsdba.mrs_matched_subjects_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_area_code character varying, p_phone_number character varying, p_email character varying, p_subject_tag_id numeric, p_encrypted_tag_value character varying, p_match_style character varying, p_key character varying, p_iv character varying, p_site_id character varying, p_user_study_ids character varying) OWNER TO ni_developers;

--
-- Name: mrs_matchstr_f(character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_matchstr_f(p1 character varying, p2 character varying, p1_pct numeric) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_p1_pct        numeric(3,2) := p1_pct/100;
  v_substr_size   int;
  v_match         numeric(1) := 0;
  v_large_str     varchar(2000);
  v_small_str     varchar(2000);
begin
  --Validate params
  if p1 is null or
     p2 is null or
     p1_pct is null then
    return false;
  end if;

  --Find the largest string
  if length(p1) > length(p2) then
    v_large_str := upper(p1);
    v_small_str := upper(p2);
  else
    v_large_str := upper(p2);
    v_small_str := upper(p1);
  end if;

  -- Always compare the small string to the large string.
  v_substr_size := round((length(v_large_str)*v_p1_pct)); --Rounds to nearest whole number
  for i in 1..(length(v_large_str) - v_substr_size + 1)
  loop
    if v_small_str like '%'||substring(v_large_str,i,v_substr_size)||'%' then
      v_match := 1;
    end if;

    exit when v_match > 0; --Stop as soon as a match is found
  end loop;

  if v_match > 0 then
    return true;
  else
    return false;
  end if;
end;
$$;


ALTER FUNCTION mrsdba.mrs_matchstr_f(p1 character varying, p2 character varying, p1_pct numeric) OWNER TO postgres;

--
-- Name: mrs_mcic_round_rule(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_mcic_round_rule(p_number numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
 declare
 v_retvalue varchar(12);
 BEGIN
  IF p_number < 1 THEN
     IF p_number < .01 THEN
        v_retvalue := '.';
     ELSIF p_number <= .25 THEN
      v_retvalue := '.25';
     ELSIF p_number > .25 and p_number <= .50 THEN
      v_retvalue := .50;
     ELSIF p_number > .50 and p_number <= .75 THEN
      v_retvalue := '.75';
     ELSIF p_number > .75 THEN
      v_retvalue := '1.0';
     ELSE
      v_retvalue := 'Error in mrs_mcic_round_rule';
     END IF;
     
  ELSE
     v_retvalue := ROUND(p_number);
  end if;
  RETURN v_retvalue;
 END;
$$;


ALTER FUNCTION mrsdba.mrs_mcic_round_rule(p_number numeric) OWNER TO postgres;

--
-- Name: mrs_merge_recruitment_subjects_f(character varying, character varying, character varying[], character varying[], character varying[], character varying[], character varying[], character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_merge_recruitment_subjects_f(p_from_usid character varying, p_to_usid character varying, p_from_subject_columns character varying[], p_from_subject_values character varying[], p_from_address_columns character varying[], p_from_address_values character varying[], p_from_phone_ids character varying[], p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        DECLARE
            v_to_address_id numeric;
            v_query character varying;
            v_keep_phone boolean;
            v_row_id numeric;
            v_phone_columns character varying[];
        BEGIN
            IF (SELECT COUNT(*) FROM mrs_subject_details_active_vw 
                WHERE study_id IN
                   (SELECT da.study_id 
                      FROM mrs_subject_details_active_vw da
                      WHERE usid = p_to_usid
                   ) 
                AND usid = p_from_usid) > 0
            THEN
                RETURN 'study conflict';
            END IF;
            IF p_from_subject_values IS NOT NULL THEN
                PERFORM mrs_update_row('mrs_subjects',
                    ARRAY['usid'],
                    ARRAY[p_to_usid],
                    p_from_subject_columns,
                    p_from_subject_values,
                    p_mod_user
                );
            END IF;
            IF p_from_address_values IS NOT NULL THEN
                SELECT address_id INTO v_to_address_id
                FROM mrs_addresses
                WHERE usid = p_to_usid;
                IF NOT FOUND THEN
                    -- create a temp entry so we
                    -- dont have to loop
                    PERFORM mrs_add_address_f(
                        p_to_usid,
                        '',
                        '',
                        '',
                        '',
                        '',
                        NULL,
                        p_mod_user
                    );
                    SELECT address_id INTO v_to_address_id
                    FROM mrs_addresses
                    WHERE usid = p_to_usid;
                    PERFORM mrs_update_row('mrs_addresses',
                        ARRAY['address_id'],
                        ARRAY[v_to_address_id]::character varying[],
                        p_from_address_columns,
                        p_from_address_values,
                        p_mod_user
                    );
                ELSE
                    PERFORM mrs_update_row('mrs_addresses',
                        ARRAY['address_id'],
                        ARRAY[v_to_address_id]::character varying[],
                        p_from_address_columns,
                        p_from_address_values,
                        p_mod_user
                    );
                END IF;
            END IF;
            IF p_from_phone_ids IS NOT NULL THEN
                -- update the phones
                FOR phone_id IN 1..array_upper(p_from_phone_ids, 1)
                LOOP
                    PERFORM mrs_update_row('mrs_subject_phone_details',
                        ARRAY['phone_id'],
                        ARRAY[p_from_phone_ids[phone_id]],
                        ARRAY['usid'],
                        ARRAY[p_to_usid],
                        p_mod_user
                    );
                END LOOP;
                -- delete old phones as max is 3
                FOR v_row_id IN SELECT phone_id FROM mrs_subject_phone_details WHERE usid = p_from_usid OR usid = p_to_usid
                LOOP
                    v_keep_phone := false;
                    FOR ndx IN 1..array_upper(p_from_phone_ids,1) LOOP
                        IF p_from_phone_ids[ndx]::numeric = v_row_id THEN 
                            v_keep_phone := true;
                        END IF;
                    END LOOP;
                    IF v_keep_phone IS FALSE THEN
                        PERFORM mrs_delete_phone_f(v_row_id, p_mod_user);
                    END IF;
                END LOOP;
            ELSE
                -- no from phones were choosen, delete them
                FOR v_row_id IN SELECT phone_id FROM mrs_subject_phone_details WHERE usid = p_from_usid
                LOOP
                    PERFORM mrs_delete_phone_f(v_row_id, p_mod_user);
                END LOOP;
            END IF;
            --transfer data to new usid
            INSERT INTO mrs_subject_logins_hist (usid, login_id, mod_user, mod_date)
            SELECT p_to_usid, login_id, p_mod_user, now()
            FROM mrs_subject_logins
            WHERE usid = p_from_usid;

            UPDATE mrs_subject_logins
            SET usid = p_to_usid
            WHERE usid = p_from_usid;

            INSERT INTO mrs_subject_contacts_hist (usid, subject_contact_id, mod_user, mod_date)
            SELECT p_to_usid, subject_contact_id, p_mod_user, now()
            FROM mrs_subject_contacts
            WHERE usid = p_from_usid;

            UPDATE mrs_subject_contacts
            SET usid = p_to_usid
            WHERE usid = p_from_usid;

            INSERT INTO mrs_subjects_racial_categ_hist (usid, racial_category_id, mod_user, mod_date)
            SELECT p_to_usid, racial_category_id, p_mod_user, now()
            FROM mrs_subjects_racial_categories
            WHERE usid = p_from_usid;

            UPDATE mrs_subjects_racial_categories
            SET usid = p_to_usid
            WHERE usid = p_from_usid;

            INSERT INTO mrs_subject_tag_details_hist (usid, subject_tag_id, mod_user, mod_date)
            SELECT p_to_usid, subject_tag_id, p_mod_user, now()
            FROM mrs_subject_tag_details
            WHERE usid = p_from_usid;

            UPDATE mrs_subject_tag_details
            SET usid = p_to_usid
            WHERE usid = p_from_usid;

            INSERT INTO mrs_subject_type_details_hist (usid, subject_type_id, mod_user, mod_date)
            SELECT p_to_usid, subject_type_id, p_mod_user, now()
            FROM mrs_subject_type_details
            WHERE usid = p_from_usid;

            UPDATE mrs_subject_type_details
            SET usid = p_to_usid
            WHERE usid = p_from_usid;

            INSERT INTO mrs_addresses_hist (usid, address_id, mod_user, mod_date)
            SELECT p_from_usid, address_id, p_mod_user, now()
            FROM mrs_addresses
            WHERE usid = p_from_usid;

            DELETE FROM mrs_addresses
            WHERE usid = p_from_usid;

            INSERT INTO mrs_subject_class_details_hist (usid, subject_class_id, mod_user, mod_date)
            SELECT p_from_usid, subject_class_id, p_mod_user, now()
            FROM mrs_subject_class_details
            WHERE usid = p_from_usid;

            DELETE FROM mrs_subject_class_details
            WHERE usid = p_from_usid;

            -- now safe to delete usid
            INSERT INTO mrs_subjects_hist (usid, mod_user, mod_date)
            SELECT usid, p_mod_user, now()
            FROM mrs_subjects
            WHERE usid = p_from_usid;

            DELETE FROM mrs_subjects
            WHERE usid = p_from_usid;

            RETURN 'merged';
        END;
    $$;


ALTER FUNCTION mrsdba.mrs_merge_recruitment_subjects_f(p_from_usid character varying, p_to_usid character varying, p_from_subject_columns character varying[], p_from_subject_values character varying[], p_from_address_columns character varying[], p_from_address_values character varying[], p_from_phone_ids character varying[], p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_merge_ursis_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_merge_ursis_f(p_fromursi character varying, p_toursi character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_toUsid     mrs_subjects.usid%type;
      v_fromUsid   mrs_subjects.usid%type;
      v_subject_tag_details_row RECORD; 
   BEGIN
      /* get the To USID */
      SELECT DISTINCT usid
      INTO STRICT v_toUsid
      FROM mrsdba.mrs_subject_type_details
      WHERE ursi = p_toUrsi;

      /* save history */
      INSERT INTO mrs_subject_type_details_hist (
         ursi
         , subject_type_id
         , mod_user
         , mod_date
         , enrolled_date
         , disenrolled_Date
         , notes
         , isphilinked
         , usid
         , ethnic_category
         , subject_type_detail_id
      )
      SELECT 
         ursi
         , subject_type_id
         , p_dbtrans_username_pt
         , now()
         , enrolled_date
         , disenrolled_date
         , notes
         , isphilinked
         , usid
         , ethnic_category
         , subject_type_detail_id
      FROM mrs_subject_type_details
      WHERE ursi = p_fromUrsi;

      /* get the From USID */
      SELECT DISTINCT usid
      INTO STRICT v_fromUsid
      FROM mrs_subject_type_details
      WHERE ursi = p_fromUrsi;

      /* merge the From URSI into the To URSI by 
      changing From URSI's USID to the To URSI's
      USID */
      UPDATE mrs_subject_type_details
      SET usid = v_toUsid
      WHERE ursi = p_fromUrsi;

      /* remove tag_detail for from Usid (there's a FK constraint */
      FOR v_subject_tag_details_row IN 
         SELECT * 
         FROM mrs_subject_tag_details
         WHERE USID = v_fromUsid
      LOOP
         PERFORM mrs_deassign_subject_tag_detail_f(
         v_subject_tag_details_row.subject_tag_details_id
         , p_dbtrans_username_pt 
         );
      END LOOP;

      /* save subject's address */
      INSERT INTO mrs_addresses_hist (
         address_id
         , line1
         , line2
         , city
         , state
         , zip
         , country
         , notes
         , start_date
         , end_date
         , usid
         , mod_user
         , mod_date
      )
      SELECT 
         address_id
         , line1
         , line2
         , city
         , state
         , zip
         , country
         , notes
         , start_date
         , end_date
         , usid
         , p_dbtrans_username_pt
         , now()
      FROM mrs_addresses
      WHERE usid = v_fromUsid;

      /* delete the from address */
      DELETE FROM mrs_addresses WHERE usid = v_fromUsid;

      /* save from-subject's phone */
      INSERT into mrs_phones_hist (
         phone_id
         , area_code
         , phone_num
         , extension
         , notes
         , mod_user
         , mod_date
      )
      SELECT 
         phone_id
         , area_code
         , phone_num
         , extension
         , notes
         , p_dbtrans_username_pt
         , now()
      FROM mrs_phones p
      WHERE p.phone_id IN (
         SELECT phone_id 
         FROM mrs_subject_phone_details
         WHERE usid = v_fromUsid
      );

      /* delete the from-subject's phone(s) */
      DELETE FROM mrs_subject_phone_details WHERE usid = v_fromUsid; 

      /* save from-subject's history */
      INSERT INTO mrs_subjects_hist (
         usid
         , first_name
         , middle_name
         , last_name
         , site_id
         , gender
         , birth_date
         , entered_date
         , user_entered
         , mod_user
         , mod_date
      )
      SELECT
         usid
         , first_name
         , middle_name
         , last_name
         , site_id
         , gender
         , birth_date
         , entered_date
         , user_entered
         , p_dbtrans_username_pt
         , now()
      FROM mrs_subjects
      WHERE usid = v_fromUsid;

      /* change the racial categories over from the from-ursi to the to-ursi */
      INSERT INTO mrs_subjects_racial_categ_hist (
         racial_category_id
         , mod_user
         , mod_date
         , usid
         , subject_type_detail_id
      )
      SELECT 
         racial_category_id
         , p_dbtrans_username_pt
         , now()
         , usid
         , subject_type_detail_id
      FROM mrs_subjects_racial_categories 
      WHERE usid = v_fromUsid;

      UPDATE mrs_subjects_racial_categories
      SET usid = v_toUsid
      WHERE usid = v_fromUsid;

      /*update any references to the fromUsid in the subject_logins function...
      */
      INSERT INTO mrsdba.mrs_subject_logins_hist (
         login_id
         , usid
         , study_id
         , subject_id
         , source_type
      )
      select 
         login_id
         , v_toUsid
         , study_id
         , subject_id
         , source_type
      FROM mrs_subject_logins
      WHERE usid = v_fromUsid;


      UPDATE mrs_subject_logins
      SET usid = v_toUsid
      WHERE usid = v_fromUsid;


      /* remove the from-subject's record 
      to prevent it from being used during enrollment */

      DELETE FROM mrs_subjects WHERE usid = v_fromUsid;

      RETURN v_toUsid;

   END;
$$;


ALTER FUNCTION mrsdba.mrs_merge_ursis_f(p_fromursi character varying, p_toursi character varying, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_num_to_subject_type_tf_f(character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_num_to_subject_type_tf_f(p_number character varying, p_subject_type_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_return		varchar(20);

BEGIN

  IF(p_number = 'MD' OR p_number = 'DK' OR p_number = '.') THEN
    IF p_subject_type_id in (58,60,283) THEN     /* MCIC Controls (harcoded for speed)*/
      v_return := 'F';
    ELSE
      v_return := '.';
    END IF;
  ELSIF (p_number='T') THEN
    v_return := 'T';
  ELSIF (to_numeric(p_number) > 0) THEN
    v_return := 'T';
  ELSE
    v_return := 'F';
  END IF;

  RETURN v_return;

  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR: ' || SQLERRM;

end;
$$;


ALTER FUNCTION mrsdba.mrs_num_to_subject_type_tf_f(p_number character varying, p_subject_type_id numeric) OWNER TO postgres;

--
-- Name: mrs_num_to_tf_f(character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_num_to_tf_f(p_number character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_return		varchar(20);

BEGIN

  IF(p_number = 'MD' OR p_number = 'DK' OR p_number = '.') THEN
    v_return := '.';
  ELSIF (p_number='T') THEN
    v_return := 'T';
  ELSIF (to_numeric(p_number) > 0) THEN
    v_return := 'T';
  ELSE
    v_return := 'F';
  END IF;

  RETURN v_return;

  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR: ' || SQLERRM;

end;
$$;


ALTER FUNCTION mrsdba.mrs_num_to_tf_f(p_number character varying) OWNER TO postgres;

--
-- Name: mrs_populate_query_table_temp_f(); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_populate_query_table_temp_f() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare 
    record record;
    v_id    integer;
    v_id2   integer;
BEGIN
    FOR record IN SELECT * FROM mrs_saved_queries_orig 
    LOOP
        INSERT INTO mrs_saved_queries (json_strng) 
        VALUES (record.json_strng)
        RETURNING id INTO v_id; 
        
        INSERT INTO mrs_saved_queries_hist (id, json_strng, mod_user, mod_date)
        VALUES (v_id, record.json_strng, record.username, now());

        INSERT INTO mrs_saved_user_queries (username, label, query_id)
        VALUES (record.username, record.label, v_id)
        RETURNING id INTO v_id2;

        INSERT INTO mrs_saved_user_queries_hist (id, username, label, query_id, mod_user, mod_date)
        VALUES (v_id2, record.username, record.label, v_id, record.username, now());

    END LOOP;

    RETURN '1';
END;
$$;


ALTER FUNCTION mrsdba.mrs_populate_query_table_temp_f() OWNER TO ni_developers;

--
-- Name: mrs_queue_subject_assessment_f(numeric, numeric, numeric, numeric, character varying, integer, numeric, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_queue_subject_assessment_f(p_login_id numeric, p_instrument_id numeric, p_segment_interval_id numeric, p_sort_order numeric, p_mod_user character varying, p_queue_type_id integer, p_from_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE
         v_aqueue_id  numeric;
         v_queue_instrument_id  numeric;
         v_auto_queue_generated boolean;
         BEGIN
             IF p_from_protocol_id IS NOT NULL THEN
                 v_auto_queue_generated := TRUE;
             ELSE
                 v_auto_queue_generated := FALSE;
             END IF;
             --look for a parent queue
             SELECT aqueue_id into v_aqueue_id 
             FROM mrs_subject_assessments_queue
             WHERE login_id = p_login_id
             AND from_protocol_id = p_from_protocol_id;

             --No parent aqueue_id found, make one
             IF v_aqueue_id IS NULL THEN
                 INSERT INTO mrs_subject_assessments_queue(
                     from_protocol_id,
                     start_date,
                     end_date,
                     auto_queue_generated,
                     login_id
                 )
                 VALUES(
                     p_from_protocol_id,
                     p_start_date,
                     p_end_date,
                     v_auto_queue_generated,
                     p_login_id
                 );

                 SELECT CURRVAL('mrs_subject_assessments_queue_aqueue_id_seq') INTO v_aqueue_id;

                 INSERT INTO mrs_subject_assessments_queue_hist(
                     aqueue_id,
                     from_protocol_id,
                     start_date,
                     end_date,
                     auto_queue_generated,
                     mod_user,
                     mod_date
                 )
                 VALUES(
                     v_aqueue_id,
                     p_from_protocol_id,
                     p_start_date,
                     p_end_date,
                     v_auto_queue_generated,
                     p_mod_user,
                     now()
                 );
             ELSE
                 --this is for 'empty' queues in auto queuing
                 UPDATE  mrs_subject_assessments_queue
                 SET auto_queue_generated = v_auto_queue_generated
                 WHERE aqueue_id = v_aqueue_id;

                 INSERT INTO mrs_subject_assessments_queue_hist(
                     aqueue_id,
                     from_protocol_id,
                     start_date,
                     end_date,
                     mod_user,
                     mod_date
                 )
                 VALUES(
                     v_aqueue_id,
                     p_from_protocol_id,
                     p_start_date,
                     p_end_date,
                     p_mod_user,
                     now()
                 );
             END IF;

             INSERT INTO mrs_subject_assessments_queue_instruments_hist(
                 aqueue_id,
                 login_id,
                 instrument_id,
                 segment_interval_id,
                 sort_order,
                 queue_type_id,
                 mod_user,
                 mod_date
             )
             VALUES(
                 v_aqueue_id,
                 p_login_id,
                 p_instrument_id,
                 p_segment_interval_id,
                 p_sort_order,
                 p_queue_type_id,
                 p_mod_user,
                 now()
             );
             INSERT INTO mrs_subject_assessments_queue_instruments(
                 aqueue_id,
                 login_id,
                 instrument_id,
                 segment_interval_id,
                 sort_order,
                 queue_type_id
             )
             VALUES(
                 v_aqueue_id,
                 p_login_id,
                 p_instrument_id,
                 p_segment_interval_id,
                 p_sort_order,
                 p_queue_type_id
             );
             
             SELECT CURRVAL('mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq')
                INTO v_queue_instrument_id;

             RETURN v_queue_instrument_id;

         END;
         $$;


ALTER FUNCTION mrsdba.mrs_queue_subject_assessment_f(p_login_id numeric, p_instrument_id numeric, p_segment_interval_id numeric, p_sort_order numeric, p_mod_user character varying, p_queue_type_id integer, p_from_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) OWNER TO ni_developers;

--
-- Name: mrs_rdoc_coins_question_map_add_f(integer, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_rdoc_coins_question_map_add_f(p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
                INSERT INTO mrsdba.mrs_rdoc_coins_question_map(
                    coins_question_id, rdoc_inst_id, rdoc_question_short_tag, transform, transform_ui_cache
                )
                VALUES (
                    p_coins_question_id, p_rdoc_inst_id, p_rdoc_question_short_tag, p_transform, p_transform_ui_cache
                )
                RETURNING id INTO v_id;

                INSERT INTO mrs_rdoc_coins_question_map_hist(
                    id, coins_question_id, rdoc_inst_id, rdoc_question_short_tag, transform, transform_ui_cache, mod_user, mod_date
                )
                SELECT id, coins_question_id, rdoc_inst_id, rdoc_question_short_tag, transform, transform_ui_cache, p_mod_user, now()
                FROM mrs_rdoc_coins_question_map WHERE id = v_id;

                RETURN v_id;
            END;
            $$;


ALTER FUNCTION mrsdba.mrs_rdoc_coins_question_map_add_f(p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_rdoc_coins_question_map_remove_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_rdoc_coins_question_map_remove_f(p_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_deleted_count INTEGER;
            BEGIN
            v_deleted_count := 0;
            SELECT COUNT(*) FROM mrs_rdoc_coins_question_map WHERE id=p_id INTO v_deleted_count;

            IF v_deleted_count = 0 THEN
                RETURN 0;
            ELSIF v_deleted_count = 1 THEN
                INSERT INTO mrs_rdoc_coins_question_map_hist(
                    id, coins_question_id, rdoc_inst_id, rdoc_question_short_tag, transform, transform_ui_cache, mod_user, mod_date
                )
                VALUES(
                    p_id,
                    null,
                    null,
                    null,
                    null,
                    null,
                    p_mod_user,
                    now()
                );
            ELSE
                RAISE EXCEPTION 'expected 0 or 1 entities to delete. found %', v_deleted_count;
            END IF;

            DELETE FROM mrs_rdoc_coins_question_map WHERE id=p_id;

            RETURN v_deleted_count;

            END;
            $$;


ALTER FUNCTION mrsdba.mrs_rdoc_coins_question_map_remove_f(p_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_rdoc_coins_question_map_update_f(integer, integer, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_rdoc_coins_question_map_update_f(p_id integer, p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
            UPDATE mrs_rdoc_coins_question_map
            SET
            coins_question_id=p_coins_question_id,
                rdoc_inst_id=p_rdoc_inst_id,
                rdoc_question_short_tag=p_rdoc_question_short_tag,
                transform=p_transform,
                transform_ui_cache=p_transform_ui_cache
                WHERE id = p_id
            RETURNING id into v_id;

            INSERT INTO mrs_rdoc_coins_question_map_hist(
                id,
                coins_question_id,
                rdoc_inst_id,
                rdoc_question_short_tag,
                transform,
                transform_ui_cache,
                mod_user,
                mod_date
            )
            SELECT
                id,
                coins_question_id,
                rdoc_inst_id,
                rdoc_question_short_tag,
                transform,
                transform_ui_cache,
                p_mod_user,
                now()
            FROM mrs_rdoc_coins_question_map
            WHERE id = v_id;

            RETURN v_id;
            END;

            $$;


ALTER FUNCTION mrsdba.mrs_rdoc_coins_question_map_update_f(p_id integer, p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_reactivate_sharing_rule_f(numeric, character varying, timestamp without time zone, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_reactivate_sharing_rule_f(p_sharing_rule_id numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
	v_rule_exists numeric;
BEGIN

--verify that the study-rule relation does not already exist
	BEGIN
		SELECT sharing_rule_id
		INTO STRICT v_rule_exists
		FROM mrs_sharing_rules
		WHERE 
		p_sharing_rule_id = sharing_rule_id;

	EXCEPTION
		WHEN no_data_found THEN
			v_rule_exists := 0;	
	END;

	IF v_rule_exists > 0 THEN
		BEGIN
			UPDATE mrs_sharing_rules SET 
				approved_by = p_approved_by,
				approval_date = p_approval_date,
				deleted_by = null,
				deletion_date = null,
				note = p_note
			WHERE
				sharing_rule_id = p_sharing_rule_id;
				


			INSERT INTO mrs_sharing_rules_hist (
				sharing_rule_id,
				approved_by,
				approval_date,
				deleted_by,
				deletion_date,
				note,
				mod_user,
				mod_date
			)
			VALUES (
				p_sharing_rule_id,
				p_approved_by,
				p_approval_date,
				null,
				null,
				p_note,
				p_dbtrans_username_pt,
				now()
			);
		END;
	ELSE
		RETURN v_rule_exists;
	END IF;
RETURN 'SUCCESS';

END;
$$;


ALTER FUNCTION mrsdba.mrs_reactivate_sharing_rule_f(p_sharing_rule_id numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_reactivate_sharing_rule_study_f(numeric, numeric, character varying, timestamp without time zone, character varying, timestamp without time zone, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_reactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
	v_rule_exists numeric;
BEGIN

--verify that the study-rule relation does not already exist
	BEGIN
		SELECT sharing_rule_id
		INTO STRICT v_rule_exists
		FROM mrs_sharing_rules_studies
		WHERE 
		p_rule_id = sharing_rule_id AND
		p_study_id = study_id;

	EXCEPTION
		WHEN no_data_found THEN
			v_rule_exists := 0;	
	END;

	IF v_rule_exists > 0 THEN
		BEGIN
			UPDATE mrs_sharing_rules_studies SET 
				recipient_approved_by = p_recipient_approved_by,
				recipient_approval_date = p_recipient_approval_date,
				donor_approved_by = p_donor_approved_by,
				donor_approval_date = p_donor_approval_date,
				deleted_by = null,
				deletion_date = null,
				note = p_note
			WHERE
				sharing_rule_id = p_rule_id
				AND study_id = p_study_id;
				


			INSERT INTO mrs_hist (
				sharing_rule_id,
				study_id,
				recipient_approved_by,
				recipient_approval_date,
				donor_approved_by,
				donor_approval_date,
				deleted_by,
				deletion_date,
				note,
				mod_user,
				mod_date
			)
			VALUES (
				p_rule_id,
				p_study_id,
				p_recipient_approved_by,
				p_recipient_approval_date,
				p_donor_approved_by,
				p_donor_approval_date,
				null,
				null,
				p_note,
				p_dbtrans_username_pt,
				now()
			);
		END;
	ELSE
		RETURN v_rule_exists;
	END IF;
RETURN 'SUCCESS';

END;
$$;


ALTER FUNCTION mrsdba.mrs_reactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_reassign_all_section_questions_f(numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_reassign_all_section_questions_f(p_from_section numeric, p_to_section numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_max_sort     int;
BEGIN

  /* do not permit the delete of that are in use */
    BEGIN
    SELECT 
      max(sort_order) into v_max_sort
    FROM  mrs_instrument_questions
   WHERE  section_id = p_to_section;
  EXCEPTION
    WHEN no_data_found THEN
      v_max_sort := 0;
   END;
   
     UPDATE MRSDBA.mrs_instrument_questions
     SET section_id = p_to_section,
         sort_order = (v_max_sort + sort_order)
     WHERE section_id = p_from_section;
     

  RETURN '1';

END;
   
$$;


ALTER FUNCTION mrsdba.mrs_reassign_all_section_questions_f(p_from_section numeric, p_to_section numeric) OWNER TO postgres;

--
-- Name: mrs_refresh_qb_mat_views_f(); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_refresh_qb_mat_views_f() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
v_response numeric;
BEGIN

--Drop Materialized view tables
  DROP TABLE mrsdba.mrs_asmts_most_clean_mv;
  DROP TABLE mrsdba.mrs_asmts_most_complete_mv;
  DROP TABLE mrsdba.mrs_ursi_dets_mv;

--Create Tables
 
CREATE TABLE mrsdba.mrs_asmts_most_clean_mv  AS 
	--Select all 'C' records
        SELECT mrs_asmts_and_their_matches_vw.assessmentc_id as assessment_id
	FROM mrs_asmts_and_their_matches_vw 
	WHERE mrs_asmts_and_their_matches_vw.assessmentc_id is not null

	UNION ALL
	-- Select all '1' records if a 'C', 'F', and '2' record doesn't exist
        SELECT mrs_asmts_and_their_matches_vw.assessment1_id as assessment_id
        FROM mrs_asmts_and_their_matches_vw 
        WHERE mrs_asmts_and_their_matches_vw.assessment1_id is not null
		AND mrs_asmts_and_their_matches_vw.assessmentc_id is null
		AND mrs_asmts_and_their_matches_vw.assessmentf_id is null
		AND mrs_asmts_and_their_matches_vw.assessment2_id is null

	UNION ALL
	--Select all '1' records if a 'C' and 'F' record doesnt exist, and the '2' record is not complete
        SELECT mrs_asmts_and_their_matches_vw.assessment1_id as assessment_id
        FROM mrs_asmts_and_their_matches_vw 
        inner join mrsdba.mrs_assessments 
        on mrs_assessments.assessment_id = mrs_asmts_and_their_matches_vw.assessment2_id
        WHERE mrs_asmts_and_their_matches_vw.assessment1_id is not null
		AND mrs_asmts_and_their_matches_vw.assessmentc_id is null
		AND mrs_asmts_and_their_matches_vw.assessmentf_id is null
		AND mrs_asmts_and_their_matches_vw.assessment2_id is not null
		AND mrs_assessments.entry_end_date is null

	UNION ALL
	--Select all '2' records if there is no 'C' or 'F' record, and the '1' record is not complete
        SELECT mrs_asmts_and_their_matches_vw.assessment2_id as assessment_id
        FROM mrs_asmts_and_their_matches_vw 
        inner join mrsdba.mrs_assessments 
        on mrs_assessments.assessment_id = mrs_asmts_and_their_matches_vw.assessment1_id
        WHERE mrs_asmts_and_their_matches_vw.assessment1_id is not null
		AND mrs_asmts_and_their_matches_vw.assessmentc_id is null
		AND mrs_asmts_and_their_matches_vw.assessmentf_id is null
		AND mrs_asmts_and_their_matches_vw.assessment2_id is not null
		AND mrs_assessments.entry_end_date is null

	UNION ALL

        SELECT mrs_asmts_and_their_matches_vw.assessment2_id as assessment_id
        FROM mrs_asmts_and_their_matches_vw
        WHERE mrs_asmts_and_their_matches_vw.assessment2_id is not null
		AND mrs_asmts_and_their_matches_vw.assessmentc_id is null
		AND mrs_asmts_and_their_matches_vw.assessmentf_id is null

UNION ALL 
         SELECT mrs_assessments.assessment_id as assessment_id
           FROM mrsdba.mrs_assessments
          WHERE mrs_assessments.entry_username::text = 'TABLETAPP'::text 

UNION ALL 
         SELECT mrs_assessments.assessment_id as assessment_id
           FROM mrsdba.mrs_assessments
          WHERE mrs_assessments.entry_username::text = 'IMPORTAPP'::text
          ;


CREATE TABLE mrsdba.mrs_asmts_most_complete_mv AS 
        (        (        (         SELECT 
                                        CASE
                                            WHEN mrs_asmts_and_their_matches_vw.assessmentc_id IS NOT NULL THEN mrs_asmts_and_their_matches_vw.assessmentc_id
                                            WHEN mrs_asmts_and_their_matches_vw.assessmentc_id IS NULL AND mrs_asmts_and_their_matches_vw.assessmentf_id IS NULL THEN mrs_asmts_and_their_matches_vw.assessment1_id
                                            ELSE NULL::numeric
                                        END AS assessment_id
                                   FROM mrsdba.mrs_asmts_and_their_matches_vw
                        UNION ALL 
                                 SELECT mrs_asmts_and_their_matches_vw.assessment2_id AS assessment_id
                                   FROM mrsdba.mrs_asmts_and_their_matches_vw
                                  WHERE mrs_asmts_and_their_matches_vw.assessmentc_id IS NULL AND mrs_asmts_and_their_matches_vw.assessmentf_id IS NULL AND mrs_asmts_and_their_matches_vw.assessment2_id IS NOT NULL)
                UNION ALL 
                         SELECT mrs_asmts_and_their_matches_vw.assessment1_id AS assessment_id
                           FROM mrsdba.mrs_asmts_and_their_matches_vw
                          WHERE mrs_asmts_and_their_matches_vw.assessmentf_id IS NOT NULL)
        UNION ALL 
                 SELECT mrs_asmts_and_their_matches_vw.assessment2_id AS assessment_id
                   FROM mrsdba.mrs_asmts_and_their_matches_vw
                  WHERE mrs_asmts_and_their_matches_vw.assessmentf_id IS NOT NULL)
UNION ALL 
         SELECT mrs_assessments.assessment_id
           FROM mrsdba.mrs_assessments
          WHERE mrs_assessments.entry_username::text = 'TABLETAPP'::text;

CREATE TABLE mrsdba.mrs_ursi_dets_mv AS
	SELECT v1.ursi, v2.ursi as ursi_match
	FROM mrs_subject_details_vw v1
	INNER JOIN mrs_subject_details_vw v2
	ON v2.usid = v1.usid;


--create indexes

CREATE INDEX mrs_asmtcmplt_asmtid_in on mrsdba.mrs_asmts_most_complete_mv(assessment_id);

CREATE INDEX mrs_ursidets_ursi_in on mrsdba.mrs_ursi_dets_mv(ursi);

-- Alter table permissions
  ALTER TABLE mrsdba.mrs_asmts_most_clean_mv OWNER TO postgres;
  GRANT ALL ON TABLE mrsdba.mrs_asmts_most_clean_mv TO postgres;
  GRANT SELECT ON TABLE mrsdba.mrs_asmts_most_clean_mv TO "MRS_USER_ROL";

  ALTER TABLE mrsdba.mrs_asmts_most_complete_mv OWNER TO postgres;
  GRANT ALL ON TABLE mrsdba.mrs_asmts_most_complete_mv TO postgres;
  GRANT SELECT ON TABLE mrsdba.mrs_asmts_most_complete_mv TO "MRS_USER_ROL";

  ALTER TABLE mrsdba.mrs_ursi_dets_mv OWNER TO postgres;
  GRANT ALL ON TABLE mrsdba.mrs_ursi_dets_mv TO postgres;
  GRANT SELECT ON TABLE mrsdba.mrs_ursi_dets_mv TO "MRS_USER_ROL";

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_refresh_qb_mat_views_f() OWNER TO postgres;

--
-- Name: mrs_refresh_vbmqa_status_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_refresh_vbmqa_status_f(f_threshold numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    retRow RECORD;

BEGIN
    FOR retRow IN SELECT * FROM mrsdba.mrs_analysis_vbm_qa_values LOOP
        IF retRow.qa_value < f_threshold AND retRow.qa_status > 0 THEN
            UPDATE mrs_analysis_vbm_qa_values SET qa_status = 0 WHERE scan_id = retRow.scan_id;
        ELSIF retRow.qa_value >= f_threshold AND retRow.qa_status=0 THEN
            UPDATE mrs_analysis_vbm_qa_values SET qa_status = 1 WHERE scan_id = retRow.scan_id;
        END IF;

    END LOOP;

    RETURN '1';
END;$$;


ALTER FUNCTION mrsdba.mrs_refresh_vbmqa_status_f(f_threshold numeric) OWNER TO postgres;

--
-- Name: mrs_register_reserved_sub_f(character varying, character varying, character varying, character varying, numeric, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_register_reserved_sub_f(p_reserved_ursi character varying, p_check_match character varying, p_site_id character varying, p_sid character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_email_address character varying, p_notes character varying, p_ethnicity character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_dbtrans_username_pt character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_match_found  varchar(50);
    v_usid_prefix  casdba.cas_sites.ursi_prefix%TYPE;
    v_usid         mrs_subjects.usid%TYPE;
    v_ursi         mrs_subject_type_details.ursi%TYPE;
    v_site_id      mrs_subjects.site_id%TYPE;
    v_output       varchar(1);
    v_val      text;
BEGIN
    /*
     First check if ursi already in there
     */
    BEGIN
        --set search_path=mrsdba;
        SELECT ursi
        INTO v_ursi
        FROM mrs_subject_type_details
        WHERE ursi = p_reserved_ursi;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN null;
            WHEN OTHERS THEN SELECT setting FROM PG_SETTINGS WHERE name ='search_path' into v_val;
            RAISE EXCEPTION '%, %',SQLERRM, v_val;
    END;

    IF v_ursi is not null THEN
        RETURN 'URSI_FOUND';
    END IF;

    /*
     Optionally check for match on other properties
     Note that this is a more restricted match
     than addSubject()
    */
    IF (p_check_match = 'true') THEN
        v_match_found := mrs_matched_subjects_f(
            p_sid,
            p_first_name,
            p_last_name,
            p_birthdate,
            p_gender,
            cast('' as character varying),
            cast('' as character varying),
            NULL, -- email
            p_subject_tag_id,
            p_tag_value,
            cast('more' as character varying),
            p_key,
            p_iv,
            p_site_id,
            p_user_study_ids);
    END IF;

    -------------------------------------------------------------
    -- if a match has been found return that message and exit
    -------------------------------------------------------------
    IF UPPER(v_match_found) IN ('MATCH_FOUND','EXACT_MATCH') THEN
        RETURN v_match_found;
    END IF;

    ---------------------------------------------------
    -- No match found: Proceed with adding the subject
    ---------------------------------------------------

    set search_path=mrsdba;
    v_usid:=mrs_ursi_to_usid_f(p_reserved_ursi);
    -- Load data
    INSERT INTO mrs_subjects (
        usid,
        first_name,
        middle_name,
        last_name,
        site_id,
        birth_date,
        gender,
        email_address,
        entered_date,
        suffix,
        user_entered
    )
    VALUES (
        v_usid,
        p_first_name,
        p_middle_name,
        p_last_name,
        p_site_id,
        p_birthdate,
        p_gender,
        p_email_address,
        now(),
        p_suffix,
        p_dbtrans_username_pt
    );
    INSERT INTO mrs_subjects_hist (
        usid,
        first_name,
        middle_name,
        last_name,
        birth_date,
        gender,
        site_id,
        email_address,
        suffix,
        entered_date,
        user_entered,
        mod_user,
        mod_date
    )
    VALUES (
        v_usid,
        p_first_name,
        p_middle_name,
        p_last_name,
        p_birthdate,
        p_gender,
        v_site_id,
        p_email_address,
        p_suffix,
        now(),
        p_dbtrans_username_pt,
        p_dbtrans_username_pt,
        now()
    );
    -- Assign an external identifier if it was specified
    IF p_subject_tag_id IS NOT NULL AND p_tag_value IS NOT NULL THEN
        v_output := mrs_assign_subject_tag_detail_f(
            v_usid,
            p_subject_tag_id,
            p_tag_value,
            p_tag_site_id,
            p_tag_study_id,
            p_dbtrans_username_pt
        );
    END IF;

    /* Make address optional
      If line1 and city are null assume that address was not passed.
      Otherwise, attempt to add the address
    */
    if p_line1 is not null and p_city is not null and p_zip is not null then
    -- Add addresss info
    v_output := mrs_add_address_f(
        v_usid,
        p_line1,
        p_line2,
        p_city,
        p_state,
        p_zip,
        p_country,
        p_notes,
        p_dbtrans_username_pt
    );
    END IF;

    -- Return the ursi back
    RETURN p_reserved_ursi;

    EXCEPTION
        WHEN OTHERS THEN
            RAISE EXCEPTION '%',SQLERRM;
    END;
$$;


ALTER FUNCTION mrsdba.mrs_register_reserved_sub_f(p_reserved_ursi character varying, p_check_match character varying, p_site_id character varying, p_sid character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_email_address character varying, p_notes character varying, p_ethnicity character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_dbtrans_username_pt character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric) OWNER TO ni_developers;

--
-- Name: mrs_remove_protocol_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_remove_protocol_f(p_protocol_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      BEGIN


         DELETE FROM MRSDBA.MRS_protocols
         WHERE protocol_ID = P_protocol_ID;

         

         RETURN '1';
      end;
      $$;


ALTER FUNCTION mrsdba.mrs_remove_protocol_f(p_protocol_id numeric) OWNER TO postgres;

--
-- Name: mrs_remove_protocol_req_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_remove_protocol_req_f(p_protocol_req_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE 
         v_protocol_id numeric;
         v_protocol_req_count int;
      BEGIN

         SELECT protocol_id INTO v_protocol_id
         FROM mrs_protocol_requirements 
         WHERE protocol_req_id = p_protocol_req_id;

         DELETE FROM MRSDBA.MRS_PROTOCOL_REQUIREMENTS
         WHERE PROTOCOL_REQ_ID = P_PROTOCOL_REQ_ID;

         SELECT count(1) INTO v_protocol_req_count
         FROM mrs_protocol_requirements
         WHERE protocol_id = v_protocol_id;

         IF v_protocol_req_count < 1
         THEN 
         DELETE FROM mrs_protocols
         WHERE protocol_id = v_protocol_id;
         END IF;

         

         RETURN '1';
      end;
      $$;


ALTER FUNCTION mrsdba.mrs_remove_protocol_req_f(p_protocol_req_id numeric) OWNER TO postgres;

--
-- Name: mrs_remove_rad_comment_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_remove_rad_comment_f(p_comment_id numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

begin
 delete from mrsdba.mrs_radiologist_comments
  where comment_id = p_comment_id;
 return '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_remove_rad_comment_f(p_comment_id numeric) OWNER TO postgres;

--
-- Name: mrs_remove_reserved_ursi_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_remove_reserved_ursi_f(p_ursi character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
   number_of_rows integer := 0;
BEGIN
   delete from mrs_subjects_reserved where ursi = p_ursi;
   GET DIAGNOSTICS number_of_rows = ROW_COUNT;

  return number_of_rows;
   
EXCEPTION
    WHEN OTHERS THEN
      RAISE EXCEPTION '%',SQLERRM;

END;
$$;


ALTER FUNCTION mrsdba.mrs_remove_reserved_ursi_f(p_ursi character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_remove_scan_session_review_f(numeric, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_remove_scan_session_review_f(p_scan_id numeric, p_mod_user text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
   -- record the details in history
   INSERT INTO mrs_scan_sessions_review_hist(
        scan_id,
        person_id,
        review_date,
        impression,
        recommendation,
        recommendation_code,
        recommendation_comments,
        report_template,
        findings,
        mod_user,
        mod_date
   ) SELECT
        scan_id,
        person_id,
        review_date,
        impression,
        recommendation,
        recommendation_code,
        recommendation_comments,
        report_template,
        findings,
        p_mod_user,
        now()
    FROM mrs_scan_sessions_review
    WHERE scan_id = p_scan_id;

    -- delete the review
    DELETE FROM mrs_scan_sessions_review
    WHERE scan_id = p_scan_id;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Scan % not found.', p_scan_id;
    END IF;

    INSERT INTO mrs_scan_sessions_hist (
        scan_id,
        review_load_date,
        mod_user,
        mod_date
    ) SELECT
        scan_id,
        review_load_date,
        p_mod_user,
        now()
    FROM mrs_scan_sessions
    WHERE scan_id = p_scan_id;

    -- remove the load date to force the scan back into queue
    UPDATE mrs_scan_sessions
    SET review_load_date = null
    WHERE scan_id = p_scan_id;

    RETURN true;
END;
$$;


ALTER FUNCTION mrsdba.mrs_remove_scan_session_review_f(p_scan_id numeric, p_mod_user text) OWNER TO ni_developers;

--
-- Name: mrs_remove_scan_slot_use_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_remove_scan_slot_use_f(p_scan_id numeric, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$	
DECLARE
V_COUNT mrsdba.MRS_SCAN_SLOTS.COUNT%TYPE;
V_USAGE RECORD;
BEGIN

  -- prevent deleting more than exist
  BEGIN
    FOR V_USAGE IN
    (SELECT distinct
     SCAN_SLOT_ID,
     (SELECT SUM (AMOUNT_USED)
      FROM mrsdba.MRS_SCAN_SLOT_USES X                                                         
      WHERE X.SCAN_SLOT_ID = U.SCAN_SLOT_ID                                             
      AND X.SCAN_ID = P_SCAN_ID) AS AMOUNT_USED
     FROM mrsdba.MRS_SCAN_SLOT_USES U                                                          
     WHERE U.SCAN_ID = P_SCAN_ID)
    LOOP
    SELECT COUNT INTO V_COUNT                                                           
    FROM MRSDBA.MRS_SCAN_SLOTS WHERE SCAN_SLOT_ID = V_USAGE.SCAN_SLOT_ID;                 
                 
  --update history, comment on scan                                                     
    INSERT INTO MRSDBA.MRS_SCAN_SLOTS_HIST (SCAN_SLOT_ID,                               
                 COUNT,
                 USER_MOD,                                                              
                 DATE_MOD,                                                              
                 NOTES)
    VALUES (V_USAGE.SCAN_SLOT_ID,                                                         
   V_COUNT + V_USAGE.AMOUNT_USED,                                                         
   P_USER_ENTERED,
   now(),
   'REMOVED BILLING (' || V_USAGE.AMOUNT_USED || 'slots) for scan '                       
   || P_SCAN_ID);
                                                                                        
  --update scan slot                                                                    
    UPDATE MRSDBA.MRS_SCAN_SLOTS                                                        
    SET COUNT = V_COUNT + V_USAGE.AMOUNT_USED       
    WHERE SCAN_SLOT_ID = V_USAGE.SCAN_SLOT_ID;

       END LOOP;
  END;

  --remove uses referencing this scan
  DELETE FROM MRSDBA.MRS_SCAN_SLOT_USES WHERE SCAN_ID = P_SCAN_ID;

   RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_remove_scan_slot_use_f(p_scan_id numeric, p_user_entered character varying) OWNER TO postgres;

--
-- Name: mrs_remove_staged_scan_f(numeric, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_remove_staged_scan_f(p_scan_id numeric, p_dbtrans_username text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
          BEGIN
              INSERT INTO mrs_scan_sessions_stage_hist
              (
                  scan_id,
                  label,
                  uid,
                  scanner_id,
                  pi_id,
                  study_id,
                  ursi,
                  segment_interval,
                  subject_age,
                  file_path,
                  source_filename,
                  is_error,
                  notes,
                  mod_user,
                  mod_date
              ) 
              SELECT
                  scan_id,
                  label,
                  uid,
                  scanner_id,
                  pi_id,
                  study_id,
                  ursi,
                  segment_interval,
                  subject_age,
                  file_path,
                  source_filename,
                  is_error,
                  notes,
                  p_dbtrans_username,
                  now()
              FROM mrs_scan_sessions_stage
              WHERE scan_id = p_scan_id;

              DELETE from mrs_scan_sessions_stage
              WHERE scan_id = p_scan_id;

              IF NOT FOUND THEN
                  RAISE EXCEPTION 'Staged scan % does not exist.',p_scan_id;
              END IF;
              
              RETURN '1';
          END;
          $$;


ALTER FUNCTION mrsdba.mrs_remove_staged_scan_f(p_scan_id numeric, p_dbtrans_username text) OWNER TO ni_developers;

--
-- Name: mrs_remove_study_instrument_f(numeric, numeric, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_remove_study_instrument_f(p_study_id numeric, p_instrument_id numeric, p_dbtrans_username_pt text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_instrument_study_id int;

BEGIN
  -- this is a proxy for mrs_delete_instrument_study_f
  SELECT instrument_study_id
  INTO STRICT v_instrument_study_id
  FROM mrs_instruments_studies
  WHERE study_id = p_study_id
    AND instrument_id = p_instrument_id;

  PERFORM mrs_delete_instrument_study_f(v_instrument_study_id, p_dbtrans_username_pt);

  RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_remove_study_instrument_f(p_study_id numeric, p_instrument_id numeric, p_dbtrans_username_pt text) OWNER TO ni_developers;

--
-- Name: mrs_remove_study_template_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_remove_study_template_f(p_template_id numeric, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN
            
            INSERT INTO mrs_study_templates_hist(
               TEMPLATE_ID,
               TEMPLATE_NAME,
               STUDY_ID,
               MOD_USER,
               MOD_DATE
            )
            VALUES( 
               p_template_id,
               null,
               null,
               p_mod_user,
               now());

            INSERT INTO mrs_template_instruments_hist(
               template_id,
               instrument_id,
               sort_order,
               mod_user,
               mod_date
            )
            SELECT 
               template_id,
               instrument_id,
               -1,
               p_mod_user,
               now()
            FROM mrsdba.mrs_template_instruments
            WHERE template_id =p_template_id;

            DELETE FROM mrs_template_instruments
            WHERE template_id = p_template_id;

            DELETE FROM mrs_study_templates
            WHERE template_id = p_template_id;

            return 1;

         END;
         $$;


ALTER FUNCTION mrsdba.mrs_remove_study_template_f(p_template_id numeric, p_mod_user character varying) OWNER TO postgres;

--
-- Name: mrs_remove_subject_class_details_f(character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_remove_subject_class_details_f(p_usid character varying, p_subject_class_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   declare
   begin
   delete from mrsdba.mrs_subject_class_details
   where usid=p_usid
   and subject_class_id=p_subject_class_id;

   return '1';
   end;
$$;


ALTER FUNCTION mrsdba.mrs_remove_subject_class_details_f(p_usid character varying, p_subject_class_id numeric) OWNER TO postgres;

--
-- Name: mrs_remove_trgt_enrllmnt_notes_f(); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_remove_trgt_enrllmnt_notes_f() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
	DELETE FROM mrs_trgt_enrllmnt_temp;

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_remove_trgt_enrllmnt_notes_f() OWNER TO postgres;

--
-- Name: mrs_rename_saved_query_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_rename_saved_query_f(p_username character varying, p_old_label character varying, p_label character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_result int;
    v_id int;
BEGIN
    SELECT count (1) INTO v_result
    FROM mrsdba.mrs_saved_user_queries
    WHERE username = p_username
        AND label = p_label;

    IF v_result = 0 THEN

        UPDATE mrsdba.mrs_saved_user_queries 
        SET
            label = p_label
        WHERE username = p_username
            AND label = p_old_label
        RETURNING id INTO v_id;

        INSERT INTO mrsdba.mrs_saved_user_queries_hist (
            id,
            username,
            label,
            mod_user,
            mod_date
        ) VALUES (
            v_id,
            p_username,
            p_label,
            p_username,
            now()
        );

        RETURN 1;

    ELSE 
        RETURN 2;
    END IF;

end;
$$;


ALTER FUNCTION mrsdba.mrs_rename_saved_query_f(p_username character varying, p_old_label character varying, p_label character varying) OWNER TO ni_developers;

--
-- Name: mrs_reorder_inst_responses_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_reorder_inst_responses_f(p_question_id character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_sort_order          numeric;

   c_inst_code_responses CURSOR IS
   SELECT
      sort_order,
      response_id
   FROM mrsdba.mrs_instrument_code_responses 
   WHERE question_id = p_question_id
   ORDER BY sort_order;
BEGIN

   v_sort_order := 1;

   FOR INST_CODE_RESPONSES IN c_inst_code_responses
   LOOP

      -- only update if the sort order is incorrect
      IF INST_CODE_RESPONSES.sort_order != v_sort_order
      THEN
         -- because of the unique key constraint on sort_order and question_id
         -- it is possible to violate that constraint by updating a question
         -- that has response sort_orders of 0,1,2,3.  Therefore, first we
         -- need to check if the sort_order we are updating to exists.  If it
         -- does, then change that sort_order to a negative number.  This will 
         -- guarantee it's uniquness.  We then change it back to a positive number
         -- in this same function naturally.
         UPDATE mrs_instrument_code_responses
         SET sort_order = -v_sort_order
         WHERE question_id = p_question_id
         AND sort_order = v_sort_order;

         -- do the update
         UPDATE mrs_instrument_code_responses
         SET sort_order = v_sort_order
         WHERE response_id = INST_CODE_RESPONSES.response_id;

         INSERT INTO mrs_instrument_code_responses_hist (
            question_id,
            sort_order,
            response_id,
            mod_user,
            mod_date
         ) VALUES (
            p_question_id,
            v_sort_order,
            INST_CODE_RESPONSES.response_id,
            p_mod_user,
            NOW()
         );

      END IF;

      v_sort_order := v_sort_order + 1;

   END LOOP;

   RETURN 1;

END;
$$;


ALTER FUNCTION mrsdba.mrs_reorder_inst_responses_f(p_question_id character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_replace_all_asmt_responses_f(numeric, mrs_response_type[], character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_replace_all_asmt_responses_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- Note: Used by Tablet Assessment
DECLARE                                                                                 
v_result              character varying(20);                                            
begin
   DELETE from mrsdba.mrs_assessment_responses where assessment_id = p_assessment_id;

   v_result := mrsdba.mrs_assign_all_asmt_response_values_f(p_assessment_id, p_table, p_dbuser);

   return v_result;
end;
$$;


ALTER FUNCTION mrsdba.mrs_replace_all_asmt_responses_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) OWNER TO ni_developers;

--
-- Name: mrs_reserve_ursi_f(character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_reserve_ursi_f(p_pi_id character varying, p_ursi_prefix character varying, p_incount numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
 v_output       varchar(4000);
 v_cntr         numeric := 1;
 v_ursi         mrsdba.mrs_subject_type_details.ursi%TYPE;
 v_usid         mrsdba.mrs_subject_type_details.usid%TYPE;
 p_count	numeric;
BEGIN

  if p_incount = NULL then
	p_count:=1;
  else
	p_count:=p_incount;
  end if;

  -------------------------------------------------------------
  -- get ursi
  -------------------------------------------------------------

  FOR v_cntr IN 1 .. p_count LOOP

    SELECT mrs_get_next_ursi_f(p_ursi_prefix)
    INTO v_ursi;

   SELECT mrs_get_next_usid_f('stub')
   INTO v_usid;
   
    -- Load data
    INSERT INTO mrs_subjects_reserved (
      usid,
      ursi,
      pi_id,
      date_reserved,
      user_reserved
    )
    VALUES (
      v_usid,
      v_ursi,
      p_pi_id,
      now(),
      p_dbtrans_username_pt
    );



  END LOOP;

  RETURN v_output;

end;
$$;


ALTER FUNCTION mrsdba.mrs_reserve_ursi_f(p_pi_id character varying, p_ursi_prefix character varying, p_incount numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_reset_subject_password_f(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_reset_subject_password_f(p_usid character varying, p_password character varying, p_password_reset_key character varying, p_user_entered character varying) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        BEGIN
            PERFORM password_reset_key FROM mrs_subjects
            WHERE password_reset_key = p_password_reset_key
            AND usid = p_usid;

            IF NOT FOUND THEN
               RETURN FALSE;
            END IF;

            UPDATE mrs_subjects
            SET password = p_password,
               password_reset_key = NULL
            WHERE usid = p_usid;

            INSERT INTO mrs_subjects_hist (
                password,
                password_reset_key,
                mod_user,
                mod_date
            )
            VALUES (
                p_password,
                NULL,
                p_user_entered,
                now()
            );

            RETURN TRUE;
        END;
    $$;


ALTER FUNCTION mrsdba.mrs_reset_subject_password_f(p_usid character varying, p_password character varying, p_password_reset_key character varying, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_reset_subject_password_f(character varying, character varying, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_reset_subject_password_f(p_usid character varying, p_password character varying, p_password_reset_key character varying, p_activate_p2 boolean, p_user_entered character varying) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        DECLARE
        v_current_is_p2_active boolean;
        BEGIN
            SELECT is_p2_active INTO v_current_is_p2_active FROM mrs_subjects
            WHERE password_reset_key = p_password_reset_key
            AND usid = p_usid;

            IF NOT FOUND THEN
                RETURN FALSE;
            END IF;

            IF p_activate_p2 = TRUE THEN
                v_current_is_p2_active := TRUE;
            END IF;

            UPDATE mrs_subjects
            SET password = p_password,
                password_reset_key = NULL,
                is_p2_active = v_current_is_p2_active
            WHERE usid = p_usid;

            INSERT INTO mrs_subjects_hist (
                password,
                password_reset_key,
                is_p2_active,
                mod_user,
                mod_date
            )
            VALUES (
                p_password,
                NULL,
                v_current_is_p2_active,
                p_user_entered,
                now()
            );

            RETURN TRUE;
        END;
    $$;


ALTER FUNCTION mrsdba.mrs_reset_subject_password_f(p_usid character varying, p_password character varying, p_password_reset_key character varying, p_activate_p2 boolean, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_resolve_assessment_f(numeric, numeric, numeric, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_resolve_assessment_f(p_asmt_f_id numeric, p_asmt_1_id numeric, p_asmt_2_id numeric, p_dbtrans_username_pt character varying, p_study_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_mismatch_records_num    numeric(4) := 0;
  v_successfully_completed  mrs_assessments.successfully_completed%TYPE;
  v_notes                   mrs_assessments.notes%TYPE;
  v_study_id                mrs_assessments.study_id%type;
BEGIN

  -- Step 1:  Determine if the assessment_id='F'.
  DECLARE
    v_exist  numeric(1);
  BEGIN
    SELECT 1
    INTO STRICT v_exist
    FROM mrs_assessments
    WHERE assessment_id = p_asmt_f_id
    AND entry_code = 'F';
  EXCEPTION
    WHEN no_data_found THEN
      RAISE EXCEPTION  'Assessment % does not exist or is not a failed event.',p_asmt_f_id;
  END;

  -- Step 2:  Determine if any event mismatches exist.  If none, then check for
  --          response mismatches.  If none, then complete the record.
  BEGIN
    SELECT count(1)
    INTO STRICT v_mismatch_records_num
    FROM mrsdba.mrs_assessments ae1
    WHERE (ae1.entry_code::text <> ALL (ARRAY['C'::character varying, 'F'::character varying]::text[])) --make sure it is not a 'c' or 'f' entry
    AND NOT (EXISTS 
      (SELECT 1
      FROM mrsdba.mrs_assessments ae2
      WHERE ae1.instrument_id = ae2.instrument_id --same instrument
      AND ae1.assessment_date = ae2.assessment_date --same assessment_date
      AND ae1.ursi::text = ae2.ursi::text --same ursi
      AND ae1.site_id::text = ae2.site_id::text --same site_id
      AND ae1.dataentry_type_id = ae2.dataentry_type_id --same dataentry_type_id
      AND ae1.segment_interval::text = ae2.segment_interval::text --same segment_interval
      AND ae1.segment_instance = ae2.segment_instance --same segment_instance
      AND (ae2.entry_code::text <> ALL (ARRAY['C'::character varying, 'F'::character varying, ae1.entry_code]::text[])) --DIFFERENT entry_code
      AND ae1.rater1 = ae2.rater1 --same rater
      AND COALESCE(ae1.rater2, 0::numeric) = COALESCE(ae2.rater2, 0::numeric) --same rater2
      AND COALESCE(ae1.source_type, 0::numeric) = COALESCE(ae2.source_type, 0::numeric) --same source_type
      AND ae1.successfully_completed::text = ae2.successfully_completed::text --same successfully completed
      AND COALESCE(btrim(ae1.notes::text), ''::text) = COALESCE(btrim(ae2.notes::text), ''::text))) --same notes
    AND (ae1.assessment_id IN (p_asmt_1_id, p_asmt_2_id)); --is one of two assessments

    IF v_mismatch_records_num > 0 THEN
      RAISE EXCEPTION  'Assessment items do not match for assessments % and %',
                                      TO_CHAR(p_asmt_1_id,'FM99999999'), TO_CHAR(p_asmt_2_id,'FM99999999');
    END IF;
  EXCEPTION
    WHEN no_data_found THEN
      null;
  END;

  IF v_mismatch_records_num = 0 THEN
    BEGIN
      SELECT count(1) 
      INTO STRICT v_mismatch_records_num  
      FROM mrsdba.mrs_assessment_responses aer1,mrsdba.mrs_instrument_questions aq1
      WHERE aq1.question_id::text = aer1.question_id::text
      AND (aq1.formula_question_type IS NULL OR aq1.formula_question_type !='Y')
      AND ( 
        (EXISTS
          (SELECT 1
          FROM mrsdba.mrs_assessment_responses aer2--,
          WHERE aer2.question_id::text = aer1.question_id::text -- same question_id as above
          AND COALESCE(aer2.response_value, '~'::character varying)::text != COALESCE(aer1.response_value, '~'::character varying)::text --same response as above
          AND COALESCE(aer2.question_instance, -1) = COALESCE(aer1.question_instance, -1)
          AND COALESCE(aer2.response_sort_order, -1) = COALESCE(aer1.response_sort_order, -1)
          --AND COALESCE(aer2.response_value_description, '~'::character varying)::text != COALESCE(aer1.response_value_description, '~'::character varying)::text --same response as above
          and aer2.assessment_id in (p_asmt_1_id, p_asmt_2_id)
          )
        )
        OR aer1.question_id NOT IN 
          (SELECT aer3.question_id 
          FROM mrsdba.mrs_assessment_responses aer3
          WHERE aer3.assessment_id != aer1.assessment_id
          AND aer3.assessment_id IN (p_asmt_1_id, p_asmt_2_id)
          )
      )
      AND aer1.assessment_id IN (p_asmt_1_id, p_asmt_2_id);

      IF v_mismatch_records_num > 0 THEN
        RAISE EXCEPTION  'Responses do not match for assessments % and %',
                                        TO_CHAR(p_asmt_1_id,'FM99999999'),
                                        TO_CHAR(p_asmt_2_id,'FM99999999');
      END IF;

      EXCEPTION
      WHEN no_data_found THEN
        null;
    END;
  END IF;

  IF v_mismatch_records_num = 0 THEN
    DELETE FROM mrs_assessments
     WHERE assessment_id = p_asmt_f_id
       AND entry_code = 'F';

    INSERT INTO mrs_assessments (
      assessment_id,
      instrument_id,
      assessment_date,
      ursi,
      entry_code,
      entry_username,
      entry_start_date,
      entry_end_date,
      elapsed_time,
      rater1,
      rater2,
      source_type,
      supervisor_id,
      resolution_date,
      site_id,
      dataentry_type_id,
      segment_interval,
      segment_instance,
      successfully_completed,
      notes,
      study_id
    )
    SELECT p_asmt_f_id,
           b.instrument_id,
           b.assessment_date,
           b.ursi,
           'C',
           p_dbtrans_username_pt,
           a.entry_start_date,
           b.entry_end_date,
           0,
           b.rater1,
           b.rater2,
           b.source_type,
           p_dbtrans_username_pt,
           now(),
           b.site_id,
           b.dataentry_type_id,
           b.segment_interval,
           b.segment_instance,
           b.successfully_completed,
           b.notes,
           p_study_id
     FROM mrs_assessments a, mrs_assessments b
     WHERE a.assessment_id = p_asmt_1_id
     AND b.assessment_id = p_asmt_2_id;

    SELECT successfully_completed, notes, study_id 
    INTO v_successfully_completed, v_notes, v_study_id 
    FROM mrs_assessments 
    WHERE assessment_id = p_asmt_2_id;

    INSERT INTO mrs_assessments_hist (
      assessment_id,
      supervisor_id,
      resolution_date,
      mod_user,
      mod_date,
      successfully_completed,
      notes,
      study_id
    )
    VALUES (
      p_asmt_f_id,
      p_dbtrans_username_pt,
      now(),
      p_dbtrans_username_pt,
      now(),
      v_successfully_completed,
      v_notes,
      v_study_id
    );

    UPDATE mrs_assessment_responses
    SET assessment_id = p_asmt_f_id
    WHERE assessment_id = p_asmt_2_id;
     
--Record change in the hist table (Feature Added 10/10/2010 by Dylan)
     INSERT INTO mrs_assessment_responses_hist
     SELECT a.*, p_dbtrans_username_pt, now() 
     FROM mrs_assessment_responses a
     WHERE a.assessment_id = p_asmt_f_id;

    DELETE FROM mrs_assessment_responses
    WHERE assessment_id = p_asmt_1_id;
  END IF;

     PERFORM mrsdba.mrs_update_asmt_ownership_f(p_asmt_f_id);

  RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_resolve_assessment_f(p_asmt_f_id numeric, p_asmt_1_id numeric, p_asmt_2_id numeric, p_dbtrans_username_pt character varying, p_study_id numeric) OWNER TO ni_developers;

--
-- Name: mrs_save_queued_time_f(numeric, numeric, timestamp without time zone, timestamp without time zone, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_save_queued_time_f(p_login_id numeric, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_aqueue_id              integer;
  v_exists                 numeric;
  v_auto_queue_generated   boolean;
  v_start_date_check       timestamp without time zone;
  v_start_date_input         timestamp without time zone;
BEGIN

   v_start_date_input = p_start_date;

   IF v_start_date_input > p_end_date THEN
      RAISE EXCEPTION 'The start date (%) must be before the end date (%)',v_start_date_input,p_end_date;
   END IF;

   SELECT COUNT(*) 
   INTO v_exists 
   FROM mrs_subject_assessments_queue
   WHERE login_id = p_login_id
   AND from_protocol_id = p_protocol_id;

   IF v_exists = 0
   THEN
      --create a new entry

      INSERT INTO mrs_subject_assessments_queue(
         login_id,
         from_protocol_id,
         start_date,
         end_date
      )
      VALUES (
         p_login_id,
         p_protocol_id,
         v_start_date_input,
         p_end_date
      );

      SELECT aqueue_id
      INTO v_aqueue_id
      FROM mrs_subject_assessments_queue
      WHERE login_id = p_login_id
      AND from_protocol_id = p_protocol_id;

   ELSE
      --update an existing entry

      SELECT aqueue_id
      INTO v_aqueue_id
      FROM mrs_subject_assessments_queue
      WHERE login_id = p_login_id
      AND from_protocol_id = p_protocol_id;

      -- We don't want the start_date to change after a queue has been generated...
      -- check if the the queue has been generated
      SELECT auto_queue_generated
      INTO v_auto_queue_generated
      FROM mrs_subject_assessments_queue
      WHERE aqueue_id = v_aqueue_id;

      IF v_auto_queue_generated IS TRUE THEN

         SELECT start_date
         INTO v_start_date_check
         FROM mrs_subject_assessments_queue
         WHERE aqueue_id = v_aqueue_id;

         IF date_trunc('minute',v_start_date_check) != date_trunc('minute',v_start_date_input) THEN
            RAISE EXCEPTION 'Sorry, a queue has already been generated for this protocol, you can no longer update the queue start time.';
         END IF;

         -- User only passes in [yyyy-mm-dd hh:mm], we want to make sure that we don't lose the seconds, so set v_start_date_input equal to actual db start_date
         v_start_date_input = v_start_date_check;

      END IF;

      UPDATE mrs_subject_assessments_queue
      SET 
         start_date = v_start_date_input,
         end_date = p_end_date
      WHERE aqueue_id = v_aqueue_id;

   END IF;

   INSERT INTO mrs_subject_assessments_queue_hist(
      aqueue_id,
      login_id,
      from_protocol_id,
      start_date,
      end_date,
      mod_user,
      mod_date
   )
   VALUES (
      v_aqueue_id,
      p_login_id,
      p_protocol_id,
      v_start_date_input,
      p_end_date,
      p_mod_user,
      NOW()
   );

   RETURN v_aqueue_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_save_queued_time_f(p_login_id numeric, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_save_scheduled_time_f(integer, character varying, timestamp without time zone, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_save_scheduled_time_f(p_segment_interval_id integer, p_ursi character varying, p_segment_interval_timestamp timestamp without time zone, p_use_template_time boolean, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_aqueue_id integer;
   v_study_intervals_subject_schedules_id integer;
   v_exists numeric;
   v_start numeric;
   v_end numeric;
   v_start_date timestamp without time zone;
   v_end_date timestamp without time zone;
   v_old_interval_time timestamp without time zone;
   v_auto_queue_generated numeric;
BEGIN

   -- Check if there are any queued protocols associated with this visit
   -- If there are, the first thing we want to do is remove those absolutely
   -- positioned queued times.

   FOR v_aqueue_id IN (
      SELECT aqueue_id
      FROM mrs_protocol_times_vw
      WHERE ursi = p_ursi
      AND segment_interval_id = p_segment_interval_id
      AND aqueue_id IS NOT NULL
      AND auto_queue_generated != TRUE)
   LOOP
      PERFORM mrs_delete_queued_time_f(v_aqueue_id,p_mod_user);
   END LOOP;

   -- Check if this visit has been scheduled yet or not
   SELECT COUNT(*) 
   INTO v_exists 
   FROM mrs_study_intervals_subject_schedules
   WHERE ursi = p_ursi
   AND segment_interval_id = p_segment_interval_id;

   IF v_exists = 0
   THEN
      -- The visit has not yet been scheduled, create a new entry

      SELECT nextval('mrs_study_intervals_subject_s_study_intervals_subject_sched_seq')
      INTO v_study_intervals_subject_schedules_id;

      INSERT INTO mrs_study_intervals_subject_schedules(
         study_intervals_subject_schedules_id,
         segment_interval_id, 
         ursi, 
         segment_interval_timestamp
      )
      VALUES (
         v_study_intervals_subject_schedules_id,
         p_segment_interval_id, 
         p_ursi, 
         p_segment_interval_timestamp
      );

   ELSE
      -- This visit has previously been scheduled, update an existing entry

      SELECT study_intervals_subject_schedules_id,
         segment_interval_timestamp
      INTO v_study_intervals_subject_schedules_id,
         v_old_interval_time
      FROM mrs_study_intervals_subject_schedules
      WHERE ursi = p_ursi
      AND segment_interval_id = p_segment_interval_id;

      UPDATE mrs_study_intervals_subject_schedules
      SET 
         segment_interval_timestamp = p_segment_interval_timestamp
      WHERE study_intervals_subject_schedules_id = v_study_intervals_subject_schedules_id;

      FOR v_aqueue_id IN (
         SELECT aqueue_id
         FROM mrs_protocol_times_vw
         WHERE ursi = p_ursi
         AND segment_interval_id = p_segment_interval_id
         AND aqueue_id IS NOT NULL
         AND auto_queue_generated = TRUE)
      LOOP
         SELECT 
         start_minutes_from_segment_interval,
         end_minutes_from_segment_interval
         INTO v_start, v_end
         FROM mrs_protocol_times_vw
         WHERE aqueue_id = v_aqueue_id;

         IF p_use_template_time = TRUE
         THEN
            UPDATE mrs_subject_assessments_queue
            SET 
               start_date = p_segment_interval_timestamp + ((v_start || ' MINUTE'::text)::interval),
               end_date = p_segment_interval_timestamp + ((v_end || ' MINUTE'::text)::interval)
            WHERE aqueue_id = v_aqueue_id;
         ELSE
            SELECT 
            start_date,
            end_date
            INTO v_start_date, v_end_date
            FROM mrs_subject_assessments_queue
            WHERE aqueue_id = v_aqueue_id;

            UPDATE mrs_subject_assessments_queue
            SET
            start_date = p_segment_interval_timestamp + (v_start_date - v_old_interval_time),
            end_date = p_segment_interval_timestamp + (v_end_date - v_old_interval_time)
            WHERE aqueue_id = v_aqueue_id;
         END IF;
      END LOOP;

   END IF;

   INSERT INTO mrs_study_intervals_subject_schedules_hist(
      study_intervals_subject_schedules_id,
      segment_interval_id, 
      ursi, 
      segment_interval_timestamp,
      mod_user,
      mod_date
   )
   VALUES (
      v_study_intervals_subject_schedules_id,
      p_segment_interval_id, 
      p_ursi, 
      p_segment_interval_timestamp,
      p_mod_user,
      NOW()
   );

   RETURN v_study_intervals_subject_schedules_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_save_scheduled_time_f(p_segment_interval_id integer, p_ursi character varying, p_segment_interval_timestamp timestamp without time zone, p_use_template_time boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_scan_session_reimburse_f(numeric, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_scan_session_reimburse_f(p_scan_id numeric, p_user_entered text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    DECLARE
        v_count numeric;
        c_usage CURSOR IS
            SELECT SCAN_SLOT_USE_ID,SCAN_SLOT_ID,AMOUNT_USED
            FROM MRSDBA.MRS_SCAN_SLOT_USES
            WHERE SCAN_ID = P_SCAN_ID;
    BEGIN 
        -- loop through each usage, decrementing 
        -- or removing slot uses as necessary
        FOR USAGE IN c_usage
        LOOP
            -- get exiting remaining for this scan slot
            SELECT COUNT INTO V_COUNT
            FROM MRSDBA.MRS_SCAN_SLOTS
            WHERE SCAN_SLOT_ID = USAGE.SCAN_SLOT_ID;

            -- if this use was applied to a scan slot, then credit the slot
            IF USAGE.SCAN_SLOT_ID IS NOT NULL THEN
                -- update history, comment on scan
                INSERT INTO MRSDBA.MRS_SCAN_SLOTS_HIST(
                SCAN_SLOT_ID,
                COUNT,
                USER_MOD,
                DATE_MOD,
                NOTES 
                )
                VALUES(
                USAGE.SCAN_SLOT_ID,
                V_COUNT + USAGE.AMOUNT_USED,
                P_USER_ENTERED,
                now(),
                'Credited '|| USAGE.AMOUNT_USED || ' slots for scan ' || P_SCAN_ID
                );

                -- update scan slot
                UPDATE MRSDBA.MRS_SCAN_SLOTS
                SET COUNT = V_COUNT + USAGE.AMOUNT_USED
                WHERE SCAN_SLOT_ID = USAGE.SCAN_SLOT_ID;
            END IF;

            -- remove scan slot use
            DELETE FROM MRSDBA.MRS_SCAN_SLOT_USES
            WHERE SCAN_SLOT_USE_ID = USAGE.SCAN_SLOT_USE_ID;

        END LOOP;

        RETURN true;
    END;
    $$;


ALTER FUNCTION mrsdba.mrs_scan_session_reimburse_f(p_scan_id numeric, p_user_entered text) OWNER TO ni_developers;

--
-- Name: mrs_set_email_confirmation_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_set_email_confirmation_f(p_usid character varying, p_email_code character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
   UPDATE mrs_subjects
   SET 
      email_address_confirmation_code = p_email_code,
      email_address_confirmed = FALSE,
      email_address_confirmed_date = now()
   WHERE usid = p_usid
   AND (email_address_confirmed = FALSE
   OR email_address_confirmed IS NULL);
   
   INSERT INTO mrs_subjects_hist (
      usid                        
      , email_address_confirmation_code
      , email_address_confirmed_date
      , email_address_confirmed
      , mod_user                  
      , mod_date                  
   )                              
   SELECT 
      usid
      , email_address_confirmation_code
      , email_address_confirmed_date
      , email_address_confirmed
      , p_dbtrans_username_pt     
      , now()                     
   FROM mrs_subjects
   WHERE usid = p_usid;                            
   RETURN '1';
END;
$$;


ALTER FUNCTION mrsdba.mrs_set_email_confirmation_f(p_usid character varying, p_email_code character varying, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_set_mail_sent_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_set_mail_sent_f(p_mail_id integer, p_user_entered character varying) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        BEGIN

            UPDATE mrsdba.mrs_mail
            SET sent = now()
            WHERE mail_id = p_mail_id
            AND mail_id = p_mail_id;

            INSERT INTO mrs_mail_hist (
                mail_id
                ,sent
                ,mod_user
                ,mod_date
            )
            SELECT
                mail_id
                ,sent
                ,p_user_entered
                ,now()
            FROM
                mrs_mail
            WHERE
                mail_id = p_mail_id;

            RETURN TRUE;
        END;
    $$;


ALTER FUNCTION mrsdba.mrs_set_mail_sent_f(p_mail_id integer, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_set_sa_nonstop_queue_f(numeric, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_set_sa_nonstop_queue_f(login_id_f numeric, nonstop_queue_f boolean, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
	update mrs_subject_logins set nonstop_queue=nonstop_queue_f where login_id=login_id_f;
	insert into mrs_subject_logins_hist (login_id, nonstop_queue, mod_user, mod_date) values(
		login_id_f,
		nonstop_queue_f,
		mod_user_f,
		now());
	return login_id_f;
end;$$;


ALTER FUNCTION mrsdba.mrs_set_sa_nonstop_queue_f(login_id_f numeric, nonstop_queue_f boolean, mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_set_subject_password_reset_key_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_set_subject_password_reset_key_f(p_usid character varying, p_password_reset_key character varying, p_user_entered character varying) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        BEGIN
            PERFORM password_reset_key FROM mrs_subjects
            WHERE password_reset_key = p_password_reset_key;

            IF NOT FOUND THEN
               UPDATE mrs_subjects
               SET password_reset_key = p_password_reset_key
               WHERE usid = p_usid;
   
               INSERT INTO mrs_subjects_hist (
                   usid,
                   password_reset_key,
                   mod_user,
                   mod_date
               )
               VALUES (
                   p_usid,
                   p_password_reset_key,
                   p_user_entered,
                   now()
               );
   
               RETURN TRUE;
            ELSE
               RETURN FALSE;
            END IF;
        END;
    $$;


ALTER FUNCTION mrsdba.mrs_set_subject_password_reset_key_f(p_usid character varying, p_password_reset_key character varying, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_share_instrument_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_share_instrument_f(p_study_id numeric, p_instrument_id numeric, p_mod_user character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- this is just a proxy
  PERFORM mrs_assign_instrument_study_f(p_instrument_id, p_study_id, 0,  p_mod_user);
  
  RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_share_instrument_f(p_study_id numeric, p_instrument_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_share_missing_assessment_reason_f(numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_share_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
    insert into mrs_study_missing_assessment_reasons (reason_id, study_id) values (reason_id_f, study_id_f);
    insert into mrs_missing_assessment_reasons_hist (id, study_id, date) values (reason_id_f, study_id_f, now());
        return reason_id_f;
end;$$;


ALTER FUNCTION mrsdba.mrs_share_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) OWNER TO postgres;

--
-- Name: mrs_share_saved_query_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_share_saved_query_f(p_from_user character varying, p_to_user character varying, p_label character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE 
    v_id integer;
BEGIN
    INSERT INTO mrs_saved_user_queries (username, label, query_id)
    SELECT p_to_user, label, query_id 
    FROM mrs_saved_user_queries
    WHERE username = p_from_user
        AND label = p_label
    RETURNING id INTO v_id;
    
    INSERT INTO mrs_saved_user_queries_hist (id, username, label, query_id, mod_user, mod_date)
    SELECT id, p_to_user, label, query_id, p_from_user, now()
    FROM mrs_saved_user_queries
    WHERE username = p_from_user
        AND label = p_label;

    RETURN v_id;
END;$$;


ALTER FUNCTION mrsdba.mrs_share_saved_query_f(p_from_user character varying, p_to_user character varying, p_label character varying) OWNER TO ni_developers;

--
-- Name: mrs_start_assessment_f(numeric, numeric, timestamp without time zone, character varying, numeric, numeric, numeric, character varying, numeric, character varying, boolean, character varying, boolean, boolean, boolean, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_start_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean, p_auto_queue_generated boolean, p_from_protocol_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
               DECLARE
               v_validation_result       character varying;
               v_result_array            character varying[];


               -- Return values
               v_assessment_id           mrsdba.mrs_assessments.assessment_id%TYPE;
               v_next_segment_instance   mrsdba.mrs_assessments.segment_instance%TYPE;
               v_entry_code              mrsdba.mrs_assessments.entry_code%TYPE;

               BEGIN

               -- Get instance number
               --
               -- Determine if the entry has already been entered.  If it has, then get the segment
               -- instance number and proceed with the second part of the double entry.
               BEGIN
                   SELECT mrs_validate_assessment_f(
                           p_study_id,
                           p_instrument_id,
                           p_assessment_date ,
                           p_ursi,
                           p_rater1,
                           p_source_type,
                           p_site_id,
                           p_dataentry_type_id,
                           p_segment_interval,
                           p_is_self_assessment,
                           p_force_first_entry,
                           p_is_single_entry,
                           p_is_ongoing_entry
                   ) INTO v_validation_result;

                   -- mrs_validate_assessment_f returns a comma-delimited string
                   -- entry_code,segment_instance
                   -- Parse result:

                   v_result_array := string_to_array(v_validation_result, ',');

                   -- PG arrays are not zero-indexed!!
                   v_entry_code := v_result_array[1];
                   v_next_segment_instance := v_result_array[2]::numeric;
               END;

               SELECT nextval('mrsdba.mrsassess_assessmentid_seq')
               INTO v_assessment_id;


               INSERT INTO mrsdba.mrs_assessments (
               assessment_id,
               instrument_id,
               assessment_date,
               ursi,
               entry_code,
               entry_username,
               entry_start_date,
               rater1,
               rater2,
               source_type,
               site_id,
               dataentry_type_id,
               segment_interval,
               segment_instance,
               Successfully_Completed,
               study_id,
               is_single_entry,
               ongoing_entry,
               auto_queue_generated,
               from_protocol_id
               )
               VALUES (
               v_assessment_id,
               p_instrument_id,
               p_assessment_date,
               p_ursi,
               v_entry_code,
               p_dbtrans_username_pt,
               now(),
               p_rater1,
               p_rater2,
               p_source_type,
               p_site_id,
               p_dataentry_type_id,
               p_segment_interval,
               V_Next_Segment_Instance,
               'N',
               p_study_id,
               p_is_single_entry,
               p_is_ongoing_entry,
               p_auto_queue_generated,
               p_from_protocol_id
               );

               INSERT INTO mrsdba.mrs_assessments_hist (
               assessment_id,
               instrument_id,
               assessment_date,
               ursi,
               entry_code,
               entry_username,
               entry_start_date,
               rater1,
               rater2,
               source_type,
               site_id,
               dataentry_type_id,
               segment_interval,
               segment_instance,
               mod_user,
               mod_date,
               Successfully_Completed,
               study_id,
               is_single_entry,
               ongoing_entry,
               auto_queue_generated,
               from_protocol_id
               )
               VALUES (
               v_assessment_id,
               p_instrument_id,
               p_assessment_date,
               p_ursi,
               v_entry_code,
               p_dbtrans_username_pt,
               now(),
               p_rater1,
               p_rater2,
               p_source_type,
               p_site_id,
               p_dataentry_type_id,
               p_segment_interval,
               v_next_segment_instance,
               p_dbtrans_username_pt,
               now(),
               'N',
               p_study_id,
               p_is_single_entry,
               p_is_ongoing_entry,
               p_auto_queue_generated,
               p_from_protocol_id
               );

               PERFORM mrsdba.mrs_update_asmt_ownership_f (v_assessment_id);


               RETURN TO_CHAR(v_assessment_id,'999999999999')||'|'||v_entry_code;

               end;
               $$;


ALTER FUNCTION mrsdba.mrs_start_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean, p_auto_queue_generated boolean, p_from_protocol_id numeric, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_start_erp_scan_f(character varying, character varying, numeric, numeric, timestamp without time zone, character varying, character varying, numeric, character varying, numeric, character varying, numeric, numeric, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_start_erp_scan_f(p_label character varying, p_segment_interval character varying, p_study_id numeric, p_eeg_id numeric, p_scan_date timestamp without time zone, p_operator_id character varying, p_ursi character varying, p_cap numeric, p_capno character varying, p_impedance numeric, p_impedance_other character varying, p_amp_gain numeric, p_amp_lpf numeric, p_amp_hpf character varying, p_eye_tracking_aso character varying, p_eye_tracking_spem character varying, p_eye_tracking_na character varying, p_eye_tracking_pupillometry character varying, p_eye_tracking_other character varying, p_eye_tracked character varying, p_notes character varying, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
  v_subject_enrolled    numeric(8);
  v_scan_id             mrs_scan_sessions.scan_id%TYPE;
  v_result              varchar(1);
  v_ret                 varchar(20);
BEGIN

  -- Determine if subject exists and is enrolled in the study.  If not,
  -- then enroll the subject before continuing.
  DECLARE
    v_tmp  numeric(1);
  BEGIN
    SELECT count(1)
      INTO STRICT v_tmp
      FROM mrsdba.mrs_subject_type_details
     WHERE ursi=p_ursi;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE EXCEPTION 'Subject %  does not exist',p_ursi;
  END;


  /*

  jl: 04/14/2006
  Disabled.
  Enrolling users not in the requested study became problematic
  as much of our documentation misstated the subjects study or
  we misunderstood which studyID to use.
  The subject must now be enrolled in the study before calling this
  create or replace function.

  */

  DECLARE
    v_subject_type_id   mrs_subject_types.subject_type_id%TYPE;
  BEGIN
    SELECT count(1)
      INTO v_subject_enrolled
      FROM mrs_subject_type_details d, mrs_subject_types t
     WHERE d.subject_type_id = t.subject_type_id
       AND d.ursi = p_ursi
       AND t.study_id = p_study_id;

    IF v_subject_enrolled = 0 THEN

      RAISE EXCEPTION 'Subject % is not enrolled in study id: %',p_ursi,p_study_id ;

      /*
      SELECT subject_type_id
        INTO v_subject_type_id
        FROM mrs_subject_types
       WHERE study_id = p_study_id
         AND upper(label) = 'UNKNOWN';

      v_result := mrs_assign_subject_type_f(p_ursi,v_subject_type_id, 'Added in mrs_start_scan_f', p_dbtrans_username_pt);

      */

    ELSE
      UPDATE mrsdba.mrs_subject_type_details
      SET disenrolled_date = null
      WHERE ursi=p_ursi;

    END IF;
  END;

   -- Get scan_id value
  SELECT nextval('mrsdba.MRSEEGSESSID_SEQ')
    INTO v_scan_id;

  -- Add scan event
  INSERT INTO mrs_eeg_sessions (
    label,
    eeg_session_id,
    segment_interval,
    study_id,
    eeg_id,
    scan_date,
    operator_id,
    ursi,
    station,
    cap,
    capno,
    impedance,
    impedance_other,
    amp_gain,
    amp_lpf,
    amp_hpf,
    eye_tracking_aso,
    eye_tracking_spem,
    eye_tracking_na,
    eye_tracking_pupillometry,
    eye_tracking_other,
    eye_tracked,
    notes
  )
  VALUES (
    p_label,
    v_scan_id,
    p_segment_interval,
    p_study_id,
    p_eeg_id,
    p_scan_date,
    p_operator_id,
    p_ursi,
    '',
    p_cap,
    p_capno,
    p_impedance,
    p_impedance_other,
    p_amp_gain,
    p_amp_lpf,
    p_amp_hpf,
    p_eye_tracking_aso,
    p_eye_tracking_spem,
    p_eye_tracking_na,
    p_eye_tracking_pupillometry,
    p_eye_tracking_other,
    p_eye_tracked,
    p_notes
  );

  INSERT INTO mrs_eeg_sessions_hist (
    label,
    eeg_session_id,
    segment_interval,
    study_id,
    eeg_id,
    scan_date,
    operator_id,
    ursi,
    station,
    cap,
    capno,
    impedance,
    impedance_other,
    amp_gain,
    amp_lpf,
    amp_hpf,
    eye_tracking_aso,
    eye_tracking_spem,
    eye_tracking_na,
    eye_tracking_pupillometry,
    eye_tracking_other,
    eye_tracked,
    notes,
    mod_user,
    mod_date
  )
  VALUES (
    p_label,
    v_scan_id,
    p_segment_interval,
    p_study_id,
    p_eeg_id,
    p_scan_date,
    p_operator_id,
    p_ursi,
    '',
    p_cap,
    p_capno,
    p_impedance,
    p_impedance_other,
    p_amp_gain,
    p_amp_lpf,
    p_amp_hpf,
    p_eye_tracking_aso,
    p_eye_tracking_spem,
    p_eye_tracking_na,
    p_eye_tracking_pupillometry,
    p_eye_tracking_other,
    p_eye_tracked,
    p_notes,
    p_dbtrans_username_pt,
    now()
  );
  
  v_ret:=mrsdba.mrs_add_eeg_series_f(v_scan_id, p_eeg_study_task_ids ,p_dbtrans_username_pt);
  
  RETURN v_scan_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_start_erp_scan_f(p_label character varying, p_segment_interval character varying, p_study_id numeric, p_eeg_id numeric, p_scan_date timestamp without time zone, p_operator_id character varying, p_ursi character varying, p_cap numeric, p_capno character varying, p_impedance numeric, p_impedance_other character varying, p_amp_gain numeric, p_amp_lpf numeric, p_amp_hpf character varying, p_eye_tracking_aso character varying, p_eye_tracking_spem character varying, p_eye_tracking_na character varying, p_eye_tracking_pupillometry character varying, p_eye_tracking_other character varying, p_eye_tracked character varying, p_notes character varying, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_start_mcic_scan_f(timestamp without time zone, character varying, character varying, numeric, numeric, character varying, character varying, character varying, numeric, character varying, numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_start_mcic_scan_f(p_scan_date timestamp without time zone, p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_cost                mrs_study_scanner_rates.rate_amt%TYPE;
  v_subject_enrolled    numeric(8);
  v_subject_age         mrs_scan_sessions.subject_age%TYPE;
  v_scan_id             mrs_scan_sessions.scan_id%TYPE;
  v_scan_label          mrs_scan_sessions.label%TYPE;
  v_remaining_sessions  mrs_studies.remaining_sessions%TYPE;
  v_max_sessions        mrs_studies.approved_sessions%TYPE;
  v_field_strength      mrs_scanners.field_strength%TYPE;
  v_result              varchar(1);
BEGIN

  -- Get max scan session config value
  BEGIN
    SELECT config_value
      INTO STRICT v_max_sessions
      FROM mrs_configs
     WHERE group_label = 'SCAN_LIMITS'
       AND config_label = '4.0T';
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE EXCEPTION 'Config value for max sessions does not exist';
  END;

  -- Determine if the subject has reached max session count.
  SELECT field_strength
    INTO v_field_strength
    FROM mrs_scanners
   WHERE scanner_id = p_scanner_id;
  IF mrs_get_ursi_scan_count_f(p_ursi,v_field_strength,null,null) >= v_max_sessions THEN
    RAISE EXCEPTION 'Subject % has already reached max sessions limit';
  END IF;

  -- Determine if a bill rate amt has been assigned to scanner and study
  -- If not, exit and notify end user that a rate amount needs to be assigned.
  /**
  BEGIN
    SELECT issr.rate_amt
      INTO v_cost
      FROM mrs_study_scanner_rates issr, mrs_studies s
     WHERE issr.scanner_id = p_scanner_id
       AND s.study_id = p_study_id
       AND issr.label = p_rate_label;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20004,'A billing rate of '||p_rate_label
                                     ||' has not been assigned to study '||p_study_id
                                     ||' and scanner number '||p_scanner_id
                             );
  END;
  **/
  v_cost := 0;

  -- Determine if subject exists and is enrolled in the study.  If not,
  -- then enroll the subject before continuing.
  DECLARE
    v_tmp  numeric(1);
  BEGIN
    SELECT 1
      INTO STRICT v_tmp
      FROM mrs_subjects_VW
     WHERE ursi=p_ursi;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE EXCEPTION 'Subject % does not exist';
  END;

  DECLARE
    v_subject_type_id   mrs_subject_types.subject_type_id%TYPE;
  BEGIN
    SELECT count(*)
      INTO v_subject_enrolled
      FROM mrs_subject_type_details d, mrs_subject_types t
     WHERE d.subject_type_id = t.subject_type_id
       AND d.ursi = p_ursi
       AND t.study_id = p_study_id;

    IF v_subject_enrolled = 0 THEN
      SELECT subject_type_id
        INTO v_subject_type_id
        FROM mrs_subject_types
       WHERE study_id = p_study_id
         AND upper(label) = 'UNKNOWN';

      v_result := mrs_assign_subject_type_f(p_ursi,v_subject_type_id,'Added in mrs_start_mcic_scan_f', 'Y',p_dbtrans_username_pt);
    END IF;
  END;

  -- Compute subject's age
  -- Cursor is not in it's own pl/sql block since the subject
  -- was already validated.
  SELECT ROUND(MONTHS_BETWEEN(now(),birth_date)/12,1)
    INTO v_subject_age
    FROM mrs_subjects
   WHERE ursi = p_ursi;

  -- Determine if the study has remaining sessions available.  If so,
  -- then decrement it by 1.
  SELECT NVL(remaining_sessions,0)
    INTO v_remaining_sessions
    FROM mrs_studies
   WHERE study_id = p_study_id;
  IF v_remaining_sessions = 0 THEN
    RAISE EXCEPTION 'Study % has no approved sessions available', p_study_id;
  ELSE
    UPDATE mrs_studies
       SET remaining_sessions = v_remaining_sessions - 1
     WHERE study_id = p_study_id;

    INSERT INTO mrs_studies_hist (
      study_id,
      remaining_sessions,
      mod_user,
      mod_date
    )
    VALUES (
      p_study_id,
      v_remaining_sessions - 1,
      p_dbtrans_username_pt,
      now()
    );
  END IF;

  -- Section is commented out because the previous scan id convention was
  -- invalid.  The user should be able to specify the scan id.
  --
  -- Get scan_id value
  --v_scan_id := mrs_get_scan_id_f(p_scanner_id);
  SELECT nextval('mrsscases_scanid_seq')
    INTO v_scan_id;

  -- Add scan event
  INSERT INTO mrs_scan_sessions (
    scan_id,
    label,
    segment_interval,
    study_id,
    scanner_id,
    scan_date,
    operator_id,
    ursi,
    subject_height,
    subject_height_units,
    subject_mass,
    subject_mass_units,
    subject_age,
    notes
  )
  VALUES (
    v_scan_id,
    p_scan_label,
    p_segment_interval,
    p_study_id,
    p_scanner_id,
    p_scan_date,
    p_operator_id,
    p_ursi,
    p_subject_height,
    p_subject_height_units,
    p_subject_mass,
    p_subject_mass_units,
    v_subject_age,
    p_notes
  );

 
  
  RETURN v_scan_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_start_mcic_scan_f(p_scan_date timestamp without time zone, p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_start_scan_f(character varying, character varying, numeric, numeric, character varying, character varying, character varying, numeric, character varying, numeric, character varying, character varying, timestamp without time zone, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_start_scan_f(p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_scan_date timestamp without time zone, p_study_dir_name character varying, p_pi_dir_name character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_subject_age          mrsdba.mrs_scan_sessions.subject_age%TYPE;
    v_scan_id              mrsdba.mrs_scan_sessions.scan_id%TYPE;
    v_scan_label           mrsdba.mrs_scan_sessions.label%TYPE;
    v_assigned_radiologist mrsdba.mrs_scan_sessions.assigned_radiologist%TYPE;
    v_is_phantom           boolean;
    v_result               varchar(1);
BEGIN
    SELECT substring(p_ursi,1,7) = 'PHANTOM' 
    INTO v_is_phantom;

    IF v_is_phantom THEN
      v_subject_age := 0;
      v_assigned_radiologist := null;
    ELSE
        -- Determine if subject exists and is enrolled in the study. 
        DECLARE
            v_tmp  numeric(1);
        BEGIN
           SELECT 1
           INTO STRICT v_tmp
           FROM mrsdba.mrs_subject_type_details d, mrsdba.mrs_subject_types t
           WHERE d.ursi=p_ursi
               AND t.study_id = p_study_id
               AND d.subject_type_id = t.subject_type_id;
           EXCEPTION
               WHEN NO_DATA_FOUND THEN
               RAISE EXCEPTION 'Subject %  does not exist',p_ursi;
        END;

        DECLARE
           v_subject_type_id   mrsdba.mrs_subject_types.subject_type_id%TYPE;
           v_usid              mrsdba.mrs_Subject_type_details.usid%TYPE;
           v_subject_enrolled     numeric(8);
        BEGIN
           SELECT count(1)
           INTO v_subject_enrolled
           FROM mrsdba.mrs_subject_type_details d, mrsdba.mrs_subject_types t
           WHERE d.subject_type_id = t.subject_type_id
               AND d.ursi = p_ursi
               AND t.study_id = p_study_id;

           IF v_subject_enrolled = 0 THEN

               RAISE EXCEPTION 'Subject % is not enrolled in study id: ',p_ursi,p_study_id;

           ELSE

               v_usid := mrsdba.mrs_ursi_to_usid_f(p_ursi);
               UPDATE mrs_subject_type_details
               SET disenrolled_date = null
               FROM mrs_subject_types t
               WHERE usid=v_usid
               AND  t.study_id=p_study_id
               AND  mrs_subject_type_details.subject_type_id = t.subject_type_id;

           END IF;
        END;

        -- Compute subject's age
        -- Cursor is not in it's own pl/sql block since the subject
        -- was already validated.
        SELECT ROUND((to_number(to_char(now() - birth_date,'DD'),'FM99999999'))/365,1)
        INTO v_subject_age
        FROM mrsdba.mrs_subjects_vw
        WHERE ursi = p_ursi;

        -- Get default_radiologist for the study
        SELECT default_radiologist 
        INTO v_assigned_radiologist
        FROM mrs_studies
        WHERE study_id = p_study_id;
    END IF;

    -- Get scan_id value
    SELECT nextval('mrsdba.mrsscases_scanid_seq')
    INTO v_scan_id;

    -- Add scan event
    INSERT INTO mrsdba.mrs_scan_sessions_hist (
       scan_id,
       label,
       segment_interval,
       study_id,
       scanner_id,
       scan_date,
       operator_id,
       ursi,
       is_phantom,
       subject_height,
       subject_height_units,
       subject_mass,
       subject_mass_units,
       subject_age,
       notes,
       mod_user,
       mod_date,
       study_dir_name,
       pi_dir_name,
       billto_study_id,
       consented_under_study_id,
       assigned_radiologist
    )
    VALUES (
       v_scan_id,
       p_scan_label,
       p_segment_interval,
       p_study_id,
       p_scanner_id,
       p_scan_date,
       p_operator_id,
       p_ursi,
       v_is_phantom,
       p_subject_height,
       p_subject_height_units,
       p_subject_mass,
       p_subject_mass_units,
       v_subject_age,
       p_notes,
       p_dbtrans_username_pt,
       now(),
       p_study_dir_name,
       p_pi_dir_name,
       p_study_id,
       p_study_id,
       v_assigned_radiologist
    );

    -- Add scan event
    INSERT INTO mrsdba.mrs_scan_sessions (
       scan_id,
       label,
       segment_interval,
       study_id,
       scanner_id,
       scan_date,
       operator_id,
       ursi,
       is_phantom,
       subject_height,
       subject_height_units,
       subject_mass,
       subject_mass_units,
       subject_age,
       notes,
       study_dir_name,
       pi_dir_name,
       billto_study_id,
       consented_under_study_id,
       assigned_radiologist
    )
    VALUES (
       v_scan_id,
       p_scan_label,
       p_segment_interval,
       p_study_id,
       p_scanner_id,
       p_scan_date,
       p_operator_id,
       p_ursi,
       v_is_phantom,
       p_subject_height,
       p_subject_height_units,
       p_subject_mass,
       p_subject_mass_units,
       v_subject_age,
       p_notes,
       p_study_dir_name,
       p_pi_dir_name,
       p_study_id,
       p_study_id,
       v_assigned_radiologist
    );

    RETURN v_scan_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_start_scan_f(p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_scan_date timestamp without time zone, p_study_dir_name character varying, p_pi_dir_name character varying, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_study_secondary_site_add_f(integer, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_study_secondary_site_add_f(p_study_id integer, p_site_id character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_study_site_id integer;
            BEGIN
                INSERT INTO mrsdba.mrs_study_secondary_sites(study_id, site_id)
                VALUES (p_study_id, p_site_id)
                RETURNING study_site_id INTO v_study_site_id;

                INSERT INTO mrs_study_secondary_sites_hist(
                    study_site_id,
                    study_id,
                    site_id,
                    mod_user,
                    mod_date)
                SELECT
                    study_site_id,
                    study_id,
                    site_id,
                    p_mod_user,
                    now()
                FROM mrs_study_secondary_sites WHERE study_site_id = v_study_site_id;

                RETURN v_study_site_id;
            END;
            $$;


ALTER FUNCTION mrsdba.mrs_study_secondary_site_add_f(p_study_id integer, p_site_id character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_study_secondary_site_remove_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_study_secondary_site_remove_f(p_study_site_relation_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_deleted_count INTEGER;
            BEGIN
            SELECT COUNT(*) FROM mrs_study_secondary_sites WHERE study_site_id=p_study_site_relation_id INTO v_deleted_count;
            DELETE FROM mrs_study_secondary_sites WHERE study_site_id=p_study_site_relation_id;

            INSERT INTO mrs_study_secondary_sites_hist(
                study_site_id,
                study_id,
                site_id,
                mod_user,
                mod_date
            )
            VALUES(
                p_study_site_relation_id,
                null,
                null,
                p_mod_user,
                now()
            );

            RETURN v_deleted_count;
            END;
            $$;


ALTER FUNCTION mrsdba.mrs_study_secondary_site_remove_f(p_study_site_relation_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_event_canned_responses_add_f(integer, character varying, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_study_tracker_event_canned_responses_add_f(p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
                INSERT INTO mrsdba.mrs_study_tracker_event_canned_responses(
                    study_id, label, default_response, hidden
                )
                VALUES (
                    p_study_id, p_label, p_default_response, p_hidden
                )
                RETURNING id INTO v_id;

                INSERT INTO mrs_study_tracker_event_canned_responses_hist(
                    id, study_id, label, default_response, hidden, mod_user, mod_date
                )
                SELECT id, study_id, label, default_response, hidden, p_mod_user, now()
                FROM mrs_study_tracker_event_canned_responses WHERE id = v_id;

                RETURN v_id;
            END;
            $$;


ALTER FUNCTION mrsdba.mrs_study_tracker_event_canned_responses_add_f(p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_event_canned_responses_remove_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_study_tracker_event_canned_responses_remove_f(p_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_deleted_count INTEGER;
            BEGIN
            v_deleted_count := 0;
            SELECT COUNT(*) FROM mrs_study_tracker_event_canned_responses WHERE id=p_id INTO v_deleted_count;

            IF v_deleted_count = 0 THEN
                RETURN 0;
            ELSIF v_deleted_count = 1 THEN
                INSERT INTO mrs_study_tracker_event_canned_responses_hist(
                    id, study_id, label, default_response, hidden, mod_user, mod_date
                )
                VALUES(
                    p_id,
                null,
                    null,
                    null,
                    null,
                    p_mod_user,
                    now()
                );
            ELSE
                RAISE EXCEPTION 'expected 0 or 1 entities to delete. found %', v_deleted_count;
            END IF;

            DELETE FROM mrs_study_tracker_event_canned_responses WHERE id=p_id;

            RETURN v_deleted_count;

            END;
            $$;


ALTER FUNCTION mrsdba.mrs_study_tracker_event_canned_responses_remove_f(p_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_event_canned_responses_update_f(integer, integer, character varying, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_study_tracker_event_canned_responses_update_f(p_id integer, p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
            UPDATE mrs_study_tracker_event_canned_responses
            SET
            study_id=p_study_id,
                label=p_label,
                default_response=p_default_response,
                hidden=p_hidden
                WHERE id = p_id
            RETURNING id into v_id;

            INSERT INTO mrs_study_tracker_event_canned_responses_hist(
                id,
                study_id,
                label,
                default_response,
                hidden,
                mod_user,
                mod_date
            )
            SELECT
                id,
                study_id,
                label,
                default_response,
                hidden,
                p_mod_user,
                now()
            FROM mrs_study_tracker_event_canned_responses
            WHERE id = v_id;

            RETURN v_id;
            END;

            $$;


ALTER FUNCTION mrsdba.mrs_study_tracker_event_canned_responses_update_f(p_id integer, p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_response_options_add_f(integer, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_study_tracker_response_options_add_f(p_tracker_id integer, p_label character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
                INSERT INTO mrsdba.mrs_study_tracker_response_options(
                    tracker_id, label
                )
                VALUES (
                    p_tracker_id, p_label
                )
                RETURNING id INTO v_id;

                INSERT INTO mrs_study_tracker_response_options_hist(
                    id, tracker_id, label, mod_user, mod_date
                )
                SELECT id, tracker_id, label, p_mod_user, now()
                FROM mrs_study_tracker_response_options WHERE id = v_id;

                RETURN v_id;
            END;
            $$;


ALTER FUNCTION mrsdba.mrs_study_tracker_response_options_add_f(p_tracker_id integer, p_label character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_response_options_remove_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_study_tracker_response_options_remove_f(p_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_deleted_count INTEGER;
            BEGIN
            v_deleted_count := 0;
            SELECT COUNT(*) FROM mrs_study_tracker_response_options WHERE id=p_id INTO v_deleted_count;

            IF v_deleted_count = 0 THEN
                RETURN 0;
            ELSIF v_deleted_count = 1 THEN
                INSERT INTO mrs_study_tracker_response_options_hist(
                    id, tracker_id, label, mod_user, mod_date
                )
                VALUES(
                    p_id,
                null,
                    null,
                    p_mod_user,
                    now()
                );
            ELSE
                RAISE EXCEPTION 'expected 0 or 1 entities to delete. found %', v_deleted_count;
            END IF;

            DELETE FROM mrs_study_tracker_response_options WHERE id=p_id;

            RETURN v_deleted_count;

            END;
            $$;


ALTER FUNCTION mrsdba.mrs_study_tracker_response_options_remove_f(p_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_response_options_update_f(integer, integer, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_study_tracker_response_options_update_f(p_id integer, p_tracker_id integer, p_label character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
            UPDATE mrs_study_tracker_response_options
            SET
            tracker_id=p_tracker_id,
                label=p_label
                WHERE id = p_id
            RETURNING id into v_id;

            INSERT INTO mrs_study_tracker_response_options_hist(
                id,
                tracker_id,
                label,
                mod_user,
                mod_date
            )
            SELECT
                id,
                tracker_id,
                label,
                p_mod_user,
                now()
            FROM mrs_study_tracker_response_options
            WHERE id = v_id;

            RETURN v_id;
            END;

            $$;


ALTER FUNCTION mrsdba.mrs_study_tracker_response_options_update_f(p_id integer, p_tracker_id integer, p_label character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_study_trackers_add_f(integer, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_study_trackers_add_f(p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
                INSERT INTO mrsdba.mrs_study_trackers(
                    study_id, label, permit_custom_text_response
                )
                VALUES (
                    p_study_id, p_label, p_permit_custom_text_response
                )
                RETURNING id INTO v_id;

                INSERT INTO mrs_study_trackers_hist(
                    id, study_id, label, permit_custom_text_response, mod_user, mod_date
                )
                SELECT id, study_id, label, permit_custom_text_response, p_mod_user, now()
                FROM mrs_study_trackers WHERE id = v_id;

                RETURN v_id;
            END;
            $$;


ALTER FUNCTION mrsdba.mrs_study_trackers_add_f(p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_study_trackers_remove_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_study_trackers_remove_f(p_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_deleted_count INTEGER;
            BEGIN
            v_deleted_count := 0;
            SELECT COUNT(*) FROM mrs_study_trackers WHERE id=p_id INTO v_deleted_count;

            IF v_deleted_count = 0 THEN
                RETURN 0;
            ELSIF v_deleted_count = 1 THEN
                INSERT INTO mrs_study_trackers_hist(
                    id, study_id, label, permit_custom_text_response, mod_user, mod_date
                )
                VALUES(
                    p_id,
                null,
                    null,
                    null,
                    p_mod_user,
                    now()
                );
            ELSE
                RAISE EXCEPTION 'expected 0 or 1 entities to delete. found %', v_deleted_count;
            END IF;

            DELETE FROM mrs_study_trackers WHERE id=p_id;

            RETURN v_deleted_count;

            END;
            $$;


ALTER FUNCTION mrsdba.mrs_study_trackers_remove_f(p_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_study_trackers_update_f(integer, integer, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_study_trackers_update_f(p_id integer, p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
            UPDATE mrs_study_trackers
            SET
            study_id=p_study_id,
                label=p_label,
                permit_custom_text_response=p_permit_custom_text_response
                WHERE id = p_id
            RETURNING id into v_id;

            INSERT INTO mrs_study_trackers_hist(
                id,
                study_id,
                label,
                permit_custom_text_response,
                mod_user,
                mod_date
            )
            SELECT
                id,
                study_id,
                label,
                permit_custom_text_response,
                p_mod_user,
                now()
            FROM mrs_study_trackers
            WHERE id = v_id;

            RETURN v_id;
            END;

            $$;


ALTER FUNCTION mrsdba.mrs_study_trackers_update_f(p_id integer, p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_add_f(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_contacts_add_f(p_usid character varying, p_contact_fname character varying, p_contact_lname character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_contact_id integer;
            BEGIN
            INSERT INTO mrs_subject_contacts(usid, firstname, lastname)
            VALUES  (p_usid, p_contact_fname, p_contact_lname)
            RETURNING subject_contact_id INTO v_contact_id;

            INSERT INTO mrs_subject_contacts_hist(
                subject_contact_id,
                usid,
                firstname,
                lastname,
                mod_user,
                mod_date)
            SELECT
                subject_contact_id,
                usid,
                firstname,
                lastname ,
                p_mod_user,
                now()
            FROM mrs_subject_contacts WHERE subject_contact_id = v_contact_id;

            RETURN v_contact_id;

            END;
            $$;


ALTER FUNCTION mrsdba.mrs_subject_contacts_add_f(p_usid character varying, p_contact_fname character varying, p_contact_lname character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_addresses_add_f(integer, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_contacts_addresses_add_f(p_contact_id integer, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_postalcode character varying, p_country character varying, p_notes character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        DECLARE v_contact_address_id integer;
        BEGIN
        INSERT INTO mrs_subject_contacts_addresses(
            subject_contact_id,
            line1,
            line2,
            city,
            state,
            postalcode,
            country,
            notes
        )
        VALUES (
            p_contact_id,
            p_line1,
            p_line2,
            p_city,
            p_state,
            p_postalcode,
            p_country,
            p_notes
        )
        RETURNING subject_contact_address_id INTO v_contact_address_id;

        INSERT INTO mrs_subject_contacts_addresses_hist(
            subject_contact_address_id,
            subject_contact_id,
            line1,
            line2,
            city,
            state,
            postalcode,
            country,
            notes,
            mod_user,
            mod_date
        )
        SELECT
            subject_contact_address_id,
            subject_contact_id,
            line1,
            line2,
            city,
            state,
            postalcode,
            country,
            notes,
            p_mod_user,
            now()
        FROM mrs_subject_contacts_addresses
        WHERE subject_contact_address_id = v_contact_address_id;

        RETURN v_contact_address_id;
        END;
        $$;


ALTER FUNCTION mrsdba.mrs_subject_contacts_addresses_add_f(p_contact_id integer, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_postalcode character varying, p_country character varying, p_notes character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_addresses_remove_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_contacts_addresses_remove_f(p_address_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

        DECLARE v_deleted_count INTEGER;
        BEGIN
            SELECT COUNT(*)
            FROM mrs_subject_contacts_addresses
            WHERE subject_contact_address_id=p_address_id
            INTO v_deleted_count;

            DELETE FROM mrs_subject_contacts_addresses
            WHERE subject_contact_address_id=p_address_id;

            INSERT INTO mrs_subject_contacts_addresses_hist(
                subject_contact_address_id,
                subject_contact_id,
                line1,
                line2,
                city,
                state,
                postalcode,
                country,
                notes,
                mod_user,
                mod_date
            )
            VALUES(
                p_address_id,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                p_mod_user,
                now()
            );

            RETURN v_deleted_count;
        END;
        $$;


ALTER FUNCTION mrsdba.mrs_subject_contacts_addresses_remove_f(p_address_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_addresses_update_f(integer, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_contacts_addresses_update_f(p_contact_address_id integer, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_postalcode character varying, p_country character varying, p_notes character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        DECLARE v_contact_address_id integer;
        BEGIN

        UPDATE mrs_subject_contacts_addresses
        SET
            line1=p_line1,
            line2=p_line2,
            city=p_city,
            state=p_state,
            postalcode=p_postalcode,
            country=p_country,
            notes=p_notes
        WHERE subject_contact_address_id = p_contact_address_id
        RETURNING subject_contact_address_id into v_contact_address_id;

        INSERT INTO mrs_subject_contacts_addresses_hist(
            subject_contact_address_id,
            subject_contact_id,
            line1,
            line2,
            city,
            state,
            postalcode,
            country,
            notes,
            mod_user,
            mod_date
        )
        SELECT
            subject_contact_address_id,
            subject_contact_id,
            line1,
            line2,
            city,
            state,
            postalcode,
            country,
            notes,
            p_mod_user,
            now()
        FROM mrs_subject_contacts_addresses
        WHERE subject_contact_address_id = v_contact_address_id;

        RETURN v_contact_address_id;

        END;
        $$;


ALTER FUNCTION mrsdba.mrs_subject_contacts_addresses_update_f(p_contact_address_id integer, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_postalcode character varying, p_country character varying, p_notes character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_phones_add_f(integer, bigint, integer, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_contacts_phones_add_f(p_subject_contact_id integer, p_number bigint, p_extension integer, p_type character varying, p_notes character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        DECLARE v_contact_phone_id integer;
        BEGIN
        INSERT INTO mrs_subject_contacts_phones(
            subject_contact_id,
            number,
            extension,
            type,
            notes
        )
        VALUES (
            p_subject_contact_id,
            p_number,
            p_extension,
            p_type,
            p_notes
        )
        RETURNING subject_contact_phone_id INTO v_contact_phone_id;

        INSERT INTO mrs_subject_contacts_phones_hist(
            subject_contact_phone_id,
            subject_contact_id,
            number,
            extension,
            type,
            notes,
            mod_user,
            mod_date
        )
        SELECT
            subject_contact_phone_id,
            subject_contact_id,
            number,
            extension,
            type,
            notes,
            p_mod_user,
            now()
        FROM mrs_subject_contacts_phones
        WHERE subject_contact_phone_id = v_contact_phone_id;

        RETURN v_contact_phone_id;

        END;
        $$;


ALTER FUNCTION mrsdba.mrs_subject_contacts_phones_add_f(p_subject_contact_id integer, p_number bigint, p_extension integer, p_type character varying, p_notes character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_phones_remove_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_contacts_phones_remove_f(p_phone_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_deleted_count INTEGER;
            BEGIN
            SELECT COUNT(*) FROM mrs_subject_contacts_phones WHERE subject_contact_phone_id=p_phone_id INTO v_deleted_count;
            DELETE FROM mrs_subject_contacts_phones WHERE subject_contact_phone_id=p_phone_id;

            INSERT INTO mrs_subject_contacts_phones_hist(
                subject_contact_phone_id,
                subject_contact_id,
                number,
                extension,
                type,
                notes,
                mod_user,
                mod_date
            )
            VALUES(
                p_phone_id,
                null,
                null,
                null,
                null,
                null,
                p_mod_user,
                now()
            );

            RETURN v_deleted_count;
            END;
            $$;


ALTER FUNCTION mrsdba.mrs_subject_contacts_phones_remove_f(p_phone_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_phones_update_f(integer, bigint, integer, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_contacts_phones_update_f(p_contact_phone_id integer, p_number bigint, p_extension integer, p_type character varying, p_notes character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_contact_phone_id integer;
            BEGIN

            UPDATE mrs_subject_contacts_phones
            SET
                number=p_number,
                extension=p_extension,
                type=p_type,
                notes=p_notes
            WHERE subject_contact_phone_id = p_contact_phone_id
            RETURNING subject_contact_phone_id into v_contact_phone_id;

            INSERT INTO mrs_subject_contacts_phones_hist(
                subject_contact_phone_id,
                subject_contact_id,
                number,
                extension,
                type,
                notes,
                mod_user,
                mod_date
            )
            SELECT
                subject_contact_phone_id,
                subject_contact_id,
                number,
                extension,
                type,
                notes,
                p_mod_user,
                now()
            FROM mrs_subject_contacts_phones
            WHERE subject_contact_phone_id = v_contact_phone_id;

            RETURN v_contact_phone_id;

            END;
            $$;


ALTER FUNCTION mrsdba.mrs_subject_contacts_phones_update_f(p_contact_phone_id integer, p_number bigint, p_extension integer, p_type character varying, p_notes character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_remove_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_contacts_remove_f(p_contact_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_deleted_count INTEGER;
            BEGIN
            SELECT COUNT(*) FROM mrs_subject_contacts WHERE subject_contact_id=p_contact_id INTO v_deleted_count;
            DELETE FROM mrs_subject_contacts WHERE subject_contact_id=p_contact_id;

            INSERT INTO mrs_subject_contacts_hist(
                subject_contact_id,
                usid,
                firstname,
                lastname,
                mod_user,
                mod_date
            )
            VALUES(
                p_contact_id,
                null,
                null,
                null,
                p_mod_user,
                now()
            );

            RETURN v_deleted_count;
            END;
            $$;


ALTER FUNCTION mrsdba.mrs_subject_contacts_remove_f(p_contact_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_update_f(integer, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_contacts_update_f(p_contact_id integer, p_contact_fname character varying, p_contact_lname character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_contact_id integer;
            BEGIN

            UPDATE mrs_subject_contacts
            SET firstname=p_contact_fname, lastname=p_contact_lname
            WHERE subject_contact_id = p_contact_id
            RETURNING subject_contact_id into v_contact_id;

            INSERT INTO mrs_subject_contacts_hist(
                subject_contact_id,
                usid,
                firstname,
                lastname,
                mod_user,
                mod_date)
            SELECT
                subject_contact_id,
                usid,
                firstname,
                lastname ,
                p_mod_user,
                now()
            FROM mrs_subject_contacts WHERE subject_contact_id = p_contact_id;

            RETURN v_contact_id;

            END;
            $$;


ALTER FUNCTION mrsdba.mrs_subject_contacts_update_f(p_contact_id integer, p_contact_fname character varying, p_contact_lname character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_events_add_f(integer, timestamp with time zone, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_tracker_events_add_f(p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
                INSERT INTO mrsdba.mrs_subject_tracker_events(
                    subject_type_detail_id, timestamp, log, tracking_diff
                )
                VALUES (
                    p_subject_type_detail_id, p_timestamp, p_log, p_tracking_diff
                )
                RETURNING id INTO v_id;

                INSERT INTO mrs_subject_tracker_events_hist(
                    id, subject_type_detail_id, timestamp, log, tracking_diff, mod_user, mod_date
                )
                SELECT id, subject_type_detail_id, timestamp, log, tracking_diff, p_mod_user, now()
                FROM mrs_subject_tracker_events WHERE id = v_id;

                RETURN v_id;
            END;
            $$;


ALTER FUNCTION mrsdba.mrs_subject_tracker_events_add_f(p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_events_remove_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_tracker_events_remove_f(p_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_deleted_count INTEGER;
            BEGIN
            v_deleted_count := 0;
            SELECT COUNT(*) FROM mrs_subject_tracker_events WHERE id=p_id INTO v_deleted_count;

            IF v_deleted_count = 0 THEN
                RETURN 0;
            ELSIF v_deleted_count = 1 THEN
                INSERT INTO mrs_subject_tracker_events_hist(
                    id, subject_type_detail_id, timestamp, log, tracking_diff, mod_user, mod_date
                )
                VALUES(
                    p_id,
                null,
                    null,
                    null,
                    null,
                    p_mod_user,
                    now()
                );
            ELSE
                RAISE EXCEPTION 'expected 0 or 1 entities to delete. found %', v_deleted_count;
            END IF;

            DELETE FROM mrs_subject_tracker_events WHERE id=p_id;

            RETURN v_deleted_count;

            END;
            $$;


ALTER FUNCTION mrsdba.mrs_subject_tracker_events_remove_f(p_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_events_update_f(integer, integer, timestamp with time zone, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_tracker_events_update_f(p_id integer, p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
            UPDATE mrs_subject_tracker_events
            SET
            subject_type_detail_id=p_subject_type_detail_id,
                timestamp=p_timestamp,
                log=p_log,
                tracking_diff=p_tracking_diff
                WHERE id = p_id
            RETURNING id into v_id;

            INSERT INTO mrs_subject_tracker_events_hist(
                id,
                subject_type_detail_id,
                timestamp,
                log,
                tracking_diff,
                mod_user,
                mod_date
            )
            SELECT
                id,
                subject_type_detail_id,
                timestamp,
                log,
                tracking_diff,
                p_mod_user,
                now()
            FROM mrs_subject_tracker_events
            WHERE id = v_id;

            RETURN v_id;
            END;

            $$;


ALTER FUNCTION mrsdba.mrs_subject_tracker_events_update_f(p_id integer, p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_responses_add_f(integer, integer, integer, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_tracker_responses_add_f(p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
                INSERT INTO mrsdba.mrs_subject_tracker_responses(
                    event_id, tracker_id, tracker_response_option_id, custom_text_response
                )
                VALUES (
                    p_event_id, p_tracker_id, p_tracker_response_option_id, p_custom_text_response
                )
                RETURNING id INTO v_id;

                INSERT INTO mrs_subject_tracker_responses_hist(
                    id, event_id, tracker_id, tracker_response_option_id, custom_text_response, mod_user, mod_date
                )
                SELECT id, event_id, tracker_id, tracker_response_option_id, custom_text_response, p_mod_user, now()
                FROM mrs_subject_tracker_responses WHERE id = v_id;

                RETURN v_id;
            END;
            $$;


ALTER FUNCTION mrsdba.mrs_subject_tracker_responses_add_f(p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_responses_remove_f(integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_tracker_responses_remove_f(p_id integer, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_deleted_count INTEGER;
            BEGIN
            v_deleted_count := 0;
            SELECT COUNT(*) FROM mrs_subject_tracker_responses WHERE id=p_id INTO v_deleted_count;

            IF v_deleted_count = 0 THEN
                RETURN 0;
            ELSIF v_deleted_count = 1 THEN
                INSERT INTO mrs_subject_tracker_responses_hist(
                    id, event_id, tracker_id, tracker_response_option_id, custom_text_response, mod_user, mod_date
                )
                VALUES(
                    p_id,
                null,
                    null,
                    null,
                    null,
                    p_mod_user,
                    now()
                );
            ELSE
                RAISE EXCEPTION 'expected 0 or 1 entities to delete. found %', v_deleted_count;
            END IF;

            DELETE FROM mrs_subject_tracker_responses WHERE id=p_id;

            RETURN v_deleted_count;

            END;
            $$;


ALTER FUNCTION mrsdba.mrs_subject_tracker_responses_remove_f(p_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_responses_update_f(integer, integer, integer, integer, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_subject_tracker_responses_update_f(p_id integer, p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            DECLARE v_id integer;
            BEGIN
            UPDATE mrs_subject_tracker_responses
            SET
            event_id=p_event_id,
                tracker_id=p_tracker_id,
                tracker_response_option_id=p_tracker_response_option_id,
                custom_text_response=p_custom_text_response
                WHERE id = p_id
            RETURNING id into v_id;

            INSERT INTO mrs_subject_tracker_responses_hist(
                id,
                event_id,
                tracker_id,
                tracker_response_option_id,
                custom_text_response,
                mod_user,
                mod_date
            )
            SELECT
                id,
                event_id,
                tracker_id,
                tracker_response_option_id,
                custom_text_response,
                p_mod_user,
                now()
            FROM mrs_subject_tracker_responses
            WHERE id = v_id;

            RETURN v_id;
            END;

            $$;


ALTER FUNCTION mrsdba.mrs_subject_tracker_responses_update_f(p_id integer, p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_submit_self_assessment_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_submit_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE
         v_aqueue_id numeric;
         v_queue_instrument_id numeric;
         v_queue_type_id int;
         v_sort_order numeric;
         v_min_sort_order numeric;
         v_segment_interval_id numeric;
         v_login_id numeric;
         v_rows numeric;
         v_protocol_id numeric;
         v_entry_code character;

         BEGIN

            SELECT INTO v_aqueue_id, v_queue_instrument_id, v_queue_type_id, v_sort_order, v_segment_interval_id, v_login_id
                aqueue_id, queue_instrument_id, queue_type_id, sort_order, segment_interval_id, login_id
            FROM mrsdba.mrs_subject_assessments_queue_instruments
            WHERE assessment_id = p_assessment_id;

            SELECT INTO v_entry_code 
                CASE WHEN s.sa_review IS TRUE THEN 'R'
                     ELSE 'C'
                END
            FROM mrsdba.mrs_assessments a
            JOIN mrsdba.mrs_instruments_studies s
                ON a.instrument_id = s.instrument_id AND a.study_id = s.study_id
            WHERE a.assessment_id = p_assessment_id;

            BEGIN
               select min(sort_order) into strict v_min_sort_order
               from mrsdba.mrs_subject_assessments_queue_instruments
               where login_id = v_login_id
               and segment_interval_id = v_segment_interval_id
               and sort_order > v_sort_order;

               exception when NO_DATA_FOUND then
               v_min_sort_order := 0;
            END;

            INSERT INTO mrsdba.mrs_assessments_hist(
               assessment_id,
               entry_code,
               entry_end_date,
               mod_user,
               mod_date)
            VALUES(
               p_assessment_id,
               v_entry_code,
               now(),
               p_dbtrans_username_pt,
               now());

            UPDATE mrsdba.mrs_assessments
            SET entry_end_date = now(),
                entry_code = v_entry_code
            WHERE assessment_id = p_assessment_id;

            INSERT INTO mrsdba.mrs_subject_assessments_queue_instruments_hist(
               aqueue_id, queue_instrument_id, assessment_id, queue_type_id, mod_date, mod_user
            )
            values (v_aqueue_id, v_queue_instrument_id, p_assessment_id, v_queue_type_id, now(), p_dbtrans_username_pt);
            
            
            DELETE FROM mrsdba.mrs_subject_assessments_queue_instruments
            WHERE queue_instrument_id = v_queue_instrument_id;

            --check if there are still instruments queued under the parent
            SELECT COUNT(aqueue_id) INTO v_rows
            FROM mrsdba.mrs_subject_assessments_queue_instruments
            WHERE aqueue_id = v_aqueue_id;

            --check it its an auto queue
            SELECT from_protocol_id INTO v_protocol_id
            FROM mrsdba.mrs_subject_assessments_queue
            WHERE aqueue_id = v_aqueue_id;

            IF v_protocol_id IS NOT NULL THEN
            --do nothing, we keep auto queued protocols so we dont queue them twice
            ELSEIF v_rows = 0 THEN
               --no more intruments queued, we can delete the parent
               INSERT INTO mrsdba.mrs_subject_assessments_queue_hist(
                  aqueue_id,  mod_date, mod_user
               )
               values (v_aqueue_id, now(), p_dbtrans_username_pt);
               DELETE FROM mrsdba.mrs_subject_assessments_queue
               WHERE aqueue_id = v_aqueue_id;
            END IF;

            --update the sort order of remaining queue items so that the lowest item is the same sort order as the deleted queue item
            UPDATE mrs_subject_assessments_queue_instruments saq
            SET sort_order = sort_order - (v_min_sort_order - v_sort_order)
            WHERE saq.segment_interval_id = v_segment_interval_id
            AND saq.login_id = v_login_id
            AND saq.queue_type_id = v_queue_type_id
            AND saq.sort_order > v_sort_order;


            RETURN '1';

         end;
         $$;


ALTER FUNCTION mrsdba.mrs_submit_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_testing_func_f(integer); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_testing_func_f(numparameter integer) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER COST 10
    AS $$
DECLARE
strresult text;
BEGIN
strresult := 'Once';
IF numparameter > 0 THEN
RAISE EXCEPTION 'Inexistent ID --> %',numparameter;
FOR i IN 1 .. numparameter LOOP
strresult := strresult || '..and Again';
END Loop;
End If;
Return strresult;
END;
$$;


ALTER FUNCTION mrsdba.mrs_testing_func_f(numparameter integer) OWNER TO postgres;

--
-- Name: mrs_testing_func_f(integer, integer); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_testing_func_f(numparameter integer, extraparam integer) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER COST 10
    AS $$
DECLARE
strresult text;
BEGIN
strresult := 'Once';
IF extraparam > 0 THEN
RAISE EXCEPTION 'Inexistent ID --> %',numparameter;
FOR i IN 1 .. numparameter LOOP
strresult := strresult || '..and Again';
END Loop;
End If;
Return strresult;
END;
$$;


ALTER FUNCTION mrsdba.mrs_testing_func_f(numparameter integer, extraparam integer) OWNER TO postgres;

--
-- Name: mrs_unassign_per_rol_det_add_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_unassign_per_rol_det_add_f(p_address_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
retval            varchar(40);

BEGIN

   DELETE FROM MRSDBA.MRS_PERSON_ROLE_DET_ADDRESSES
      WHERE address_id = p_address_id and prd_id = p_prd_id;


   INSERT INTO MRSDBA.mrs_per_role_det_addrss_hist(PRD_ID,
      ADDRESS_ID,
      MOD_USER,
      MOD_DATE)
   VALUES(p_prd_id,
      p_address_id,
      p_dbtrans_username_pt,
      now());


   RETURN 'DELETED';

end;
$$;


ALTER FUNCTION mrsdba.mrs_unassign_per_rol_det_add_f(p_address_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_unassign_personphone_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_unassign_personphone_f(p_phone_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
retval            varchar(40);

BEGIN

   DELETE FROM MRSDBA.MRS_PERSON_ROLE_DET_PHONES
      WHERE phone_id = p_phone_id and prd_id = p_prd_id;


   INSERT INTO MRSDBA.mrs_per_role_det_phones_hist(PRD_ID,
      PHONE_ID,
      MOD_USER,
      MOD_DATE)
   VALUES(p_prd_id,
      p_phone_id,
      p_dbtrans_username_pt,
      now());


   RETURN 'DELETED';

end;
$$;


ALTER FUNCTION mrsdba.mrs_unassign_personphone_f(p_phone_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_account_f(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_account_f(p_account_number character varying, p_account_label character varying, p_description character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  UPDATE mrs_accounts
     SET description = p_description,
         label = p_account_label
   WHERE account_number = p_account_number;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Account % does not exist',p_account_number;
  END IF;

  INSERT INTO mrs_accounts_hist(
    account_number,
    label,
    description,
    purchase_request_id,
    mod_user,
    mod_date
  )
  SELECT account_number
         ,label
         ,description
         ,purchase_request_id
         ,p_dbtrans_username_pt
         ,now()
    FROM mrs_accounts
   WHERE account_number = p_account_number;

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_update_account_f(p_account_number character varying, p_account_label character varying, p_description character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_address_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_usid mrs_addresses.usid%TYPE;
BEGIN

  -- Update the active record
  UPDATE mrs_addresses
     SET line1 = p_line1,
         line2 = p_line2,
         city  = p_city,
         state = p_state,
         zip   = p_zip,
         country = p_country,
         notes = p_notes
   WHERE usid = p_usid;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'No address found.';
  END IF;

  INSERT INTO mrs_addresses_hist (
    address_id,
    line1,
    line2,
    city,
    state,
    zip,
    country,
    notes,
    start_date,
    end_date,
    usid,
    mod_user,
    mod_date
  )
  SELECT address_id,
         line1,
         line2,
         city,
         state,
         zip,
         country,
         notes,
         start_date,
         end_date,
         usid,
         p_dbtrans_username_pt,
         now()
    FROM mrs_addresses
   WHERE usid = p_usid;

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_all_conditional_jump_sort_f(numeric[], text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_all_conditional_jump_sort_f(p_conditional_jump_array numeric[], p_question_id text, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_count    int;
BEGIN


/* 1)
 * because of the Unique Key constraint on this table we need to move all of the
 * sort_order's that apply to p_question_id to be something out of their  normal 
 * range before updating the sort_order
 */
UPDATE mrs_instrument_question_jumps 
SET sort_order = -sort_order 
WHERE question_id = p_question_id;

/* 2)
 * do the update
 */
IF array_upper(p_conditional_jump_array,1) IS NOT NULL
THEN
   FOR i IN 1 .. array_upper(p_conditional_jump_array,1)
   LOOP

      INSERT INTO mrs_instrument_question_jumps_hist (
         question_jump_id, question_id, sort_order, mod_user, mod_date
      ) VALUES (
         p_conditional_jump_array[i], p_question_id, i, p_mod_user, now()
      );

      UPDATE mrsdba.mrs_instrument_question_jumps
      SET sort_order = i
      WHERE question_jump_id = p_conditional_jump_array[i]
      AND question_id = p_question_id;

   END lOOP;
END IF;

/* 3)
 * verify that all of the sort_order's are positive again.  If they are not all
 * positive, then we know that we made at least one negative in the first step, 
 * that was not updated in the second step
 */
SELECT COUNT(*)
FROM mrs_instrument_question_jumps
WHERE sort_order < 0
AND question_id = p_question_id
INTO v_count;

IF v_count > 0
THEN 
   RAISE EXCEPTION 'ERROR: Unable to re-arrange conditional jumps for question_id: %', p_question_id;
END IF;

/* 4)
 * if no error, return 1.
 */
RETURN 1;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_all_conditional_jump_sort_f(p_conditional_jump_array numeric[], p_question_id text, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_all_inst_quest_sort_f(character varying[], character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_all_inst_quest_sort_f(p_question_array character varying[], p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_result int;
BEGIN

IF array_upper(p_question_array,1) IS NOT NULL
THEN
    FOR i in 1 .. array_upper(p_question_array,1) LOOP
        v_result := mrsdba.mrs_update_inst_quest_sort_f(                                         
            p_question_array[i],                                                                        
            i,
            p_mod_user
        );
    END Loop;
END IF;
RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_all_inst_quest_sort_f(p_question_array character varying[], p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_all_inst_section_sort_f(numeric[], numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_all_inst_section_sort_f(p_section_array numeric[], p_instrument_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
	v_result int;
BEGIN

IF array_upper(p_section_array,1) IS NOT NULL
THEN
for i in 1 .. array_upper(p_section_array,1) LOOP
        update mrsdba.mrs_instrument_section_details
        set sort_order = i
        where section_id = p_section_array[i]
        and instrument_id = p_instrument_id;                                                            
	end Loop;
END IF;
return 1;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_all_inst_section_sort_f(p_section_array numeric[], p_instrument_id numeric) OWNER TO postgres;

--
-- Name: mrs_update_analysis_detail_finishtime_f(numeric, character varying, timestamp without time zone); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_analysis_detail_finishtime_f(analysis_id_f numeric, series_id_f character varying, finish_time_f timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin

update mrs_analysis_details set analysis_finish = finish_time_f where analysis_id = analysis_id_f and series_id=series_id_f;
return analysis_id_f;

end;$$;


ALTER FUNCTION mrsdba.mrs_update_analysis_detail_finishtime_f(analysis_id_f numeric, series_id_f character varying, finish_time_f timestamp without time zone) OWNER TO postgres;

--
-- Name: mrs_update_analysis_detail_starttime_f(numeric, character varying, timestamp without time zone); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_analysis_detail_starttime_f(analysis_id_f numeric, series_id_f character varying, start_time_f timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
update mrs_analysis_details set analysis_start = start_time_f where analysis_id = analysis_id_f and series_id = series_id_f;
return analysis_id_f;
end;$$;


ALTER FUNCTION mrsdba.mrs_update_analysis_detail_starttime_f(analysis_id_f numeric, series_id_f character varying, start_time_f timestamp without time zone) OWNER TO postgres;

--
-- Name: mrs_update_analysis_queue_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_analysis_queue_f(id_f numeric) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
	update mrs_analysis_queue set analysis_start=now() where id=id_f;
	update mrs_analysis_queue_hist set analysis_start=now() where id=id_f;
	
	return id_f;

end;$$;


ALTER FUNCTION mrsdba.mrs_update_analysis_queue_f(id_f numeric) OWNER TO postgres;

--
-- Name: mrs_update_anatomy_f(numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_anatomy_f(p_anatomy_region_id numeric, p_anatomy_region_label character varying, p_description character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  UPDATE mrs_anatomy_regions
     SET label = p_anatomy_region_label,
         description = p_description
   WHERE anatomy_region_id = p_anatomy_region_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Anatomy region % does not exist.',p_anatomy_region_id;
  END IF;

  INSERT INTO mrs_anatomy_regions_hist (
    anatomy_region_id,
    label,
    description,
    mod_user,
    mod_date
  )
  SELECT anatomy_region_id,
         label,
         description,
         p_dbtrans_username_pt,
         now()
    FROM mrs_anatomy_regions
   WHERE anatomy_region_id = p_anatomy_region_id;


  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_update_anatomy_f(p_anatomy_region_id numeric, p_anatomy_region_label character varying, p_description character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_anchor_date_f(numeric, character varying, timestamp without time zone, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_anchor_date_f(subject_type_id_f numeric, ursi_f character varying, anchor_date_f timestamp without time zone, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
begin

update mrs_subject_type_details set anchor_date = anchor_date_f where subject_type_id = subject_type_id_f and ursi=ursi_f;
insert into mrs_subject_type_details_hist (ursi, subject_type_id, anchor_date, mod_user, mod_date) values (
	ursi_f,
	subject_type_id_f,
	anchor_date_f,
	mod_user_f,
	now());
return 1;
end;$$;


ALTER FUNCTION mrsdba.mrs_update_anchor_date_f(subject_type_id_f numeric, ursi_f character varying, anchor_date_f timestamp without time zone, mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_update_asmt_dx_excluded_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_asmt_dx_excluded_f(p_assessment_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
DECLARE
   v_old_dx_excluded boolean;
   v_new_dx_excluded boolean;
BEGIN

SELECT dx_excluded 
INTO v_old_dx_excluded
FROM mrsdba.mrs_assessments
WHERE assessment_id = p_assessment_id;

IF v_old_dx_excluded = TRUE
THEN
   v_new_dx_excluded = FALSE;
ELSE
   v_new_dx_excluded = TRUE;
END IF;

INSERT INTO mrs_assessments_hist (
   assessment_id,
   dx_excluded,
   mod_user,
   mod_date
)
VALUES (
   p_assessment_id,
   v_new_dx_excluded,
   p_mod_user,
   now()
);

UPDATE mrsdba.mrs_assessments
SET dx_excluded = v_new_dx_excluded
WHERE assessment_id = p_assessment_id;

IF v_new_dx_excluded = TRUE
THEN
   return 'excluded';
ELSE
   return 'included';
END IF;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_asmt_dx_excluded_f(p_assessment_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_asmt_last_qid_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_asmt_last_qid_f(p_asmt_id numeric, p_last_qid character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

         BEGIN

            UPDATE mrsdba.mrs_assessments 
               SET last_qid = p_last_qid
               WHERE assessment_id = p_asmt_id;

            RETURN '1';

         END;
         $$;


ALTER FUNCTION mrsdba.mrs_update_asmt_last_qid_f(p_asmt_id numeric, p_last_qid character varying) OWNER TO postgres;

--
-- Name: mrs_update_asmt_ownership_f(numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_asmt_ownership_f(p_assessment_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
v_response numeric;
BEGIN

--Remove all records that may already be in place for this assessment_id
DELETE FROM mrs_legacy_sharing_rules_asmts 
WHERE assessment_id = p_assessment_id;
/*
DELETE FROM mrs_ 
WHERE asmts_owners_asmt_id = p_assessment_id;
-- commenting this out, as these tables will be updated in the next refresh anyway...
--Insert all assessment_id and legacy sharing rules that apply.
*/
INSERT INTO mrs_legacy_sharing_rules_asmts (assessment_id, sharing_rule_id)
SELECT DISTINCT a.assessment_id, 
	sr.sharing_rule_id
FROM mrs_assessments a
	INNER JOIN mrs_legacy_sharing_rules sr
	ON 
		CASE
			WHEN sr.instrument_id IS NOT NULL 
				THEN sr.instrument_id = a.instrument_id 
			ELSE true = true
		END
		AND CASE
			WHEN sr.rater_id IS NOT NULL 
				THEN sr.rater_id = a.rater1
			ELSE true = true
		END
		AND CASE
			WHEN sr.segment_interval IS NOT NULL 
				THEN sr.segment_interval = a.segment_interval
			ELSE true = true
		END
		/*
		AND CASE
			WHEN sr.study_id IS NOT NULL 
				THEN sr.study_id = a.study_id
			ELSE true = true
		END
		AND CASE
			WHEN sr.seg_inst IS NOT NULL 
				THEN sr.seg_inst = a.segment_instance
			ELSE true = true
		END
		AND CASE
			WHEN sr.site_id IS NOT NULL 
				THEN sr.site_id = a.site_id
			ELSE true = true
		END
		AND CASE
			WHEN sr.entry_code IS NOT NULL 
				THEN sr.entry_code = a.entry_code
			ELSE true = true
		END
		AND CASE
			WHEN sr.assessment_id IS NOT NULL 
				THEN sr.assessment_id = a.assessment_id
			ELSE true = true
		END
		AND CASE
			WHEN sr.dataentry_type_id IS NOT NULL 
				THEN sr.dataentry_type_id = a.dataentry_type_id
			ELSE true = true
		END
		AND CASE
			WHEN sr.source_type IS NOT NULL 
				THEN sr.source_type = a.source_type
			ELSE true = true
		END
	INNER JOIN mrs_subject_types st
		ON st.study_id = a.study_id
	LEFT JOIN mrs_subject_type_details std
	ON a.ursi = std.ursi AND st.subject_type_id = std.subject_type_id
		AND CASE
			WHEN sr.subject_type_id IS NOT NULL
				THEN sr.subject_type_id = std.subject_type_id
			ELSE true = true
		END
		AND CASE
			WHEN sr.ursi IS NOT NULL
				THEN sr.ursi = std.ursi
			ELSE true = true
		END
*/

	WHERE a.assessment_id = p_assessment_id
	AND sr.study_id IS NULL;
/*
-- Insert assessment_id and corresponding study_ids based on legacy sharing rules
INSERT INTO mrs_asmts_owners_mv (asmts_owners_asmt_id, asmts_owners_study_id)
SELECT DISTINCT q.assessment_id, q.study_id
	FROM (SELECT DISTINCT srs.study_id as study_id, 
	   sra.asmt_id as assessment_id
	FROM mrs_legacy_sharing_rules_asmts_mv sra 
	   INNER JOIN mrs_sharing_rules sr
	   ON sr.sharing_rule_id = sra.rule_id
	   INNER JOIN mrs_sharing_rules_studies srs
	   ON sr.sharing_rule_id = srs.rule_id
	   WHERE sra.asmt_id = p_assessment_id
	UNION
	   SELECT a.study_id, a.assessment_id 
	   FROM mrs_assessments a 
	   WHERE a.study_id IS NOT NULL
	   and a.assessment_id = p_assessment_id) as q;
*/
--Now do the same for mrs_sharing_rules_asmts.
--Remove all records that may already be in place for this assessment_id
DELETE FROM mrs_sharing_rules_asmts
WHERE assessment_id = p_assessment_id;
/*
DELETE FROM mrs_sharing_rules_asmts_studies_mv 
WHERE studies_asmt_id = p_assessment_id;
-- commenting this out, as these tables will be updated in the next refresh anyway...
--Insert all assessment_id and legacy sharing rules that apply.
*/
INSERT INTO mrs_sharing_rules_asmts (assessment_id, sharing_rule_id)
SELECT  DISTINCT ao.assessment_id, 
	sr.sharing_rule_id 
FROM mrs_sharing_rules sr
	INNER JOIN mrs_asmts_owners_vw ao
	ON sr.study_id = ao.study_id
WHERE sr.study_id IS NOT NULL
	AND ao.assessment_id = p_assessment_id
	;

	INSERT INTO mrs_sharing_rules_asmts (assessment_id, sharing_rule_id)
SELECT  DISTINCT a.assessment_id, 
	sr.sharing_rule_id 
FROM mrs_sharing_rules sr
	INNER JOIN mrs_assessments a
	ON sr.site_id = a.site_id
WHERE a.assessment_id = p_assessment_id
	;
/*
-- Insert assessment_id and corresponding study_ids based on legacy sharing rules
INSERT INTO mrs_studies_mv (studies_study_id, studies_asmt_id, is_shared)
(SELECT DISTINCT srs.study_id, 
	sra.asmt_id, 
	CASE 
		WHEN sr.study_id IS NOT NULL AND sr.study_id != srs.study_id
			THEN true
		ELSE false
	END as is_shared
FROM mrs_sharing_rules_asmts_mv sra 
	INNER JOIN mrs_sharing_rules sr
	ON sr.sharing_rule_id = sra.rule_id
	INNER JOIN mrs_sharing_rules_studies srs
	ON sr.sharing_rule_id = srs.rule_id
	WHERE sra.asmt_id = p_assessment_id);
	
*/
RETURN 1;

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_asmt_ownership_f(p_assessment_id numeric) OWNER TO postgres;

--
-- Name: mrs_update_auto_message_f(numeric, text, text, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_auto_message_f(message_id_f numeric, subject_f text, cc_f text, body_f text, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$BEGIN
    UPDATE mrs_auto_messages SET message_subject = subject_f,
                                 message_cc = cc_f,
                                 message_body = body_f
                             WHERE message_id = message_id_f;



    INSERT INTO mrs_auto_messages_hist (
                                         message_id
                                        ,message_subject
                                        ,message_cc
                                        ,message_body
                                        ,mod_date
                                        ,mod_user
                                        )
                                        values (
                                         message_id_f
                                        ,subject_f
                                        ,cc_f
                                        ,body_f
                                        ,now()
                                        ,mod_user_f
                                        );

    RETURN message_id_f;

END;$$;


ALTER FUNCTION mrsdba.mrs_update_auto_message_f(message_id_f numeric, subject_f text, cc_f text, body_f text, mod_user_f character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_charge_code_f(numeric, character varying, character varying, timestamp without time zone, timestamp without time zone, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_charge_code_f(p_charge_code_id numeric, p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   BEGIN
      UPDATE mrs_charge_codes 
      SET
         charge_code = p_charge_code,
         project_number = p_project_number,
         start_date = p_start_date,
         end_date = p_end_date
      WHERE charge_code_id = p_charge_code_id;

      IF NOT FOUND THEN
      RAISE EXCEPTION 'Charge Code does not exist %',p_charge_code_id;
      END IF;

      INSERT INTO mrsdba.mrs_charge_codes_hist
      (
         charge_code_id,
         charge_code,
         project_number,
         start_date,
         end_date,
         mod_user,
         mod_date
      )
      VALUES
      (
         p_charge_code_id,
         p_charge_code,
         p_project_number,
         p_start_date,
         p_end_date,
         p_user_entered,
         now()
      );
      RETURN '1';

   END;
$$;


ALTER FUNCTION mrsdba.mrs_update_charge_code_f(p_charge_code_id numeric, p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_charge_code_site_f(numeric, numeric, numeric, character varying, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_charge_code_site_f(p_site_charge_id numeric, p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN

         UPDATE mrs_charge_code_site_details
         SET
         charge_code_id = p_charge_code_id,
         site_id = p_site_id,
         funding_source = p_funding_source,
         notes = p_notes,
         is_enabled = p_is_enabled
         WHERE site_charge_id = p_site_charge_id;

         IF NOT FOUND THEN
         RAISE EXCEPTION 'Charge Code does not exist %',p_site_charge_id;
         END IF;

         INSERT INTO mrs_charge_code_site_details_hist(
         site_charge_id,
         charge_code_id,
         site_id,
         funding_source,
         notes,
         is_enabled,
         mod_user,
         mod_date
         )
         VALUES(
         p_site_charge_id,
         p_charge_code_id,
         p_site_id,
         p_funding_source,
         p_notes,
         p_is_enabled,
         p_user_entered,
         now()
         );
         
         RETURN '1';

         end;
         $$;


ALTER FUNCTION mrsdba.mrs_update_charge_code_site_f(p_site_charge_id numeric, p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_charge_code_site_modality_f(numeric, numeric, numeric, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_charge_code_site_modality_f(p_site_modality_id numeric, p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  declare
  v_site_id            mrs_charge_code_site_details.site_id%TYPE;
  BEGIN
  
  BEGIN
     SELECT site_id
     INTO v_site_id
     FROM mrs_charge_code_site_details
     WHERE site_charge_id = p_site_charge_id;
  END;

  UPDATE mrs_charge_code_site_modalities
  SET
  site_charge_id = p_site_charge_id,
  modality_id = p_modality_id,
  is_default = p_is_default,
  uses_credits = p_uses_credits
  WHERE site_modality_id = p_site_modality_id;

  IF NOT FOUND THEN
  RAISE EXCEPTION 'Site Modality ID does not exist %',p_site_modality_id;
  END IF;

  IF p_is_default = 't' THEN
  UPDATE mrs_charge_code_site_modalities
  SET is_default = 'f'
  WHERE site_modality_id IN (
     SELECT sm.site_modality_id FROM mrs_charge_code_site_details sd
     INNER JOIN mrs_charge_code_site_modalities sm ON sm.site_charge_id = sd.site_charge_id
     WHERE sd.site_id = v_site_id
     AND sm.modality_id = p_modality_id
     AND sm.site_modality_id != p_site_modality_id
  );
  END IF;

  INSERT INTO mrs_charge_code_site_modalities_hist(
  site_modality_id,
  site_charge_id,
  modality_id,
  is_default,
  uses_credits,
  mod_user,
  mod_date
  )
  VALUES(
  p_site_modality_id,
  p_site_charge_id,
  p_modality_id,
  p_is_default,
  p_uses_credits,
  p_user_entered,
  now()
  );
  RETURN '1';

  end;
  $$;


ALTER FUNCTION mrsdba.mrs_update_charge_code_site_modality_f(p_site_modality_id numeric, p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_charge_code_study_f(numeric, numeric, numeric, character varying, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_charge_code_study_f(p_study_charge_id numeric, p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN

         UPDATE mrs_charge_code_study_details
         SET
         charge_code_id = p_charge_code_id,
         study_id = p_study_id,
         funding_source = p_funding_source,
         notes = p_notes,
         is_enabled = p_is_enabled
         WHERE study_charge_id = p_study_charge_id;

         IF NOT FOUND THEN
         RAISE EXCEPTION 'Charge Code does not exist %',p_study_charge_id;
         END IF;

         INSERT INTO mrs_charge_code_study_details_hist(
         study_charge_id,
         charge_code_id,
         study_id,
         funding_source,
         notes,
         is_enabled,
         mod_user,
         mod_date
         )
         VALUES(
         p_study_charge_id,
         p_charge_code_id,
         p_study_id,
         p_funding_source,
         p_notes,
         p_is_enabled,
         p_user_entered,
         now()
         );
         
         RETURN '1';

         end;
         $$;


ALTER FUNCTION mrsdba.mrs_update_charge_code_study_f(p_study_charge_id numeric, p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_charge_code_study_modality_f(numeric, numeric, numeric, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_charge_code_study_modality_f(p_study_modality_id numeric, p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  declare
  v_study_id            mrs_charge_code_study_details.study_id%TYPE;
  BEGIN
  
  BEGIN
     SELECT study_id
     INTO v_study_id
     FROM mrs_charge_code_study_details
     WHERE study_charge_id = p_study_charge_id;
  END;

  UPDATE mrs_charge_code_study_modalities
  SET
  study_charge_id = p_study_charge_id,
  modality_id = p_modality_id,
  is_default = p_is_default,
  uses_credits = p_uses_credits
  WHERE study_modality_id = p_study_modality_id;

  IF NOT FOUND THEN
  RAISE EXCEPTION 'Study Modality ID does not exist %',p_study_modality_id;
  END IF;

  IF p_is_default = 't' THEN
  UPDATE mrs_charge_code_study_modalities
  SET is_default = 'f'
  WHERE study_modality_id IN (
     SELECT sm.study_modality_id FROM mrs_charge_code_study_details sd
     INNER JOIN mrs_charge_code_study_modalities sm ON sm.study_charge_id = sd.study_charge_id
     WHERE sd.study_id = v_study_id
     AND sm.modality_id = p_modality_id
     AND sm.study_modality_id != p_study_modality_id
  );
  END IF;

  INSERT INTO mrs_charge_code_study_modalities_hist(
  study_modality_id,
  study_charge_id,
  modality_id,
  is_default,
  uses_credits,
  mod_user,
  mod_date
  )
  VALUES(
  p_study_modality_id,
  p_study_charge_id,
  p_modality_id,
  p_is_default,
  p_uses_credits,
  p_user_entered,
  now()
  );
  RETURN '1';

  end;
  $$;


ALTER FUNCTION mrsdba.mrs_update_charge_code_study_modality_f(p_study_modality_id numeric, p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_client_assessment_backup_f(integer, integer, numeric, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_client_assessment_backup_f(p_backup_id integer, p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    BEGIN
        UPDATE mrs_client_assessment_backups
        SET
            device_id = p_device_id,
            username = p_db_transaction_username,
            date = now(),
            assessment_json = p_assessment_json,
            study_id = p_study_id
        WHERE
            backup_id = p_backup_id;

        IF NOT FOUND THEN
            RAISE EXCEPTION 'No existing backup found for backup_id %.', p_backup_id;
        END IF;

        INSERT INTO mrs_client_assessment_backups_hist (
            backup_id,
            device_id,
            username,
            date,
            assessment_json,
            study_id,
            mod_user,
            mod_date
        )
        SELECT
            backup_id,
            device_id,
            username,
            date,
            assessment_json,
            study_id,
            p_db_transaction_username,
            now()
        FROM mrs_client_assessment_backups
        WHERE backup_id = p_backup_id;

        RETURN p_backup_id;
    END;
$$;


ALTER FUNCTION mrsdba.mrs_update_client_assessment_backup_f(p_backup_id integer, p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_conditional_jump_f(integer, text, text, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_conditional_jump_f(p_question_jump_id integer, p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_sort_order numeric;
BEGIN

   SELECT sort_order 
   INTO v_sort_order
   FROM mrsdba.mrs_instrument_question_jumps
   WHERE question_jump_id = p_question_jump_id;

   INSERT INTO mrs_instrument_question_jumps_hist (
      question_jump_id, question_id, target_qid, formula, sort_order, mod_user, mod_date
   ) VALUES (
      p_question_jump_id, p_question_id, p_target_qid, p_formula, v_sort_order, p_mod_user, now()
   );

   UPDATE mrs_instrument_question_jumps
   SET
      target_qid = p_target_qid, 
      formula = p_formula, 
      sort_order = v_sort_order
   WHERE question_jump_id = p_question_jump_id;

   RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_conditional_jump_f(p_question_jump_id integer, p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_data_qc_constraint_f(integer, text, text, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_data_qc_constraint_f(p_constraint_id integer, p_formula text, p_label text, p_mod_user text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$BEGIN
    UPDATE mrs_data_qc_constraints
    SET constraint_formula = p_formula,
        label = p_label
    WHERE constraint_id = p_constraint_id;

    INSERT INTO mrs_data_qc_constraints_hist (
        constraint_id,
        constraint_formula,
        label,
        mod_user,
        mod_date)
    VALUES (
        p_constraint_id,
        p_formula,
        p_label,
        p_mod_user,
        now());

    RETURN '1';
END;$$;


ALTER FUNCTION mrsdba.mrs_update_data_qc_constraint_f(p_constraint_id integer, p_formula text, p_label text, p_mod_user text) OWNER TO ni_developers;

--
-- Name: mrs_update_dataentry_type_f(numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_dataentry_type_f(p_dataentry_type_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

 UPDATE mrs_dataentry_types
    SET label = p_label,
        description = p_description
  WHERE dataentry_type_id = p_dataentry_type_id;

 IF NOT FOUND  THEN
   RAISE EXCEPTION 'Dataentry type id % does not exist',p_dataentry_type_id;
 END IF;

 INSERT INTO mrs_dataentry_types_hist (
  dataentry_type_id,
  label,
  description,
  mod_user,
  mod_date
 )
 VALUES (
  p_dataentry_type_id,
  p_label,
  p_description,
  p_dbtrans_username_pt,
  now()
 );

 RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_dataentry_type_f(p_dataentry_type_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_document_category_f(numeric, character varying, character varying, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_document_category_f(p_category_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Update record
  UPDATE mrs_document_categories
     SET label = p_label,
         description = p_description,
         study_id = p_study_id,
         parent_id = p_parent_id,
         mod_user = p_dbtrans_username_pt,
         mod_date = now()
   WHERE category_id = p_category_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Category % does not exist',p_category_id;
  END IF;

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_update_document_category_f(p_category_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_document_f(numeric, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_document_f(p_file_id numeric, p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_site_id character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Update record
  UPDATE mrs_documents
     SET file_name = p_file_name,
         file_mime_type = p_file_mime_type,
         label = p_label,
         description = p_description,
         file_size = p_file_size,
         path_relative = p_path_relative,
         site_id = p_site_id,
         mod_user = p_dbtrans_username_pt,
         mod_date = now()
   WHERE file_id = p_file_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'File % does not exist ',p_file_id;
  END IF;

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_update_document_f(p_file_id numeric, p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_site_id character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_drug_category_f(numeric, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_drug_category_f(p_category_id numeric, p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Update record
  UPDATE mrs_drug_categories
     SET category_name   = p_category_name
        ,description = p_description
	,entered_date = now()
        ,notes = p_notes
	,user_entered = p_dbtrans_username_pt
   WHERE category_id = p_category_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Category Name % does not exist.', p_category_id;
  END IF;

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_drug_category_f(p_category_id numeric, p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_drug_prop_details_f(numeric, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_drug_prop_details_f(p_property_id numeric, p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  UPDATE mrs_drug_prop_details
  SET label = p_label,
      description = p_description,
      notes = p_notes
  WHERE property_id = p_property_id;

  INSERT INTO mrs_drug_prop_details_hist (
    property_id,
    label,
    description,
    entered_date,
    user_entered,
    notes,
    mod_user,
    mod_date
  )
  VALUES (
    p_property_id,
    p_label,
    p_description,
    now(),
    p_dbtrans_username_pt,
    p_notes,
    p_dbtrans_username_pt,
    now()
  );


  RETURN 1;

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_drug_prop_details_f(p_property_id numeric, p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_expired_studies_f(character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_expired_studies_f(p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
        insert into mrsdba.mrs_studies_hist(study_id,status_id,mod_user,mod_date)
		select s.study_id,'5',p_dbtrans_username,now()
		from mrsdba.mrs_studies s
		inner join mrsdba.mrs_study_statuses_vw st
		on s.status_id = st.status_id
		inner join mrsdba.mrs_pi_vw p
		on p.person_id = s.pi_id
		where s.expiration_date < (now() - interval '1 day')
		and s.status_id = '1'
		and p.site_id = '7';

	update mrsdba.mrs_studies
	set status_id = '5'
	where study_id in
	(
		select s.study_id 
		from mrsdba.mrs_studies s
		inner join mrsdba.mrs_study_statuses_vw st
		on s.status_id = st.status_id
		inner join mrsdba.mrs_pi_vw p
		on p.person_id = s.pi_id
		where s.expiration_date < (now() - interval '1 day')
		and s.status_id = '1'
		and p.site_id = '7'
	);



	return '1';
   
END;
$$;


ALTER FUNCTION mrsdba.mrs_update_expired_studies_f(p_dbtrans_username character varying) OWNER TO postgres;

--
-- Name: mrs_update_future_contact_permission_f(boolean, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_future_contact_permission_f(p_agrees_to_future_studies boolean, p_usid character varying, p_dbtrans_username character varying) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    /* Update future contact permission */
    IF p_agrees_to_future_studies IS NOT NULL THEN
      UPDATE mrs_subjects 
      SET agrees_to_future_studies=p_agrees_to_future_studies
      WHERE mrs_subjects.usid=p_usid;

      /* Update history */
      INSERT INTO mrs_subjects_hist (usid, agrees_to_future_studies, mod_user, mod_date)
      VALUES (p_usid, p_agrees_to_future_studies, p_dbtrans_username, now() );

    END IF;
END;
$$;


ALTER FUNCTION mrsdba.mrs_update_future_contact_permission_f(p_agrees_to_future_studies boolean, p_usid character varying, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_generic_drug_f(character varying, character varying, character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Update record
  UPDATE mrs_generic_drugs
     SET generic_name   = p_generic_name
        ,description = p_description
	,equivalency = p_equivalency
	,entered_date = now()
	,notes = p_notes
	,user_entered = p_dbtrans_username_pt
   WHERE drug_code = p_drug_code;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Drug Code % does not exist.',p_drug_code;
  END IF;

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_inst_f(numeric, character varying, character varying, character varying, character varying, character varying, numeric, numeric, boolean, character varying, numeric, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_inst_f(p_instrument_id numeric, p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_is_locked numeric, p_sa_hide_skipped_questions boolean, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   BEGIN

      UPDATE mrs_instruments
      SET label = p_label,
          salabel = p_salabel,
          description = p_description,
          copyright_notice = p_copyright_notice,
          version = p_version,
          display_type = p_display_type,
          max_per_segment = p_max_per_segment,
          hide_sa_previous = p_hide_sa_previous,
          skip_question_text = p_skip_question_text,
          is_locked = p_is_locked,
          sa_hide_skipped_questions = p_sa_hide_skipped_questions
          WHERE instrument_id = p_instrument_id;

      IF NOT FOUND  THEN
      RAISE EXCEPTION  'Instrument % does not exist.',p_instrument_id;
      END IF;

      INSERT INTO mrs_instruments_hist
      (
        instrument_id,
        label,
        salabel,
        description,
        copyright_notice,
        version,
        display_type,
        max_per_segment,
        hide_sa_previous,
        skip_question_text,
        is_locked,
        sa_hide_skipped_questions,
        mod_user,
        mod_date
      ) SELECT 
        instrument_id,
        label,
        salabel,
        description,
        copyright_notice,
        version,
        display_type,
        max_per_segment,
        hide_sa_previous,
        skip_question_text,
        is_locked,
        sa_hide_skipped_questions,
        p_mod_user,
        now() 
      FROM mrs_instruments
      WHERE instrument_id = p_instrument_id;

      RETURN '1';

   END;
$$;


ALTER FUNCTION mrsdba.mrs_update_inst_f(p_instrument_id numeric, p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_is_locked numeric, p_sa_hide_skipped_questions boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_inst_quest_sort_f(character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_inst_quest_sort_f(p_question_id character varying, p_sort_order numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE 
    v_order integer;
BEGIN

    SELECT sort_order INTO v_order
    FROM mrs_instrument_questions
    WHERE question_id = p_question_id;

    IF NOT FOUND  THEN
        RAISE EXCEPTION  'Instrument question % does not exist.',p_question_id;
    END IF;

    IF v_order IS NULL OR v_order != p_sort_order THEN
        UPDATE mrs_instrument_questions
            SET sort_order=p_sort_order
        WHERE question_id = p_question_id;

        INSERT INTO mrs_instrument_questions_hist (question_id, sort_order, mod_user, mod_date)
        VALUES (p_question_id, p_sort_order, p_mod_user, now());
    END IF;

    RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_inst_quest_sort_f(p_question_id character varying, p_sort_order numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_inst_question_f(character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying, character varying, character varying, character varying, boolean, boolean, boolean, boolean, character varying, character varying, character varying, numeric, character varying, character, character, boolean, boolean, numeric, numeric, numeric, boolean, boolean, boolean, character varying, character varying, character varying, numeric, numeric, boolean, integer, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_is_de_hidden boolean, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   question_rec RECORD;
BEGIN

   SELECT INTO question_rec * FROM mrs_instrument_questions WHERE question_id = p_question_id;
   IF NOT FOUND THEN
      RAISE EXCEPTION  'Instrument question % does not exist ',p_question_id;
   END IF;

   UPDATE mrs_instrument_questions
   SET label = p_label,
      sa_label = p_sa_label,
      description = p_description,
      example_description = p_example_description,
      exclusion_description = p_exclusion_description,
      max_instances = p_max_instances,
      section_id = p_section_id,
      dsm_question_type = p_dsm_question_type,
      disp_label_first = p_disp_label_first,
      formula_question_type = p_formula_question_type,
      formula = p_formula,
      is_required = p_is_required,
      is_sa_hidden = p_is_sa_hidden,
      is_sa_radio_type = p_is_sa_radio_type,
      is_auto_complete_type = p_is_auto_complete_type,
      autopop_qid = p_autopop_qid,
      assumed_value = p_assumed_value,
      response_format_id=p_response_format_id,
      other_option_label=p_other_option_label,
      specify_detail=p_specify_detail,
      multiple_choice=p_multiple_choice,
      istextquestion = p_istextquestion ,
      isvasquestion = p_isvasquestion ,
      vas_minimum = p_vas_minimum ,
      vas_maximum = p_vas_maximum ,
      vas_interval = p_vas_interval ,
      vas_min_label = p_vas_min_label ,
      vas_mid_label = p_vas_mid_label ,
      vas_max_label = p_vas_max_label ,
      vas_display_extrema = p_vas_display_extrema ,
      vas_display_cursor_value = p_vas_display_cursor_value ,
      vas_display_center_mark = p_vas_display_center_mark,
      numeric_response_min = p_numeric_response_min,
      numeric_response_max = p_numeric_response_max,
      is_media_upload=p_is_media_upload,
      vas_recording_interval = p_vas_recording_interval,
      is_de_hidden = p_is_de_hidden
   WHERE question_id = p_question_id;


   INSERT INTO mrs_instrument_questions_hist (
      question_id, label, description, example_description, exclusion_description, 
      max_instances, section_id, sort_order, dsm_question_type, disp_label_first,
      formula_question_type, formula, deletion_date, is_required, is_sa_hidden, 
      is_sa_radio_type, sa_label, is_auto_complete_type, autopop_qid, assumed_value, 
      response_format_id, other_option_label, specify_detail, multiple_choice, 
      isvasquestion, vas_minimum, vas_maximum, vas_display_extrema, 
      vas_display_cursor_value, vas_display_center_mark, istextquestion, vas_interval,
      vas_min_label, vas_mid_label, vas_max_label, numeric_response_min, numeric_response_max, 
      is_media_upload, vas_recording_interval, copied_from_question_id, dx_excluded, is_de_hidden,
      mod_user, mod_date)
   SELECT
      question_id, label, description, example_description, exclusion_description, 
      max_instances, section_id, sort_order, dsm_question_type, disp_label_first,
      formula_question_type, formula, deletion_date, is_required, is_sa_hidden, 
      is_sa_radio_type, sa_label, is_auto_complete_type, autopop_qid, assumed_value, 
      response_format_id, other_option_label, specify_detail, multiple_choice, 
      isvasquestion, vas_minimum, vas_maximum, vas_display_extrema, 
      vas_display_cursor_value, vas_display_center_mark, istextquestion, vas_interval,
      vas_min_label, vas_mid_label, vas_max_label, numeric_response_min, numeric_response_max, 
      is_media_upload, vas_recording_interval, copied_from_question_id, dx_excluded, is_de_hidden,
      p_mod_user, now()
   FROM mrs_instrument_questions
   WHERE question_id = p_question_id;


   RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_is_de_hidden boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_inst_question_property_f(character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_inst_question_property_f(p_question_id character varying, p_istextquestion boolean, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    UPDATE mrs_instrument_questions 
    SET istextquestion = p_istextquestion 
    WHERE question_id = p_question_id;
    
    INSERT INTO mrs_instrument_questions_hist (
        question_id,
        istextquestion,
        mod_user,
        mod_date)
    VALUES (
        p_question_id,
        p_istextquestion,
        p_mod_user,
        now());
    RETURN '1';
END;
$$;


ALTER FUNCTION mrsdba.mrs_update_inst_question_property_f(p_question_id character varying, p_istextquestion boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_inst_response_f(character varying, numeric, character varying, character varying, numeric, boolean, boolean, boolean, character, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_inst_response_f(p_question_id character varying, p_value numeric, p_label character varying, p_description character varying, p_sort_order numeric, p_is_critical boolean, p_skip_revscore boolean, p_is_hidden boolean, p_specify_detail character, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_response_id    numeric;
BEGIN

   UPDATE mrs_instrument_code_responses
   SET 
      description = p_description,
      label = p_label,
      value = p_value,
      is_critical = p_is_critical,
      skip_revscore = p_skip_revscore,
      is_hidden = p_is_hidden,
      specify_detail = p_specify_detail 
   WHERE question_id = p_question_id
   AND sort_order = p_sort_order
   RETURNING response_id
   INTO v_response_id;

   IF NOT FOUND THEN
      RAISE EXCEPTION 'Instrument question % with response % does not exist',p_question_id, p_value;
   END IF;

   INSERT INTO mrs_instrument_code_responses_hist (
      label,
      description,
      value,
      question_id,
      sort_order,
      is_critical,
      skip_revscore,
      specify_detail,
      response_id,
      mod_user,
      mod_date
   )
   VALUES (
      p_label,
      p_description,
      p_value,
      p_question_id,
      p_sort_order,
      p_is_critical,
      p_skip_revscore,
      p_specify_detail,
      v_response_id,
      p_mod_user,
      NOW()
   );

   RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_inst_response_f(p_question_id character varying, p_value numeric, p_label character varying, p_description character varying, p_sort_order numeric, p_is_critical boolean, p_skip_revscore boolean, p_is_hidden boolean, p_specify_detail character, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_inst_section_details_f(numeric, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   INSERT INTO mrs_instrument_section_details_hist (
      instrument_id, section_id, sa_questions_per_page, mod_user, mod_date
   ) VALUES (
      p_instrument_id, p_section_id, p_sa_questions_per_page, p_mod_user, now()
   );

   UPDATE mrs_instrument_section_details
   SET sa_questions_per_page = p_sa_questions_per_page
   WHERE section_id = p_section_id
   AND instrument_id = p_instrument_id;

   RETURN '1';

   IF NOT FOUND  THEN
   RAISE EXCEPTION  'Instrument section % does not exist.',p_section_id;
   END IF;

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) OWNER TO postgres;

--
-- Name: mrs_update_inst_section_f(numeric, character varying, character varying, numeric, character varying, character varying, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_inst_section_f(p_section_id numeric, p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

    INSERT INTO mrs_instrument_sections_hist (
        section_id, label, description, multi_inst_grid, sa_label, sa_description, is_likert_grid, is_table_grid, mod_user, mod_date
    ) VALUES (
        p_section_id, p_label, p_description, p_multi_inst_grid, p_sa_label, p_sa_description, p_is_likert_grid, p_is_table_grid, p_mod_user, now()
    );

    UPDATE mrs_instrument_sections
    SET label = p_label
        , description = p_description
        , multi_inst_grid = p_multi_inst_grid
        , sa_label = p_sa_label
        , sa_description = p_sa_description
        , is_likert_grid = p_is_likert_grid
        , is_table_grid = p_is_table_grid
    WHERE section_id = p_section_id;

    RETURN '1';

    IF NOT FOUND  THEN
        RAISE EXCEPTION  'Instrument section % does not exist.',p_section_id;
    END IF;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_inst_section_f(p_section_id numeric, p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_inst_study_f(numeric, numeric, boolean, boolean, boolean, numeric, numeric, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_inst_study_f(p_instrument_id numeric, p_study_id numeric, p_enforce_schedule boolean, p_single_entry boolean, p_ongoing_entry boolean, p_is_hidden numeric, p_is_owner numeric, p_dx_excluded boolean, p_sa_review boolean, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_instrument_study_id int;
BEGIN

    SELECT instrument_study_id
    INTO STRICT v_instrument_study_id
    FROM mrs_instruments_studies
    WHERE instrument_id = p_instrument_id
    ANd study_id = p_study_id;

    /* update study association */
    UPDATE mrs_instruments_studies 
    SET enforce_schedule = p_enforce_schedule, 
        single_entry = p_single_entry, 
        ongoing_entry = p_ongoing_entry,
        is_hidden = p_is_hidden,
        is_owner = p_is_owner,
        dx_excluded = p_dx_excluded,
        sa_review = p_sa_review
    WHERE instrument_study_id = v_instrument_study_id;

    /* insert study association to hist */
    INSERT INTO mrs_instruments_studies_hist (
        instrument_study_id,
        instrument_id,
        study_id,
        enforce_schedule,
        single_entry,  
        ongoing_entry, 
        is_hidden,
        is_owner,
        dx_excluded,
        sa_review,
        mod_user,
        mod_date
    )
    VALUES (
        v_instrument_study_id,
        p_instrument_id,
        p_study_id,
        p_enforce_schedule,
        p_single_entry,
        p_ongoing_entry,
        p_is_hidden,
        p_is_owner,
        p_dx_excluded,
        p_sa_review,
        p_dbtrans_username,
        now()
    );

    RETURN 1;
END;
$$;


ALTER FUNCTION mrsdba.mrs_update_inst_study_f(p_instrument_id numeric, p_study_id numeric, p_enforce_schedule boolean, p_single_entry boolean, p_ongoing_entry boolean, p_is_hidden numeric, p_is_owner numeric, p_dx_excluded boolean, p_sa_review boolean, p_dbtrans_username character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_instrument_question_media_f(integer, character varying, integer, integer, character varying, character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_instrument_question_media_f(p_question_media_id integer, p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN
         
            UPDATE mrs_instrument_question_media SET
             question_id = p_question_id,
             media_type_id = p_media_type_id,
             sort_order = p_sort_order,
             url = p_url,
             attributes = p_attributes,
             caption = p_caption,
             position = p_position
            WHERE question_media_id = p_question_media_id;
            
            INSERT INTO mrs_instrument_question_media_hist
            (question_media_id,
             question_id,
             media_type_id,
             sort_order,
             url,
             attributes,
             caption,
             position,
             mod_user,
             mod_date)
            SELECT
            question_media_id,
             question_id,
             media_type_id,
             sort_order,
             url,
             attributes,
             caption,
             position,
             p_dbtrans_username,
             now()
            FROM mrs_instrument_question_media
            WHERE question_media_id = p_question_media_id;
         
            RETURN p_question_media_id;
         END;
      $$;


ALTER FUNCTION mrsdba.mrs_update_instrument_question_media_f(p_question_media_id integer, p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) OWNER TO postgres;

--
-- Name: mrs_update_instrument_table_col_f(numeric, text, integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_instrument_table_col_f(p_col_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_orig_label    text;
    v_row_rec       record;
BEGIN
    SELECT label INTO v_orig_label 
    FROM mrs_instrument_table_cols
    WHERE col_id = p_col_id;

    UPDATE mrs_instrument_table_cols 
        SET label = p_label, sort_order = p_sort_order
        WHERE col_id = p_col_id;

    INSERT INTO mrs_instrument_table_cols_hist (col_id, label, sort_order, mod_user, mod_date)
        SELECT col_id, label, sort_order,p_mod_user, now() 
        FROM mrs_instrument_table_cols 
        WHERE col_id = p_col_id;

    -- update whole question label (row label + col label) if col lable changed
    IF v_orig_label != p_label THEN
        FOR v_row_rec IN
            SELECT q.question_id, r.label 
            FROM mrs_instrument_questions q 
                JOIN mrs_instrument_table_rows r ON q.table_row_id = r.row_id 
            WHERE q.table_col_id = p_col_id
        LOOP
            UPDATE mrs_instrument_questions SET label = v_row_rec.label || ';;' || p_label
            WHERE question_id = v_row_rec.question_id;
            -- update hist
            INSERT INTO mrs_instrument_questions_hist (question_id, label, mod_user, mod_date)
            VALUES (v_row_rec.question_id, v_row_rec.label || ';;' || p_label, p_mod_user, now());
        END LOOP;
    END IF;

    RETURN p_col_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_update_instrument_table_col_f(p_col_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_instrument_table_f(numeric, integer, integer, text, text, integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_instrument_table_f(p_table_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_sort_order integer, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    UPDATE mrs_instrument_tables 
    SET num_rows=p_num_rows,
        num_cols=p_num_cols,
        label=p_label,
        description=p_description,
        sort_order=p_sort_order
    WHERE table_id = p_table_id;

    INSERT INTO mrs_instrument_tables_hist (
        table_id, 
        section_id, 
        num_rows, 
        num_cols, 
        label, 
        description, 
        sort_order,
        mod_user,
        mod_date)
    SELECT 
        table_id, 
        section_id, 
        num_rows, 
        num_cols, 
        label, 
        description, 
        sort_order,
        p_mod_user,
        now()
    FROM mrs_instrument_tables 
    WHERE table_id = p_table_id;
    RETURN p_table_id;
END;                                  
$$;


ALTER FUNCTION mrsdba.mrs_update_instrument_table_f(p_table_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_sort_order integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_instrument_table_row_f(numeric, text, integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_instrument_table_row_f(p_row_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_orig_label    text;
    v_col_rec     record;
BEGIN
    SELECT label INTO v_orig_label 
    FROM mrs_instrument_table_rows
    WHERE row_id = p_row_id;

    UPDATE mrs_instrument_table_rows 
        SET label = p_label, sort_order = p_sort_order
        WHERE row_id = p_row_id;

    INSERT INTO mrs_instrument_table_rows_hist (
        row_id, 
        label, 
        sort_order, 
        mod_user, 
        mod_date)
    SELECT row_id, label, sort_order,p_mod_user, now() 
    FROM mrs_instrument_table_rows 
    WHERE row_id = p_row_id;

    -- update whole question label (row label + col label) if row lable changed
    IF v_orig_label != p_label THEN
        FOR v_col_rec IN
            SELECT q.question_id, c.label 
            FROM mrs_instrument_questions q 
                JOIN mrs_instrument_table_cols c ON q.table_col_id = c.col_id 
            WHERE q.table_row_id = p_row_id
        LOOP
            UPDATE mrs_instrument_questions SET label = p_label || ';;' || v_col_rec.label 
            WHERE question_id = v_col_rec.question_id;
            -- update hist
            INSERT INTO mrs_instrument_questions_hist (question_id, label, mod_user, mod_date)
            VALUES (v_col_rec.question_id, p_label || ';;' || v_col_rec.label, p_mod_user, now());
        END LOOP;
    END IF;

    RETURN p_row_id;
END;
$$;


ALTER FUNCTION mrsdba.mrs_update_instrument_table_row_f(p_row_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_internal_subject_f(character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, boolean, boolean, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_internal_subject_f(p_ursi character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_email_address character varying, p_suffix character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE 
      v_site_id       character varying;
      v_usid          mrsdba.mrs_subjects.usid%TYPE;

   BEGIN
      v_usid := mrs_ursi_to_usid_f(p_ursi);

      UPDATE mrs_subjects
      SET first_name = p_first_name,
          middle_name = p_middle_name,
          last_name = p_last_name,
          birth_date = p_birthdate,
          gender = p_gender,
          email_address = p_email_address,
          user_entered = p_mod_user,
          suffix = p_suffix,
          password = COALESCE(NULLIF(p_password, ''), password),
          is_p2_active = p_is_p2_active,
          first_name_at_birth = p_first_name_at_birth,
          middle_name_at_birth = p_middle_name_at_birth,
          last_name_at_birth = p_last_name_at_birth,
          physical_sex_at_birth = p_physical_sex_at_birth,
          city_born_in = p_city_born_in
      WHERE usid = v_usid;

      IF NOT FOUND THEN
      RAISE EXCEPTION 'Subject % does not exist.', p_ursi;
      END IF;

      INSERT INTO mrs_subjects_hist (
        usid,
        first_name,
        middle_name,
        last_name,
        birth_date,
        gender,
        site_id,
        email_address,
        suffix,
        user_entered,
        password,
        is_p2_active,
        first_name_at_birth,
        middle_name_at_birth,
        last_name_at_birth,
        physical_sex_at_birth,
        city_born_in,
        mod_user,
        mod_date
      )
      VALUES (
        v_usid,
        p_first_name,
        p_middle_name,
        p_last_name,
        p_birthdate,
        p_gender,
        v_site_id,
        p_email_address,
        p_suffix,
        p_mod_user,
        p_password,
        p_is_p2_active,
        p_first_name_at_birth,
        p_middle_name_at_birth,
        p_last_name_at_birth,
        p_physical_sex_at_birth,
        p_city_born_in,
        p_mod_user,
        NOW()
      );

      INSERT INTO mrs_subject_type_details_hist(
        ursi,
        subject_type_id,
        enrolled_date,
        disenrolled_date,
        notes,
        isphilinked,
        usid,
        ethnic_category,
        mod_user,
        mod_date
      )
      SELECT 
        ursi,
        subject_type_id,
        enrolled_date,
        disenrolled_date,
        notes,
        isphilinked,
        usid,
        ethnic_category,
        p_mod_user,
        NOW()
      FROM mrs_subject_type_details
      WHERE ursi = p_ursi
      AND usid = v_usid;

      PERFORM mrs_update_future_contact_permission_f(p_agrees_to_future_studies, v_usid, p_mod_user);

      RETURN '1';
   END;
$$;


ALTER FUNCTION mrsdba.mrs_update_internal_subject_f(p_ursi character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_email_address character varying, p_suffix character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_intrnl_sbjct_by_usid_f(character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_intrnl_sbjct_by_usid_f(p_usid character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
      v_site_id       character varying;

   BEGIN
      BEGIN
         SELECT config_value
         INTO STRICT v_site_id
         FROM mrs_configs
         WHERE UPPER(config_label) = 'LOCAL'
            AND UPPER(group_label)  = 'SITE_ID';

         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            RAISE EXCEPTION 'Local site id not found in configuration table';
      END;

      UPDATE mrs_subjects s
      SET first_name = p_first_name
         , middle_name = p_middle_name
         , last_name = p_last_name
         , birth_date = p_birthdate
         , gender = p_gender
         , site_id = v_site_id
         , user_entered = p_dbtrans_username_pt
         , password = COALESCE(NULLIF(p_password, ''), password)
         , is_p2_active = v_is_p2_active
      WHERE 
         s.usid = p_usid;

      IF NOT FOUND THEN
         RAISE EXCEPTION 'Subject % does not exist.', p_ursi;
      END IF;

      INSERT INTO mrs_subjects_hist (
         usid
         , first_name
         , middle_name
         , last_name
         , birth_date
         , gender
         , site_id
         , password
         , is_p2_active
         , mod_user
         , mod_date
      )
      VALUES (
         p_usid
         , p_first_name
         , p_middle_name
         , p_last_name
         , p_birthdate
         , p_gender
         , v_site_id
         , p_password
         , p_is_p2_active
         , p_dbtrans_username_pt
         , now()
      );

      PERFORM mrs_update_future_contact_permission_f(p_agrees_to_future_studies, p_usid, p_dbtrans_username_pt);

      RETURN '1';
   END;
$$;


ALTER FUNCTION mrsdba.mrs_update_intrnl_sbjct_by_usid_f(p_usid character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_message_f(numeric, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_message_f(message_id_f numeric, subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
update mrs_messages set message_subject = subject_f, message_body = body_f, message_from = from_f, message_to = to_f
where message_id = message_id_f;
insert into mrs_messages_hist (
        message_id,
        message_subject,
        message_body,
        message_from,
        message_to,
        mod_user,
        mod_date) values (
        message_id_f,
        subject_f,
        body_f,
        from_f,
        to_f,
        mod_user_f,
        now());
return 1;
end;$$;


ALTER FUNCTION mrsdba.mrs_update_message_f(message_id_f numeric, subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_update_modality_f(numeric, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_modality_f(p_modality_id numeric, p_modality_label character varying, p_description character varying, p_attribute_view character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN

           UPDATE mrs_modalities
              SET label = p_modality_label,
                  description = p_description,
                  attribute_view = p_attribute_view
            WHERE modality_id = p_modality_id;

           IF NOT FOUND  THEN
             RAISE EXCEPTION 'Modality % does not exist.',p_modality_id;
           END IF;

           INSERT INTO mrs_modalities_hist (
             modality_id,
             label,
             description,
             attribute_view,
             mod_user,
             mod_date
           )
           SELECT modality_id,
                  label,
                  description,
                  attribute_view,
                  p_dbtrans_username_pt,
                  now()
             FROM mrs_modalities
            WHERE modality_id = p_modality_id;

           RETURN '1';
         end;
         $$;


ALTER FUNCTION mrsdba.mrs_update_modality_f(p_modality_id numeric, p_modality_label character varying, p_description character varying, p_attribute_view character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_person_alias_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_person_alias_f(p_alias_id numeric, p_label character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Update record
  UPDATE mrs_person_alias
     SET label   = p_label
   WHERE alias_id = p_alias_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Alias % p_alias_id  does not exist',p_alias_id;
  END IF;

  INSERT INTO mrs_person_alias_hist (
    alias_id,
    label,
    mod_user,
    mod_date
  )
  VALUES (
    p_alias_id,
    p_label,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_person_alias_f(p_alias_id numeric, p_label character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_person_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  UPDATE mrs_persons
     SET first_name     = p_first_name,
         middle_name    = p_middle_name,
         last_name      = p_last_name,
         site_id        = p_site_id,
         department     = p_department,
         institution    = p_institution,
         contact_email  = p_contact_email
   WHERE person_id = p_person_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Person % does not exist.',p_person_id;
  END IF;

  INSERT INTO mrs_persons_hist (
    person_id,
    first_name,
    middle_name,
    last_name,
    site_id,
    department,
    institution,
    contact_email,
    mod_user,
    mod_date
  )
  VALUES (
    p_person_id,
    p_first_name,
    p_middle_name,
    p_last_name,
    p_site_id,
    p_department,
    p_institution,
    p_contact_email,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_person_role_detail_f(numeric, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_person_role_detail_f(p_prd_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  UPDATE mrs_person_role_details
     SET is_hidden = p_is_hidden
   WHERE prd_id = p_prd_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'prd_id % does not exist.',p_prd_id;
  END IF;

  INSERT INTO mrs_person_role_details_hist (
    prd_id,
    is_hidden,
    mod_user,
    mod_date
  )
  VALUES (
    p_prd_id,
    p_is_hidden,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_person_role_detail_f(p_prd_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_personaddress_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_address_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
v_address_id      numeric(8,0);
retval            varchar(40);

BEGIN

   UPDATE mrsdba.mrs_personaddresses
      SET   address_line_1    =p_address_line_1,
         address_line_2    =p_address_line_2,
         msc               =p_msc,
         city              =p_city,
         state             =p_state,
         zip               =p_zip,
         country           =p_country,
         address_type_id   =p_address_type_id,
         preference_id     =p_preference_id
      WHERE address_id        =p_address_id;


   INSERT INTO mrs_personaddresses_hist (
         address_id,
         address_line_1,
         address_line_2,
         msc,
         city,
         state,
         zip,
         country,
         address_type_id,
         preference_id,
         mod_user,
         mod_date
         )
      VALUES (
         p_address_id,
         p_address_line_1,
         p_address_line_2,
         p_msc,
         p_city,
         p_state,
         p_zip,
         p_country,
         p_address_type_id,
         p_preference_id,
         p_dbtrans_username_pt,
         now()
         );


   RETURN 'UPDATED';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_address_id numeric) OWNER TO postgres;

--
-- Name: mrs_update_personphone_f(numeric, character varying, character varying, character varying, numeric, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_personphone_f(p_phone_id numeric, p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare

BEGIN

   UPDATE mrsdba.mrs_personphones
      SET
            country_code            =p_country_code,
            area_code               =p_area_code,
            phone_number            =p_phone_number,
            phone_type_id           =p_phone_type_id,
            sms_preference_id       =p_sms_preference_id,
            preference_id           =p_preference_id
      WHERE phone_id=p_phone_id;


      INSERT INTO mrs_personphones_hist (
         phone_id,
         country_code,
         area_code,
         phone_number,
         phone_type_id,
         sms_preference_id,
         preference_id,
         mod_user,
         mod_date
      )
      VALUES (
         p_phone_id,
         p_country_code,
         p_area_code,
         p_phone_number,
         p_phone_type_id,
         p_sms_preference_id,
         p_preference_id,
         p_dbtrans_username_pt,
         now()
        );


   RETURN 'UPDATED';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_personphone_f(p_phone_id numeric, p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_phone_f(numeric, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_phone_f(p_phone_id numeric, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying, p_dbtransuser character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

begin

  -- log existing record
  INSERT INTO mrs_phones_hist (
    phone_id,
    area_code,
    phone_num,
    extension,
    notes,
    mod_user,
    mod_date
  )
  SELECT phone_id,
         area_code,
         phone_num,
         extension,
         notes,
         p_dbtransuser,
         now()
    FROM mrs_phones
   WHERE phone_id = p_phone_id;



  -- change existing record
  UPDATE mrs_phones
     SET area_code = p_area_code,
         phone_num = p_phone_num,
         extension = p_extension,
         notes     = p_notes
   WHERE phone_id  = p_phone_id;



  IF NOT FOUND  THEN
    RAISE EXCEPTION  'PHONE_ID % does not exist.',p_phone_id;
  END IF;


  -- log new record
  INSERT INTO mrs_phones_hist (
    phone_id,
    area_code,
    phone_num,
    extension,
    notes,
    mod_user,
    mod_date
  )
  SELECT phone_id,
         area_code,
         phone_num,
         extension,
         notes,
         p_dbtransuser,
         now()
    FROM mrs_phones
   WHERE phone_id = p_phone_id;


  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_phone_f(p_phone_id numeric, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying, p_dbtransuser character varying) OWNER TO postgres;

--
-- Name: mrs_update_pr_f(character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_pr_f(p_pr_number character varying, p_new_pr_number character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  INSERT INTO mrs_purchase_requests (
   purchase_request_id,
   study_id
  )
   SELECT p_new_pr_number, study_id
     FROM mrs_purchase_requests
    WHERE purchase_request_id = p_pr_number;

  UPDATE mrs_accounts
     SET purchase_request_id = p_new_pr_number
   WHERE purchase_request_id = p_pr_number;

  IF NOT FOUND  THEN
    NULL;
  END IF;

  DELETE FROM mrs_purchase_requests
   WHERE purchase_request_id = p_pr_number;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Purchase request % does not exist',p_pr_number;
  END IF;

  INSERT INTO mrs_purchase_requests_hist (
    purchase_request_id,
    study_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_new_pr_number,
    null,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_update_pr_f(p_pr_number character varying, p_new_pr_number character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_protocol_f(numeric, numeric, numeric, character varying, numeric, numeric, integer, integer, character varying, integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_protocol_f(p_protocol_id numeric, p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

   UPDATE mrsdba.mrs_protocols
   SET
      subject_type_id = p_subject_type_id,
      protocol_type_id = p_protocol_type_id,
      description = p_description,
      start_minutes_from_segment_interval = p_start_minutes_from_segment_interval,
      end_minutes_from_segment_interval = p_end_minutes_from_segment_interval,
      source_type_id = p_source_type_id,
      segment_interval_id = p_segment_interval_id,
      label = p_label,
      queue_type_id = p_queue_type_id
   WHERE 
      protocol_id = p_protocol_id;

   INSERT INTO mrsdba.mrs_protocols_hist(
      protocol_id,
      subject_type_id,
      protocol_type_id,
      description,
      start_minutes_from_segment_interval,
      end_minutes_from_segment_interval,
      source_type_id,
      segment_interval_id,
      label,
      queue_type_id,
      mod_user,
      mod_date
   )
   VALUES(
      p_protocol_id,
      p_subject_type_id,
      p_protocol_type_id,
      p_description,
      p_start_minutes_from_segment_interval,
      p_end_minutes_from_segment_interval,
      p_source_type_id,
      p_segment_interval_id,
      p_label,
      p_queue_type_id,
      p_mod_user,
      now()
   );

   RETURN p_protocol_id;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_protocol_f(p_protocol_id numeric, p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_protocol_req_f(numeric, numeric, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_protocol_req_f(p_protocol_req_id numeric, p_sort_order numeric, p_dbtrans_username text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    UPDATE mrs_protocol_requirements
    SET sort_order = p_sort_order
    WHERE protocol_req_id = p_protocol_req_id;

    IF NOT FOUND  THEN
        RAISE EXCEPTION 'Requirement % does not exist.', p_protocol_req_id;
        return false;
    END IF;


    INSERT INTO mrs_protocol_requirements_hist 
    (
        protocol_req_id,
        sort_order,
        mod_user,
        mod_date
    ) VALUES (
        p_protocol_req_id,
        p_sort_order,
        p_dbtrans_username,
        now()
    );

    RETURN true;
END;
$$;


ALTER FUNCTION mrsdba.mrs_update_protocol_req_f(p_protocol_req_id numeric, p_sort_order numeric, p_dbtrans_username text) OWNER TO ni_developers;

--
-- Name: mrs_update_qa_threshold_f(character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_threshold numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE num integer;
DECLARE f_id mrsdba.mrs_qa_threshold.id%TYPE;

BEGIN
    select count(*) into num from mrs_qa_threshold 
    where label = f_label and study_id= f_study and user_id=f_user;

    IF num=0 THEN
	select nextval('mrs_qa_threshold_counter') into f_id;
	insert into mrs_qa_threshold(
		id,
		label,
		threshold,
		study_id,
		user_id
	)
	values (
		f_id,
		f_label,
		f_threshold,
		f_study,
		f_user
	);
    ELSE
	update mrs_qa_threshold
        set threshold = f_threshold
	where label = f_label and study_id= f_study and user_id=f_user;

    END IF;
	
    IF NOT FOUND THEN
    RAISE EXCEPTION 'label % not found.', f_label;
    END IF;

    RETURN '1';

END;$$;


ALTER FUNCTION mrsdba.mrs_update_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_threshold numeric) OWNER TO postgres;

--
-- Name: mrs_update_question_dx_excluded_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_question_dx_excluded_f(p_question_id character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
DECLARE
   v_old_dx_excluded boolean;
   v_new_dx_excluded boolean;
BEGIN

SELECT dx_excluded 
INTO v_old_dx_excluded
FROM mrsdba.mrs_instrument_questions
WHERE question_id = p_question_id;

IF v_old_dx_excluded = TRUE
THEN
   v_new_dx_excluded = FALSE;
ELSE
   v_new_dx_excluded = TRUE;
END IF;

UPDATE mrsdba.mrs_instrument_questions
SET dx_excluded = v_new_dx_excluded
WHERE question_id = p_question_id;

IF v_new_dx_excluded = TRUE
THEN
   return 'excluded';
ELSE
   return 'included';
END IF;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_question_dx_excluded_f(p_question_id character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_rate_f(numeric, numeric, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_rate_f(p_scanner_id numeric, p_study_id numeric, p_rate_label character varying, p_rate_amt numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Update record
  UPDATE mrs_study_scanner_rates
     SET rate_amt   = p_rate_amt
   WHERE scanner_id = p_scanner_id
     AND study_id   = p_study_id
     AND label      = p_rate_label;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Rate % does not exist for scanner % and study %.', p_rate_label, p_scanner_id,
		p_study_id;
  END IF;

  INSERT INTO mrs_study_scanner_rates_hist (
    scanner_id,
    study_id,
    label,
    rate_amt,
    mod_user,
    mod_date
  )
  VALUES (
    p_scanner_id,
    p_study_id,
    p_rate_label,
    p_rate_amt,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_rate_f(p_scanner_id numeric, p_study_id numeric, p_rate_label character varying, p_rate_amt numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_response_value_f(numeric, character varying, numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbtransuser character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

  -- log existing value before update
  INSERT INTO mrs_assessment_responses_hist (
    assessment_id,
    question_id,
    question_instance,
    response_value,
    response_value_description,
    mod_user,
    mod_date
  )
  SELECT
       assessment_id,
    	 question_id,
    	 question_instance,
    	 response_value,
    	 response_value_description,
       p_dbtransuser,
       now()
    FROM
        mrs_assessment_responses
   WHERE
        assessment_id = p_assessment_id
        AND  question_id = p_question_id
        AND  question_instance = p_question_instance
   ;


  -- throw error on attempt to update non-existent response value
  IF NOT FOUND  THEN
   RAISE EXCEPTION  'Assessment response does not exist for updating.';
  END IF;



  -- update response value and description
  UPDATE mrs_assessment_responses
     SET
    	   response_value = p_response_value,
    	   response_value_description = p_response_value_description
   WHERE
        assessment_id = p_assessment_id
        AND  question_id = p_question_id
        AND  question_instance = p_question_instance
   ;




  -- log new values
  INSERT INTO mrs_assessment_responses_hist (
    assessment_id,
    question_id,
    question_instance,
    response_value,
    response_value_description,
    mod_user,
    mod_date
  )
  SELECT
       assessment_id,
    	 question_id,
    	 question_instance,
    	 response_value,
    	 response_value_description,
       p_dbtransuser,
       now()
    FROM
        mrs_assessment_responses
   WHERE
        assessment_id = p_assessment_id
        AND  question_id = p_question_id
        AND  question_instance = p_question_instance
   ;


  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbtransuser character varying) OWNER TO postgres;

--
-- Name: mrs_update_role_f(numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_role_f(p_role_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Update record
  UPDATE mrs_roles
     SET label   = p_label
        ,description = p_description
   WHERE role_id = p_role_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Role % does not exist.',p_role_id;
  END IF;

  INSERT INTO mrs_roles_hist (
    role_id,
    label,
    description,
    mod_user,
    mod_date
  )
  VALUES (
    p_role_id,
    p_label,
    p_description,
    p_dbtrans_username_pt,
    now()
  );

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_role_f(p_role_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_row(character varying, character varying[], character varying[], character varying[], character varying[], character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_row(p_table_name character varying, p_key_cols character varying[], p_key_cols_vals character varying[], p_cols character varying[], p_vals character varying[], p_mod_user character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
   v_cmd VARCHAR:='';
   v_cmd_where VARCHAR:='';
   v_cmd_cols VARCHAR:='';
   v_history_table VARCHAR:='';
   v_table_columns RECORD;
   v_affected_count INT;
   v_table_name VARCHAR:='';
   v_current_data_type character varying;
BEGIN
   /* protect from updating any other tables; this check prevents a rogue
      client from altering system tables */
   v_table_name:=UPPER(p_table_name);
   IF v_table_name NOT LIKE 'MRS_%' THEN
      IF v_table_name NOT LIKE 'CAS_%' THEN
         RAISE EXCEPTION 'Invalid table name.';
      END IF;
   END IF;

    
   /* build UPDATE ... SET ... */   
   v_cmd := 'UPDATE ' || quote_ident(p_table_name) || ' SET ';
   FOR ndx IN 1..array_upper(p_cols,1) LOOP
      SELECT data_type INTO v_current_data_type from information_schema.columns 
      WHERE table_name = p_table_name and column_name = p_cols[ndx];

      v_cmd := v_cmd || quote_ident(p_cols[ndx]) || ' = '
                 || quote_literal(cast_by_string_f(p_vals[ndx], v_current_data_type)) || ',';
   END LOOP;
   v_cmd:=substring(v_cmd from 1 for length(v_cmd)-1);

   v_cmd_where:=' WHERE ';

   /* build WHERE ... */
   FOR ndx IN 1..array_upper(p_key_cols,1) LOOP
      SELECT data_type INTO v_current_data_type from information_schema.columns 
      WHERE table_name = p_table_name and column_name = p_key_cols[ndx];

      v_cmd_where := v_cmd_where || quote_ident(p_key_cols[ndx]) || ' = '
                 || quote_literal(cast_by_string_f(p_key_cols_vals[ndx], v_current_data_type)) || ' AND ';
   END LOOP;
   v_cmd_where:=substring(v_cmd_where from 1 for length(v_cmd_where)-5);
   v_cmd:=v_cmd || v_cmd_where;

   EXECUTE v_cmd;

   GET DIAGNOSTICS v_affected_count = ROW_COUNT;
   IF v_affected_count=0 THEN
      RAISE EXCEPTION 'Row not found while trying to update %', quote_ident(p_table_name);
   END IF;

    
   /* build statement to save history; we loop using the column names of p_table_name
      and not v_history_table because that would be making the possibly false assumption
      that the history table is correctly
      designed and has
      the same columns; if they are not the same this will produce an error
      which is what we want 
      
      TODO this should be rewritten to not use a specific case
      */
   v_history_table = lower(p_table_name) || '_hist';
   v_cmd:='INSERT INTO ' || quote_ident(v_history_table) || ' (';
   FOR v_table_columns IN SELECT column_name from information_schema.columns 
                  WHERE table_schema in ('mrsdba','casdba')
                    AND  table_name=LOWER(p_table_name)

   LOOP
      v_cmd_cols := v_cmd_cols || quote_ident(v_table_columns.column_name) || ',';
   END LOOP;
   IF(LENGTH(v_cmd_cols)=0) THEN
      RAISE EXCEPTION 'Missing history table %', v_history_table;
   END IF;
   
   v_cmd:=v_cmd||v_cmd_cols||'mod_date, mod_user) select '||v_cmd_cols||
        'now(),''' || p_mod_user || ''' FROM ' ||
        quote_ident(p_table_name) || v_cmd_where;

   EXECUTE v_cmd;
   
   GET DIAGNOSTICS v_affected_count = ROW_COUNT;
   IF v_affected_count=0 THEN
      RAISE EXCEPTION 'Row not found while trying to update %', quote_ident(v_history_table);
   END IF;

   RETURN '1';
EXCEPTION WHEN SQLSTATE '22004' THEN
    RAISE NOTICE 'It may be the number of columns is not equal to the number of values. One of the query string arguments of EXECUTE is null.  SQL state:22004';
END;
$$;


ALTER FUNCTION mrsdba.mrs_update_row(p_table_name character varying, p_key_cols character varying[], p_key_cols_vals character varying[], p_cols character varying[], p_vals character varying[], p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_scan_billing_f(numeric, text, text, text, numeric, numeric, text, boolean, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_scan_billing_f(p_scan_id numeric, p_charge_code text, p_funding_source text, p_project_number text, p_contrast_vials_used numeric, p_tech_slots_used numeric, p_injector_type text, p_oxygen_used boolean, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   
             BEGIN
             /* update record */
             UPDATE MRS_SCAN_SESSIONS
             SET CHARGE_CODE = P_CHARGE_CODE,
             FUNDING_SOURCE = P_FUNDING_SOURCE,
             PROJECT_NUMBER = P_PROJECT_NUMBER,
             CONTRAST_VIALS_USED = P_CONTRAST_VIALS_USED,
             BILLING_NOTES = P_NOTES,
             TECH_SLOTS_USED = P_TECH_SLOTS_USED,
             INJECTOR_TYPE = P_INJECTOR_TYPE,
             OXYGEN_USED = P_OXYGEN_USED
             WHERE SCAN_ID = P_SCAN_ID;
   
             IF NOT FOUND  THEN
             RAISE EXCEPTION 'Scan Session % does not exist.',P_SCAN_ID;
             END IF;
   
             /* update scan session history */
             INSERT INTO MRS_SCAN_SESSIONS_HIST 
             (
                SCAN_ID,
                CHARGE_CODE,
                FUNDING_SOURCE,
                PROJECT_NUMBER,
                CONTRAST_VIALS_USED,
                TECH_SLOTS_USED,
                INJECTOR_TYPE,
                BILLING_NOTES,
                OXYGEN_USED,
                MOD_USER,
                MOD_DATE
             )
             VALUES 
             (
                P_SCAN_ID,
                P_CHARGE_CODE,
                P_FUNDING_SOURCE,
                P_PROJECT_NUMBER,
                P_CONTRAST_VIALS_USED,
                P_TECH_SLOTS_USED,
                P_INJECTOR_TYPE,
                P_NOTES,
                P_OXYGEN_USED,
                P_DBTRANS_USERNAME_PT,
                now()
             );
   
             RETURN '1';
             END;
             $$;


ALTER FUNCTION mrsdba.mrs_update_scan_billing_f(p_scan_id numeric, p_charge_code text, p_funding_source text, p_project_number text, p_contrast_vials_used numeric, p_tech_slots_used numeric, p_injector_type text, p_oxygen_used boolean, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_scan_dx_excluded_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_scan_dx_excluded_f(p_scan_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
DECLARE
   v_old_dx_excluded boolean;
   v_new_dx_excluded boolean;
BEGIN

SELECT dx_excluded 
INTO v_old_dx_excluded
FROM mrsdba.mrs_scan_sessions
WHERE scan_id = p_scan_id;

IF v_old_dx_excluded = TRUE
THEN
   v_new_dx_excluded = FALSE;
ELSE
   v_new_dx_excluded = TRUE;
END IF;

INSERT INTO mrs_scan_sessions_hist (
   scan_id,
   dx_excluded,
   mod_user,
   mod_date
)
VALUES (
   p_scan_id,
   v_new_dx_excluded,
   p_mod_user,
   now()
);

UPDATE mrsdba.mrs_scan_sessions
SET dx_excluded = v_new_dx_excluded
WHERE scan_id = p_scan_id;

IF v_new_dx_excluded = TRUE
THEN
   return 'excluded';
ELSE
   return 'included';
END IF;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_scan_dx_excluded_f(p_scan_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_scan_ext_prop_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN

  UPDATE mrs_scan_sessions_ext_props
  SET    prop_value = p_prop_value
  WHERE
         scan_id = p_scan_id
         AND
         prop_id = p_prop_id;

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) OWNER TO postgres;

--
-- Name: mrs_update_scan_notes_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_scan_notes_f(p_scan_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$


BEGIN

  UPDATE mrsdba.mrs_scan_sessions
      SET  notes=p_notes
      WHERE scan_id        =p_scan_id;


   INSERT INTO mrs_scan_sessions_hist (
         scan_id,
         notes,
         mod_user,
         mod_date
         )
      VALUES (
         p_scan_id,
         p_notes,
         p_dbtrans_username_pt,
         now()
         );


   RETURN 'UPDATED';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_scan_notes_f(p_scan_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_scan_review_load_f(integer, date, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_scan_review_load_f(p_scan_id integer, p_review_load_date date, p_dbtrans_username text) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            BEGIN
               UPDATE mrs_scan_sessions 
               SET review_load_date = p_review_load_date
               WHERE scan_id=p_scan_id;

               INSERT INTO mrs_scan_sessions_hist
               (
                  scan_id
                  ,review_load_date
                  ,mod_date
                  ,mod_user
               )
               VALUES
               (
                  p_scan_id
                  ,p_review_load_date
                  ,now()
                  ,p_dbtrans_username
               );

               RETURN 1;
            END;
         $$;


ALTER FUNCTION mrsdba.mrs_update_scan_review_load_f(p_scan_id integer, p_review_load_date date, p_dbtrans_username text) OWNER TO ni_developers;

--
-- Name: mrs_update_scan_seg_int_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_scan_seg_int_f(p_scan_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$


BEGIN

  UPDATE mrsdba.mrs_scan_sessions
      SET  segment_interval=p_segment_interval
      WHERE scan_id        =p_scan_id;


   INSERT INTO mrs_scan_sessions_hist (
         scan_id,
         segment_interval,
         mod_user,
         mod_date
         )
      VALUES (
         p_scan_id,
         p_segment_interval,
         p_dbtrans_username_pt,
         now()
         );


   RETURN 'UPDATED';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_scan_seg_int_f(p_scan_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_scan_session_f(numeric, character varying, character varying, character varying, character varying, character varying, numeric, character varying, character varying, numeric, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_scan_session_f(p_scan_id numeric, p_billto_study_id character varying, p_ursi character varying, p_segment_interval character varying, p_scan_label character varying, p_scan_date character varying, p_scanner_id numeric, p_operator_id character varying, p_notes character varying, p_consented_under_study_id numeric, p_assigned_radiologist character varying, p_dx_excluded boolean, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         declare
           v_result              varchar(1);
         BEGIN

           -- Update scan session
           UPDATE mrs_scan_sessions
              SET 
                  billto_study_id          = cast(p_billto_study_id as numeric),
                  ursi                     = p_ursi,
                  segment_interval         = p_segment_interval,
                  label                    = p_scan_label,
                  scan_date                = cast(p_scan_date as timestamp),
                  scanner_id               = p_scanner_id,
                  operator_id              = p_operator_id,
                  notes                    = p_notes,
                  consented_under_study_id = p_consented_under_study_id,
                  assigned_radiologist     = p_assigned_radiologist,
                  dx_excluded              = p_dx_excluded
           WHERE scan_id = p_scan_id;

           -- save history
           INSERT INTO mrs_scan_sessions_hist (
              scan_id, 
              billto_study_id,
              ursi,
              segment_interval,
              label,
              scan_date,
              scanner_id,
              operator_id,
              notes,
              consented_under_study_id,
              assigned_radiologist,
              dx_excluded)
           SELECT
              scan_id,
              billto_study_id,
              ursi,
              segment_interval,
              label,
              scan_date,
              scanner_id,
              operator_id,
              notes,
              consented_under_study_id,
              assigned_radiologist,
              dx_excluded
           FROM mrs_scan_sessions
           WHERE scan_id = p_scan_id;

           IF NOT FOUND THEN
             RAISE EXCEPTION 'Scan % does not exist', p_scan_id;
           END IF;

           RETURN '1';
         END;
         $$;


ALTER FUNCTION mrsdba.mrs_update_scan_session_f(p_scan_id numeric, p_billto_study_id character varying, p_ursi character varying, p_segment_interval character varying, p_scan_label character varying, p_scan_date character varying, p_scanner_id numeric, p_operator_id character varying, p_notes character varying, p_consented_under_study_id numeric, p_assigned_radiologist character varying, p_dx_excluded boolean, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_series_data_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_series_data_f(p_series_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
BEGIN

   UPDATE mrsdba.mrs_series_data
   SET value = p_value
   WHERE series_data_id = p_series_data_id;

   IF NOT FOUND  THEN
   RAISE EXCEPTION 'Series data ID % does not exist.',p_series_data_id;
   END IF;

   INSERT INTO MRSDBA.MRS_SERIES_DATA_HIST(
      SERIES_DATA_ID,
      VALUE,
      MOD_USER,
      MOD_DATE
   )
   VALUES(
      P_SERIES_DATA_ID,
      P_VALUE,
      P_DBTRANS_USERNAME_PT,
      now()
   );

RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_series_data_f(p_series_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_series_dx_excluded_f(character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_series_dx_excluded_f(p_series_id character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
DECLARE
   v_old_dx_excluded boolean;
   v_new_dx_excluded boolean;
BEGIN

SELECT dx_excluded 
INTO v_old_dx_excluded
FROM mrsdba.mrs_series
WHERE series_id = p_series_id;

IF v_old_dx_excluded = TRUE
THEN
   v_new_dx_excluded = FALSE;
ELSE
   v_new_dx_excluded = TRUE;
END IF;

INSERT INTO mrs_series_hist (
   series_id,
   dx_excluded,
   mod_user,
   mod_date
)
VALUES (
   p_series_id,
   v_new_dx_excluded,
   p_mod_user,
   now()
);

UPDATE mrsdba.mrs_series
SET dx_excluded = v_new_dx_excluded
WHERE series_id = p_series_id;

IF v_new_dx_excluded = TRUE
THEN
   return 'excluded';
ELSE
   return 'included';
END IF;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_series_dx_excluded_f(p_series_id character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_series_f(character varying, character varying, numeric, numeric, character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_series_f(p_series_id character varying, p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_label_id     mrsdba.mrs_series_labels.label_id%TYPE;

  c_scan_details CURSOR IS
  SELECT ss.study_id, s.modality_id
  FROM mrs_scan_sessions ss
  INNER JOIN mrs_scanners s ON ss.scanner_id = s.scanner_id
  WHERE scan_id = p_scan_id;
BEGIN

   IF LENGTH(p_series_id) > 0 THEN

      IF LENGTH(p_label) > 0 and p_label IS NOT NULL THEN
         --first, we need to find the label_id
         --this is kind of a confusing way to update the label_id (as opposed to doing it directly)
         --but this way we can more easily conform to the legacy code...
         FOR SCAN_DETAILS IN c_scan_details
         LOOP
            SELECT label_id
            FROM mrs_series_labels
            WHERE label = p_label
            AND study_id = SCAN_DETAILS.study_id
            AND modality_id = SCAN_DETAILS.modality_id
            INTO v_label_id;
 
           -- if v_label_id is null, then we must add this label to the mrs_series_labels table
           IF v_label_id IS NULL THEN
              PERFORM mrs_add_series_label_f(p_label,p_label,SCAN_DETAILS.study_id,NULL,SCAN_DETAILS.modality_id,false,false,true,p_dbtrans_username_pt);

              -- select into v_label_id again...
              SELECT label_id
              FROM mrs_series_labels
              WHERE label = p_label
              AND study_id = SCAN_DETAILS.study_id
              AND modality_id = SCAN_DETAILS.modality_id
              INTO v_label_id;

           END IF;
        END LOOP;

        -- Update record
        UPDATE mrs_series
           SET scan_id = p_scan_id,
               study_code_id = p_study_code_id,
               usable = p_usable,
               notes = p_notes,
               sort_order = p_sort_order,
               label_id = v_label_id
         WHERE series_id = p_series_id;

        IF NOT FOUND  THEN
          RAISE EXCEPTION 'Series % does not exist.',p_series_id;
        END IF;
     ELSE
      -- Delete record
      DELETE from mrs_series
      WHERE series_id = p_series_id;
        IF NOT FOUND  THEN
          RAISE EXCEPTION 'Series % does not exist.',p_series_id;
        END IF;
     END IF;

     INSERT INTO mrs_series_hist (
       series_id,
       scan_id,
       study_code_id,
       usable,
       notes,
       mod_user,
       mod_date
     )
     VALUES (
       p_series_id,
       p_scan_id,
       p_study_code_id,
       p_usable,
       p_notes,
       p_dbtrans_username_pt,
       now()
     );
  END IF;

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_update_series_f(p_series_id character varying, p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_series_label_definition_id_f(integer, integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_series_label_definition_id_f(p_label_id integer, p_definition_id integer, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
BEGIN

INSERT INTO mrs_series_labels_hist (
   label_id,
   definition_id,
   approval_user,
   approval_date,
   mod_user,
   mod_date
)
VALUES (
   p_label_id,
   p_definition_id,
   p_mod_user,
   now(),
   p_mod_user,
   now()
);

UPDATE mrsdba.mrs_series_labels
SET definition_id = p_definition_id,
    approval_user = p_mod_user,
    approval_date = now()
WHERE label_id = p_label_id;

return '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_series_label_definition_id_f(p_label_id integer, p_definition_id integer, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_series_label_dx_excluded_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_series_label_dx_excluded_f(p_label_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
DECLARE
   v_old_dx_excluded boolean;
   v_new_dx_excluded boolean;
BEGIN

SELECT dx_excluded 
INTO v_old_dx_excluded
FROM mrsdba.mrs_series_labels
WHERE label_id = p_label_id;

IF v_old_dx_excluded = TRUE
THEN
   v_new_dx_excluded = FALSE;
ELSE
   v_new_dx_excluded = TRUE;
END IF;

INSERT INTO mrs_series_labels_hist (
   label_id, label, description, study_id, dx_excluded, mod_user, mod_date
)
SELECT 
   label_id, label, description, study_id, v_new_dx_excluded, p_mod_user, now()
FROM mrsdba.mrs_series_labels
WHERE label_id = p_label_id;

UPDATE mrsdba.mrs_series_labels
SET dx_excluded = v_new_dx_excluded
WHERE label_id = p_label_id;

IF v_new_dx_excluded = TRUE
THEN
   return 'excluded';
ELSE
   return 'included';
END IF;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_series_label_dx_excluded_f(p_label_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_series_label_f(integer, character varying, numeric, character varying, numeric, numeric, boolean, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_series_label_f(p_label_id integer, p_label character varying, p_modality_id numeric, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_is_hidden boolean, p_dx_excluded boolean, p_rad_loaded boolean, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        BEGIN

            UPDATE mrs_series_labels
                SET label = p_label,
                modality_id = p_modality_id,
                description = p_description,
                study_id = p_study_id,
                dest_study_id = p_dest_study_id,
                is_hidden = p_is_hidden,
                dx_excluded = p_dx_excluded,
                rad_loaded = p_rad_loaded
            WHERE label_id = p_label_id;

            IF NOT FOUND  THEN
                RAISE EXCEPTION 'Label %does not exist.',p_label_id;
            END IF;

            INSERT INTO mrs_series_labels_hist (
                label_id,
                label,
                modality_id,
                description,
                study_id,
                dest_study_id,
                is_hidden,
                dx_excluded,
                rad_loaded,
                mod_user,
                mod_date
            )
            SELECT
                label_id,
                label,
                modality_id,
                description,
                study_id,
                dest_study_id,
                is_hidden,
                dx_excluded,
                rad_loaded,
                p_dbtrans_username_pt,
                now()
            FROM mrs_series_labels
            WHERE label_id = p_label_id;

            RETURN '1';
        end;
$$;


ALTER FUNCTION mrsdba.mrs_update_series_label_f(p_label_id integer, p_label character varying, p_modality_id numeric, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_is_hidden boolean, p_dx_excluded boolean, p_rad_loaded boolean, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_sharing_rule_f(numeric, numeric, numeric, numeric, character varying, character varying, numeric, character varying, numeric, character varying, numeric, numeric, character varying, timestamp without time zone, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_sharing_rule_f(p_sharing_rule_id numeric, p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
	v_rule_exists numeric;
	v_rule_id numeric;
BEGIN

	BEGIN
	SELECT (sharing_rule_id) 
	INTO STRICT v_rule_exists
	FROM mrs_sharing_rules
	WHERE 
	sharing_rule_id = p_sharing_rule_id;

	EXCEPTION
	WHEN no_data_found THEN
		v_rule_exists := 0;
	END;
	--IF there are not currently any matching rules
	IF v_rule_exists > 0 THEN
		BEGIN

			--Insert new rule
			UPDATE mrs_sharing_rules SET
				study_id = NULLIF(p_study_id, '-1'),
				instrument_id = NULLIF(p_instrument_id, '-1'),
				rater_id = NULLIF(p_rater_id, '-1'), 
				segment_interval = NULLIF(p_segment_interval, ''),
				site_id = NULLIF(p_site_id, '-1'),
				ursi = NULLIF(p_ursi, ''),
				assessment_id = NULLIF(p_assessment_id, '-1'),
				entry_code = NULLIF(p_entry_code, ''),
				dataentry_type_id = NULLIF(p_dataentry_type_id, '-1'),
				source_type = NULLIF(p_source_type, '-1'),
				approved_by = NULLIF(p_approved_by, ''),
				approval_date = p_approval_date,
				note = NULLIF(p_note, '')
			WHERE sharing_rule_id = p_sharing_rule_id;

				

			-- Insert into hist table
			INSERT INTO mrs_sharing_rules_hist (
				sharing_rule_id,
				study_id,
				instrument_id,
				rater_id, 
				segment_interval,
				site_id,
				ursi,
				assessment_id,
				entry_code,
				dataentry_type_id,
				source_type,
				approved_by,
				approval_date,
				note,
				mod_user,
				mod_date)
			VALUES (
				p_sharing_rule_id,
				NULLIF(p_study_id, '-1'),
				NULLIF(p_instrument_id, '-1'),
				NULLIF(p_rater_id, '-1'),
				NULLIF(p_segment_interval, ''),
				NULLIF(p_site_id, '-1'),
				NULLIF(p_ursi, ''),
				NULLIF(p_assessment_id, '-1'),
				NULLIF(p_entry_code, ''),
				NULLIF(p_dataentry_type_id, '-1'),
				NULLIF(p_source_type, '-1'),
				NULLIF(p_approved_by, ''),
				p_approval_date,
				NULLIF(p_note, ''),
				p_dbtrans_username_pt,
				now()
				);
			--return new rule_id
			RETURN 'SUCCESS';
		END;
	--There are no matching rule(s): Notify App-layer
	ELSE
		RETURN 'RULE_EXISTS';
	END IF;

	RETURN v_rule_id;
END;

$$;


ALTER FUNCTION mrsdba.mrs_update_sharing_rule_f(p_sharing_rule_id numeric, p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_sharing_rule_study_f(numeric, numeric, character varying, timestamp without time zone, character varying, timestamp without time zone, text, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
	v_rule_exists numeric;
BEGIN

--verify that the study-rule relation does not already exist
	BEGIN
		SELECT sharing_rule_id
		INTO STRICT v_rule_exists
		FROM mrs_sharing_rules_studies
		WHERE 
		p_rule_id = rule_id AND
		p_study_id = study_id;

	EXCEPTION
		WHEN no_data_found THEN
			v_rule_exists := 0;	
	END;

	IF v_rule_exists > 0 THEN
		BEGIN
			UPDATE mrs_sharing_rules_studies SET 
				recipient_approved_by = p_recipient_approved_by,
				recipient_approval_date = p_recipient_approval_date,
				donor_approved_by = p_donor_approved_by,
				donor_approval_date = p_donor_approval_date,
				note = p_note
			WHERE
				sharing_rule_id = p_rule_id
				AND study_id = p_study_id;
				


			INSERT INTO mrs_hist (
				sharing_rule_id,
				study_id,
				recipient_approved_by,
				recipient_approval_date,
				donor_approved_by,
				donor_approval_date,
				note,
				mod_user,
				mod_date
			)
			VALUES (
				p_rule_id,
				p_study_id,
				p_recipient_approved_by,
				p_recipient_approval_date,
				p_donor_approved_by,
				p_donor_approval_date,
				p_note,
				p_dbtrans_username_pt,
				now()
			);
		END;
	ELSE
		RETURN v_rule_exists;
	END IF;
RETURN 'SUCCESS';

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_staged_scan_f(numeric, text, text, numeric, text, numeric, text, text, numeric, text, text, boolean, text, text); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_staged_scan_f(p_scan_id numeric, p_label text, p_uid text, p_scanner_id numeric, p_pi_id text, p_study_id numeric, p_ursi text, p_segment_interval text, p_subject_age numeric, p_file_path text, p_source_filename text, p_is_error boolean, p_notes text, p_dbtrans_username text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
          BEGIN
              INSERT INTO mrs_scan_sessions_stage_hist
              (
                  scan_id,
                  label,
                  uid,
                  scanner_id,
                  pi_id,
                  study_id,
                  ursi,
                  segment_interval,
                  subject_age,
                  file_path,
                  source_filename,
                  is_error,
                  notes,
                  mod_user,
                  mod_date
              ) 
              VALUES
              (
                  p_scan_id,
                  p_label,
                  p_uid,
                  p_scanner_id,
                  p_pi_id,
                  p_study_id,
                  p_ursi,
                  p_segment_interval,
                  p_subject_age,
                  p_file_path,
                  p_source_filename,
                  p_is_error,
                  p_notes,
                  p_dbtrans_username,
                  now()
              );

              UPDATE mrs_scan_sessions_stage
              SET
                label = p_label,
                uid = p_uid,
                scanner_id = p_scanner_id,
                pi_id = p_pi_id,
                study_id = p_study_id,
                ursi = p_ursi,
                segment_interval = p_segment_interval,
                subject_age = p_subject_age,
                file_path = p_file_path,
                source_filename = p_source_filename,
                is_error = p_is_error,
                notes = p_notes
              WHERE scan_id = p_scan_id;

              IF NOT FOUND THEN
                  RAISE EXCEPTION 'Scan % does not exist.',p_scan_id;
              END IF;
              
              RETURN '1';
          END;
          $$;


ALTER FUNCTION mrsdba.mrs_update_staged_scan_f(p_scan_id numeric, p_label text, p_uid text, p_scanner_id numeric, p_pi_id text, p_study_id numeric, p_ursi text, p_segment_interval text, p_subject_age numeric, p_file_path text, p_source_filename text, p_is_error boolean, p_notes text, p_dbtrans_username text) OWNER TO ni_developers;

--
-- Name: mrs_update_study_code_f(numeric, character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_study_code_f(p_code_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  UPDATE mrs_study_codes
     SET label = p_label,
         description = p_description,
         study_id = p_study_id
   WHERE code_id = p_code_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Code % does not exist.',p_code_id;
  END IF;

  INSERT INTO mrs_study_codes_hist (
    code_id,
    label,
    description,
    study_id,
    mod_user,
    mod_date
  )
  SELECT code_id,
         label,
         description,
         study_id,
         p_dbtrans_username_pt,
         now()
    FROM mrs_study_codes
   WHERE code_id = p_code_id;

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_update_study_code_f(p_code_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_study_dx_description_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_study_dx_description_f(p_study_id numeric, p_dx_description character varying, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         BEGIN
         
         UPDATE mrs_studies 
         SET dx_description = p_dx_description
         WHERE study_id = p_study_id;

         INSERT INTO mrs_studies_hist (
            study_id, dx_description, mod_user, mod_date) 
         VALUES (
            p_study_id, p_dx_description, p_mod_user, now());

         RETURN 1;

         END;
         $$;


ALTER FUNCTION mrsdba.mrs_update_study_dx_description_f(p_study_id numeric, p_dx_description character varying, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_study_dx_excluded_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_study_dx_excluded_f(p_study_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
DECLARE
   v_old_dx_excluded boolean;
   v_new_dx_excluded boolean;
BEGIN

SELECT dx_excluded 
INTO v_old_dx_excluded
FROM mrsdba.mrs_studies
WHERE study_id = p_study_id;

IF v_old_dx_excluded = TRUE
THEN
   v_new_dx_excluded = FALSE;
ELSE
   v_new_dx_excluded = TRUE;
END IF;

INSERT INTO mrs_studies_hist (
   study_id,
   dx_excluded,
   mod_user,
   mod_date
)
VALUES (
   p_study_id,
   v_new_dx_excluded,
   p_mod_user,
   now()
);

UPDATE mrsdba.mrs_studies
SET dx_excluded = v_new_dx_excluded
WHERE study_id = p_study_id;

IF v_new_dx_excluded = TRUE
THEN
   return 'excluded';
ELSE
   return 'included';
END IF;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_study_dx_excluded_f(p_study_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_study_f(numeric, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, boolean, character varying, character varying, character varying, numeric, boolean, character varying, boolean, boolean, character varying, character varying, boolean, boolean, boolean, boolean); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_study_f(p_study_id numeric, p_study_label character varying, p_irb_number character varying, p_hrrc_num character varying, p_description character varying, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_hrrc_title character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_sa_review_emails character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_tracker_enabled boolean, p_is_rdoc_study boolean) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    /*
    Change Log:
    Jan. 07 2011:     Dylan Wood       Added NULLIF(p_max_enrollment, '-1') to the update statement to make max_enrollment an optional feature
    Jan. 12 2011:     Dylan Wood       Added NULLIF(p_hrrc_consent_date, '01/11/1986') to the update statement to make it an optional feature as well. The date is obscure (and my birthday)...
    Feb. 5 2013:      Drew Landis      Added share_inst_emails to be updated as well
    Oct. 24 2013:     Drew Landis      Added parent_study_id, dx_excluded
    Nov. 12 2013:     Drew Landis      Added default_radiologist
    Feb 20 2014:      Dylan Wood       Added allow_p2_self_enrollment
    Feb 21 2014:      Dylan Wood       Chaged lists to have leading zeros and proper indentation
    March 8 2014:     Ross Kelly       removed allow_p2_self_enrollment added study_css_url
    Oct 24 2014:      William Courtney Added study_dir_name
    Feb 11 2015:      Ross Kelly       Added self_enroll_enabled, and recruitment_study
    Feb 19 2015:      Chris Dieringer  Added tracker_enabled
    March 20 2015:    Drew Landis      Added is_rdoc_study
    */

    BEGIN
        UPDATE mrs_studies
        SET
            label                       = p_study_label
          , irb_number                  = p_irb_number
          , hrrc_num                    = p_hrrc_num
          , description                 = p_description
          , expiration_date             = p_expiration_date
          , exp_warn_emails             = p_exp_warn_emails
          , pi_id                       = p_pi_id
          , co_pi_id                    = p_co_pi_id
          , rad_review_emails           = p_rad_review_emails
          , status_id                   = p_status_id
          , hrrc_consent_date           = NULLIF(p_hrrc_consent_date, '01/11/1986')
          , grant_number                = p_grant_number
          , url_reference               = p_url_reference
          , url_description             = p_url_description
          , sponsor                     = p_sponsor
          , hrrc_title                  = p_hrrc_title
          , primary_research_area_id    = p_primary_research_area_id
          , secondary_research_area_id  = p_secondary_research_area_id
          , add_to_recruitment          = p_add_to_recruitment
          , recruitment_study_purpose   = p_recruitment_study_purpose
          , recruitment_protocol_summary= p_recruitment_protocol_summary
          , recruitment_contact_name    = p_recruitment_contact_name
          , recruitment_contact_email   = p_recruitment_contact_email
          , recruitment_contact_phone   = p_recruitment_contact_phone
          , max_enrollment              = NULLIF(p_max_enrollment, -1)
          , reuse_ursi                  = p_reuse_ursi
          , site_id                     = p_site_id
          , sa_review_emails            = p_sa_review_emails
          , share_inst_emails           = p_share_inst_emails
          , parent_study_id             = p_parent_study_id
          , dx_excluded                 = p_dx_excluded
          , default_radiologist         = p_default_radiologist
          , hide_savenexit_in_sa        = p_hide_savenexit_in_sa
          , nonstop_queue_in_sa         = p_nonstop_queue_in_sa
          , study_css_url               = p_study_css_url
          , study_dir_name              = p_study_dir_name
          , self_enroll_enabled         = p_self_enroll_enabled
          , recruitment_study           = p_recruitment_study
          , tracker_enabled             = p_tracker_enabled
          , is_rdoc_study               = p_is_rdoc_study
        WHERE study_id = p_study_id;

        IF NOT FOUND  THEN
            RAISE EXCEPTION 'Study % does not exist.', p_study_id;
        END IF;

        INSERT INTO mrs_studies_hist (
            study_id
          , label
          , description
          , IRB_NUMBER
          , hrrc_num
          , expiration_date
          , exp_warn_emails
          , remaining_sessions
          , approved_sessions
          , pi_id
          , co_pi_id
          , rad_review_emails
          , status_id
          , hrrc_consent_date
          , grant_number
          , url_reference
          , url_description
          , sponsor
          , hrrc_title
          , primary_research_area_id
          , secondary_research_area_id
          , add_to_recruitment
          , recruitment_study_purpose
          , recruitment_protocol_summary
          , recruitment_contact_name
          , recruitment_contact_email
          , recruitment_contact_phone
          , max_enrollment
          , reuse_ursi
          , site_id
          , sa_review_emails
          , share_inst_emails
          , parent_study_id
          , dx_excluded
          , default_radiologist
          , hide_savenexit_in_sa
          , nonstop_queue_in_sa
          , study_css_url
          , study_dir_name
          , self_enroll_enabled
          , recruitment_study
          , tracker_enabled
          , is_rdoc_study
          , mod_user
          , mod_date
        )
        SELECT
            study_id
          , label
          , description
          , IRB_NUMBER
          , hrrc_num
          , expiration_date
          , exp_warn_emails
          , remaining_sessions
          , approved_sessions
          , pi_id
          , co_pi_id
          , rad_review_emails
          , status_id
          , hrrc_consent_date
          , grant_number
          , url_reference
          , url_description
          , sponsor
          , hrrc_title
          , primary_research_area_id
          , secondary_research_area_id
          , add_to_recruitment
          , recruitment_study_purpose
          , recruitment_protocol_summary
          , recruitment_contact_name
          , recruitment_contact_email
          , recruitment_contact_phone
          , max_enrollment
          , reuse_ursi
          , site_id
          , sa_review_emails
          , share_inst_emails
          , parent_study_id
          , dx_excluded
          , default_radiologist
          , hide_savenexit_in_sa
          , nonstop_queue_in_sa
          , study_css_url
          , study_dir_name
          , self_enroll_enabled
          , recruitment_study
          , tracker_enabled
          , is_rdoc_study
          , p_mod_user
          , NOW()
        FROM mrs_studies
        WHERE study_id = p_study_id;

        RETURN '1';
    END;
$$;


ALTER FUNCTION mrsdba.mrs_update_study_f(p_study_id numeric, p_study_label character varying, p_irb_number character varying, p_hrrc_num character varying, p_description character varying, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_hrrc_title character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_sa_review_emails character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_tracker_enabled boolean, p_is_rdoc_study boolean) OWNER TO ni_developers;

--
-- Name: mrs_update_study_interval_f(numeric, character varying, numeric, character varying, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_is_hidden boolean, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE

         BEGIN

         UPDATE mrs_study_intervals
         SET label               = p_label,
         time_from_baseline  = p_time_from_baseline,
         time_unit           = p_time_unit,
         is_hidden           = p_is_hidden
         WHERE study_id            = p_study_id
         AND segment_interval    = p_segment_interval;

         IF NOT FOUND THEN
         RAISE EXCEPTION 'Segment interval % for study does not exist or wrong study specified.',p_segment_interval;
         END IF;

         insert into mrs_study_intervals_hist(study_id,label,time_from_baseline,time_unit,segment_interval,mod_user,mod_date)
         select study_id, label, time_from_baseline, time_unit, segment_interval, p_dbtrans_username_pt, now()
         from mrs_study_intervals
         where study_id = p_study_id
         and segment_interval = p_segment_interval;

         RETURN '1';
         END;
         $$;


ALTER FUNCTION mrsdba.mrs_update_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_is_hidden boolean, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_study_message_f(numeric, numeric, numeric, boolean, integer, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
update mrs_study_messages set auto_send = auto_send_f, days_in_advance = days_in_advance_f where study_id = study_id_f and message_type_id=message_type_id_f and message_id=message_id_f;
insert into mrs_study_messages_hist (
        message_id,
        study_id,
        message_type_id,
        auto_send,
        days_in_advance,
        mod_user,
        mod_date) values(
        message_id_f,
        study_id_f,
        message_type_id_f,
        auto_send_f,
        days_in_advance_f,
        mod_user_f,
        now());
return 1;
end;$$;


ALTER FUNCTION mrsdba.mrs_update_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_update_study_notification_emails_f(numeric, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_study_notification_emails_f(study_id_f numeric, rad_rev_email_f character varying, warning_email_f character varying, sa_rev_email_f character varying, share_inst_email_f character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
   update mrs_studies 
   set rad_review_emails=rad_rev_email_f, exp_warn_emails=warning_email_f, sa_review_emails=sa_rev_email_f, share_inst_emails=share_inst_email_f
   where study_id = study_id_f;

   return 1;
end;
$$;


ALTER FUNCTION mrsdba.mrs_update_study_notification_emails_f(study_id_f numeric, rad_rev_email_f character varying, warning_email_f character varying, sa_rev_email_f character varying, share_inst_email_f character varying) OWNER TO postgres;

--
-- Name: mrs_update_study_proj_f(numeric, character varying, numeric, timestamp without time zone, timestamp without time zone, character varying, character varying, character varying, character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_study_proj_f(p_project_id numeric, p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  UPDATE mrs_study_projects
     SET
      label = p_label,
      priority = p_priority,
      date_requested = p_date_requested,
      date_approved = p_date_approved,
      datasource_category = p_datasource_cat,
      outcome_measures = p_outcome_measures,
      outcome_dependencies = p_outcome_dependencies,
      notes = p_notes,
      parent_project_id = p_parent_project_id,
      pr_inv_person_id = p_pr_inv_person_id

   WHERE project_id = p_project_id;



  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Code % does not exist.',p_project_id;
  END IF;

  INSERT INTO mrs_study_proj_hist (
    project_id,
    label,
    priority,
    date_requested,
    date_approved,
    datasource_category,
    outcome_measures,
    outcome_dependencies,
    notes,
    parent_project_id,
    pr_inv_person_id,
    mod_user,
    mod_date
  )
  VALUES (
    p_project_id,
    p_label,
    p_priority,
    p_date_requested,
    p_date_approved,
    p_datasource_cat,
    p_outcome_measures,
    p_outcome_dependencies,
    p_notes,
    p_parent_project_id,
    p_pr_inv_person_id,
    p_dbtrans_username_pt,
    now()
  );


  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_study_proj_f(p_project_id numeric, p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_study_status_f(numeric, text, text); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_study_status_f(p_study_id numeric, p_status_id text, p_dbtrans_username text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
            BEGIN
               update mrs_studies
               set status_id = p_status_id
               where study_id=p_study_id;

               IF NOT FOUND  THEN
               RAISE EXCEPTION 'Study % does not exist.',p_study_id;
               END IF;

               insert into mrs_studies_hist(
                  study_id,
                  status_id,
                  mod_user,
                  mod_date)
               values(
                  p_study_id,
                  p_status_id,
                  p_dbtrans_username,
                  now());

               RETURN '1';
            END;
         $$;


ALTER FUNCTION mrsdba.mrs_update_study_status_f(p_study_id numeric, p_status_id text, p_dbtrans_username text) OWNER TO postgres;

--
-- Name: mrs_update_sub_det_notes_f(character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_sub_det_notes_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN
   INSERT INTO MRSDBA.MRS_SUBJECT_TYPE_DETAILS_HIST(
     URSI,
     SUBJECT_TYPE_ID,
     NOTES,
     MOD_USER,
     MOD_DATE
   ) VALUES (
     P_URSI,
     P_SUBJECT_TYPE_ID,
     P_NOTES,
     P_USER_ENTERED,
     now()
   );

   UPDATE MRSDBA.MRS_SUBJECT_TYPE_DETAILS
     SET NOTES = P_NOTES
   WHERE URSI = P_URSI
     AND SUBJECT_TYPE_ID = P_SUBJECT_TYPE_ID;
   RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_update_sub_det_notes_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_user_entered character varying) OWNER TO postgres;

--
-- Name: mrs_update_subj_ass_queue_f(numeric, numeric, numeric[], character varying, integer, numeric, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_inst_array numeric[], p_mod_user character varying, p_queue_type_id integer, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
                  DECLARE
                  v_result int;
                  v_min_sort int;
                  v_sort numeric;
                  BEGIN
                     BEGIN
                  
                  --select current max sort order (from in-progres asmts, or other seg ints)
                  SELECT max(sort_order)
                  into strict v_min_sort
                  from mrs_subject_assessments_queue_instruments
                  where login_id = p_login_id;

                  exception when NO_DATA_FOUND then
                  v_min_sort := 0;

               END;
            IF v_min_sort IS NULL THEN v_min_sort := 0; END IF; 
            
                  IF array_upper(p_inst_array,1) IS NOT NULL
                  THEN
                      for i in 1 .. array_upper(p_inst_array,1) LOOP
                v_sort := v_min_sort + i;
                
                          perform mrs_queue_subject_assessment_f(
                              p_login_id,
                              p_inst_array[i],
                              p_segment_interval_id,
                              v_sort,
                              p_mod_user,
                              p_queue_type_id,
                              p_protocol_id,
                              p_start_date,
                              p_end_date);
                      end Loop;
                  END IF;
                  return 1;

                  END;
                  $$;


ALTER FUNCTION mrsdba.mrs_update_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_inst_array numeric[], p_mod_user character varying, p_queue_type_id integer, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) OWNER TO ni_developers;

--
-- Name: mrs_update_subj_ass_queue_item_f(numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_subj_ass_queue_item_f(p_queue_instrument_id numeric, p_assessment_id numeric, p_mod_user character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
BEGIN

    INSERT INTO mrs_subject_assessments_queue_instruments_hist(
        queue_instrument_id,
        assessment_id,
        mod_user,
        mod_date
    )
    VALUES(
        p_queue_instrument_id,
        p_assessment_id,
        P_MOD_USER,
        NOW()
    );

    UPDATE mrs_subject_assessments_queue_instruments
    SET assessment_id =p_assessment_id
    WHERE queue_instrument_id = p_queue_instrument_id;

return 1;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_subj_ass_queue_item_f(p_queue_instrument_id numeric, p_assessment_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_subject_class_details_f(character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   declare
   begin
   insert into mrsdba.mrs_subject_class_details_hist(
   usid,subject_class_id,notes,mod_user,mod_date
   )
   values(
   p_usid,
   p_subject_class_id,
   p_notes,
   p_mod_user,
   now()
   );
   update mrsdba.mrs_subject_class_details
   set notes = p_notes
   where usid = p_usid
   and subject_class_id = p_subject_class_id;

   return '1';
   end;
$$;


ALTER FUNCTION mrsdba.mrs_update_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) OWNER TO postgres;

--
-- Name: mrs_update_subject_dx_excluded_f(character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_subject_dx_excluded_f(p_ursi character varying, p_subject_type_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
DECLARE
   v_old_dx_excluded boolean;
   v_new_dx_excluded boolean;
BEGIN

SELECT dx_excluded 
INTO v_old_dx_excluded
FROM mrsdba.mrs_subject_type_details
WHERE ursi = p_ursi
AND subject_type_id = p_subject_type_id;

IF v_old_dx_excluded = TRUE
THEN
   v_new_dx_excluded = FALSE;
ELSE
   v_new_dx_excluded = TRUE;
END IF;

INSERT INTO mrs_subject_type_details_hist (
   ursi,
   subject_type_id,
   dx_excluded,
   mod_user,
   mod_date
)
VALUES (
   p_ursi,
   p_subject_type_id,
   v_new_dx_excluded,
   p_mod_user,
   now()
);

UPDATE mrsdba.mrs_subject_type_details
SET dx_excluded = v_new_dx_excluded
WHERE ursi = p_ursi
AND subject_type_id = p_subject_type_id;

IF v_new_dx_excluded = TRUE
THEN
   return 'excluded';
ELSE
   return 'included';
END IF;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_subject_dx_excluded_f(p_ursi character varying, p_subject_type_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_subject_login_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_subject_login_f(p_login_id numeric, p_subject_id character varying, p_dbtrans_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
BEGIN

    INSERT INTO MRS_SUBJECT_LOGINS_HIST(
        LOGIN_ID,
        SUBJECT_ID,
        MOD_USER,
        MOD_DATE
    )
    VALUES(
        P_LOGIN_ID,
        P_SUBJECT_ID,
        P_DBTRANS_USERNAME,
        NOW()
    );

    UPDATE MRS_SUBJECT_LOGINS
    SET
        SUBJECT_ID = P_SUBJECT_ID
    WHERE LOGIN_ID = P_LOGIN_ID;

    RETURN '1';
    END;

$$;


ALTER FUNCTION mrsdba.mrs_update_subject_login_f(p_login_id numeric, p_subject_id character varying, p_dbtrans_username character varying) OWNER TO postgres;

--
-- Name: mrs_update_subject_race_cats_f(character varying, character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_subject_race_cats_f(p_usid character varying, p_ursi character varying, p_racial_category_ids character varying, p_subject_type_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
      declare

         cnt     numeric:=0;
         targ_cnt numeric:=0;
         qry text;
         v_racial_category_ids character varying;
         v_rs RECORD;
      BEGIN
       -- This is the least cumbersome way, but is not very elegant

       IF p_racial_category_ids IS NULL THEN
         v_racial_category_ids:='NULL';
       ELSE
         v_racial_category_ids:=p_racial_category_ids;
       END IF;

      --  validate racial_category_ids
       EXECUTE '
       SELECT COUNT(1) FROM mrs_racial_categories
       WHERE racial_category_id in (' || NVL(v_racial_category_ids,'NULL') ||')'
       INTO cnt;

       -- count the number of commas in p_racial_category_ids
       EXECUTE '
       SELECT LENGTH($1) -
              LENGTH(REPLACE($2,'','',''''))
      '
       INTO targ_cnt
       USING p_racial_category_ids,v_racial_category_ids;

       IF cnt <= targ_cnt THEN
          RAISE EXCEPTION  'Some of the racial categories % do not exist.', v_racial_category_ids;
       END IF;

       FOR v_rs IN SELECT subject_type_detail_id FROM mrs_subject_type_details WHERE ursi = p_ursi AND usid = p_usid AND 
       CASE WHEN p_subject_type_id > 0 THEN subject_type_id = p_subject_type_id::int END 
       LOOP
       
         -- Save history for rows that will be deleted next
          qry := '
          INSERT INTO mrs_subjects_racial_categ_hist (
          usid,
          racial_category_id,
          subject_type_detail_id,
          mod_user,
          mod_date
          )
          SELECT usid,
          racial_category_id,
          subject_type_detail_id,
          $1,
          now()
          FROM mrs_subjects_racial_categories
          WHERE subject_type_detail_id = $2
            AND usid = $3
            AND racial_category_id NOT IN (' || NVL(p_racial_category_ids,'-9999999') || ')';

          EXECUTE qry
          USING p_dbtrans_username_pt, v_rs.subject_type_detail_id, p_usid;

          -- Remove categories that are not selected
          EXECUTE 'DELETE from mrs_subjects_racial_categories
          WHERE usid= $2 AND subject_type_detail_id = $1
            AND racial_category_id NOT IN (' || NVL(p_racial_category_ids,'-9999999') || ')'
          USING v_rs.subject_type_detail_id, p_usid;


          -- Insert categories that are selected and are not already added

          qry:='
          INSERT into mrs_subjects_racial_categories ( usid, racial_category_id, subject_type_detail_id )
          SELECT $1, racial_category_id, $2
          FROM mrs_racial_categories r
          WHERE racial_category_id IN (' || NVL(p_racial_category_ids,'NULL') || ')
            AND racial_category_id NOT IN (
               SELECT racial_category_id FROM mrs_subjects_racial_categories
                WHERE usid=$1
                AND   subject_type_detail_id=$2   
            );';


          EXECUTE qry
          USING p_usid, v_rs.subject_type_detail_id;

          -- Save history
          qry := '
          INSERT INTO mrs_subjects_racial_categ_hist (
          usid,
          racial_category_id,
          subject_type_detail_id,
          mod_user,
          mod_date
          )
          SELECT usid,
          racial_category_id,
          subject_type_detail_id,
          $1,
          now()
          FROM mrs_subjects_racial_categories
          WHERE subject_type_detail_id = $2
            AND usid = $3
            AND racial_category_id IN (' || NVL(p_racial_category_ids,'NULL') || ')';

          EXECUTE qry
          USING p_dbtrans_username_pt, v_rs.subject_type_detail_id, p_usid;
      END LOOP;

       RETURN '1';
      EXCEPTION WHEN OTHERS THEN
        RAISE EXCEPTION '(mrs_update_subject_race_cats_f) ERROR %:%', SQLSTATE , SQLERRM;
      end;
      $_$;


ALTER FUNCTION mrsdba.mrs_update_subject_race_cats_f(p_usid character varying, p_ursi character varying, p_racial_category_ids character varying, p_subject_type_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_subject_tag_detail_f(numeric, character varying, numeric, character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_subject_tag_detail_f(p_subject_tag_details_id numeric, p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   BEGIN

      -- Load record
      UPDATE mrsdba.mrs_subject_tag_details SET
          usid = p_usid
          , subject_tag_id = p_subject_tag_id
          , value = p_value
          , site_id = p_site_id
          , study_id = p_study_id
      WHERE subject_tag_details_id = p_subject_tag_details_id;

      INSERT INTO mrsdba.mrs_subject_tag_details_hist (
          subject_tag_details_id
          , usid
          , subject_tag_id
          , value
          , site_id
          , study_id
          , mod_user
          , mod_date
      )
      VALUES (
          p_subject_tag_details_id
          , p_usid
          , p_subject_tag_id
          , p_value
          , NULLIF(p_site_id, '')
          , p_study_id
          , p_dbtrans_username_pt
          , now()
      );

      RETURN '1';
   end;
$$;


ALTER FUNCTION mrsdba.mrs_update_subject_tag_detail_f(p_subject_tag_details_id numeric, p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_subject_tag_f(numeric, character varying, character varying, character varying, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_subject_tag_f(p_subject_tag_id numeric, p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  UPDATE mrs_subject_tags
     SET organization = p_organization,
         label = p_label,
         description = p_description,
         is_phi = p_is_phi
   WHERE subject_tag_id = p_subject_tag_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Subject Tag % does not exist.',p_subject_tag_id;
  END IF;

  INSERT INTO mrs_subject_tags_hist (
    subject_tag_id,
    organization,
    label,
    description,
    is_phi,
    mod_user,
    mod_date
  )
  SELECT subject_tag_id,
         organization,
         label,
         description,
         p_is_phi,
         p_dbtrans_username_pt,
         now()
    FROM mrs_subject_tags
   WHERE subject_tag_id = p_subject_tag_id;

  RETURN '1';
end;
$$;


ALTER FUNCTION mrsdba.mrs_update_subject_tag_f(p_subject_tag_id numeric, p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_subject_type_details_f(character varying, numeric, numeric, character varying, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_subject_type_details_f(p_usid character varying, p_new_subject_type_id numeric, p_old_subject_type_id numeric, p_ursi character varying, p_user_enrolled character varying, p_notes character varying, p_isphilinked character varying, p_agreestosharedata character varying, p_ethnicity character varying, p_consent_date timestamp without time zone, p_dx_excluded boolean, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
                     DECLARE
                        v_subject_type_detail_id int;

                        BEGIN
                           SELECT subject_type_detail_id 
                           INTO v_subject_type_detail_id
                           FROM mrs_subject_type_details 
                           WHERE ursi = p_ursi
                              AND usid = p_usid
                              AND subject_type_id = p_old_subject_type_id;

                           /* update table */
                           UPDATE mrs_subject_type_details
                           SET user_enrolled = p_user_enrolled,
                              notes = p_notes,
                              isphilinked = p_isphilinked,
                              agreestosharedata = p_agreestosharedata,
                              ethnic_category = p_ethnicity,
                              consent_date = p_consent_date,
                              dx_excluded = p_dx_excluded,
                              subject_type_id = p_new_subject_type_id
                           WHERE usid = p_usid
                           AND subject_type_id = p_old_subject_type_id
                           AND ursi = p_ursi;

                           /* update history */
                           INSERT INTO mrs_subject_type_details_hist (
                              ursi,
                              subject_type_id,
                              notes,
                              isphilinked,
                              agreestosharedata,
                              usid,
                              ethnic_category,
                              consent_date,
                              user_enrolled,
                              subject_type_detail_id,
                              dx_excluded,
                              mod_user,
                              mod_date
                           )
                           VALUES (
                              p_ursi,
                              p_new_subject_type_id,
                              p_notes,
                              p_isphilinked,
                              p_agreestosharedata,
                              p_usid,
                              p_ethnicity,
                              p_consent_date,
                              p_user_enrolled,
                              v_subject_type_detail_id,
                              p_dx_excluded,
                              p_mod_user,
                              now()
                           );
                           return 'UPDATED';
                        END;
                     $$;


ALTER FUNCTION mrsdba.mrs_update_subject_type_details_f(p_usid character varying, p_new_subject_type_id numeric, p_old_subject_type_id numeric, p_ursi character varying, p_user_enrolled character varying, p_notes character varying, p_isphilinked character varying, p_agreestosharedata character varying, p_ethnicity character varying, p_consent_date timestamp without time zone, p_dx_excluded boolean, p_mod_user character varying) OWNER TO postgres;

--
-- Name: mrs_update_subject_type_f(numeric, numeric, character varying, character varying, boolean, boolean, boolean, boolean, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_subject_type_f(p_subject_type_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_hidden boolean, p_allow_p2_self_enrollment boolean, p_db_username character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
BEGIN

INSERT INTO mrsdba.mrs_subject_types_hist (
  study_id,
  subject_type_id,
  label,
  description,
  dx_excluded,
  qb_excluded,
  hidden,
  allow_p2_self_enrollment,
  mod_user,
  mod_date
)
VALUES (
  p_study_id,
  p_subject_type_id,
  p_label,
  p_description,
  p_dx_excluded,
  p_qb_excluded,
  p_hidden,
  p_allow_p2_self_enrollment,
  p_db_username,
  now()
);

UPDATE mrsdba.mrs_subject_types 
  SET label = p_label,
      description = p_description,
      dx_excluded = p_dx_excluded,
      qb_excluded = p_qb_excluded,
	  hidden = p_hidden,
      allow_p2_self_enrollment = p_allow_p2_self_enrollment
  WHERE subject_type_id = p_subject_type_id
  AND study_id = p_study_id;

return 'UPDATED';

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_subject_type_f(p_subject_type_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_hidden boolean, p_allow_p2_self_enrollment boolean, p_db_username character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_subject_type_group_f(numeric, character varying, character varying, numeric[], character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_subject_type_group_f(type_group_id_f numeric, label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin

delete from mrs_subject_type_group_link where type_group_id=type_group_id_f;

for i in array_lower(typeids_f, 1) .. array_upper(typeids_f,1) loop
insert into mrs_subject_type_group_link (type_group_id, subject_type_id) values (type_group_id_f, typeids_f[i]);
end loop;

update mrs_subject_type_groups set label=label_f, description=desc_f where type_group_id=type_group_id_f;
insert into mrs_subject_type_groups_hist (
	type_group_id,
	label,
	description,
	subject_type_ids,
	date,
	mod_user)
values (
	type_group_id_f,
	label_f,
	desc_f,
	array_to_string(typeids_f, ','),
	now(),
	mod_user_f);

return type_group_id_f;
end;
$$;


ALTER FUNCTION mrsdba.mrs_update_subject_type_group_f(type_group_id_f numeric, label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) OWNER TO postgres;

--
-- Name: mrs_update_subject_types_dx_excluded_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_update_subject_types_dx_excluded_f(p_subject_type_id numeric, p_mod_user character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
DECLARE
   v_old_dx_excluded boolean;
   v_new_dx_excluded boolean;
BEGIN

SELECT dx_excluded 
INTO v_old_dx_excluded
FROM mrsdba.mrs_subject_types
WHERE subject_type_id = p_subject_type_id;

IF v_old_dx_excluded = TRUE
THEN
   v_new_dx_excluded = FALSE;
ELSE
   v_new_dx_excluded = TRUE;
END IF;

INSERT INTO mrs_subject_types_hist (
   subject_type_id,
   dx_excluded,
   mod_user,
   mod_date
)
VALUES (
   p_subject_type_id,
   v_new_dx_excluded,
   p_mod_user,
   now()
);

UPDATE mrsdba.mrs_subject_types
SET dx_excluded = v_new_dx_excluded
WHERE subject_type_id = p_subject_type_id;

IF v_new_dx_excluded = TRUE
THEN
   return 'excluded';
ELSE
   return 'included';
END IF;

END;
$$;


ALTER FUNCTION mrsdba.mrs_update_subject_types_dx_excluded_f(p_subject_type_id numeric, p_mod_user character varying) OWNER TO ni_developers;

--
-- Name: mrs_update_subject_unlink_all_phi_f(numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_subject_unlink_all_phi_f(p_study_id numeric, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
         DECLARE
         v_result   character varying(20);
         eachRow    RECORD;

         BEGIN
            FOR eachRow
            IN  SELECT * FROM mrs_subject_type_details
                WHERE subject_type_id IN (
                   SELECT DISTINCT subject_type_id
                   FROM mrs_subject_details_vw
                   WHERE study_id = p_study_id)
                AND isphilinked = 'Y' 
            LOOP v_result := mrs_update_subject_unlinkphi_f(
                 p_study_id,
                 eachRow.ursi,
                 p_dbtrans_username_pt);
            END LOOP;
            RETURN '1';
         END;
         
         $$;


ALTER FUNCTION mrsdba.mrs_update_subject_unlink_all_phi_f(p_study_id numeric, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_subject_unlinkphi_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_subject_unlinkphi_f(p_study_id numeric, p_ursi character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_subject_type_id mrs_subject_details_vw.subject_type_id%TYPE;
BEGIN
  BEGIN
    SELECT subject_type_id INTO STRICT v_subject_type_id
    FROM mrs_subject_details_vw
    WHERE ursi = p_ursi AND study_id = p_study_id;
  EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE EXCEPTION 'URSI does not exist in the study';
  END;

  update mrs_subject_type_details
  set isphilinked='N'
  where ursi = p_ursi and subject_type_id = v_subject_type_id;

  insert into mrs_subject_type_details_hist (
    ursi,
    subject_type_id,
    mod_user,
    mod_date,
    isphilinked
  ) VALUES (
    p_ursi,
    v_subject_type_id,
    p_dbtrans_username_pt,
    now(),
    'N'
  );

  RETURN '1';
END;
$$;


ALTER FUNCTION mrsdba.mrs_update_subject_unlinkphi_f(p_study_id numeric, p_ursi character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_update_trade_name_f(numeric, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_update_trade_name_f(p_trade_id numeric, p_trade_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN

  -- Update record
  UPDATE mrs_trade_names
     SET trade_name   = p_trade_name
        ,description = p_description
	,entered_date = now()
	,notes = p_notes
	,user_entered = p_dbtrans_username_pt
   WHERE trade_id = p_trade_id;

  IF NOT FOUND  THEN
    RAISE EXCEPTION 'Trade Name % does not exist.' ,p_trade_id;
  END IF;

  RETURN '1';

end;
$$;


ALTER FUNCTION mrsdba.mrs_update_trade_name_f(p_trade_id numeric, p_trade_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: mrs_ursi_to_usid_f(character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_ursi_to_usid_f(p_ursi character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_usid    mrsdba.mrs_subjects.usid%type;
BEGIN
 select distinct usid
 into strict  v_usid
 from   mrsdba.mrs_subject_type_details
 where  ursi = p_ursi;

 RETURN v_usid;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
   BEGIN
      select distinct usid
        into strict v_usid
        from mrsdba.mrs_subjects_reserved
       where ursi = p_ursi;

       RETURN v_usid;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RAISE EXCEPTION 'Subject % does not exist.',p_ursi;
      WHEN OTHERS THEN
         RAISE EXCEPTION '%',SQLERRM;
   END;
  WHEN OTHERS THEN
   RAISE EXCEPTION '%',SQLERRM;
END;
$$;


ALTER FUNCTION mrsdba.mrs_ursi_to_usid_f(p_ursi character varying) OWNER TO postgres;

--
-- Name: mrs_use_nonrev_slots_f(numeric, character varying, character varying, numeric, timestamp without time zone, character varying, character varying, numeric, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_use_nonrev_slots_f(p_amount_used numeric, p_charge_code character varying, p_pi_id character varying, p_scan_slot_id numeric, p_date_used timestamp without time zone, p_user_entered character varying, p_notes character varying, p_tech_slots_used numeric, p_modality_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      declare
      V_COUNT           MRS_SCAN_SLOTS.COUNT%TYPE;
      BEGIN
      /* next scan slot id */
      BEGIN
      IF (P_SCAN_SLOT_ID IS NOT NULL) THEN
      -- GET SCAN SLOT DETAILS
      SELECT COUNT - P_AMOUNT_USED                                            
      INTO V_COUNT                                                             
      FROM MRSDBA.MRS_SCAN_SLOTS                                                
      WHERE SCAN_SLOT_ID = P_SCAN_SLOT_ID;                   

      -- UPDATE SCAN SLOT HISTORY
      INSERT INTO MRS_SCAN_SLOTS_HIST (
      SCAN_SLOT_ID,
      COUNT,
      USER_MOD,
      DATE_MOD
      )
      VALUES(
      P_SCAN_SLOT_ID,
      V_COUNT,
      P_USER_ENTERED,
      now()
      );

      -- DECREMENT COUNT ON SCAN SLOT
      UPDATE MRS_SCAN_SLOTS
      SET COUNT = V_COUNT
      WHERE SCAN_SLOT_ID = P_SCAN_SLOT_ID;
      END IF; END;



      INSERT INTO MRS_NONREV_SLOT_USES_HIST (
      AMOUNT_USED,
      TECH_SLOTS_USED,
      DATE_USED,
      CHARGE_CODE,
      PI_ID,
      SCAN_SLOT_ID,
      MODALITY_ID,
      NOTES,
      MOD_USER,
      MOD_NOTES,
      MOD_DATE)
      VALUES(
      P_AMOUNT_USED,
      P_TECH_SLOTS_USED,
      P_DATE_USED,
      P_CHARGE_CODE,
      P_PI_ID,
      P_SCAN_SLOT_ID,
      P_MODALITY_ID,
      P_NOTES,
      P_USER_ENTERED,
      'ENTRY CREATED',
      now()
      );

      INSERT INTO MRS_NONREV_SLOT_USES (
      AMOUNT_USED,
      TECH_SLOTS_USED,
      DATE_USED,
      CHARGE_CODE,
      PI_ID,
      SCAN_SLOT_ID,
      MODALITY_ID,
      NOTES)
      VALUES(
      P_AMOUNT_USED,
      P_TECH_SLOTS_USED,
      P_DATE_USED,
      P_CHARGE_CODE,
      P_PI_ID,
      P_SCAN_SLOT_ID,
      P_MODALITY_ID,
      P_NOTES
      );

      RETURN '1';
      END;
      $$;


ALTER FUNCTION mrsdba.mrs_use_nonrev_slots_f(p_amount_used numeric, p_charge_code character varying, p_pi_id character varying, p_scan_slot_id numeric, p_date_used timestamp without time zone, p_user_entered character varying, p_notes character varying, p_tech_slots_used numeric, p_modality_id numeric) OWNER TO postgres;

--
-- Name: mrs_use_scan_slots_f(numeric, numeric, numeric, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_use_scan_slots_f(p_scan_slot_id numeric, p_amount_used numeric, p_scan_id numeric, p_user_entered character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
-- V_PI_ID           MRS_SCAN_SLOTS.PI_ID%TYPE;
V_COUNT           mrsdba.MRS_SCAN_SLOTS.COUNT%TYPE;
-- V_DATE_EFFECTIVE  MRS_SCAN_SLOTS.DATE_EFFECTIVE%TYPE;

BEGIN
IF  P_SCAN_SLOT_ID IS NOT NULL
THEN
/* next scan slot id */
BEGIN
SELECT --PI_ID,
COUNT - P_AMOUNT_USED --,                                                
--DATE_EFFECTIVE                                                        
INTO --V_PI_ID,                                                             
V_COUNT --,                                                             
--V_DATE_EFFECTIVE                                                     
FROM MRSDBA.MRS_SCAN_SLOTS                                                
WHERE SCAN_SLOT_ID = P_SCAN_SLOT_ID;                                      
END; 
/* insert properties into history table */
INSERT INTO MRS_SCAN_SLOTS_HIST (
SCAN_SLOT_ID,
COUNT,
--PI_ID,
--DATE_EFFECTIVE,
USER_MOD,
DATE_MOD
)
VALUES (
P_SCAN_SLOT_ID,
V_COUNT,
--V_PI_ID,
--V_DATE_EFFECTIVE,
P_USER_ENTERED,
now()
);

/* update scan slot table */
UPDATE MRS_SCAN_SLOTS
SET COUNT = V_COUNT
WHERE SCAN_SLOT_ID = P_SCAN_SLOT_ID;

END IF;

/* insert properties into usage table */
INSERT INTO MRS_SCAN_SLOT_USES (
SCAN_SLOT_USE_ID,
SCAN_SLOT_ID,
AMOUNT_USED,
SCAN_ID
)
VALUES(
nextval('mrsdba.MRS_SCAN_SLOT_USES_COUNTER'),
P_SCAN_SLOT_ID,
P_AMOUNT_USED,
P_SCAN_ID
);
/* TODO insert associations */

RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.mrs_use_scan_slots_f(p_scan_slot_id numeric, p_amount_used numeric, p_scan_id numeric, p_user_entered character varying) OWNER TO postgres;

--
-- Name: mrs_validate_assessment_f(numeric, numeric, timestamp without time zone, character varying, numeric, numeric, character varying, numeric, character varying, boolean, character varying, boolean, boolean); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION mrs_validate_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    -- NOTE: THE RETURNED STRINGS ARE USED IN THE PREG_MATCH FUNCTION IN PHP CODE,
    --       IF THEY ARE MODIFIED, PLEASE UPDATE THE PHP CODE ACCORDINGLY. 
    --       CURRENTLY, FUNCTION startAssessment() USE THOSE RETURNED STRINGS.

    -- Returns a comma-delimited string containing the entry_code and segment_instance that
    -- should be used when adding the assessment with the provided attributes.
    -- In the event that adding the assessment with the provided attributes would
    -- exceed the max_instances for the instrument, then an exception is raised.
    DECLARE
        -- Record pointer for looping through related asmts
        v_asmt_record       record;

        v_entry_1_exist     boolean;
        v_entry_2_exist     boolean;
        v_entry_C_exist     boolean;
        v_entry_F_exist     boolean;
        v_any_entry_exist   boolean;

        -- Return values
        v_assessment_id           mrsdba.mrs_assessments.assessment_id%TYPE;
        v_next_segment_instance   mrsdba.mrs_assessments.segment_instance%TYPE;
        v_entry_code              mrsdba.mrs_assessments.entry_code%TYPE;

        BEGIN
            -- Get instance number
            -- Determine if the entry has already been entered.  If it has, then get the segment
            -- instance number and proceed with the second part of the double entry.
            -- Will only apply to dual entry, because entry_code = '1'
            BEGIN
                SELECT segment_instance
                INTO STRICT v_next_segment_instance
                FROM mrsdba.mrs_assessments
                WHERE instrument_id = p_instrument_id
                    AND segment_interval = p_segment_interval
                    AND ursi = p_ursi
                    AND site_id = p_site_id
                    AND rater1 = p_rater1
                    AND dataentry_type_id = p_dataentry_type_id
                    AND source_type = p_source_type
                    AND entry_code = '1'  -- Do not count the other double entry records
                    AND assessment_date = p_assessment_date
                    AND study_id = p_study_id;

                -- Assessment date validation above is
                -- necessary for multiple segment instances for
                -- the same segment interval and double entry

                EXCEPTION
                WHEN no_data_found THEN
                    -- If the entry has not been entered for the specified date, then get the next
                    -- segment instance number for the segment interval.
                    -- Select either the highest segment_instance, or '1' if no matching records.
                    SELECT NVL(MAX(segment_instance),0) + 1
                    INTO v_next_segment_instance
                    FROM mrsdba.mrs_assessments
                    WHERE instrument_id = p_instrument_id
                        AND segment_interval = p_segment_interval
                        AND ursi = p_ursi
                        AND site_id = p_site_id
                        AND rater1 = p_rater1
                        AND dataentry_type_id = p_dataentry_type_id
                        AND source_type = p_source_type
                        AND study_id = p_study_id;

                WHEN TOO_MANY_ROWS THEN
                    -- Multiple entries match the current attributes (including date)
                    -- Get the highest segment_instance from those entries (also including date)
                    -- Note that assessment_date must be different between different segment_instances
                    -- Will only apply to dual entry, because entry_code = '1'

                    SELECT max(segment_instance)
                    INTO STRICT v_next_segment_instance
                    FROM mrsdba.mrs_assessments
                    WHERE instrument_id = p_instrument_id
                        AND segment_interval = p_segment_interval
                        AND ursi = p_ursi
                        AND site_id = p_site_id
                        AND rater1 = p_rater1
                        AND dataentry_type_id = p_dataentry_type_id
                        AND source_type = p_source_type
                        AND entry_code = '1'  -- Do not count the other double entry records
                        AND assessment_date = p_assessment_date
                        AND study_id = p_study_id;
            END;

            BEGIN
                IF p_force_first_entry = 'true' THEN
                    IF v_next_segment_instance IS NULL or v_next_segment_instance = 1 THEN
                        v_next_segment_instance := 1;
                    ELSE
                        SELECT MAX(segment_instance)
                        INTO STRICT v_next_segment_instance
                        FROM mrsdba.mrs_assessments
                        WHERE instrument_id = p_instrument_id
                            AND segment_interval = p_segment_interval
                            AND ursi = p_ursi
                            AND site_id = p_site_id
                            AND rater1 = p_rater1
                            AND dataentry_type_id = p_dataentry_type_id
                            AND source_type = p_source_type
                            AND entry_code = '1'
                            AND study_id = p_study_id;

                        v_next_segment_instance:=v_next_segment_instance + 1;
                    END IF;
                END IF;

                IF v_next_segment_instance IS NULL THEN
                    v_next_segment_instance := 1;
                END IF;
            END;

            -- Raise an exception if this is assessment cannot be performed anymore
            -- for the segment interval
            DECLARE
                v_max_per_segment    mrsdba.mrs_instruments.max_per_segment%TYPE;
            BEGIN
                SELECT max_per_segment
                INTO STRICT v_max_per_segment
                FROM mrsdba.mrs_instruments
                WHERE instrument_id = p_instrument_id;

                IF v_next_segment_instance > v_max_per_segment THEN
                    RAISE EXCEPTION 'MAX_INSTANCES_EXCEEDED(%)', v_max_per_segment;
                END IF;
                EXCEPTION
                    WHEN no_data_found THEN
                        RAISE EXCEPTION 'INSTRUMENT_NOT_FOUND(%).', p_instrument_id;
            END;

            --  Determine type of assessment entry.
            --  If self-assessment, entry_code='P' for pending, else...
            --  If it has not been entered, then return entry_code='1' to user.
            --  If it has only been entered once, then return entry_code='2' to user.
            --  If it has already been completed, then return status='C' to user.
            --  If it is getting resolved, then return status='F' to user.

            BEGIN
                FOR v_asmt_record IN
                    SELECT entry_code
                    FROM mrsdba.mrs_assessments
                    WHERE instrument_id = p_instrument_id
                        AND segment_interval = p_segment_interval
                        AND segment_instance = v_next_segment_instance
                        AND ursi = p_ursi
                        AND site_id = p_site_id
                        AND dataentry_type_id = p_dataentry_type_id
                        AND rater1 = p_rater1
                        AND source_type = p_source_type
                        AND study_id = p_study_id
                LOOP
                    v_any_entry_exist := true;
                    IF v_asmt_record.entry_code = '1' THEN
                        v_entry_1_exist := true;
                    ELSIF v_asmt_record.entry_code = '2' THEN
                        v_entry_2_exist := true;
                    ELSIF v_asmt_record.entry_code = 'F' THEN
                        v_entry_F_exist := true;
                    ELSIF v_asmt_record.entry_code = 'C' THEN
                        v_entry_C_exist := true;
                    END IF;
                END LOOP;
            END;

            -- Check to see if any other identical entries already exist
            IF v_entry_C_exist OR
                v_entry_F_exist OR
                v_entry_2_exist OR
                (p_is_self_assessment AND v_any_entry_exist) OR
                (p_is_single_entry AND v_any_entry_exist) OR
                (p_is_ongoing_entry AND v_any_entry_exist)
            THEN
                RAISE EXCEPTION 'DUPLICATE_ASSESSMENT_EXISTS';
            ELSIF v_entry_1_exist THEN
                v_entry_code := '2';
            ELSE -- No assessment entry exists for this subject on specified day
                IF p_is_self_assessment THEN
                    v_entry_code := 'P';
                ELSIF p_is_single_entry THEN
                    v_entry_code := 'S';
                ELSIF p_is_ongoing_entry THEN
                    v_entry_code := 'O';
                ELSE
                    v_entry_code := '1';
                END IF;
            END IF;

            RETURN v_entry_code::character varying || ',' || v_next_segment_instance::character varying;
        END;
$$;


ALTER FUNCTION mrsdba.mrs_validate_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean) OWNER TO ni_developers;

--
-- Name: mrs_write_xml_source_f(numeric, text); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION mrs_write_xml_source_f(p_assessment_id numeric, p_xml_source text) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$                                                                                  
begin                                                                                   

update mrsdba.mrs_assessments                                                           
set xml_source = p_xml_source
where assessment_id = p_assessment_id;                                                  

return '1';                                                                             
end;
$$;


ALTER FUNCTION mrsdba.mrs_write_xml_source_f(p_assessment_id numeric, p_xml_source text) OWNER TO postgres;

--
-- Name: nvl(character varying, unknown); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION nvl(test_value character varying, result_value unknown) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
BEGIN

	IF test_value is null THEN
		return result_value;
	ELSE
		return test_value;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
	 RAISE notice '%', SQLSTATE;
END;
$$;


ALTER FUNCTION mrsdba.nvl(test_value character varying, result_value unknown) OWNER TO postgres;

--
-- Name: racial_cats(character varying, numeric); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION racial_cats(p_ursi character varying, p_subject_type_id numeric) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
     lc_str text:='';
     lc_colval text;
     l numeric;

BEGIN
     FOR  lc_colval IN SELECT RC.LABEL FROM 
                      mrs_subjects_racial_categories SR, 
                      MRS_RACIAL_CATEGORIES_VW RC 
                      WHERE SR.ursi = p_ursi AND 
                            sr.subject_type_id = p_subject_type_id AND
                            SR.RACIAL_CATEGORY_ID = RC.RACIAL_CATEGORY_ID LOOP


     lc_str := lc_str || ',' || lc_colval;

     END LOOP;


     RETURN substr(lc_str,2);
 END;
 $$;


ALTER FUNCTION mrsdba.racial_cats(p_ursi character varying, p_subject_type_id numeric) OWNER TO postgres;

--
-- Name: strip_zeroes(character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION strip_zeroes(p_val character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_pos numeric;
  v_end numeric;
  v_len numeric;
  res   VARCHAR(10);
BEGIN
  v_pos := INSTR(p_val,'.');
  IF v_pos > 0 THEN
    res := to_char(to_numeric(substr(p_val,v_pos)));
    if res = 0 THEN res := substr(p_val,1,v_pos-1); else
      res := substr(p_val,1,v_pos-1) || res;
    end if;
  else
    res := p_val;
  end if;
  
  return res;
end;

$$;


ALTER FUNCTION mrsdba.strip_zeroes(p_val character varying) OWNER TO postgres;

--
-- Name: update_scan_data_f(numeric, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: postgres
--

CREATE FUNCTION update_scan_data_f(p_scan_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
BEGIN

   UPDATE mrsdba.mrs_scan_data
   SET value = p_value
   WHERE scan_data_id = p_scan_data_id;

   IF NOT FOUND  THEN
   RAISE EXCEPTION 'Scan data ID % does not exist.',p_scan_data_id;
   END IF;

   INSERT INTO MRSDBA.MRS_SCAN_DATA_HIST(
      SCAN_DATA_ID,
      VALUE,
      MOD_USER,
      MOD_DATE
   )
   VALUES(
      P_SCAN_DATA_ID,
      P_VALUE,
      P_DBTRANS_USERNAME_PT,
      now()
   );

RETURN '1';

END;
$$;


ALTER FUNCTION mrsdba.update_scan_data_f(p_scan_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) OWNER TO postgres;

--
-- Name: upsert_tracker(integer, character varying, boolean); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION upsert_tracker(p_study_id integer, p_label character varying, p_permit_custom_text_response boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $$
    DECLARE result_id integer;
    BEGIN
        WITH update_tracker AS (
            UPDATE mrs_study_trackers
            SET
                study_id = p_study_id,
                label =  p_label,
                permit_custom_text_response = p_permit_custom_text_response
            WHERE mrs_study_trackers.label = p_label
            RETURNING 'update'::text AS action, label, id
        ),
        insert_tracker AS (
            INSERT INTO
                mrs_study_trackers (study_id, label, permit_custom_text_response)
            SELECT
                p_study_id AS study_id,
                p_label AS label,
                p_permit_custom_text_response AS permit_custom_text_response
            WHERE NOT EXISTS (SELECT label FROM update_tracker LIMIT 1)
            RETURNING 'insert'::text AS action, label, id
        )
        SELECT id INTO result_id FROM update_tracker UNION ALL SELECT id FROM insert_tracker;
        RETURN result_id;
    END;
$$;


ALTER FUNCTION mrsdba.upsert_tracker(p_study_id integer, p_label character varying, p_permit_custom_text_response boolean) OWNER TO ni_developers;

--
-- Name: upsert_tracker_event(integer, character varying, timestamp with time zone, character varying, character varying); Type: FUNCTION; Schema: mrsdba; Owner: ni_developers
--

CREATE FUNCTION upsert_tracker_event(p_study_id integer, p_ursi character varying, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$

    DECLARE z_subject_type_detail_id integer;
    DECLARE result_id integer;

    BEGIN
        z_subject_type_detail_id = (
            SELECT DISTINCT subject_type_detail_id FROM mrs_subject_type_details
            WHERE
                mrs_subject_type_details.ursi = p_ursi AND
                mrs_subject_type_details.subject_type_id = (
		            SELECT DISTINCT subject_type_id from mrs_subject_type_det_active_vw
			            WHERE
                            mrs_subject_type_det_active_vw.ursi = p_ursi AND
                            mrs_subject_type_det_active_vw.study_id = p_study_id
		        )
        );
        WITH update_tracker_event AS (
            UPDATE mrs_subject_tracker_events
            SET
                timestamp = p_timestamp
            WHERE
                mrs_subject_tracker_events.subject_type_detail_id = 0 AND
                mrs_subject_tracker_events.log = 'imported'
            RETURNING 'update'::text AS action, subject_type_detail_id, id
        ),
        insert_tracker_event AS (
            INSERT INTO
                mrs_subject_tracker_events (
                    subject_type_detail_id,
                    timestamp,
                    log,
                    tracking_diff
                )
            SELECT
                z_subject_type_detail_id as subject_type_detail_id,
                p_timestamp as timestamp,
                'imported' as log,
                p_tracking_diff as tracking_diff
            WHERE NOT EXISTS (SELECT subject_type_detail_id FROM update_tracker_event LIMIT 1)
            RETURNING 'insert'::text AS action, subject_type_detail_id, id
        )
        SELECT id INTO result_id FROM update_tracker_event UNION ALL SELECT id FROM insert_tracker_event;
        RETURN result_id;
    END;

$$;


ALTER FUNCTION mrsdba.upsert_tracker_event(p_study_id integer, p_ursi character varying, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying) OWNER TO ni_developers;

SET search_path = mydba, pg_catalog;

--
-- Name: add_weekly_update_f(date, text, character varying); Type: FUNCTION; Schema: mydba; Owner: niternal
--

CREATE FUNCTION add_weekly_update_f(date_f date, content_f text, owner_f character varying) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$declare 
	id_f	numeric;
begin
	select nextval('mydba.weekly_updates_counter') into id_f;
	insert into mydba.weekly_updates values(id_f, date_f, content_f, owner_f);

	return id_f;
end;$$;


ALTER FUNCTION mydba.add_weekly_update_f(date_f date, content_f text, owner_f character varying) OWNER TO niternal;

--
-- Name: update_weekly_update_f(numeric, date, text); Type: FUNCTION; Schema: mydba; Owner: niternal
--

CREATE FUNCTION update_weekly_update_f(id_f numeric, date_f date, content_f text) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin

	update mydba.weekly_updates set date=date_f, content=content_f where id=id_f;

	return id_f;
end;$$;


ALTER FUNCTION mydba.update_weekly_update_f(id_f numeric, date_f date, content_f text) OWNER TO niternal;

SET search_path = public, pg_catalog;

--
-- Name: armor(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION armor(bytea) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_armor';


ALTER FUNCTION public.armor(bytea) OWNER TO postgres;

--
-- Name: crypt(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crypt(text, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_crypt';


ALTER FUNCTION public.crypt(text, text) OWNER TO postgres;

--
-- Name: dearmor(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dearmor(text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_dearmor';


ALTER FUNCTION public.dearmor(text) OWNER TO postgres;

--
-- Name: decrypt(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION decrypt(bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_decrypt';


ALTER FUNCTION public.decrypt(bytea, bytea, text) OWNER TO postgres;

--
-- Name: decrypt_iv(bytea, bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION decrypt_iv(bytea, bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_decrypt_iv';


ALTER FUNCTION public.decrypt_iv(bytea, bytea, bytea, text) OWNER TO postgres;

--
-- Name: difference(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION difference(text, text) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/fuzzystrmatch', 'difference';


ALTER FUNCTION public.difference(text, text) OWNER TO postgres;

--
-- Name: digest(bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION digest(bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_digest';


ALTER FUNCTION public.digest(bytea, text) OWNER TO postgres;

--
-- Name: digest(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION digest(text, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_digest';


ALTER FUNCTION public.digest(text, text) OWNER TO postgres;

--
-- Name: dmetaphone(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dmetaphone(text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/fuzzystrmatch', 'dmetaphone';


ALTER FUNCTION public.dmetaphone(text) OWNER TO postgres;

--
-- Name: dmetaphone_alt(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dmetaphone_alt(text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/fuzzystrmatch', 'dmetaphone_alt';


ALTER FUNCTION public.dmetaphone_alt(text) OWNER TO postgres;

--
-- Name: encrypt(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION encrypt(bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_encrypt';


ALTER FUNCTION public.encrypt(bytea, bytea, text) OWNER TO postgres;

--
-- Name: encrypt_iv(bytea, bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION encrypt_iv(bytea, bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_encrypt_iv';


ALTER FUNCTION public.encrypt_iv(bytea, bytea, bytea, text) OWNER TO postgres;

--
-- Name: gen_random_bytes(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gen_random_bytes(integer) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pg_random_bytes';


ALTER FUNCTION public.gen_random_bytes(integer) OWNER TO postgres;

--
-- Name: gen_salt(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gen_salt(text) RETURNS text
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pg_gen_salt';


ALTER FUNCTION public.gen_salt(text) OWNER TO postgres;

--
-- Name: gen_salt(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gen_salt(text, integer) RETURNS text
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pg_gen_salt_rounds';


ALTER FUNCTION public.gen_salt(text, integer) OWNER TO postgres;

--
-- Name: hmac(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION hmac(bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_hmac';


ALTER FUNCTION public.hmac(bytea, bytea, text) OWNER TO postgres;

--
-- Name: hmac(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION hmac(text, text, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_hmac';


ALTER FUNCTION public.hmac(text, text, text) OWNER TO postgres;

--
-- Name: instr(text, unknown); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION instr(text, unknown) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    pos integer;
BEGIN
    pos:= public.instr($1, $2, 1);
    RETURN pos;
END;
$_$;


ALTER FUNCTION public.instr(text, unknown) OWNER TO postgres;

--
-- Name: instr(unknown, unknown); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION instr(unknown, unknown) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    pos integer;
BEGIN
    pos:= public.instr($1, $2, 1);
    RETURN pos;
END;
$_$;


ALTER FUNCTION public.instr(unknown, unknown) OWNER TO postgres;

--
-- Name: instr(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION instr(character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    pos integer;
BEGIN
    pos:= public.instr($1, $2, 1);
    RETURN pos;
END;
$_$;


ALTER FUNCTION public.instr(character varying, character varying) OWNER TO postgres;

--
-- Name: instr(character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION instr(string character varying, string_to_search character varying, beg_index integer) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    pos integer NOT NULL DEFAULT 0;
    temp_str varchar;
    beg integer;
    length integer;
    ss_length integer;
BEGIN
    IF beg_index > 0 THEN
        temp_str := substring(string FROM beg_index);
        pos := position(string_to_search IN temp_str);

        IF pos = 0 THEN
            RETURN 0;
        ELSE
            RETURN pos + beg_index - 1;
        END IF;
    ELSE
        ss_length := char_length(string_to_search);
        length := char_length(string);
        beg := length + beg_index - ss_length + 2;

        WHILE beg > 0 LOOP
            temp_str := substring(string FROM beg FOR ss_length);
            pos := position(string_to_search IN temp_str);

            IF pos > 0 THEN
                RETURN beg;
            END IF;

            beg := beg - 1;
        END LOOP;

        RETURN 0;
    END IF;
END;
$$;


ALTER FUNCTION public.instr(string character varying, string_to_search character varying, beg_index integer) OWNER TO postgres;

--
-- Name: instr(character varying, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION instr(string character varying, string_to_search character varying, beg_index integer, occur_index integer) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    pos integer NOT NULL DEFAULT 0;
    occur_number integer NOT NULL DEFAULT 0;
    temp_str varchar;
    beg integer;
    i integer;
    length integer;
    ss_length integer;
BEGIN
    IF beg_index > 0 THEN
        beg := beg_index;
        temp_str := substring(string FROM beg_index);

        FOR i IN 1..occur_index LOOP
            pos := position(string_to_search IN temp_str);

            IF i = 1 THEN
                beg := beg + pos - 1;
            ELSE
                beg := beg + pos;
            END IF;

            temp_str := substring(string FROM beg + 1);
        END LOOP;

        IF pos = 0 THEN
            RETURN 0;
        ELSE
            RETURN beg;
        END IF;
    ELSE
        ss_length := char_length(string_to_search);
        length := char_length(string);
        beg := length + beg_index - ss_length + 2;

        WHILE beg > 0 LOOP
            temp_str := substring(string FROM beg FOR ss_length);
            pos := position(string_to_search IN temp_str);

            IF pos > 0 THEN
                occur_number := occur_number + 1;

                IF occur_number = occur_index THEN
                    RETURN beg;
                END IF;
            END IF;

            beg := beg - 1;
        END LOOP;

        RETURN 0;
    END IF;
END;
$$;


ALTER FUNCTION public.instr(string character varying, string_to_search character varying, beg_index integer, occur_index integer) OWNER TO postgres;

--
-- Name: levenshtein(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION levenshtein(text, text) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/fuzzystrmatch', 'levenshtein';


ALTER FUNCTION public.levenshtein(text, text) OWNER TO postgres;

--
-- Name: levenshtein(text, text, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION levenshtein(text, text, integer, integer, integer) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/fuzzystrmatch', 'levenshtein_with_costs';


ALTER FUNCTION public.levenshtein(text, text, integer, integer, integer) OWNER TO postgres;

--
-- Name: metaphone(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION metaphone(text, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/fuzzystrmatch', 'metaphone';


ALTER FUNCTION public.metaphone(text, integer) OWNER TO postgres;

--
-- Name: nvl(anyelement, anyelement); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION nvl(test_value anyelement, result_value anyelement) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

	IF test_value is null THEN
		return result_value;
	ELSE
		return test_value;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
	 RAISE notice '%', SQLSTATE;
END;
$$;


ALTER FUNCTION public.nvl(test_value anyelement, result_value anyelement) OWNER TO postgres;

--
-- Name: nvl(numeric, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION nvl(test_value numeric, result_value numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

	IF test_value is null THEN
		return result_value;
	ELSE
		return test_value;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
	 RAISE notice '%', SQLSTATE;
END;
$$;


ALTER FUNCTION public.nvl(test_value numeric, result_value numeric) OWNER TO postgres;

--
-- Name: nvl(unknown, unknown); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION nvl(test_value unknown, result_value unknown) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

	IF test_value is null THEN
		return result_value;
	ELSE
		return test_value;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
	 RAISE notice '%', SQLSTATE;
END;
$$;


ALTER FUNCTION public.nvl(test_value unknown, result_value unknown) OWNER TO postgres;

--
-- Name: nvl(character varying, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION nvl(test_value character varying, result_value numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

	IF test_value is null THEN
		return result_value;
	ELSE
		return test_value;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
	 RAISE notice '%', SQLSTATE;
END;
$$;


ALTER FUNCTION public.nvl(test_value character varying, result_value numeric) OWNER TO postgres;

--
-- Name: nvl(character varying, unknown); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION nvl(test_value character varying, result_value unknown) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

	IF test_value is null THEN
		return result_value;
	ELSE
		return test_value;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
	 RAISE notice '%', SQLSTATE;
END;
$$;


ALTER FUNCTION public.nvl(test_value character varying, result_value unknown) OWNER TO postgres;

--
-- Name: nvl(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION nvl(test_value character varying, result_value character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

	IF test_value is null THEN
		return result_value;
	ELSE
		return test_value;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
	 RAISE notice '%', SQLSTATE;
END;
$$;


ALTER FUNCTION public.nvl(test_value character varying, result_value character varying) OWNER TO postgres;

--
-- Name: pc_chartoint(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pc_chartoint(chartoconvert character varying) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
BEGIN
SELECT CASE WHEN trim($1) SIMILAR TO '[^(\d|-)?(\d|,)*\.?\d*$]' 
        THEN CAST(trim($1) AS integer) 
    ELSE NULL END;
END;
$_$;


ALTER FUNCTION public.pc_chartoint(chartoconvert character varying) OWNER TO postgres;

--
-- Name: pg_relpages(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pg_relpages(relname text) RETURNS bigint
    LANGUAGE c STRICT
    AS '$libdir/pgstattuple', 'pg_relpages';


ALTER FUNCTION public.pg_relpages(relname text) OWNER TO postgres;

--
-- Name: pgp_key_id(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_key_id(bytea) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_key_id_w';


ALTER FUNCTION public.pgp_key_id(bytea) OWNER TO postgres;

--
-- Name: pgp_pub_decrypt(bytea, bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt(bytea, bytea) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_text';


ALTER FUNCTION public.pgp_pub_decrypt(bytea, bytea) OWNER TO postgres;

--
-- Name: pgp_pub_decrypt(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt(bytea, bytea, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_text';


ALTER FUNCTION public.pgp_pub_decrypt(bytea, bytea, text) OWNER TO postgres;

--
-- Name: pgp_pub_decrypt(bytea, bytea, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt(bytea, bytea, text, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_text';


ALTER FUNCTION public.pgp_pub_decrypt(bytea, bytea, text, text) OWNER TO postgres;

--
-- Name: pgp_pub_decrypt_bytea(bytea, bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt_bytea(bytea, bytea) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_bytea';


ALTER FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea) OWNER TO postgres;

--
-- Name: pgp_pub_decrypt_bytea(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_bytea';


ALTER FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text) OWNER TO postgres;

--
-- Name: pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_bytea';


ALTER FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text, text) OWNER TO postgres;

--
-- Name: pgp_pub_encrypt(text, bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_encrypt(text, bytea) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_encrypt_text';


ALTER FUNCTION public.pgp_pub_encrypt(text, bytea) OWNER TO postgres;

--
-- Name: pgp_pub_encrypt(text, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_encrypt(text, bytea, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_encrypt_text';


ALTER FUNCTION public.pgp_pub_encrypt(text, bytea, text) OWNER TO postgres;

--
-- Name: pgp_pub_encrypt_bytea(bytea, bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_encrypt_bytea(bytea, bytea) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_encrypt_bytea';


ALTER FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea) OWNER TO postgres;

--
-- Name: pgp_pub_encrypt_bytea(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_encrypt_bytea';


ALTER FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea, text) OWNER TO postgres;

--
-- Name: pgp_sym_decrypt(bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_decrypt(bytea, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_decrypt_text';


ALTER FUNCTION public.pgp_sym_decrypt(bytea, text) OWNER TO postgres;

--
-- Name: pgp_sym_decrypt(bytea, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_decrypt(bytea, text, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_decrypt_text';


ALTER FUNCTION public.pgp_sym_decrypt(bytea, text, text) OWNER TO postgres;

--
-- Name: pgp_sym_decrypt_bytea(bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_decrypt_bytea(bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_decrypt_bytea';


ALTER FUNCTION public.pgp_sym_decrypt_bytea(bytea, text) OWNER TO postgres;

--
-- Name: pgp_sym_decrypt_bytea(bytea, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_decrypt_bytea(bytea, text, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_decrypt_bytea';


ALTER FUNCTION public.pgp_sym_decrypt_bytea(bytea, text, text) OWNER TO postgres;

--
-- Name: pgp_sym_encrypt(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_encrypt(text, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_encrypt_text';


ALTER FUNCTION public.pgp_sym_encrypt(text, text) OWNER TO postgres;

--
-- Name: pgp_sym_encrypt(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_encrypt(text, text, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_encrypt_text';


ALTER FUNCTION public.pgp_sym_encrypt(text, text, text) OWNER TO postgres;

--
-- Name: pgp_sym_encrypt_bytea(bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_encrypt_bytea(bytea, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_encrypt_bytea';


ALTER FUNCTION public.pgp_sym_encrypt_bytea(bytea, text) OWNER TO postgres;

--
-- Name: pgp_sym_encrypt_bytea(bytea, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_encrypt_bytea(bytea, text, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_encrypt_bytea';


ALTER FUNCTION public.pgp_sym_encrypt_bytea(bytea, text, text) OWNER TO postgres;

--
-- Name: pgstatindex(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgstatindex(relname text, OUT version integer, OUT tree_level integer, OUT index_size bigint, OUT root_block_no bigint, OUT internal_pages bigint, OUT leaf_pages bigint, OUT empty_pages bigint, OUT deleted_pages bigint, OUT avg_leaf_density double precision, OUT leaf_fragmentation double precision) RETURNS record
    LANGUAGE c STRICT
    AS '$libdir/pgstattuple', 'pgstatindex';


ALTER FUNCTION public.pgstatindex(relname text, OUT version integer, OUT tree_level integer, OUT index_size bigint, OUT root_block_no bigint, OUT internal_pages bigint, OUT leaf_pages bigint, OUT empty_pages bigint, OUT deleted_pages bigint, OUT avg_leaf_density double precision, OUT leaf_fragmentation double precision) OWNER TO postgres;

--
-- Name: pgstattuple(oid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgstattuple(reloid oid, OUT table_len bigint, OUT tuple_count bigint, OUT tuple_len bigint, OUT tuple_percent double precision, OUT dead_tuple_count bigint, OUT dead_tuple_len bigint, OUT dead_tuple_percent double precision, OUT free_space bigint, OUT free_percent double precision) RETURNS record
    LANGUAGE c STRICT
    AS '$libdir/pgstattuple', 'pgstattuplebyid';


ALTER FUNCTION public.pgstattuple(reloid oid, OUT table_len bigint, OUT tuple_count bigint, OUT tuple_len bigint, OUT tuple_percent double precision, OUT dead_tuple_count bigint, OUT dead_tuple_len bigint, OUT dead_tuple_percent double precision, OUT free_space bigint, OUT free_percent double precision) OWNER TO postgres;

--
-- Name: pgstattuple(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgstattuple(relname text, OUT table_len bigint, OUT tuple_count bigint, OUT tuple_len bigint, OUT tuple_percent double precision, OUT dead_tuple_count bigint, OUT dead_tuple_len bigint, OUT dead_tuple_percent double precision, OUT free_space bigint, OUT free_percent double precision) RETURNS record
    LANGUAGE c STRICT
    AS '$libdir/pgstattuple', 'pgstattuple';


ALTER FUNCTION public.pgstattuple(relname text, OUT table_len bigint, OUT tuple_count bigint, OUT tuple_len bigint, OUT tuple_percent double precision, OUT dead_tuple_count bigint, OUT dead_tuple_len bigint, OUT dead_tuple_percent double precision, OUT free_space bigint, OUT free_percent double precision) OWNER TO postgres;

--
-- Name: soundex(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION soundex(text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/fuzzystrmatch', 'soundex';


ALTER FUNCTION public.soundex(text) OWNER TO postgres;

--
-- Name: sysdate(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION sysdate() RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

	return now();
END;
$$;


ALTER FUNCTION public.sysdate() OWNER TO postgres;

--
-- Name: text_soundex(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION text_soundex(text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/fuzzystrmatch', 'soundex';


ALTER FUNCTION public.text_soundex(text) OWNER TO postgres;

SET search_path = casdba, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: cas_app_user_role_privs; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_app_user_role_privs (
    app_id numeric(4,0) NOT NULL,
    username character varying(160) NOT NULL,
    role_id numeric(8,0) NOT NULL,
    granted_date timestamp without time zone NOT NULL,
    CONSTRAINT casapusro_granteddate_nn CHECK ((granted_date IS NOT NULL))
);


ALTER TABLE cas_app_user_role_privs OWNER TO postgres;

--
-- Name: cas_app_user_role_privs_hist; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_app_user_role_privs_hist (
    app_id numeric(4,0),
    username character varying(160),
    role_id numeric(8,0),
    granted_date timestamp without time zone,
    mod_user character varying(40),
    mod_date timestamp without time zone,
    mod_deletion boolean
);


ALTER TABLE cas_app_user_role_privs_hist OWNER TO postgres;

--
-- Name: cas_apps; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_apps (
    app_id numeric(4,0) NOT NULL,
    label character varying(25) NOT NULL,
    description character varying(4000),
    CONSTRAINT casapps_label_nn CHECK ((label IS NOT NULL))
);


ALTER TABLE cas_apps OWNER TO postgres;

--
-- Name: cas_roles; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_roles (
    role_id numeric(8,0) NOT NULL,
    label character varying(25) NOT NULL,
    description character varying(4000),
    CONSTRAINT casroles_label_nn CHECK ((label IS NOT NULL))
);


ALTER TABLE cas_roles OWNER TO postgres;

--
-- Name: cas_app_user_role_privs_vw; Type: VIEW; Schema: casdba; Owner: postgres
--

CREATE VIEW cas_app_user_role_privs_vw AS
 SELECT priv.app_id,
    app.label AS app_label,
    priv.username,
    priv.role_id,
    role.label AS role_label
   FROM cas_app_user_role_privs priv,
    cas_apps app,
    cas_roles role
  WHERE ((priv.app_id = app.app_id) AND (priv.role_id = role.role_id));


ALTER TABLE cas_app_user_role_privs_vw OWNER TO postgres;

--
-- Name: cas_apps_hist; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_apps_hist (
    app_id numeric(4,0),
    label character varying(25),
    description character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE cas_apps_hist OWNER TO postgres;

--
-- Name: cas_apps_vw; Type: VIEW; Schema: casdba; Owner: postgres
--

CREATE VIEW cas_apps_vw AS
 SELECT cas_apps.app_id,
    cas_apps.label,
    cas_apps.description
   FROM cas_apps;


ALTER TABLE cas_apps_vw OWNER TO postgres;

--
-- Name: cas_coins_metrics; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_coins_metrics (
    studies bigint,
    sites bigint,
    assessments bigint,
    scans bigint,
    instruments bigint,
    participants bigint,
    unique_participant_enrollments bigint,
    dx_parent_studies bigint,
    dx_studies bigint,
    dx_subjects bigint,
    dx_asmts bigint,
    dx_scans bigint
);


ALTER TABLE cas_coins_metrics OWNER TO postgres;

--
-- Name: cas_coins_metrics_vw; Type: VIEW; Schema: casdba; Owner: postgres
--

CREATE VIEW cas_coins_metrics_vw AS
 SELECT cas_coins_metrics.studies,
    cas_coins_metrics.sites,
    cas_coins_metrics.assessments,
    cas_coins_metrics.scans,
    cas_coins_metrics.instruments,
    cas_coins_metrics.participants,
    cas_coins_metrics.unique_participant_enrollments,
    cas_coins_metrics.dx_parent_studies,
    cas_coins_metrics.dx_studies,
    cas_coins_metrics.dx_subjects,
    cas_coins_metrics.dx_asmts,
    cas_coins_metrics.dx_scans
   FROM cas_coins_metrics;


ALTER TABLE cas_coins_metrics_vw OWNER TO postgres;

--
-- Name: cas_ip_locations; Type: TABLE; Schema: casdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE cas_ip_locations (
    ip_id integer NOT NULL,
    ip_addr character varying(15) NOT NULL,
    country_code character varying(20),
    country character varying(100),
    region_code character varying(20),
    region character varying(100),
    city character varying(100),
    latitude numeric,
    longitude numeric
);


ALTER TABLE cas_ip_locations OWNER TO ni_developers;

--
-- Name: cas_ip_locations_hist; Type: TABLE; Schema: casdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE cas_ip_locations_hist (
    ip_id integer,
    ip_addr character varying(15),
    country_code character varying(20),
    country character varying(100),
    region_code character varying(20),
    region character varying(100),
    city character varying(100),
    latitude numeric,
    longitude numeric,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE cas_ip_locations_hist OWNER TO ni_developers;

--
-- Name: cas_ip_locations_ip_id_seq; Type: SEQUENCE; Schema: casdba; Owner: ni_developers
--

CREATE SEQUENCE cas_ip_locations_ip_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cas_ip_locations_ip_id_seq OWNER TO ni_developers;

--
-- Name: cas_ip_locations_ip_id_seq; Type: SEQUENCE OWNED BY; Schema: casdba; Owner: ni_developers
--

ALTER SEQUENCE cas_ip_locations_ip_id_seq OWNED BY cas_ip_locations.ip_id;


--
-- Name: cas_ip_locations_vw; Type: VIEW; Schema: casdba; Owner: ni_developers
--

CREATE VIEW cas_ip_locations_vw AS
 SELECT cas_ip_locations.ip_id,
    cas_ip_locations.ip_addr,
    cas_ip_locations.country_code,
    cas_ip_locations.country,
    cas_ip_locations.region_code,
    cas_ip_locations.region,
    cas_ip_locations.city,
    cas_ip_locations.latitude,
    cas_ip_locations.longitude
   FROM cas_ip_locations;


ALTER TABLE cas_ip_locations_vw OWNER TO ni_developers;

--
-- Name: cas_login_records; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_login_records (
    id numeric(8,0) NOT NULL,
    username character varying(50),
    login_time timestamp without time zone NOT NULL,
    ip_addr character varying(15) NOT NULL,
    error_code character varying(12),
    success character(1) NOT NULL
);


ALTER TABLE cas_login_records OWNER TO postgres;

--
-- Name: cas_login_records_counter; Type: SEQUENCE; Schema: casdba; Owner: postgres
--

CREATE SEQUENCE cas_login_records_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE cas_login_records_counter OWNER TO postgres;

--
-- Name: cas_login_records_vw; Type: VIEW; Schema: casdba; Owner: ni_developers
--

CREATE VIEW cas_login_records_vw AS
 SELECT cas_login_records.id,
    cas_login_records.username,
    cas_login_records.login_time,
    cas_login_records.ip_addr,
    cas_login_records.error_code,
    cas_login_records.success
   FROM cas_login_records;


ALTER TABLE cas_login_records_vw OWNER TO ni_developers;

--
-- Name: cas_portal_info; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_portal_info (
    app_id numeric(8,0) NOT NULL,
    study_id numeric(8,0) NOT NULL
);


ALTER TABLE cas_portal_info OWNER TO postgres;

--
-- Name: cas_portal_info_vw; Type: VIEW; Schema: casdba; Owner: postgres
--

CREATE VIEW cas_portal_info_vw AS
 SELECT cas_portal_info.app_id,
    cas_portal_info.study_id
   FROM cas_portal_info;


ALTER TABLE cas_portal_info_vw OWNER TO postgres;

--
-- Name: cas_roles_hist; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_roles_hist (
    role_id numeric(8,0),
    label character varying(25),
    description character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE cas_roles_hist OWNER TO postgres;

--
-- Name: cas_roles_vw; Type: VIEW; Schema: casdba; Owner: postgres
--

CREATE VIEW cas_roles_vw AS
 SELECT cas_roles.role_id,
    cas_roles.label,
    cas_roles.description
   FROM cas_roles;


ALTER TABLE cas_roles_vw OWNER TO postgres;

--
-- Name: cas_siteid_seq; Type: SEQUENCE; Schema: casdba; Owner: postgres
--

CREATE SEQUENCE cas_siteid_seq
    START WITH 100
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cas_siteid_seq OWNER TO postgres;

--
-- Name: cas_sites; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_sites (
    site_id character varying(3) NOT NULL,
    label character varying(25) NOT NULL,
    description character varying(4000) NOT NULL,
    ursi_prefix character varying(4),
    timezone_name text,
    site_dir_name text,
    CONSTRAINT cassites_description_nn CHECK ((description IS NOT NULL)),
    CONSTRAINT cassites_label_nn CHECK ((label IS NOT NULL))
);


ALTER TABLE cas_sites OWNER TO postgres;

--
-- Name: cas_sites_config; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_sites_config (
    site_id character varying(3) NOT NULL,
    enable_radiology_reviews boolean,
    enable_billing boolean,
    default_area_code character varying(10),
    default_city character varying(21),
    default_state character varying(2),
    imaging_storage_mount_point character varying(200),
    imaging_lost_and_found_directory character varying(200),
    directory_name_convention character varying(200),
    administrator_contact character varying(200),
    send_expiration_emails boolean,
    expiration_email_message text,
    new_user_welcome_msg text,
    expiration_summary_recipients character varying(200),
    send_inst_notifications boolean,
    enable_pi_unlock_inst boolean,
    share_miss_asmt_reason boolean,
    enable_study_change_reason boolean,
    enable_auto_backfill boolean,
    enable_subject_autocomplete boolean,
    site_logo character varying,
    site_css_url character varying,
    allow_p2_self_enrollment boolean DEFAULT false
);


ALTER TABLE cas_sites_config OWNER TO postgres;

--
-- Name: cas_sites_config_hist; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_sites_config_hist (
    site_id character varying(3) NOT NULL,
    enable_radiology_reviews boolean,
    enable_billing boolean,
    default_area_code character varying(10),
    default_city character varying(21),
    default_state character varying(2),
    imaging_storage_mount_point character varying(200),
    imaging_lost_and_found_directory character varying(200),
    directory_name_convention character varying(200),
    administrator_contact character varying(200),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    send_expiration_emails boolean,
    expiration_email_message text,
    new_user_welcome_msg text,
    expiration_summary_recipients character varying(200),
    send_inst_notifications boolean,
    enable_pi_unlock_inst boolean,
    share_miss_asmt_reason boolean,
    enable_study_change_reason boolean,
    enable_auto_backfill boolean,
    enable_subject_autocomplete boolean,
    site_logo character varying,
    site_css_url character varying,
    allow_p2_self_enrollment boolean
);


ALTER TABLE cas_sites_config_hist OWNER TO postgres;

--
-- Name: cas_sites_config_vw; Type: VIEW; Schema: casdba; Owner: ni_developers
--

CREATE VIEW cas_sites_config_vw AS
 SELECT config.site_id,
    config.enable_radiology_reviews,
    config.enable_billing,
    config.default_area_code,
    config.default_city,
    config.default_state,
    config.imaging_storage_mount_point,
    config.imaging_lost_and_found_directory,
    config.directory_name_convention,
    config.administrator_contact,
    config.send_expiration_emails,
    config.expiration_email_message,
    config.new_user_welcome_msg,
    config.expiration_summary_recipients,
    config.send_inst_notifications,
    config.enable_pi_unlock_inst,
    config.share_miss_asmt_reason,
    config.enable_study_change_reason,
    config.enable_auto_backfill,
    config.enable_subject_autocomplete,
    config.site_logo,
    config.site_css_url,
    config.allow_p2_self_enrollment
   FROM cas_sites_config config;


ALTER TABLE cas_sites_config_vw OWNER TO ni_developers;

--
-- Name: cas_sites_hist; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_sites_hist (
    site_id character varying(3),
    label character varying(25),
    description character varying(4000),
    ursi_prefix character varying(4),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    timezone_name text,
    site_dir_name text
);


ALTER TABLE cas_sites_hist OWNER TO postgres;

--
-- Name: cas_sites_vw; Type: VIEW; Schema: casdba; Owner: ni_developers
--

CREATE VIEW cas_sites_vw AS
 SELECT cas_sites.site_id,
    cas_sites.label,
    cas_sites.description,
    cas_sites.ursi_prefix,
    cas_sites.timezone_name,
    cas_sites.site_dir_name
   FROM cas_sites;


ALTER TABLE cas_sites_vw OWNER TO ni_developers;

--
-- Name: cas_study_user_role_privs; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_study_user_role_privs (
    username character varying(160) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    role_id numeric(8,0) NOT NULL,
    granted_date timestamp without time zone NOT NULL
);


ALTER TABLE cas_study_user_role_privs OWNER TO postgres;

--
-- Name: cas_study_user_role_privs_hist; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_study_user_role_privs_hist (
    username character varying(160) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    role_id numeric(8,0) NOT NULL,
    granted_date timestamp without time zone NOT NULL,
    mod_user character varying(40),
    mod_date timestamp without time zone,
    mod_deletion boolean
);


ALTER TABLE cas_study_user_role_privs_hist OWNER TO postgres;

SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_studies; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_studies (
    study_id numeric(4,0) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000),
    hrrc_num character varying(10) NOT NULL,
    end_date timestamp without time zone,
    expiration_date timestamp without time zone,
    remaining_sessions numeric(3,0),
    approved_sessions numeric(3,0),
    pi_id character varying(40) NOT NULL,
    allowphiremoval character varying(1) DEFAULT 'Y'::character varying,
    co_pi_id character varying(40),
    irb_number character varying(10),
    status_id character varying(2),
    primary_research_area_id character varying(3),
    secondary_research_area_id character varying(3),
    hrrc_consent_date timestamp without time zone,
    hrrc_title character varying(200),
    grant_number character varying(200),
    url_reference character varying(200),
    url_description character varying(200),
    date_created timestamp without time zone,
    sponsor character varying(200),
    add_to_recruitment character varying(1),
    recruitment_study_purpose character varying(1000),
    recruitment_protocol_summary character varying(1000),
    recruitment_contact_name character varying(30),
    recruitment_contact_email character varying(30),
    recruitment_contact_phone character varying(30),
    exp_warn_emails character varying(400),
    rad_review_emails character varying(400),
    reuse_ursi boolean DEFAULT false,
    max_enrollment numeric(5,0),
    site_id character varying(3),
    sa_review_emails character varying(400),
    share_inst_emails character varying(400),
    parent_study_id numeric(4,0) DEFAULT NULL::numeric,
    dx_excluded boolean DEFAULT true NOT NULL,
    dx_description character varying(4000),
    default_radiologist character varying(40) DEFAULT NULL::character varying,
    hide_savenexit_in_sa boolean,
    nonstop_queue_in_sa boolean,
    study_css_url character varying,
    study_dir_name text,
    self_enroll_enabled boolean DEFAULT false NOT NULL,
    recruitment_study boolean DEFAULT false NOT NULL,
    tracker_enabled boolean,
    is_rdoc_study boolean DEFAULT false NOT NULL,
    CONSTRAINT mrsstudie_hrrcnum_nn CHECK ((hrrc_num IS NOT NULL)),
    CONSTRAINT mrsstudie_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsstudie_piid_nn CHECK ((pi_id IS NOT NULL))
);


ALTER TABLE mrs_studies OWNER TO postgres;

SET search_path = casdba, pg_catalog;

--
-- Name: cas_study_user_role_privs_vw; Type: VIEW; Schema: casdba; Owner: ni_developers
--

CREATE VIEW cas_study_user_role_privs_vw AS
 SELECT cas_study_user_role_privs.username,
    mrs_studies.study_id,
    mrs_studies.label AS study_label,
    mrs_studies.irb_number,
    mrs_studies.hrrc_num,
    cas_study_user_role_privs.role_id,
    cas_roles.label AS role_label
   FROM cas_study_user_role_privs,
    cas_roles,
    mrsdba.mrs_studies
  WHERE ((cas_study_user_role_privs.role_id = cas_roles.role_id) AND (cas_study_user_role_privs.study_id = mrs_studies.study_id));


ALTER TABLE cas_study_user_role_privs_vw OWNER TO ni_developers;

--
-- Name: cas_ursi_prefix_seq; Type: SEQUENCE; Schema: casdba; Owner: postgres
--

CREATE SEQUENCE cas_ursi_prefix_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 999
    CACHE 1;


ALTER TABLE cas_ursi_prefix_seq OWNER TO postgres;

--
-- Name: cas_user_field_values; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_user_field_values (
    user_field_value_id numeric NOT NULL,
    user_field_id numeric,
    username character varying,
    value character varying
);


ALTER TABLE cas_user_field_values OWNER TO postgres;

--
-- Name: cas_user_field_values_counter; Type: SEQUENCE; Schema: casdba; Owner: postgres
--

CREATE SEQUENCE cas_user_field_values_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE cas_user_field_values_counter OWNER TO postgres;

--
-- Name: cas_user_field_values_hist; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_user_field_values_hist (
    user_field_value_id numeric,
    user_field_id numeric,
    username character varying,
    value character varying,
    mod_user character varying,
    mod_date date
);


ALTER TABLE cas_user_field_values_hist OWNER TO postgres;

--
-- Name: cas_user_field_values_vw; Type: VIEW; Schema: casdba; Owner: postgres
--

CREATE VIEW cas_user_field_values_vw AS
 SELECT cas_user_field_values.user_field_value_id,
    cas_user_field_values.user_field_id,
    cas_user_field_values.username,
    cas_user_field_values.value
   FROM cas_user_field_values;


ALTER TABLE cas_user_field_values_vw OWNER TO postgres;

--
-- Name: cas_user_fields; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_user_fields (
    user_field_id numeric NOT NULL,
    site_id character varying,
    label character varying,
    is_expiration_date boolean
);


ALTER TABLE cas_user_fields OWNER TO postgres;

--
-- Name: cas_user_fields_counter; Type: SEQUENCE; Schema: casdba; Owner: postgres
--

CREATE SEQUENCE cas_user_fields_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE cas_user_fields_counter OWNER TO postgres;

--
-- Name: cas_user_fields_hist; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_user_fields_hist (
    user_field_id numeric,
    site_id character varying,
    label character varying,
    is_expiration_date boolean,
    mod_user character varying,
    mod_date date
);


ALTER TABLE cas_user_fields_hist OWNER TO postgres;

--
-- Name: cas_user_fields_vw; Type: VIEW; Schema: casdba; Owner: postgres
--

CREATE VIEW cas_user_fields_vw AS
 SELECT cas_user_fields.user_field_id,
    cas_user_fields.site_id,
    cas_user_fields.label,
    cas_user_fields.is_expiration_date
   FROM cas_user_fields;


ALTER TABLE cas_user_fields_vw OWNER TO postgres;

--
-- Name: cas_user_study_privs_tmp; Type: TABLE; Schema: casdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE cas_user_study_privs_tmp (
    session_id character varying,
    study_id numeric,
    insert_date timestamp with time zone
);


ALTER TABLE cas_user_study_privs_tmp OWNER TO ni_developers;

--
-- Name: cas_users; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_users (
    username character varying(160) NOT NULL,
    password character varying(160),
    label character varying(50) NOT NULL,
    active_flag character varying(1) NOT NULL,
    acct_exp_date timestamp without time zone NOT NULL,
    password_exp_date timestamp without time zone NOT NULL,
    site_id character varying(3),
    is_site_admin character varying(5) DEFAULT false,
    email character varying(80),
    email_unsubscribed boolean DEFAULT false NOT NULL,
    password_hash character varying,
    password_reset_key character varying,
    CONSTRAINT casusers_acctexpdate_nn CHECK ((acct_exp_date IS NOT NULL)),
    CONSTRAINT casusers_activeflag_nn CHECK ((active_flag IS NOT NULL)),
    CONSTRAINT casusers_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT casusers_passwordexpdate_nn CHECK ((password_exp_date IS NOT NULL))
);


ALTER TABLE cas_users OWNER TO postgres;

--
-- Name: cas_users_hist; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE cas_users_hist (
    username character varying(160),
    password character varying(160),
    label character varying(50),
    active_flag character varying(1),
    acct_exp_date timestamp without time zone,
    password_exp_date timestamp without time zone,
    site_id character varying(3),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    is_site_admin character varying(5) DEFAULT false,
    email character varying(80),
    email_unsubscribed boolean,
    password_hash character varying,
    password_reset_key character varying
);


ALTER TABLE cas_users_hist OWNER TO postgres;

--
-- Name: cas_users_vw; Type: VIEW; Schema: casdba; Owner: postgres
--

CREATE VIEW cas_users_vw AS
 SELECT cas_users.username,
    cas_users.password,
    cas_users.label,
    cas_users.active_flag,
    cas_users.acct_exp_date,
    cas_users.password_exp_date,
    cas_users.site_id,
    cas_users.is_site_admin,
    cas_users.email,
    cas_users.email_unsubscribed,
    cas_users.password_hash,
    cas_users.password_reset_key
   FROM cas_users;


ALTER TABLE cas_users_vw OWNER TO postgres;

--
-- Name: casapps_appid_seq; Type: SEQUENCE; Schema: casdba; Owner: postgres
--

CREATE SEQUENCE casapps_appid_seq
    START WITH 321
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE casapps_appid_seq OWNER TO postgres;

--
-- Name: casroles_roleid_seq; Type: SEQUENCE; Schema: casdba; Owner: postgres
--

CREATE SEQUENCE casroles_roleid_seq
    START WITH 261
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE casroles_roleid_seq OWNER TO postgres;

--
-- Name: databasechangelog; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO postgres;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO postgres;

--
-- Name: olingrants; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE olingrants (
    username character varying(160),
    study_id numeric(4,0),
    role_id numeric(8,0),
    granted_date timestamp without time zone
);


ALTER TABLE olingrants OWNER TO postgres;

--
-- Name: olingrantsd; Type: TABLE; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE TABLE olingrantsd (
    username character varying(160),
    granted_date timestamp without time zone
);


ALTER TABLE olingrantsd OWNER TO postgres;

SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_study_tracker_response_options; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_study_tracker_response_options (
    id integer NOT NULL,
    tracker_id integer NOT NULL,
    label character varying NOT NULL
);


ALTER TABLE mrs_study_tracker_response_options OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_response_options_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_study_tracker_response_options_vw AS
 SELECT ro.id,
    ro.tracker_id,
    ro.label
   FROM mrs_study_tracker_response_options ro;


ALTER TABLE mrs_study_tracker_response_options_vw OWNER TO ni_developers;

--
-- Name: mrs_subj_anon_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_subj_anon_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subj_anon_id_seq OWNER TO postgres;

--
-- Name: mrs_subject_tracker_events; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_tracker_events (
    id integer NOT NULL,
    subject_type_detail_id integer NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    log character varying,
    tracking_diff character varying
);


ALTER TABLE mrs_subject_tracker_events OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_events_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_tracker_events_vw AS
 SELECT e.id,
    e.subject_type_detail_id,
    e."timestamp",
    e.log,
    e.tracking_diff
   FROM mrs_subject_tracker_events e;


ALTER TABLE mrs_subject_tracker_events_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_responses; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_tracker_responses (
    id integer NOT NULL,
    event_id integer NOT NULL,
    tracker_id integer NOT NULL,
    tracker_response_option_id integer,
    custom_text_response character varying
);


ALTER TABLE mrs_subject_tracker_responses OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_responses_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_tracker_responses_vw AS
 SELECT r.id,
    r.event_id,
    r.tracker_id,
    r.tracker_response_option_id,
    r.custom_text_response,
    e.subject_type_detail_id
   FROM (mrs_subject_tracker_responses r
     JOIN mrs_subject_tracker_events e ON ((r.event_id = e.id)));


ALTER TABLE mrs_subject_tracker_responses_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_type_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_type_details (
    ursi character varying(9) NOT NULL,
    subject_type_id numeric(8,0) NOT NULL,
    enrolled_date timestamp without time zone NOT NULL,
    disenrolled_date timestamp without time zone,
    user_enrolled character varying(40) NOT NULL,
    notes character varying(4000),
    isphilinked character varying(1) DEFAULT 'Y'::character varying,
    agreestosharedata character varying(1),
    usid character varying(9),
    ethnic_category character varying(1),
    consent_date timestamp without time zone,
    anonymization_id character varying(20) DEFAULT ('A'::text || lpad((nextval('mrs_subj_anon_id_seq'::regclass))::text, 8, '0'::text)),
    subject_type_detail_id integer NOT NULL,
    dx_excluded boolean DEFAULT true NOT NULL,
    anchor_date timestamp without time zone,
    CONSTRAINT mrssutyde_subjecttypeid_nn CHECK ((subject_type_id IS NOT NULL)),
    CONSTRAINT mrssutyde_ursi_nn CHECK ((ursi IS NOT NULL))
);


ALTER TABLE mrs_subject_type_details OWNER TO postgres;

--
-- Name: mrs_subject_types; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_types (
    subject_type_id numeric(8,0) NOT NULL,
    study_id numeric(4,0),
    label character varying(200) NOT NULL,
    description character varying(4000) NOT NULL,
    dx_excluded boolean DEFAULT true NOT NULL,
    qb_excluded boolean DEFAULT false NOT NULL,
    hidden boolean,
    allow_p2_self_enrollment boolean DEFAULT false,
    CONSTRAINT mrssubtyp_description_nn CHECK ((description IS NOT NULL)),
    CONSTRAINT mrssubtyp_label_nn CHECK ((label IS NOT NULL))
);


ALTER TABLE mrs_subject_types OWNER TO postgres;

--
-- Name: mrs_subject_type_details_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_type_details_vw AS
 SELECT d.subject_type_detail_id AS id,
    d.ursi,
    d.usid,
    d.subject_type_id,
    t.label AS type_label,
    t.study_id,
    s.label AS study_label,
    d.consent_date,
    d.agreestosharedata,
    d.ethnic_category,
    d.enrolled_date,
    d.disenrolled_date,
    d.user_enrolled,
    d.notes,
    d.isphilinked,
    d.anonymization_id,
    d.dx_excluded
   FROM mrs_studies s,
    mrs_subject_types t,
    mrs_subject_type_details d
  WHERE ((t.subject_type_id = d.subject_type_id) AND (t.study_id = s.study_id));


ALTER TABLE mrs_subject_type_details_vw OWNER TO ni_developers;

SET search_path = dtdba, pg_catalog;

--
-- Name: dt_tracker_response_events_vw; Type: VIEW; Schema: dtdba; Owner: ni_developers
--

CREATE VIEW dt_tracker_response_events_vw AS
 SELECT evt.id AS event_id,
    rsp.tracker_id,
    enrollment.ursi,
    evt.subject_type_detail_id AS enrollment_id,
    COALESCE(rsp.custom_text_response, rsp_opt.label) AS response_label,
    enrollment.study_id
   FROM (((mrsdba.mrs_subject_tracker_events_vw evt
     JOIN mrsdba.mrs_subject_tracker_responses_vw rsp ON ((rsp.event_id = evt.id)))
     JOIN mrsdba.mrs_subject_type_details_vw enrollment ON ((enrollment.id = evt.subject_type_detail_id)))
     LEFT JOIN mrsdba.mrs_study_tracker_response_options_vw rsp_opt ON ((rsp_opt.id = rsp.tracker_response_option_id)));


ALTER TABLE dt_tracker_response_events_vw OWNER TO ni_developers;

SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_study_trackers; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_study_trackers (
    id integer NOT NULL,
    study_id integer NOT NULL,
    label character varying NOT NULL,
    permit_custom_text_response boolean
);


ALTER TABLE mrs_study_trackers OWNER TO ni_developers;

--
-- Name: mrs_study_trackers_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_study_trackers_vw AS
 SELECT t.id,
    t.study_id,
    t.label,
    t.permit_custom_text_response
   FROM mrs_study_trackers t;


ALTER TABLE mrs_study_trackers_vw OWNER TO ni_developers;

SET search_path = dtdba, pg_catalog;

--
-- Name: dt_tracker_responses_latest_vw; Type: VIEW; Schema: dtdba; Owner: ni_developers
--

CREATE VIEW dt_tracker_responses_latest_vw AS
 SELECT DISTINCT ON (latest.enrollment_id, latest.tracker_id) latest.ursi,
    latest.study_id,
    latest.tracker_id,
    tracker.label AS tracker_label,
    latest.response_label
   FROM (dt_tracker_response_events_vw latest
     JOIN mrsdba.mrs_study_trackers_vw tracker ON ((tracker.id = latest.tracker_id)))
  ORDER BY latest.enrollment_id, latest.tracker_id, latest.event_id DESC;


ALTER TABLE dt_tracker_responses_latest_vw OWNER TO ni_developers;

SET search_path = dxdba, pg_catalog;

--
-- Name: databasechangelog; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO postgres;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO postgres;

--
-- Name: dx_asmt_responses_mv; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_asmt_responses_mv (
    assessment_id numeric(8,0),
    anonymization_id character varying(20),
    question_id character varying(20),
    question_instance numeric(3,0),
    response_sort_order numeric(3,0),
    response_value character varying,
    response_value_description text
);


ALTER TABLE dx_asmt_responses_mv OWNER TO postgres;

SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_subjects; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subjects (
    usid character varying(9) NOT NULL,
    first_name character varying(50),
    middle_name character varying(50),
    last_name character varying(50),
    site_id character varying(4) NOT NULL,
    gender character varying(1) NOT NULL,
    birth_date timestamp without time zone NOT NULL,
    entered_date timestamp without time zone NOT NULL,
    user_entered character varying(40) NOT NULL,
    old_ursi character varying(9),
    email_address character varying(200),
    email_address_confirmed boolean,
    email_address_confirmed_date timestamp without time zone,
    email_address_confirmed_method character varying(500),
    suffix character varying(40),
    password character varying,
    is_p2_active boolean DEFAULT false,
    email_address_confirmation_code character varying,
    agrees_to_future_studies boolean,
    password_reset_key character varying,
    first_name_at_birth character varying(50),
    middle_name_at_birth character varying(50),
    last_name_at_birth character varying(50),
    physical_sex_at_birth character varying(1),
    city_born_in character varying(80),
    CONSTRAINT mrssubjec_birthdate_nn CHECK ((birth_date IS NOT NULL)),
    CONSTRAINT mrssubjec_entereddate_nn CHECK ((entered_date IS NOT NULL)),
    CONSTRAINT mrssubjec_gender_nn CHECK ((gender IS NOT NULL)),
    CONSTRAINT mrssubjec_nn CHECK ((usid IS NOT NULL)),
    CONSTRAINT mrssubjec_siteid_nn CHECK ((site_id IS NOT NULL)),
    CONSTRAINT mrssubjec_userentered_nn CHECK ((user_entered IS NOT NULL))
);


ALTER TABLE mrs_subjects OWNER TO postgres;

SET search_path = dxdba, pg_catalog;

--
-- Name: dx_subjects_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_subjects_vw AS
 SELECT DISTINCT std.anonymization_id,
    s.birth_date,
    st.study_id,
    upper((st.label)::text) AS subject_type_label,
    std.ursi,
    st.subject_type_id,
        CASE
            WHEN ((s.gender)::text = 'M'::text) THEN 'Male'::text
            WHEN ((s.gender)::text = 'F'::text) THEN 'Female'::text
            ELSE 'Unknown'::text
        END AS gender,
        CASE
            WHEN (studies.parent_study_id IS NULL) THEN st.study_id
            ELSE studies.parent_study_id
        END AS parent_study_id
   FROM (((mrsdba.mrs_subject_type_details std
     JOIN mrsdba.mrs_subject_types st ON ((st.subject_type_id = std.subject_type_id)))
     JOIN mrsdba.mrs_subjects s ON (((s.usid)::text = (std.usid)::text)))
     JOIN mrsdba.mrs_studies studies ON ((st.study_id = studies.study_id)))
  WHERE ((((std.disenrolled_date IS NULL) AND (studies.dx_excluded IS FALSE)) AND (st.dx_excluded IS FALSE)) AND (std.dx_excluded IS FALSE));


ALTER TABLE dx_subjects_vw OWNER TO ni_developers;

SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_sharing_rules_asmts; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_sharing_rules_asmts (
    sharing_rule_id numeric(8,0) NOT NULL,
    sharing_rule_exception_id numeric(8,0),
    assessment_id numeric(20,0) NOT NULL
);


ALTER TABLE mrs_sharing_rules_asmts OWNER TO postgres;

--
-- Name: mrs_sharing_rules_studies; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_sharing_rules_studies (
    sharing_rule_id numeric(8,0) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    recipient_approved_by character varying(40) NOT NULL,
    recipient_approval_date timestamp without time zone NOT NULL,
    donor_approved_by character varying(40) NOT NULL,
    donor_approval_date timestamp without time zone NOT NULL,
    deleted_by character varying(40),
    deletion_date timestamp without time zone,
    note text
);


ALTER TABLE mrs_sharing_rules_studies OWNER TO postgres;

--
-- Name: mrs_asmts_studies_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_asmts_studies_vw AS
 SELECT sra.assessment_id,
    sra.sharing_rule_id,
    srs.study_id
   FROM (mrs_sharing_rules_asmts sra
     JOIN mrs_sharing_rules_studies srs ON ((srs.sharing_rule_id = sra.sharing_rule_id)));


ALTER TABLE mrs_asmts_studies_vw OWNER TO postgres;

--
-- Name: mrs_assessments; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_assessments (
    assessment_id numeric(8,0) NOT NULL,
    instrument_id numeric(8,0) NOT NULL,
    segment_interval character varying(20) NOT NULL,
    segment_instance numeric(3,0) NOT NULL,
    ursi character varying(9) NOT NULL,
    site_id character varying(4) NOT NULL,
    entry_code character varying(1) NOT NULL,
    dataentry_type_id numeric(8,0) NOT NULL,
    source_type numeric(3,0) NOT NULL,
    rater1 numeric(5,0) NOT NULL,
    rater2 numeric(5,0),
    assessment_date timestamp without time zone NOT NULL,
    entry_username character varying(40) NOT NULL,
    entry_start_date timestamp without time zone NOT NULL,
    entry_end_date timestamp without time zone,
    elapsed_time numeric(3,0),
    supervisor_id character varying(40),
    resolution_date timestamp without time zone,
    successfully_completed character varying(1) NOT NULL,
    notes character varying(4000),
    xml_source text,
    hasemptyfields character varying(6),
    study_id numeric(4,0),
    submission_date timestamp without time zone,
    last_qid character varying(20),
    is_single_entry boolean DEFAULT false,
    missing_reason_id numeric,
    dx_excluded boolean DEFAULT true NOT NULL,
    ongoing_entry boolean DEFAULT false,
    client_device_id integer,
    client_dbid integer,
    auto_queue_generated boolean,
    from_protocol_id numeric,
    is_deleted boolean DEFAULT false NOT NULL,
    CONSTRAINT mrsassess_assessmentdate_nn CHECK ((assessment_date IS NOT NULL)),
    CONSTRAINT mrsassess_dataentryid_nn CHECK ((dataentry_type_id IS NOT NULL)),
    CONSTRAINT mrsassess_entrycode_nn CHECK ((entry_code IS NOT NULL)),
    CONSTRAINT mrsassess_entrystartdate_nn CHECK ((entry_start_date IS NOT NULL)),
    CONSTRAINT mrsassess_entryusername_nn CHECK ((entry_username IS NOT NULL)),
    CONSTRAINT mrsassess_instrumentid_nn CHECK ((instrument_id IS NOT NULL)),
    CONSTRAINT mrsassess_rater1_nn CHECK ((rater1 IS NOT NULL)),
    CONSTRAINT mrsassess_segmentinstance_nn CHECK ((segment_instance IS NOT NULL)),
    CONSTRAINT mrsassess_segmentinterval_nn CHECK ((segment_interval IS NOT NULL)),
    CONSTRAINT mrsassess_siteid_nn CHECK ((site_id IS NOT NULL)),
    CONSTRAINT mrsassess_sourcetype_nn CHECK ((source_type IS NOT NULL)),
    CONSTRAINT mrsassess_ursi_nn CHECK ((ursi IS NOT NULL))
);


ALTER TABLE mrs_assessments OWNER TO postgres;

--
-- Name: mrs_instruments; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instruments (
    instrument_id numeric(8,0) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000) NOT NULL,
    version character varying(12) NOT NULL,
    display_type numeric(1,0) NOT NULL,
    max_per_segment numeric(3,0) NOT NULL,
    salabel character varying(200),
    copyright_notice character varying,
    hide_sa_previous boolean DEFAULT false,
    skip_question_text character varying(200),
    is_locked numeric(1,0) DEFAULT (0)::numeric,
    sa_hide_skipped_questions boolean DEFAULT false,
    CONSTRAINT mrsinstru_description_nn CHECK ((description IS NOT NULL)),
    CONSTRAINT mrsinstru_displaytype_nn CHECK ((display_type IS NOT NULL)),
    CONSTRAINT mrsinstru_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsinstru_maxpersegment_nn CHECK ((max_per_segment IS NOT NULL)),
    CONSTRAINT mrsinstru_version_nn CHECK ((version IS NOT NULL))
);


ALTER TABLE mrs_instruments OWNER TO postgres;

--
-- Name: mrs_instruments_studies; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_instruments_studies (
    instrument_id numeric(8,0) NOT NULL,
    study_id numeric(8,0) NOT NULL,
    is_owner numeric(1,0) DEFAULT 1,
    is_hidden numeric(1,0),
    enforce_schedule boolean DEFAULT false,
    dx_excluded boolean DEFAULT true NOT NULL,
    single_entry boolean DEFAULT false,
    ongoing_entry boolean DEFAULT false,
    sa_review boolean DEFAULT true NOT NULL,
    instrument_study_id integer NOT NULL,
    CONSTRAINT is_owner_is_bool CHECK ((is_owner = ANY (ARRAY[(0)::numeric, (1)::numeric])))
);


ALTER TABLE mrs_instruments_studies OWNER TO ni_developers;

SET search_path = dxdba, pg_catalog;

--
-- Name: dx_asmts_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_asmts_vw AS
 SELECT DISTINCT asmt.assessment_id,
    asmt.ursi,
    asmt.site_id,
    (asmt.instrument_id)::character varying AS instrument_id,
    inst.label AS instrument_label,
    s.study_id,
    subject.subject_type_id,
    subject.anonymization_id,
    (date_part('year'::text, age(asmt.assessment_date, (('01/01/'::text || (date_part('year'::text, subject.birth_date))::text))::timestamp without time zone)))::integer AS subject_age,
        CASE
            WHEN (s.parent_study_id IS NULL) THEN s.study_id
            ELSE s.parent_study_id
        END AS parent_study_id,
    asmt.segment_interval
   FROM (((((dx_subjects_vw subject
     JOIN mrsdba.mrs_assessments asmt ON (((subject.ursi)::text = (asmt.ursi)::text)))
     JOIN mrsdba.mrs_asmts_studies_vw shared ON (((asmt.assessment_id = shared.assessment_id) AND (subject.study_id = shared.study_id))))
     JOIN mrsdba.mrs_instruments inst ON ((inst.instrument_id = asmt.instrument_id)))
     JOIN mrsdba.mrs_studies s ON ((shared.study_id = s.study_id)))
     JOIN mrsdba.mrs_instruments_studies inst_study ON (((s.study_id = inst_study.study_id) AND (asmt.instrument_id = inst_study.instrument_id))))
  WHERE (((((asmt.dataentry_type_id = (1)::numeric) AND ((asmt.entry_code)::text = 'C'::text)) AND (inst_study.dx_excluded IS FALSE)) AND (asmt.dx_excluded IS FALSE)) AND (asmt.is_deleted IS FALSE));


ALTER TABLE dx_asmts_vw OWNER TO ni_developers;

SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_assessment_responses; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_assessment_responses (
    assessment_id numeric(8,0) NOT NULL,
    question_id character varying(20) NOT NULL,
    question_instance numeric(4,0) NOT NULL,
    response_value character varying,
    response_value_description text,
    response_sort_order numeric(3,0),
    CONSTRAINT mrsassres_assessmentid_nn CHECK ((assessment_id IS NOT NULL)),
    CONSTRAINT mrsassres_questionid_nn CHECK ((question_id IS NOT NULL)),
    CONSTRAINT mrsassres_questioninstance_nn CHECK ((question_instance IS NOT NULL))
);
ALTER TABLE ONLY mrs_assessment_responses ALTER COLUMN assessment_id SET STATISTICS 1000;


ALTER TABLE mrs_assessment_responses OWNER TO postgres;

--
-- Name: mrs_instrument_questions; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_questions (
    question_id character varying(20) NOT NULL,
    label character varying NOT NULL,
    description character varying(4000),
    example_description character varying(4000),
    exclusion_description character varying(4000),
    max_instances numeric(3,0) NOT NULL,
    section_id numeric(8,0) NOT NULL,
    sort_order numeric(8,0) DEFAULT 0,
    dsm_question_type character varying(1),
    disp_label_first character varying(1),
    formula_question_type character varying(1),
    formula text,
    deletion_date timestamp without time zone,
    is_required boolean DEFAULT false,
    is_sa_hidden boolean DEFAULT false,
    is_sa_radio_type boolean DEFAULT true,
    sa_label character varying,
    is_auto_complete_type boolean,
    autopop_qid character varying(20),
    assumed_value character varying(100),
    response_format_id numeric(3,0),
    other_option_label character varying(50),
    specify_detail character(1),
    multiple_choice character(1),
    isvasquestion boolean,
    vas_minimum numeric(3,0),
    vas_maximum numeric(4,0),
    vas_display_extrema boolean,
    vas_display_cursor_value boolean,
    vas_display_center_mark boolean,
    istextquestion boolean,
    vas_interval numeric(3,0),
    vas_min_label character varying(40),
    vas_max_label character varying(40),
    numeric_response_min numeric(10,3),
    numeric_response_max numeric(10,3),
    is_media_upload boolean,
    vas_recording_interval integer,
    copied_from_question_id character varying(20),
    dx_excluded boolean DEFAULT true NOT NULL,
    vas_mid_label character varying(40),
    table_row_id numeric(10,0),
    table_col_id numeric(10,0),
    is_de_hidden boolean DEFAULT false NOT NULL,
    id integer NOT NULL,
    CONSTRAINT mrsinsque_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsinsque_maxinstances_nn CHECK ((max_instances IS NOT NULL)),
    CONSTRAINT mrsinsque_sectionid_nn CHECK ((section_id IS NOT NULL))
);


ALTER TABLE mrs_instrument_questions OWNER TO postgres;

SET search_path = dxdba, pg_catalog;

--
-- Name: dx_asmt_responses_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_asmt_responses_vw AS
 SELECT DISTINCT asmt.assessment_id,
    asmt.anonymization_id,
    asmt_resp.question_id,
    asmt_resp.question_instance,
    asmt_resp.response_sort_order,
    asmt_resp.response_value,
    asmt_resp.response_value_description
   FROM ((dx_asmts_vw asmt
     JOIN mrsdba.mrs_assessment_responses asmt_resp ON ((asmt_resp.assessment_id = asmt.assessment_id)))
     JOIN ( SELECT mrs_instrument_questions.question_id,
            mrs_instrument_questions.dx_excluded
           FROM mrsdba.mrs_instrument_questions
        UNION
         SELECT ((mrs_instrument_questions.question_id)::text || '#CODE'::text),
            mrs_instrument_questions.dx_excluded
           FROM mrsdba.mrs_instrument_questions
          WHERE ((mrs_instrument_questions.dsm_question_type)::text = 'Y'::text)
        UNION
         SELECT ((mrs_instrument_questions.question_id)::text || '#DESC'::text),
            mrs_instrument_questions.dx_excluded
           FROM mrsdba.mrs_instrument_questions
          WHERE ((mrs_instrument_questions.dsm_question_type)::text = 'Y'::text)
        UNION
         SELECT ((mrs_instrument_questions.question_id)::text || '#SPEC'::text),
            mrs_instrument_questions.dx_excluded
           FROM mrsdba.mrs_instrument_questions
          WHERE ((mrs_instrument_questions.dsm_question_type)::text = 'Y'::text)) inst_quest ON (((asmt_resp.question_id)::text = (inst_quest.question_id)::text)))
  WHERE (inst_quest.dx_excluded IS FALSE);


ALTER TABLE dx_asmt_responses_vw OWNER TO ni_developers;

--
-- Name: dx_asmt_sharing_rules; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_asmt_sharing_rules (
    id numeric NOT NULL,
    assessment_id numeric NOT NULL,
    dest_study_id numeric NOT NULL,
    submitted_by text NOT NULL,
    approved_by text,
    approved_date timestamp with time zone
);


ALTER TABLE dx_asmt_sharing_rules OWNER TO postgres;

--
-- Name: dx_asmt_sharing_rules_vw; Type: VIEW; Schema: dxdba; Owner: postgres
--

CREATE VIEW dx_asmt_sharing_rules_vw AS
 SELECT dx_asmt_sharing_rules.id,
    dx_asmt_sharing_rules.assessment_id,
    dx_asmt_sharing_rules.dest_study_id,
    dx_asmt_sharing_rules.submitted_by,
    dx_asmt_sharing_rules.approved_by,
    dx_asmt_sharing_rules.approved_date
   FROM dx_asmt_sharing_rules;


ALTER TABLE dx_asmt_sharing_rules_vw OWNER TO postgres;

--
-- Name: dx_asmt_sharing_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_asmt_sharing_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_asmt_sharing_seq OWNER TO postgres;

--
-- Name: dx_asmts_mv; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_asmts_mv (
    assessment_id numeric(8,0),
    ursi character varying(9),
    site_id character varying(4),
    instrument_id character varying,
    instrument_label character varying(200),
    study_id numeric(4,0),
    subject_type_id numeric(8,0),
    anonymization_id character varying(20),
    subject_age integer,
    parent_study_id numeric(4,0),
    segment_interval character varying(20)
);


ALTER TABLE dx_asmts_mv OWNER TO postgres;

--
-- Name: dx_capsule_processing_temp; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_capsule_processing_temp (
    source_id numeric(10,0) NOT NULL,
    file_id numeric(10,0) NOT NULL,
    file_path character varying(500),
    copied boolean,
    anonymized boolean,
    session_order character varying(20),
    series_id numeric
);


ALTER TABLE dx_capsule_processing_temp OWNER TO postgres;

--
-- Name: dx_capsule_processing_temp_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_capsule_processing_temp_vw AS
 SELECT dx_capsule_processing_temp.source_id,
    dx_capsule_processing_temp.file_id,
    dx_capsule_processing_temp.file_path,
    dx_capsule_processing_temp.copied,
    dx_capsule_processing_temp.anonymized,
    dx_capsule_processing_temp.session_order,
    dx_capsule_processing_temp.series_id
   FROM dx_capsule_processing_temp;


ALTER TABLE dx_capsule_processing_temp_vw OWNER TO ni_developers;

--
-- Name: dx_data_capsule_counter; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_data_capsule_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_data_capsule_counter OWNER TO postgres;

--
-- Name: dx_data_capsule_creation_queue; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_capsule_creation_queue (
    source_id numeric(8,0) NOT NULL,
    data_capsule_request_time timestamp without time zone
);


ALTER TABLE dx_data_capsule_creation_queue OWNER TO postgres;

--
-- Name: dx_data_capsule_creation_queue_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_capsule_creation_queue_hist (
    source_id numeric(8,0),
    data_capsule_request_time timestamp without time zone,
    data_capsule_start_creation_time timestamp without time zone,
    data_capsule_finish_creation_time timestamp without time zone
);


ALTER TABLE dx_data_capsule_creation_queue_hist OWNER TO postgres;

--
-- Name: dx_data_capsule_creation_queue_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_capsule_creation_queue_vw AS
 SELECT dx_data_capsule_creation_queue.source_id,
    dx_data_capsule_creation_queue.data_capsule_request_time
   FROM dx_data_capsule_creation_queue;


ALTER TABLE dx_data_capsule_creation_queue_vw OWNER TO ni_developers;

--
-- Name: dx_data_capsule_downloads; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_capsule_downloads (
    download_id numeric(10,0) NOT NULL,
    file_id numeric(10,0),
    user_name character varying(50),
    start_time timestamp without time zone,
    expected_finish_time timestamp without time zone
);


ALTER TABLE dx_data_capsule_downloads OWNER TO postgres;

--
-- Name: dx_data_capsule_downloads_counter; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_data_capsule_downloads_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_data_capsule_downloads_counter OWNER TO postgres;

--
-- Name: dx_data_capsule_downloads_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_capsule_downloads_hist (
    download_id numeric(10,0),
    file_id numeric(10,0),
    user_name character varying(50),
    start_time timestamp without time zone,
    expected_finish_time timestamp without time zone
);


ALTER TABLE dx_data_capsule_downloads_hist OWNER TO postgres;

--
-- Name: dx_data_capsule_downloads_hist_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_capsule_downloads_hist_vw AS
 SELECT dx_data_capsule_downloads_hist.download_id,
    dx_data_capsule_downloads_hist.file_id,
    dx_data_capsule_downloads_hist.user_name,
    dx_data_capsule_downloads_hist.start_time,
    dx_data_capsule_downloads_hist.expected_finish_time
   FROM dx_data_capsule_downloads_hist;


ALTER TABLE dx_data_capsule_downloads_hist_vw OWNER TO ni_developers;

--
-- Name: dx_data_capsule_downloads_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_capsule_downloads_vw AS
 SELECT dx_data_capsule_downloads.download_id,
    dx_data_capsule_downloads.file_id,
    dx_data_capsule_downloads.user_name,
    dx_data_capsule_downloads.start_time,
    dx_data_capsule_downloads.expected_finish_time
   FROM dx_data_capsule_downloads;


ALTER TABLE dx_data_capsule_downloads_vw OWNER TO ni_developers;

--
-- Name: dx_data_capsule_file_counter; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_data_capsule_file_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 10;


ALTER TABLE dx_data_capsule_file_counter OWNER TO postgres;

--
-- Name: dx_data_capsule_modification_queue; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_capsule_modification_queue (
    modification_id integer NOT NULL,
    affected_ids text NOT NULL,
    action_type character varying NOT NULL,
    modality_id numeric NOT NULL,
    message text NOT NULL
);


ALTER TABLE dx_data_capsule_modification_queue OWNER TO postgres;

--
-- Name: dx_data_request_source_components; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_request_source_components (
    component_id integer NOT NULL,
    source_id numeric NOT NULL,
    modality_id numeric NOT NULL,
    anonymization_id character varying NOT NULL,
    id_column_value character varying,
    approval_date timestamp with time zone,
    denial_date timestamp with time zone,
    response_user character varying
);


ALTER TABLE dx_data_request_source_components OWNER TO postgres;

--
-- Name: dx_data_source_capsule_link; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_source_capsule_link (
    source_id numeric(10,0) NOT NULL,
    data_capsule_id numeric(10,0) NOT NULL
);


ALTER TABLE dx_data_source_capsule_link OWNER TO postgres;

--
-- Name: dx_ex_situ_data_capsule_files; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_ex_situ_data_capsule_files (
    file_id numeric(20,0) NOT NULL,
    data_capsule_id numeric(10,0) NOT NULL,
    file_name character varying(100) NOT NULL,
    file_size_mb numeric(10,0) NOT NULL,
    created_time timestamp without time zone,
    last_downloaded_time timestamp without time zone,
    number_of_download bigint,
    random_code character varying(100),
    file_name_displayed character varying(100)
);


ALTER TABLE dx_ex_situ_data_capsule_files OWNER TO postgres;

--
-- Name: dx_ex_situ_data_capsules; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_ex_situ_data_capsules (
    data_capsule_id numeric(8,0) NOT NULL,
    path character varying(4095),
    created_time timestamp without time zone,
    path_link character varying(4095)
);


ALTER TABLE dx_ex_situ_data_capsules OWNER TO postgres;

--
-- Name: dx_data_capsule_modification_queue_details_vw; Type: VIEW; Schema: dxdba; Owner: postgres
--

CREATE VIEW dx_data_capsule_modification_queue_details_vw AS
 WITH data_component_modifications(modification_id, source_id, id_column_value, action_type, modality_id, anonymization_id) AS (
         SELECT DISTINCT dcmq.modification_id,
            drsc.source_id,
            drsc.id_column_value,
            dcmq.action_type,
            drsc.modality_id,
            drsc.anonymization_id
           FROM (dx_data_capsule_modification_queue dcmq
             JOIN dx_data_request_source_components drsc ON (((drsc.anonymization_id)::text = ANY (regexp_split_to_array(btrim(dcmq.affected_ids), '\\s*,\\s*'::text)))))
          WHERE ((drsc.approval_date IS NOT NULL) AND (drsc.denial_date IS NULL))
        )
 SELECT DISTINCT dcm.modification_id,
    dc.data_capsule_id,
    dcf.file_id,
    dc.path,
    dcf.file_name,
    dcm.id_column_value,
    dcm.action_type,
    dcm.modality_id,
    dcm.anonymization_id
   FROM (((dx_ex_situ_data_capsules dc
     JOIN dx_ex_situ_data_capsule_files dcf ON ((dcf.data_capsule_id = dc.data_capsule_id)))
     JOIN dx_data_source_capsule_link dscl ON ((dscl.data_capsule_id = dc.data_capsule_id)))
     JOIN data_component_modifications dcm ON ((dcm.source_id = dscl.source_id)));


ALTER TABLE dx_data_capsule_modification_queue_details_vw OWNER TO postgres;

--
-- Name: dx_data_capsule_modification_queue_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_capsule_modification_queue_hist (
    modification_id integer NOT NULL,
    affected_ids text,
    action_type character varying,
    modality_id numeric,
    message text,
    mod_user character varying NOT NULL,
    mod_date timestamp with time zone NOT NULL
);


ALTER TABLE dx_data_capsule_modification_queue_hist OWNER TO postgres;

--
-- Name: dx_data_capsule_modification_queue_modification_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_data_capsule_modification_queue_modification_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_data_capsule_modification_queue_modification_id_seq OWNER TO postgres;

--
-- Name: dx_data_capsule_modification_queue_modification_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: postgres
--

ALTER SEQUENCE dx_data_capsule_modification_queue_modification_id_seq OWNED BY dx_data_capsule_modification_queue.modification_id;


--
-- Name: dx_data_capsule_modification_queue_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_capsule_modification_queue_vw AS
 SELECT dx_data_capsule_modification_queue.modification_id,
    dx_data_capsule_modification_queue.affected_ids,
    dx_data_capsule_modification_queue.action_type,
    dx_data_capsule_modification_queue.modality_id,
    dx_data_capsule_modification_queue.message
   FROM dx_data_capsule_modification_queue;


ALTER TABLE dx_data_capsule_modification_queue_vw OWNER TO ni_developers;

--
-- Name: dx_data_request_source_component_exclusions_mv; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_request_source_component_exclusions_mv (
    component_id integer,
    source_id numeric,
    anonymization_id character varying,
    id_column_value character varying,
    modality_id numeric
);


ALTER TABLE dx_data_request_source_component_exclusions_mv OWNER TO postgres;

--
-- Name: dx_series_mv; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_series_mv (
    label text,
    raw_label character varying(200),
    series_id character varying(8),
    usable character varying(1),
    sort_order numeric(8,0),
    scan_label character varying(200),
    study_id numeric(4,0),
    scan_id numeric(8,0),
    ursi character varying(9),
    pi_dir_name text,
    study_dir_name character varying(40),
    scan_date timestamp without time zone,
    site_id character varying(4),
    scanner_label character varying(200),
    scanner_model character varying(35),
    field_strength numeric,
    subject_type_id numeric(8,0),
    anonymization_id character varying(20),
    subject_age integer,
    definition text,
    definition_id integer,
    collection_technique character varying(100),
    collection_technique_id integer,
    parent_study_id numeric(4,0),
    scanner_manufacturer character varying(25),
    segment_interval character varying(20)
);


ALTER TABLE dx_series_mv OWNER TO postgres;

--
-- Name: dx_data_request_source_component_exclusions_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_request_source_component_exclusions_vw AS
 SELECT DISTINCT rsc.component_id,
    rsc.source_id,
    rsc.anonymization_id,
    rsc.id_column_value,
    rsc.modality_id
   FROM (dx_data_request_source_components rsc
     LEFT JOIN ( SELECT DISTINCT 1 AS modality_id,
            dx_series_mv.anonymization_id,
            dx_series_mv.series_id AS id_column_value
           FROM dx_series_mv
        UNION
         SELECT DISTINCT 112 AS modality_id,
            dx_asmts_mv.anonymization_id,
            (dx_asmts_mv.assessment_id)::character varying AS id_column_value
           FROM dx_asmts_mv) dx ON (((((rsc.anonymization_id)::text = (dx.anonymization_id)::text) AND (rsc.modality_id = (dx.modality_id)::numeric)) AND ((rsc.id_column_value)::text = (dx.id_column_value)::text))))
  WHERE ((rsc.denial_date IS NULL) AND (dx.anonymization_id IS NULL));


ALTER TABLE dx_data_request_source_component_exclusions_vw OWNER TO ni_developers;

--
-- Name: dx_data_request_source_components_component_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_data_request_source_components_component_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_data_request_source_components_component_id_seq OWNER TO postgres;

--
-- Name: dx_data_request_source_components_component_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: postgres
--

ALTER SEQUENCE dx_data_request_source_components_component_id_seq OWNED BY dx_data_request_source_components.component_id;


--
-- Name: dx_data_request_source_components_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_request_source_components_hist (
    component_id integer NOT NULL,
    source_id numeric,
    modality_id numeric,
    anonymization_id character varying,
    id_column_value character varying,
    approval_date timestamp with time zone,
    denial_date timestamp with time zone,
    response_user character varying,
    mod_user character varying,
    mod_date timestamp with time zone
);


ALTER TABLE dx_data_request_source_components_hist OWNER TO postgres;

--
-- Name: dx_data_request_source_components_hist_component_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_data_request_source_components_hist_component_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_data_request_source_components_hist_component_id_seq OWNER TO postgres;

--
-- Name: dx_data_request_source_components_hist_component_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: postgres
--

ALTER SEQUENCE dx_data_request_source_components_hist_component_id_seq OWNED BY dx_data_request_source_components_hist.component_id;


--
-- Name: dx_data_request_source_components_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_request_source_components_vw AS
 SELECT dx_data_request_source_components.component_id,
    dx_data_request_source_components.modality_id,
    dx_data_request_source_components.source_id,
    dx_data_request_source_components.anonymization_id,
    dx_data_request_source_components.id_column_value,
    dx_data_request_source_components.approval_date,
    dx_data_request_source_components.denial_date,
    dx_data_request_source_components.response_user
   FROM dx_data_request_source_components;


ALTER TABLE dx_data_request_source_components_vw OWNER TO ni_developers;

--
-- Name: dx_data_request_sources; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_request_sources (
    source_id numeric NOT NULL,
    data_request_id numeric NOT NULL,
    study_id numeric
);


ALTER TABLE dx_data_request_sources OWNER TO postgres;

--
-- Name: dx_data_request_sources_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_request_sources_hist (
    source_id numeric,
    data_request_id numeric,
    study_id numeric,
    mod_user character varying,
    mod_date timestamp with time zone
);


ALTER TABLE dx_data_request_sources_hist OWNER TO postgres;

--
-- Name: dx_data_request_sources_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_request_sources_vw AS
 SELECT s.source_id,
    s.data_request_id,
    s.study_id
   FROM dx_data_request_sources s;


ALTER TABLE dx_data_request_sources_vw OWNER TO ni_developers;

--
-- Name: dx_data_request_template_filters; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_request_template_filters (
    filter_id integer NOT NULL,
    group_id integer NOT NULL,
    attribute_id numeric NOT NULL,
    attribute_value text,
    attribute_value_label text
);


ALTER TABLE dx_data_request_template_filters OWNER TO postgres;

--
-- Name: dx_data_request_template_filters_filter_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_data_request_template_filters_filter_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_data_request_template_filters_filter_id_seq OWNER TO postgres;

--
-- Name: dx_data_request_template_filters_filter_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: postgres
--

ALTER SEQUENCE dx_data_request_template_filters_filter_id_seq OWNED BY dx_data_request_template_filters.filter_id;


--
-- Name: dx_data_request_template_filters_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_request_template_filters_hist (
    filter_id integer,
    group_id integer,
    attribute_id numeric,
    attribute_value text,
    attribute_value_label text,
    mod_user character varying(60),
    mod_date timestamp with time zone
);


ALTER TABLE dx_data_request_template_filters_hist OWNER TO postgres;

--
-- Name: dx_data_request_template_filters_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_request_template_filters_vw AS
 SELECT dx_data_request_template_filters.filter_id,
    dx_data_request_template_filters.group_id,
    dx_data_request_template_filters.attribute_id,
    dx_data_request_template_filters.attribute_value,
    dx_data_request_template_filters.attribute_value_label
   FROM dx_data_request_template_filters;


ALTER TABLE dx_data_request_template_filters_vw OWNER TO ni_developers;

--
-- Name: dx_data_request_template_groups; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_request_template_groups (
    group_id integer NOT NULL,
    data_request_id integer,
    parent_group_id integer,
    conjunction_type character varying(3),
    CONSTRAINT mrs_dx_dat_request_template_groups_parent_or_request CHECK ((((parent_group_id IS NULL) AND (data_request_id IS NOT NULL)) OR ((parent_group_id IS NOT NULL) AND (data_request_id IS NULL))))
);


ALTER TABLE dx_data_request_template_groups OWNER TO postgres;

--
-- Name: dx_data_request_template_groups_group_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_data_request_template_groups_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_data_request_template_groups_group_id_seq OWNER TO postgres;

--
-- Name: dx_data_request_template_groups_group_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: postgres
--

ALTER SEQUENCE dx_data_request_template_groups_group_id_seq OWNED BY dx_data_request_template_groups.group_id;


--
-- Name: dx_data_request_template_groups_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_request_template_groups_hist (
    group_id integer,
    data_request_id integer,
    parent_group_id integer,
    conjunction_type character varying(3),
    mod_user character varying(60),
    mod_date timestamp with time zone
);


ALTER TABLE dx_data_request_template_groups_hist OWNER TO postgres;

--
-- Name: dx_data_request_template_groups_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_request_template_groups_vw AS
 SELECT dx_data_request_template_groups.group_id,
    dx_data_request_template_groups.data_request_id,
    dx_data_request_template_groups.parent_group_id,
    dx_data_request_template_groups.conjunction_type
   FROM dx_data_request_template_groups;


ALTER TABLE dx_data_request_template_groups_vw OWNER TO ni_developers;

--
-- Name: dx_data_requests; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_requests (
    data_request_id numeric(8,0) NOT NULL,
    requester_username character varying(160) NOT NULL,
    delivery_venue numeric(1,0) NOT NULL,
    cloned_from_id numeric(8,0),
    date_updated timestamp with time zone,
    date_submitted timestamp with time zone,
    label character varying
);


ALTER TABLE dx_data_requests OWNER TO postgres;

--
-- Name: dx_data_requests_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_requests_hist (
    data_request_id numeric(8,0) NOT NULL,
    requester_username character varying(160) NOT NULL,
    delivery_venue numeric(1,0) NOT NULL,
    mod_user character varying(40),
    mod_date timestamp without time zone,
    cloned_from_id numeric(8,0),
    date_updated timestamp with time zone,
    date_submitted timestamp with time zone,
    label character varying
);


ALTER TABLE dx_data_requests_hist OWNER TO postgres;

--
-- Name: dx_data_requests_hist_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_requests_hist_vw AS
 SELECT dx_data_requests_hist.data_request_id,
    dx_data_requests_hist.requester_username,
    dx_data_requests_hist.delivery_venue,
    dx_data_requests_hist.mod_user,
    dx_data_requests_hist.mod_date
   FROM dx_data_requests_hist;


ALTER TABLE dx_data_requests_hist_vw OWNER TO ni_developers;

--
-- Name: dx_data_requests_sources; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_requests_sources (
    data_requests_source_id numeric(8,0) NOT NULL,
    data_request_id numeric(8,0) NOT NULL,
    study_id numeric(4,0),
    series_label character varying(200),
    scanner_label character varying(200),
    subject_type_id numeric(8,0),
    venue character varying(7),
    request_sent_time timestamp without time zone,
    request_approved_time timestamp without time zone,
    request_denied_time timestamp without time zone,
    request_response_user character varying(40)
);


ALTER TABLE dx_data_requests_sources OWNER TO postgres;

--
-- Name: dx_data_requests_sources_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_requests_sources_hist (
    data_requests_source_id numeric(8,0) NOT NULL,
    data_request_id numeric(8,0),
    study_id numeric(4,0),
    series_label character varying(200),
    scanner_label character varying(200),
    subject_type_id numeric(8,0),
    venue character varying(7),
    request_sent_time timestamp without time zone,
    request_approved_time timestamp without time zone,
    request_denied_time timestamp without time zone,
    request_response_user character varying(40),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE dx_data_requests_sources_hist OWNER TO postgres;

--
-- Name: dx_data_requests_sources_hist_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_requests_sources_hist_vw AS
 SELECT dx_data_requests_sources_hist.data_requests_source_id,
    dx_data_requests_sources_hist.data_request_id,
    dx_data_requests_sources_hist.study_id,
    dx_data_requests_sources_hist.series_label,
    dx_data_requests_sources_hist.scanner_label,
    dx_data_requests_sources_hist.subject_type_id,
    dx_data_requests_sources_hist.venue,
    dx_data_requests_sources_hist.request_sent_time,
    dx_data_requests_sources_hist.request_approved_time,
    dx_data_requests_sources_hist.request_denied_time,
    dx_data_requests_sources_hist.request_response_user,
    dx_data_requests_sources_hist.mod_user,
    dx_data_requests_sources_hist.mod_date
   FROM dx_data_requests_sources_hist;


ALTER TABLE dx_data_requests_sources_hist_vw OWNER TO ni_developers;

--
-- Name: dx_data_requests_target_studies; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_requests_target_studies (
    data_requests_target_study_id numeric(8,0) NOT NULL,
    data_request_id numeric(8,0) NOT NULL,
    study_id numeric(4,0)
);


ALTER TABLE dx_data_requests_target_studies OWNER TO postgres;

--
-- Name: dx_data_requests_target_studies_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_requests_target_studies_hist (
    data_requests_target_study_id numeric(8,0) NOT NULL,
    data_request_id numeric(8,0) NOT NULL,
    study_id numeric(4,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE dx_data_requests_target_studies_hist OWNER TO postgres;

--
-- Name: dx_data_requests_target_studies_hist_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_requests_target_studies_hist_vw AS
 SELECT dx_data_requests_target_studies_hist.data_requests_target_study_id,
    dx_data_requests_target_studies_hist.data_request_id,
    dx_data_requests_target_studies_hist.study_id,
    dx_data_requests_target_studies_hist.mod_user,
    dx_data_requests_target_studies_hist.mod_date
   FROM dx_data_requests_target_studies_hist;


ALTER TABLE dx_data_requests_target_studies_hist_vw OWNER TO ni_developers;

--
-- Name: dx_data_requests_target_studies_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_requests_target_studies_vw AS
 SELECT dx_data_requests_target_studies.data_requests_target_study_id,
    dx_data_requests_target_studies.data_request_id,
    dx_data_requests_target_studies.study_id
   FROM dx_data_requests_target_studies;


ALTER TABLE dx_data_requests_target_studies_vw OWNER TO ni_developers;

--
-- Name: dx_data_requests_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_requests_vw AS
 SELECT dx_data_requests.data_request_id,
    dx_data_requests.requester_username,
    dx_data_requests.delivery_venue,
    dx_data_requests.date_updated,
    dx_data_requests.date_submitted,
    dx_data_requests.cloned_from_id,
    dx_data_requests.label
   FROM dx_data_requests;


ALTER TABLE dx_data_requests_vw OWNER TO ni_developers;

--
-- Name: dx_data_source_capsule_link_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_source_capsule_link_hist (
    source_id numeric(10,0),
    data_capsule_id numeric(10,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE dx_data_source_capsule_link_hist OWNER TO postgres;

--
-- Name: dx_data_source_capsule_link_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_data_source_capsule_link_vw AS
 SELECT dx_data_source_capsule_link.source_id,
    dx_data_source_capsule_link.data_capsule_id
   FROM dx_data_source_capsule_link;


ALTER TABLE dx_data_source_capsule_link_vw OWNER TO ni_developers;

--
-- Name: dx_source_attribute_values; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_source_attribute_values (
    source_attribute_value_id numeric(4,0) NOT NULL,
    attribute_id numeric(4,0),
    data_requests_source_id numeric(4,0),
    value character varying(100)
);


ALTER TABLE dx_source_attribute_values OWNER TO postgres;

--
-- Name: dx_source_attributes; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_source_attributes (
    attribute_id numeric(4,0) NOT NULL,
    modality_id numeric(4,0),
    label character varying(60),
    attribute_column_name character varying(100),
    attribute_desc_column character varying(100),
    operator character varying(2),
    column_type character varying,
    dx_attribute_order integer,
    description character varying(60),
    display_to_user boolean NOT NULL
);


ALTER TABLE dx_source_attributes OWNER TO postgres;

SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_modalities; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_modalities (
    modality_id numeric(4,0) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000),
    acquisition_level character varying(10) NOT NULL,
    parent_modality_id numeric(4,0),
    attribute_view character varying(100),
    attribute_view_id_column character varying,
    dx_filter_order integer,
    CONSTRAINT mrsmodali_label_nn CHECK ((label IS NOT NULL))
);


ALTER TABLE mrs_modalities OWNER TO postgres;

SET search_path = dxdba, pg_catalog;

--
-- Name: dx_data_source_key_elements_vw; Type: VIEW; Schema: dxdba; Owner: postgres
--

CREATE VIEW dx_data_source_key_elements_vw AS
 SELECT src.data_requests_source_id,
    src.study_id,
    src.subject_type_id,
    val.value,
    attr.attribute_column_name,
    mod.modality_id
   FROM (((dx_data_requests_sources src
     JOIN dx_source_attribute_values val USING (data_requests_source_id))
     JOIN dx_source_attributes attr USING (attribute_id))
     JOIN mrsdba.mrs_modalities mod USING (modality_id));


ALTER TABLE dx_data_source_key_elements_vw OWNER TO postgres;

--
-- Name: dx_data_upload_file_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_data_upload_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_data_upload_file_id_seq OWNER TO postgres;

--
-- Name: dx_data_upload_files; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_upload_files (
    upload_file_id numeric NOT NULL,
    upload_id numeric NOT NULL,
    filename text NOT NULL,
    status text DEFAULT 'new'::text NOT NULL
);


ALTER TABLE dx_data_upload_files OWNER TO postgres;

--
-- Name: dx_data_upload_files_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_upload_files_hist (
    upload_file_id numeric,
    upload_id numeric,
    filename text,
    status text,
    mod_user text,
    mod_date timestamp with time zone
);


ALTER TABLE dx_data_upload_files_hist OWNER TO postgres;

--
-- Name: dx_data_upload_files_vw; Type: VIEW; Schema: dxdba; Owner: postgres
--

CREATE VIEW dx_data_upload_files_vw AS
 SELECT dx_data_upload_files.upload_file_id,
    dx_data_upload_files.upload_id,
    dx_data_upload_files.filename,
    dx_data_upload_files.status
   FROM dx_data_upload_files;


ALTER TABLE dx_data_upload_files_vw OWNER TO postgres;

--
-- Name: dx_data_upload_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_data_upload_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_data_upload_id_seq OWNER TO postgres;

--
-- Name: dx_data_uploads; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_uploads (
    upload_id numeric NOT NULL,
    site_id text NOT NULL,
    scanner_id numeric NOT NULL,
    study_id numeric NOT NULL,
    username text
);


ALTER TABLE dx_data_uploads OWNER TO postgres;

--
-- Name: dx_data_uploads_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_data_uploads_hist (
    upload_id numeric,
    site_id text,
    scanner_id numeric,
    study_id numeric,
    username text,
    mod_user text,
    mod_date timestamp with time zone
);


ALTER TABLE dx_data_uploads_hist OWNER TO postgres;

--
-- Name: dx_data_uploads_vw; Type: VIEW; Schema: dxdba; Owner: postgres
--

CREATE VIEW dx_data_uploads_vw AS
 SELECT dx_data_uploads.upload_id,
    dx_data_uploads.site_id,
    dx_data_uploads.scanner_id,
    dx_data_uploads.study_id,
    dx_data_uploads.username
   FROM dx_data_uploads;


ALTER TABLE dx_data_uploads_vw OWNER TO postgres;

--
-- Name: dx_ex_situ_data_capsule_files_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_ex_situ_data_capsule_files_hist (
    file_id numeric(20,0) NOT NULL,
    data_capsule_id numeric(10,0),
    file_name character varying(100),
    file_size_mb numeric(10,0),
    created_time timestamp without time zone,
    download_time timestamp without time zone,
    download_user character varying(50),
    random_code character varying(100),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    file_name_displayed character varying(100)
);


ALTER TABLE dx_ex_situ_data_capsule_files_hist OWNER TO postgres;

--
-- Name: dx_ex_situ_data_capsule_files_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_ex_situ_data_capsule_files_vw AS
 SELECT dx_ex_situ_data_capsule_files.file_id,
    dx_ex_situ_data_capsule_files.data_capsule_id,
    dx_ex_situ_data_capsule_files.file_name,
    dx_ex_situ_data_capsule_files.file_size_mb,
    dx_ex_situ_data_capsule_files.created_time,
    dx_ex_situ_data_capsule_files.last_downloaded_time,
    dx_ex_situ_data_capsule_files.number_of_download,
    dx_ex_situ_data_capsule_files.random_code,
    dx_ex_situ_data_capsule_files.file_name_displayed
   FROM dx_ex_situ_data_capsule_files;


ALTER TABLE dx_ex_situ_data_capsule_files_vw OWNER TO ni_developers;

--
-- Name: dx_ex_situ_data_capsules_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_ex_situ_data_capsules_hist (
    data_capsule_id numeric(8,0) NOT NULL,
    source_id numeric(8,0) NOT NULL,
    path character varying(4095),
    created_time timestamp without time zone,
    delete_time timestamp without time zone
);


ALTER TABLE dx_ex_situ_data_capsules_hist OWNER TO postgres;

--
-- Name: dx_ex_situ_data_capsules_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_ex_situ_data_capsules_vw AS
 SELECT dx_ex_situ_data_capsules.data_capsule_id,
    dx_ex_situ_data_capsules.path,
    dx_ex_situ_data_capsules.created_time,
    dx_ex_situ_data_capsules.path_link
   FROM dx_ex_situ_data_capsules;


ALTER TABLE dx_ex_situ_data_capsules_vw OWNER TO ni_developers;

--
-- Name: dx_filter_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_filter_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_filter_id_seq OWNER TO postgres;

--
-- Name: dx_messages; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_messages (
    message_id numeric NOT NULL,
    source_id numeric NOT NULL,
    username text NOT NULL,
    content text NOT NULL,
    date timestamp with time zone,
    send_email boolean,
    email_sent_date timestamp with time zone
);


ALTER TABLE dx_messages OWNER TO postgres;

--
-- Name: dx_msg_counter; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_msg_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_msg_counter OWNER TO postgres;

--
-- Name: dx_msgs_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_msgs_vw AS
 SELECT dx_messages.message_id,
    dx_messages.source_id,
    dx_messages.username,
    dx_messages.content,
    dx_messages.date,
    dx_messages.send_email,
    dx_messages.email_sent_date
   FROM dx_messages;


ALTER TABLE dx_msgs_vw OWNER TO ni_developers;

--
-- Name: dx_options_mv; Type: TABLE; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE dx_options_mv (
    attribute_id integer,
    option_id text,
    option_label text,
    count bigint
);


ALTER TABLE dx_options_mv OWNER TO ni_developers;

--
-- Name: dx_preapproval_attributes; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_preapproval_attributes (
    approval_attribute_id integer NOT NULL,
    approval_id integer NOT NULL,
    attribute_id numeric NOT NULL,
    value text
);


ALTER TABLE dx_preapproval_attributes OWNER TO postgres;

--
-- Name: dx_preapproval_attributes_approval_attribute_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_preapproval_attributes_approval_attribute_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_preapproval_attributes_approval_attribute_id_seq OWNER TO postgres;

--
-- Name: dx_preapproval_attributes_approval_attribute_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: postgres
--

ALTER SEQUENCE dx_preapproval_attributes_approval_attribute_id_seq OWNED BY dx_preapproval_attributes.approval_attribute_id;


--
-- Name: dx_preapproval_attributes_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_preapproval_attributes_vw AS
 SELECT dx_preapproval_attributes.approval_attribute_id,
    dx_preapproval_attributes.approval_id,
    dx_preapproval_attributes.attribute_id,
    dx_preapproval_attributes.value
   FROM dx_preapproval_attributes;


ALTER TABLE dx_preapproval_attributes_vw OWNER TO ni_developers;

--
-- Name: dx_preapprovals; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_preapprovals (
    approval_id integer NOT NULL,
    study_id numeric NOT NULL,
    approval_user text,
    message text,
    approved_user text
);


ALTER TABLE dx_preapprovals OWNER TO postgres;

--
-- Name: dx_preapprovals_approval_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_preapprovals_approval_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_preapprovals_approval_id_seq OWNER TO postgres;

--
-- Name: dx_preapprovals_approval_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: postgres
--

ALTER SEQUENCE dx_preapprovals_approval_id_seq OWNED BY dx_preapprovals.approval_id;


--
-- Name: dx_preapprovals_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_preapprovals_hist (
    approval_id integer,
    study_id numeric,
    approval_user text,
    approved_user text,
    message text,
    mod_user text,
    mod_date timestamp with time zone
);


ALTER TABLE dx_preapprovals_hist OWNER TO postgres;

--
-- Name: dx_preapprovals_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_preapprovals_vw AS
 SELECT dx_preapprovals.approval_id,
    dx_preapprovals.study_id,
    dx_preapprovals.approval_user,
    dx_preapprovals.approved_user,
    dx_preapprovals.message
   FROM dx_preapprovals;


ALTER TABLE dx_preapprovals_vw OWNER TO ni_developers;

--
-- Name: dx_req_counter; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_req_counter
    START WITH 8
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_req_counter OWNER TO postgres;

--
-- Name: dx_req_src_counter; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_req_src_counter
    START WITH 8
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_req_src_counter OWNER TO postgres;

--
-- Name: dx_scan_sharing_rules; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_scan_sharing_rules (
    id numeric NOT NULL,
    series_id text NOT NULL,
    label_as text,
    segment_interval_as text,
    dest_study_id numeric NOT NULL,
    submitted_by text NOT NULL,
    approved_by text,
    approved_date timestamp with time zone
);


ALTER TABLE dx_scan_sharing_rules OWNER TO postgres;

SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_scan_sessions; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_sessions (
    scan_id numeric NOT NULL,
    label character varying NOT NULL,
    segment_interval character varying DEFAULT 'visit1'::character varying,
    study_id numeric NOT NULL,
    scanner_id numeric NOT NULL,
    scan_date timestamp without time zone NOT NULL,
    operator_id character varying,
    ursi character varying NOT NULL,
    subject_height numeric,
    subject_height_units character varying,
    subject_mass numeric,
    subject_mass_units character varying,
    subject_age numeric NOT NULL,
    notes character varying,
    study_dir_name character varying,
    consented_under_study_id numeric,
    billto_study_id numeric,
    contrast_vials_used numeric DEFAULT 0,
    tech_slots_used numeric DEFAULT 0,
    billing_notes character varying,
    power_injector_used boolean DEFAULT false,
    pi_dir_name text,
    priority character varying,
    radiology_loaded character varying,
    oxygen_used boolean DEFAULT false,
    iv_supplies_used boolean DEFAULT false,
    priority_notes text,
    charge_code_id numeric,
    assigned_radiologist character varying,
    dx_excluded boolean DEFAULT true NOT NULL,
    review_end_date timestamp without time zone,
    review_load_date date,
    injector_type text DEFAULT 'none'::text,
    is_phantom boolean DEFAULT false,
    funding_source text,
    project_number text,
    charge_code text,
    CONSTRAINT mrsscases_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsscases_scandate_nn CHECK ((scan_date IS NOT NULL)),
    CONSTRAINT mrsscases_scannerid_nn CHECK ((scanner_id IS NOT NULL)),
    CONSTRAINT mrsscases_segmentinterval_nn CHECK ((segment_interval IS NOT NULL)),
    CONSTRAINT mrsscases_studyid_nn CHECK ((study_id IS NOT NULL)),
    CONSTRAINT mrsscases_subjage_nn CHECK ((subject_age IS NOT NULL)),
    CONSTRAINT mrsscases_ursi_nn CHECK ((ursi IS NOT NULL))
);


ALTER TABLE mrs_scan_sessions OWNER TO postgres;

--
-- Name: mrs_series; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_series (
    series_id character varying(8) NOT NULL,
    modality_id numeric(4,0),
    scan_id numeric(8,0) NOT NULL,
    base_path character varying(300),
    study_code_id numeric(4,0) NOT NULL,
    usable character varying(1) NOT NULL,
    notes character varying(4000),
    sort_order numeric(8,0) DEFAULT 0,
    label_id integer NOT NULL,
    dx_excluded boolean DEFAULT true NOT NULL,
    CONSTRAINT mrsseries_labelid_nn CHECK ((label_id IS NOT NULL)),
    CONSTRAINT mrsseries_scanid_nn CHECK ((scan_id IS NOT NULL)),
    CONSTRAINT mrsseries_studycodeid_nn CHECK ((study_code_id IS NOT NULL)),
    CONSTRAINT mrsseries_usable_nn CHECK ((usable IS NOT NULL))
);


ALTER TABLE mrs_series OWNER TO postgres;

--
-- Name: mrs_series_labels; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_series_labels (
    label character varying(200) NOT NULL,
    description character varying(4000) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    modality_id numeric DEFAULT 1 NOT NULL,
    dest_study_id numeric,
    is_hidden boolean DEFAULT false,
    label_id integer NOT NULL,
    definition_id integer,
    approval_user character varying(40),
    approval_date timestamp without time zone,
    rad_loaded boolean DEFAULT false NOT NULL,
    dx_excluded boolean DEFAULT true NOT NULL,
    CONSTRAINT mrsstucon_description_nn CHECK ((description IS NOT NULL)),
    CONSTRAINT mrsstucon_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsstucon_studyid_nn CHECK ((study_id IS NOT NULL))
);


ALTER TABLE mrs_series_labels OWNER TO ni_developers;

--
-- Name: mrs_study_codes; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_codes (
    code_id numeric(4,0) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    CONSTRAINT mrsstucod_description_nn CHECK ((description IS NOT NULL)),
    CONSTRAINT mrsstucod_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsstucod_studyid_nn CHECK ((study_id IS NOT NULL))
);


ALTER TABLE mrs_study_codes OWNER TO postgres;

--
-- Name: mrs_series_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_series_vw AS
 SELECT s.series_id,
    sl.label,
    s.modality_id,
    s.scan_id,
    scan.label AS scan_label,
    s.base_path,
    s.label_id,
    s.study_code_id,
    code.label AS study_code_label,
    s.usable,
    s.notes,
    s.sort_order,
    sl.rad_loaded AS to_rad_review,
    s.dx_excluded,
    scan.scanner_id,
    sl.study_id
   FROM (((mrs_series s
     JOIN mrs_study_codes code ON ((s.study_code_id = code.code_id)))
     JOIN mrs_scan_sessions scan ON ((s.scan_id = scan.scan_id)))
     JOIN mrs_series_labels sl ON ((s.label_id = sl.label_id)));


ALTER TABLE mrs_series_vw OWNER TO ni_developers;

SET search_path = dxdba, pg_catalog;

--
-- Name: dx_scan_sharing_rules_vw; Type: VIEW; Schema: dxdba; Owner: postgres
--

CREATE VIEW dx_scan_sharing_rules_vw AS
 SELECT r.id,
    r.series_id,
    r.label_as,
    r.segment_interval_as,
    r.dest_study_id,
    r.submitted_by,
    r.approved_by,
    r.approved_date,
    s.scan_id
   FROM (dx_scan_sharing_rules r
     JOIN mrsdba.mrs_series_vw s ON (((s.series_id)::text = r.series_id)));


ALTER TABLE dx_scan_sharing_rules_vw OWNER TO postgres;

--
-- Name: dx_scan_sharing_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_scan_sharing_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_scan_sharing_seq OWNER TO postgres;

--
-- Name: dx_series_anonymized_file_paths; Type: TABLE; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE dx_series_anonymized_file_paths (
    file_path_id integer NOT NULL,
    series_id numeric NOT NULL,
    archive_file_path character varying,
    anonymized_file_path character varying,
    date_last_accessed timestamp without time zone
);


ALTER TABLE dx_series_anonymized_file_paths OWNER TO ni_developers;

--
-- Name: dx_series_anonymized_file_paths_file_path_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: ni_developers
--

CREATE SEQUENCE dx_series_anonymized_file_paths_file_path_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_series_anonymized_file_paths_file_path_id_seq OWNER TO ni_developers;

--
-- Name: dx_series_anonymized_file_paths_file_path_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: ni_developers
--

ALTER SEQUENCE dx_series_anonymized_file_paths_file_path_id_seq OWNED BY dx_series_anonymized_file_paths.file_path_id;


--
-- Name: dx_series_anonymized_file_paths_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_series_anonymized_file_paths_vw AS
 SELECT dx_series_anonymized_file_paths.file_path_id,
    dx_series_anonymized_file_paths.series_id,
    dx_series_anonymized_file_paths.archive_file_path,
    dx_series_anonymized_file_paths.anonymized_file_path,
    dx_series_anonymized_file_paths.date_last_accessed
   FROM dx_series_anonymized_file_paths;


ALTER TABLE dx_series_anonymized_file_paths_vw OWNER TO ni_developers;

SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_collection_techniques; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_collection_techniques (
    collection_technique_id integer NOT NULL,
    collection_technique character varying(100),
    description character varying(400),
    url character varying(200),
    dx_order integer
);


ALTER TABLE mrs_collection_techniques OWNER TO ni_developers;

--
-- Name: mrs_scanners; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scanners (
    scanner_id numeric(3,0) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000) NOT NULL,
    site_id character varying(4) NOT NULL,
    model character varying(35) NOT NULL,
    manufacturer character varying(25),
    station character varying(25),
    software_version character varying(25) NOT NULL,
    start_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone,
    field_strength numeric(4,2) NOT NULL,
    modality_id numeric(4,0),
    CONSTRAINT mrsscanne_description_nn CHECK ((description IS NOT NULL)),
    CONSTRAINT mrsscanne_fieldstrength CHECK ((field_strength IS NOT NULL)),
    CONSTRAINT mrsscanne_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsscanne_model_nn CHECK ((model IS NOT NULL)),
    CONSTRAINT mrsscanne_siteid_nn CHECK ((site_id IS NOT NULL)),
    CONSTRAINT mrsscanne_softwareversion_nn CHECK ((software_version IS NOT NULL)),
    CONSTRAINT mrsscanne_startdate_nn CHECK ((start_date IS NOT NULL))
);


ALTER TABLE mrs_scanners OWNER TO postgres;

--
-- Name: mrs_series_definitions; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_series_definitions (
    definition_id integer NOT NULL,
    definition character varying(200),
    description character varying(400),
    url character varying(200),
    collection_technique_id integer
);


ALTER TABLE mrs_series_definitions OWNER TO ni_developers;

SET search_path = dxdba, pg_catalog;

--
-- Name: dx_series_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_series_vw AS
 SELECT upper((sl.label)::text) AS label,
    sl.label AS raw_label,
    series.series_id,
    series.usable,
    series.sort_order,
    session.label AS scan_label,
    session.study_id,
    session.scan_id,
    session.ursi,
    session.pi_dir_name,
    session.study_dir_name,
    session.scan_date,
    scanner.site_id,
    scanner.label AS scanner_label,
    scanner.model AS scanner_model,
        CASE
            WHEN (scanner.field_strength = 3.95) THEN 4.00
            WHEN (scanner.field_strength = 2.89) THEN 3.00
            WHEN (scanner.field_strength = 1.49) THEN 1.50
            WHEN (scanner.field_strength = 0.00) THEN NULL::numeric
            ELSE scanner.field_strength
        END AS field_strength,
    subject.subject_type_id,
    subject.anonymization_id,
    (date_part('year'::text, age(session.scan_date, (('01/01/'::text || (date_part('year'::text, subject.birth_date))::text))::timestamp without time zone)))::integer AS subject_age,
    (((ct.collection_technique)::text || ' - '::text) || (sd.definition)::text) AS definition,
    sd.definition_id,
    ct.collection_technique,
    ct.collection_technique_id,
        CASE
            WHEN (s.parent_study_id IS NULL) THEN session.study_id
            ELSE s.parent_study_id
        END AS parent_study_id,
    scanner.manufacturer AS scanner_manufacturer,
    session.segment_interval
   FROM (((((((mrsdba.mrs_scan_sessions session
     JOIN mrsdba.mrs_series series ON ((series.scan_id = session.scan_id)))
     JOIN mrsdba.mrs_series_labels sl ON ((sl.label_id = series.label_id)))
     LEFT JOIN mrsdba.mrs_series_definitions sd ON ((sl.definition_id = sd.definition_id)))
     LEFT JOIN mrsdba.mrs_collection_techniques ct ON ((sd.collection_technique_id = ct.collection_technique_id)))
     JOIN mrsdba.mrs_scanners scanner ON ((session.scanner_id = scanner.scanner_id)))
     JOIN dx_subjects_vw subject ON ((((subject.ursi)::text = (session.ursi)::text) AND (subject.study_id = session.study_id))))
     JOIN mrsdba.mrs_studies s ON ((session.study_id = s.study_id)))
  WHERE (((sl.dx_excluded IS FALSE) AND (session.dx_excluded IS FALSE)) AND (series.dx_excluded IS FALSE));


ALTER TABLE dx_series_vw OWNER TO ni_developers;

--
-- Name: dx_series_zip_file_contents; Type: TABLE; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE dx_series_zip_file_contents (
    zip_file_content_id integer NOT NULL,
    zip_file_id integer,
    series_id numeric
);


ALTER TABLE dx_series_zip_file_contents OWNER TO ni_developers;

--
-- Name: dx_series_zip_file_contents_hist; Type: TABLE; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE dx_series_zip_file_contents_hist (
    zip_file_content_id integer,
    zip_file_id integer,
    series_id numeric,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE dx_series_zip_file_contents_hist OWNER TO ni_developers;

--
-- Name: dx_series_zip_file_contents_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_series_zip_file_contents_vw AS
 SELECT dx_series_zip_file_contents.zip_file_content_id,
    dx_series_zip_file_contents.zip_file_id,
    dx_series_zip_file_contents.series_id
   FROM dx_series_zip_file_contents;


ALTER TABLE dx_series_zip_file_contents_vw OWNER TO ni_developers;

--
-- Name: dx_series_zip_file_contents_zip_file_content_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: ni_developers
--

CREATE SEQUENCE dx_series_zip_file_contents_zip_file_content_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_series_zip_file_contents_zip_file_content_id_seq OWNER TO ni_developers;

--
-- Name: dx_series_zip_file_contents_zip_file_content_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: ni_developers
--

ALTER SEQUENCE dx_series_zip_file_contents_zip_file_content_id_seq OWNED BY dx_series_zip_file_contents.zip_file_content_id;


--
-- Name: dx_series_zip_file_paths; Type: TABLE; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE dx_series_zip_file_paths (
    zip_file_id integer NOT NULL,
    path character varying NOT NULL,
    file_name character varying NOT NULL
);


ALTER TABLE dx_series_zip_file_paths OWNER TO ni_developers;

--
-- Name: dx_series_zip_file_paths_hist; Type: TABLE; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE dx_series_zip_file_paths_hist (
    zip_file_id integer,
    path character varying,
    file_name character varying,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE dx_series_zip_file_paths_hist OWNER TO ni_developers;

--
-- Name: dx_series_zip_file_paths_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_series_zip_file_paths_vw AS
 SELECT dx_series_zip_file_paths.zip_file_id,
    dx_series_zip_file_paths.path,
    dx_series_zip_file_paths.file_name
   FROM dx_series_zip_file_paths;


ALTER TABLE dx_series_zip_file_paths_vw OWNER TO ni_developers;

--
-- Name: dx_series_zip_file_paths_with_contents_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_series_zip_file_paths_with_contents_vw AS
 SELECT fp.zip_file_id,
    fc.zip_file_content_id,
    fp.path,
    fp.file_name,
    fc.series_id
   FROM (dx_series_zip_file_paths fp
     JOIN dx_series_zip_file_contents fc ON ((fp.zip_file_id = fc.zip_file_id)));


ALTER TABLE dx_series_zip_file_paths_with_contents_vw OWNER TO ni_developers;

--
-- Name: dx_series_zip_file_paths_zip_file_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: ni_developers
--

CREATE SEQUENCE dx_series_zip_file_paths_zip_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_series_zip_file_paths_zip_file_id_seq OWNER TO ni_developers;

--
-- Name: dx_series_zip_file_paths_zip_file_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: ni_developers
--

ALTER SEQUENCE dx_series_zip_file_paths_zip_file_id_seq OWNED BY dx_series_zip_file_paths.zip_file_id;


--
-- Name: dx_source_attribute_values_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_source_attribute_values_hist (
    source_attribute_value_id numeric(4,0),
    attribute_id numeric(4,0),
    data_requests_source_id numeric(4,0),
    value character varying(100),
    mod_user character varying(60),
    mod_date timestamp with time zone
);


ALTER TABLE dx_source_attribute_values_hist OWNER TO postgres;

--
-- Name: dx_source_attribute_values_pk_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_source_attribute_values_pk_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE dx_source_attribute_values_pk_id_seq OWNER TO postgres;

--
-- Name: dx_source_attribute_values_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_source_attribute_values_vw AS
 SELECT dx_source_attribute_values.source_attribute_value_id,
    dx_source_attribute_values.attribute_id,
    dx_source_attribute_values.data_requests_source_id,
    dx_source_attribute_values.value
   FROM dx_source_attribute_values;


ALTER TABLE dx_source_attribute_values_vw OWNER TO ni_developers;

--
-- Name: dx_source_attributes_attr_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_source_attributes_attr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE dx_source_attributes_attr_id_seq OWNER TO postgres;

--
-- Name: dx_source_attributes_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_source_attributes_hist (
    attribute_id numeric(4,0),
    modality_id numeric(4,0),
    label character varying(60),
    attribute_column_name character varying(100),
    attribute_desc_column character varying(100),
    mod_user character varying(60),
    mod_date timestamp with time zone,
    operator character varying(2),
    column_type character varying,
    dx_attribute_order integer,
    description character varying(60),
    display_to_user boolean
);


ALTER TABLE dx_source_attributes_hist OWNER TO postgres;

--
-- Name: dx_source_attributes_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_source_attributes_vw AS
 SELECT dx_source_attributes.attribute_id,
    dx_source_attributes.modality_id,
    dx_source_attributes.label,
    dx_source_attributes.attribute_column_name,
    dx_source_attributes.attribute_desc_column,
    dx_source_attributes.operator,
    dx_source_attributes.column_type,
    dx_source_attributes.dx_attribute_order,
    dx_source_attributes.description,
    dx_source_attributes.display_to_user
   FROM dx_source_attributes;


ALTER TABLE dx_source_attributes_vw OWNER TO ni_developers;

--
-- Name: dx_studies_mv; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_studies_mv (
    anonymization_id character varying(20),
    study_id numeric(4,0),
    study_label character varying(200),
    study_description character varying(4000),
    preapproved_label character varying,
    parent_study_id numeric(4,0),
    parent_study_label character varying(200)
);


ALTER TABLE dx_studies_mv OWNER TO postgres;

--
-- Name: dx_studies_vw; Type: VIEW; Schema: dxdba; Owner: ni_developers
--

CREATE VIEW dx_studies_vw AS
 SELECT DISTINCT st.anonymization_id,
    s.study_id,
    s.label AS study_label,
    s.description AS study_description,
        CASE
            WHEN (p.study_id = s.study_id) THEN s.label
            ELSE NULL::character varying
        END AS preapproved_label,
        CASE
            WHEN (parent_study.study_id IS NULL) THEN s.study_id
            ELSE parent_study.study_id
        END AS parent_study_id,
        CASE
            WHEN (parent_study.label IS NULL) THEN s.label
            ELSE parent_study.label
        END AS parent_study_label
   FROM (((mrsdba.mrs_studies s
     JOIN dx_subjects_vw st ON ((st.study_id = s.study_id)))
     LEFT JOIN dx_preapprovals p ON ((s.study_id = p.study_id)))
     LEFT JOIN mrsdba.mrs_studies parent_study ON ((s.parent_study_id = parent_study.study_id)))
  WHERE (s.dx_excluded IS FALSE);


ALTER TABLE dx_studies_vw OWNER TO ni_developers;

--
-- Name: dx_subjects_mv; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_subjects_mv (
    anonymization_id character varying(20),
    birth_date timestamp without time zone,
    study_id numeric(4,0),
    subject_type_label text,
    ursi character varying(9),
    subject_type_id numeric(8,0),
    gender text,
    parent_study_id numeric(4,0)
);


ALTER TABLE dx_subjects_mv OWNER TO postgres;

--
-- Name: dx_usage_agreement_acceptance; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_usage_agreement_acceptance (
    usage_agreement_acceptance_id integer NOT NULL,
    data_request_id numeric(8,0),
    date_agreed timestamp without time zone,
    usage_agreement_id integer
);


ALTER TABLE dx_usage_agreement_acceptance OWNER TO postgres;

--
-- Name: dx_usage_agreement_acceptance_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_usage_agreement_acceptance_hist (
    usage_agreement_acceptance_id integer,
    data_request_id numeric(8,0),
    date_agreed timestamp without time zone,
    usage_agreement_id integer,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE dx_usage_agreement_acceptance_hist OWNER TO postgres;

--
-- Name: dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq OWNER TO postgres;

--
-- Name: dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: postgres
--

ALTER SEQUENCE dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq OWNED BY dx_usage_agreement_acceptance.usage_agreement_acceptance_id;


--
-- Name: dx_usage_agreement_acceptance_vw; Type: VIEW; Schema: dxdba; Owner: postgres
--

CREATE VIEW dx_usage_agreement_acceptance_vw AS
 SELECT dx_usage_agreement_acceptance.usage_agreement_acceptance_id,
    dx_usage_agreement_acceptance.data_request_id,
    dx_usage_agreement_acceptance.date_agreed,
    dx_usage_agreement_acceptance.usage_agreement_id
   FROM dx_usage_agreement_acceptance;


ALTER TABLE dx_usage_agreement_acceptance_vw OWNER TO postgres;

--
-- Name: dx_usage_agreements; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_usage_agreements (
    usage_agreement_id integer NOT NULL,
    study_id numeric(4,0),
    direction character varying(40),
    version timestamp without time zone,
    label text,
    body text
);


ALTER TABLE dx_usage_agreements OWNER TO postgres;

--
-- Name: dx_usage_agreements_hist; Type: TABLE; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE TABLE dx_usage_agreements_hist (
    usage_agreement_id integer,
    study_id numeric(4,0),
    direction character varying(40),
    version timestamp without time zone,
    label text,
    body text,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE dx_usage_agreements_hist OWNER TO postgres;

--
-- Name: dx_usage_agreements_usage_agreement_id_seq; Type: SEQUENCE; Schema: dxdba; Owner: postgres
--

CREATE SEQUENCE dx_usage_agreements_usage_agreement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dx_usage_agreements_usage_agreement_id_seq OWNER TO postgres;

--
-- Name: dx_usage_agreements_usage_agreement_id_seq; Type: SEQUENCE OWNED BY; Schema: dxdba; Owner: postgres
--

ALTER SEQUENCE dx_usage_agreements_usage_agreement_id_seq OWNED BY dx_usage_agreements.usage_agreement_id;


--
-- Name: dx_usage_agreements_vw; Type: VIEW; Schema: dxdba; Owner: postgres
--

CREATE VIEW dx_usage_agreements_vw AS
 SELECT dx_usage_agreements.usage_agreement_id,
    dx_usage_agreements.study_id,
    dx_usage_agreements.direction,
    dx_usage_agreements.version,
    dx_usage_agreements.label,
    dx_usage_agreements.body
   FROM dx_usage_agreements;


ALTER TABLE dx_usage_agreements_vw OWNER TO postgres;

SET search_path = mrsdba, pg_catalog;

--
-- Name: create$java$lob$table; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE "create$java$lob$table" (
    name character varying(700),
    lob bytea,
    loadtime timestamp without time zone
);


ALTER TABLE "create$java$lob$table" OWNER TO postgres;

--
-- Name: databasechangelog; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20),
    contexts character varying(255),
    labels character varying(255)
);


ALTER TABLE databasechangelog OWNER TO postgres;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO postgres;

--
-- Name: java$class$md5$table; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE "java$class$md5$table" (
    name character varying(200),
    md5 bytea
);


ALTER TABLE "java$class$md5$table" OWNER TO postgres;

--
-- Name: java$options; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE "java$options" (
    what character varying(128),
    opt character varying(20),
    value character varying(128)
);


ALTER TABLE "java$options" OWNER TO postgres;

--
-- Name: may_5_and_after_asmt_responses_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE may_5_and_after_asmt_responses_hist (
    assessment_id numeric(8,0),
    question_id character varying(20),
    question_instance numeric(3,0),
    response_value character varying,
    response_value_description text,
    response_sort_order numeric(3,0),
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE may_5_and_after_asmt_responses_hist OWNER TO ni_developers;

--
-- Name: may_5_and_after_asmt_responses_hist_2; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE may_5_and_after_asmt_responses_hist_2 (
    assessment_id numeric(8,0),
    question_id character varying(20),
    question_instance numeric(3,0),
    response_value character varying,
    response_value_description text,
    response_sort_order numeric(3,0),
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE may_5_and_after_asmt_responses_hist_2 OWNER TO ni_developers;

--
-- Name: may_5_and_after_asmts__hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE may_5_and_after_asmts__hist (
    assessment_id numeric(8,0),
    instrument_id numeric(8,0),
    segment_interval character varying(20),
    segment_instance numeric(3,0),
    ursi character varying(9),
    site_id character varying(4),
    entry_code character varying(1),
    dataentry_type_id numeric(8,0),
    source_type numeric(3,0),
    rater1 numeric(5,0),
    rater2 numeric(5,0),
    assessment_date timestamp without time zone,
    entry_username character varying(40),
    entry_start_date timestamp without time zone,
    entry_end_date timestamp without time zone,
    elapsed_time numeric(3,0),
    supervisor_id character varying(40),
    resolution_date timestamp without time zone,
    successfully_completed character varying(1),
    notes character varying(4000),
    xml_source text,
    hasemptyfields character varying(6),
    study_id numeric(4,0),
    submission_date timestamp without time zone,
    last_qid character varying(20),
    is_single_entry boolean,
    missing_reason_id numeric,
    dx_excluded boolean,
    ongoing_entry boolean,
    client_device_id integer,
    client_dbid integer
);


ALTER TABLE may_5_and_after_asmts__hist OWNER TO ni_developers;

--
-- Name: may_5_and_after_asmts_hist_2; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE may_5_and_after_asmts_hist_2 (
    assessment_id numeric(8,0),
    instrument_id numeric(8,0),
    segment_interval character varying(20),
    segment_instance numeric(3,0),
    ursi character varying(9),
    site_id character varying(4),
    entry_code character varying(1),
    dataentry_type_id numeric(8,0),
    source_type numeric(3,0),
    rater1 numeric(5,0),
    rater2 numeric(5,0),
    assessment_date timestamp without time zone,
    entry_username character varying(40),
    entry_start_date timestamp without time zone,
    entry_end_date timestamp without time zone,
    elapsed_time numeric(3,0),
    supervisor_id character varying(40),
    resolution_date timestamp without time zone,
    successfully_completed character varying(1),
    notes character varying(4000),
    xml_source text,
    hasemptyfields character varying(6),
    study_id numeric(4,0),
    submission_date timestamp without time zone,
    last_qid character varying(20),
    is_single_entry boolean,
    missing_reason_id numeric,
    dx_excluded boolean,
    ongoing_entry boolean,
    client_device_id integer,
    client_dbid integer
);


ALTER TABLE may_5_and_after_asmts_hist_2 OWNER TO ni_developers;

--
-- Name: may_5_conflict_resolution_audit; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE may_5_conflict_resolution_audit (
    assessment1_id numeric(8,0),
    assessment2_id numeric(8,0),
    assessmentc_id numeric(8,0),
    resolution_date timestamp without time zone,
    ursi character varying(9),
    study_id numeric(4,0),
    instrument_id numeric(8,0),
    entry_username character varying(40),
    segment_interval character varying(20),
    entry1_assessment_id numeric(8,0),
    entry2_assessment_id numeric(8,0),
    entry1_question_id character varying(20),
    entry2_question_id character varying(20),
    entry1_question_instance numeric(3,0),
    entry2_question_instance numeric(3,0),
    entry1_sort_order numeric(3,0),
    entry2_sort_order numeric(3,0),
    entry1_value character varying,
    entry2_value character varying,
    entry1_value_description text,
    entry2_value_description text,
    entry1_mod_date timestamp with time zone,
    entry2_mod_date timestamp with time zone,
    entry1_mod_user character varying(40),
    entry2_mod_user character varying(40)
);


ALTER TABLE may_5_conflict_resolution_audit OWNER TO ni_developers;

--
-- Name: may_5_conflict_resolution_audit_2; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE may_5_conflict_resolution_audit_2 (
    assessment1_id numeric(8,0),
    assessment2_id numeric(8,0),
    assessmentc_id numeric(8,0),
    resolution_date timestamp without time zone,
    ursi character varying(9),
    study_id numeric(4,0),
    instrument_id numeric(8,0),
    entry_username character varying(40),
    segment_interval character varying(20),
    entry1_assessment_id numeric(8,0),
    entry2_assessment_id numeric(8,0),
    entry1_question_id character varying(20),
    entry2_question_id character varying(20),
    entry1_question_instance numeric(3,0),
    entry2_question_instance numeric(3,0),
    entry1_sort_order numeric(3,0),
    entry2_sort_order numeric(3,0),
    entry1_value character varying,
    entry2_value character varying,
    entry1_value_description text,
    entry2_value_description text,
    entry1_mod_date timestamp with time zone,
    entry2_mod_date timestamp with time zone,
    entry1_mod_user character varying(40),
    entry2_mod_user character varying(40)
);


ALTER TABLE may_5_conflict_resolution_audit_2 OWNER TO ni_developers;

--
-- Name: mrs_accounts; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_accounts (
    account_number character varying(16) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000) NOT NULL,
    purchase_request_id character varying(24) NOT NULL,
    CONSTRAINT mrsaccoun_description_nn CHECK ((description IS NOT NULL)),
    CONSTRAINT mrsaccoun_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsaccoun_prid_nn CHECK ((purchase_request_id IS NOT NULL))
);


ALTER TABLE mrs_accounts OWNER TO postgres;

--
-- Name: mrs_accounts_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_accounts_hist (
    account_number character varying(16),
    label character varying(200),
    description character varying(4000),
    purchase_request_id character varying(24),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_accounts_hist OWNER TO postgres;

--
-- Name: mrs_accounts_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_accounts_vw AS
 SELECT mrs_accounts.account_number,
    mrs_accounts.label,
    mrs_accounts.description,
    mrs_accounts.purchase_request_id
   FROM mrs_accounts;


ALTER TABLE mrs_accounts_vw OWNER TO postgres;

--
-- Name: mrs_addresses; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_addresses (
    address_id numeric(8,0) NOT NULL,
    line1 character varying(120) NOT NULL,
    line2 character varying(120),
    city character varying(80) NOT NULL,
    state character varying(2) NOT NULL,
    zip character varying(10) NOT NULL,
    country character varying(3) NOT NULL,
    notes character varying(4000),
    start_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone,
    usid character varying(40) NOT NULL,
    CONSTRAINT mrsaddres_city_nn CHECK ((city IS NOT NULL)),
    CONSTRAINT mrsaddres_country_nn CHECK ((country IS NOT NULL)),
    CONSTRAINT mrsaddres_line1_nn CHECK ((line1 IS NOT NULL)),
    CONSTRAINT mrsaddres_startdate_nn CHECK ((start_date IS NOT NULL)),
    CONSTRAINT mrsaddres_state_nn CHECK ((state IS NOT NULL)),
    CONSTRAINT mrsaddres_ursi_nn CHECK ((usid IS NOT NULL)),
    CONSTRAINT mrsaddres_zip_nn CHECK ((zip IS NOT NULL))
);


ALTER TABLE mrs_addresses OWNER TO postgres;

--
-- Name: mrs_addresses_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_addresses_hist (
    address_id numeric(8,0),
    line1 character varying(120),
    line2 character varying(120),
    city character varying(80),
    state character varying(2),
    zip character varying(10),
    country character varying(3),
    notes character varying(4000),
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    usid character varying(40),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_addresses_hist OWNER TO postgres;

--
-- Name: mrs_addresses_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_addresses_vw AS
 SELECT mrs_addresses.address_id,
    mrs_addresses.line1,
    mrs_addresses.line2,
    mrs_addresses.city,
    mrs_addresses.state,
    mrs_addresses.zip,
    mrs_addresses.country,
    mrs_addresses.notes,
    mrs_addresses.usid AS person_id
   FROM mrs_addresses;


ALTER TABLE mrs_addresses_vw OWNER TO postgres;

--
-- Name: mrs_eeg_devices; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_eeg_devices (
    eeg_id numeric(3,0) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000) NOT NULL,
    site_id character varying(3) NOT NULL,
    model character varying(25) NOT NULL,
    manufacturer character varying(25),
    station character varying(25),
    software_version character varying(25) NOT NULL,
    start_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone,
    input_impedance numeric(4,0),
    number_of_channels numeric(4,0),
    modality_id numeric(4,0),
    CONSTRAINT mrseeg_description_nn CHECK ((description IS NOT NULL)),
    CONSTRAINT mrseeg_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrseeg_model_nn CHECK ((model IS NOT NULL)),
    CONSTRAINT mrseeg_siteid_nn CHECK ((site_id IS NOT NULL)),
    CONSTRAINT mrseeg_softwarevers_nn CHECK ((software_version IS NOT NULL)),
    CONSTRAINT mrseeg_startdate_nn CHECK ((start_date IS NOT NULL))
);


ALTER TABLE mrs_eeg_devices OWNER TO postgres;

--
-- Name: mrs_all_scanners_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_all_scanners_vw AS
 SELECT s.scanner_id,
    s.label,
    s.description,
    s.site_id,
    s.model,
    s.manufacturer,
    s.station,
    s.software_version,
    s.field_strength,
    s.modality_id,
    m.label AS modality_label,
    s.start_date,
    s.end_date
   FROM (mrs_scanners s
     JOIN mrs_modalities m ON ((m.modality_id = s.modality_id)))
UNION ALL
 SELECT s.eeg_id AS scanner_id,
    s.label,
    s.description,
    s.site_id,
    s.model,
    s.manufacturer,
    s.station,
    s.software_version,
    0.00::numeric(4,2) AS field_strength,
    m.modality_id,
    m.label AS modality_label,
    s.start_date,
    s.end_date
   FROM (mrs_eeg_devices s
     JOIN mrs_modalities m ON ((m.modality_id = s.modality_id)));


ALTER TABLE mrs_all_scanners_vw OWNER TO postgres;

--
-- Name: mrs_ambiguous_assessments; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_ambiguous_assessments (
    assessment_id numeric(8,0)
);


ALTER TABLE mrs_ambiguous_assessments OWNER TO postgres;

--
-- Name: mrs_analysis; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis (
    analysis_id numeric(4,0) NOT NULL,
    label character varying(10) NOT NULL,
    description character varying(4000),
    user_submit character varying(50),
    date_submit timestamp without time zone
);


ALTER TABLE mrs_analysis OWNER TO postgres;

--
-- Name: mrs_analysis_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_analysis_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 999999999999999999
    CACHE 1;


ALTER TABLE mrs_analysis_counter OWNER TO postgres;

--
-- Name: mrs_analysis_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_details (
    series_id character varying(20) NOT NULL,
    analysis_id numeric(10,0) NOT NULL,
    sge_status character varying(10),
    analysis_start timestamp without time zone,
    analysis_finish timestamp without time zone,
    sge_job_id numeric(20,0),
    non_default_output_path character varying(500)
);


ALTER TABLE mrs_analysis_details OWNER TO postgres;

--
-- Name: mrs_analysis_details_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_analysis_details_vw AS
 SELECT mrs_analysis_details.series_id,
    mrs_analysis_details.analysis_id,
    mrs_analysis_details.sge_status,
    mrs_analysis_details.analysis_start,
    mrs_analysis_details.analysis_finish,
    mrs_analysis_details.sge_job_id,
    mrs_analysis_details.non_default_output_path
   FROM mrs_analysis_details;


ALTER TABLE mrs_analysis_details_vw OWNER TO postgres;

--
-- Name: mrs_analysis_dti_qa_values; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_dti_qa_values (
    series_id character varying(20) NOT NULL,
    num_of_dcm numeric(5,0),
    corr_value numeric(5,2)
);


ALTER TABLE mrs_analysis_dti_qa_values OWNER TO postgres;

--
-- Name: mrs_analysis_dti_qa_values_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_dti_qa_values_hist (
    series_id character varying(20) NOT NULL,
    num_of_dcm numeric(5,0),
    corr_value numeric(5,2)
);


ALTER TABLE mrs_analysis_dti_qa_values_hist OWNER TO postgres;

--
-- Name: mrs_analysis_files; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_files (
    file_id numeric(20,0) NOT NULL,
    label character varying(100) NOT NULL,
    type character varying(20),
    creation_datetime timestamp without time zone NOT NULL,
    size_kb numeric(10,0) NOT NULL,
    description character varying(4000),
    series_id character varying(20) NOT NULL
);


ALTER TABLE mrs_analysis_files OWNER TO postgres;

--
-- Name: mrs_analysis_files_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_analysis_files_counter
    START WITH 4774
    INCREMENT BY 5
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE mrs_analysis_files_counter OWNER TO postgres;

--
-- Name: mrs_analysis_files_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_analysis_files_vw AS
 SELECT mrs_analysis_files.file_id,
    mrs_analysis_files.label,
    mrs_analysis_files.type,
    mrs_analysis_files.creation_datetime,
    mrs_analysis_files.size_kb,
    mrs_analysis_files.description,
    mrs_analysis_files.series_id
   FROM mrs_analysis_files;


ALTER TABLE mrs_analysis_files_vw OWNER TO postgres;

--
-- Name: mrs_analysis_job_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_analysis_job_counter
    START WITH 21
    INCREMENT BY 5
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE mrs_analysis_job_counter OWNER TO postgres;

--
-- Name: mrs_analysis_job_monitor; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_job_monitor (
    series_id character varying(20) NOT NULL,
    job_id bigint NOT NULL,
    job_name character varying(20),
    submission_datetime timestamp without time zone NOT NULL,
    start_datetime timestamp without time zone,
    end_datetime timestamp without time zone,
    status character varying(20) NOT NULL,
    note character varying(2000),
    portal_name character varying(20),
    pi_id character varying(20),
    ursi character varying(9),
    session character varying(30),
    label character varying(50)
);


ALTER TABLE mrs_analysis_job_monitor OWNER TO postgres;

--
-- Name: mrs_analysis_job_status; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_job_status (
    id bigint NOT NULL,
    portal_name character varying(20),
    pi_id character varying(20),
    study_name character varying(50),
    ursi character varying(9),
    session character varying(30),
    task character varying(20),
    submission_datetime timestamp without time zone,
    start_datetime timestamp without time zone,
    end_datetime timestamp without time zone,
    status character varying(20),
    note character varying(4000)
);


ALTER TABLE mrs_analysis_job_status OWNER TO postgres;

--
-- Name: mrs_analysis_queue; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_queue (
    id numeric(6,0) NOT NULL,
    scan_id numeric(10,0) NOT NULL,
    analysis_submit timestamp without time zone,
    analysis_start timestamp without time zone
);


ALTER TABLE mrs_analysis_queue OWNER TO postgres;

--
-- Name: mrs_analysis_queue_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_analysis_queue_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_analysis_queue_counter OWNER TO postgres;

--
-- Name: mrs_analysis_queue_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_queue_hist (
    id numeric(10,0) NOT NULL,
    scan_id numeric(10,0) NOT NULL,
    analysis_submit timestamp without time zone,
    analysis_start timestamp without time zone,
    analysis_finish timestamp without time zone
);


ALTER TABLE mrs_analysis_queue_hist OWNER TO postgres;

--
-- Name: mrs_analysis_queue_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_analysis_queue_vw AS
 SELECT mrs_analysis_queue.id,
    mrs_analysis_queue.scan_id,
    mrs_analysis_queue.analysis_submit,
    mrs_analysis_queue.analysis_start
   FROM mrs_analysis_queue;


ALTER TABLE mrs_analysis_queue_vw OWNER TO postgres;

--
-- Name: mrs_analysis_quicklook_statistic; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_quicklook_statistic (
    total_fmri_task integer,
    analyzed_fmri_task integer,
    total_dti_task integer,
    analyzed_dti_task integer,
    total_vbm_task integer,
    analyzed_vbm_task integer,
    total_fs_task integer,
    analyzed_fs_task integer,
    study_id numeric(5,0) NOT NULL,
    scan_under_pi character varying(50) NOT NULL
);


ALTER TABLE mrs_analysis_quicklook_statistic OWNER TO postgres;

--
-- Name: mrs_analysis_quicklook_statistic_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_quicklook_statistic_hist (
    total_fmri_task integer,
    analyzed_fmri_task integer,
    total_dti_task integer,
    analyzed_dti_task integer,
    total_vbm_task integer,
    analyzed_vbm_task integer,
    total_fs_task integer,
    analyzed_fs_task integer,
    study_id numeric(5,0) NOT NULL,
    date timestamp without time zone,
    scan_under_pi character varying(50)
);


ALTER TABLE mrs_analysis_quicklook_statistic_hist OWNER TO postgres;

--
-- Name: mrs_analysis_quicklook_statistic_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_analysis_quicklook_statistic_vw AS
 SELECT mrs_analysis_quicklook_statistic.total_fmri_task,
    mrs_analysis_quicklook_statistic.analyzed_fmri_task,
    mrs_analysis_quicklook_statistic.total_dti_task,
    mrs_analysis_quicklook_statistic.analyzed_dti_task,
    mrs_analysis_quicklook_statistic.total_vbm_task,
    mrs_analysis_quicklook_statistic.analyzed_vbm_task,
    mrs_analysis_quicklook_statistic.total_fs_task,
    mrs_analysis_quicklook_statistic.analyzed_fs_task,
    mrs_analysis_quicklook_statistic.study_id,
    mrs_analysis_quicklook_statistic.scan_under_pi
   FROM mrs_analysis_quicklook_statistic;


ALTER TABLE mrs_analysis_quicklook_statistic_vw OWNER TO postgres;

--
-- Name: mrs_analysis_stats_files; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_stats_files (
    file_id numeric(20,0) NOT NULL,
    label character varying(200) NOT NULL,
    file_type character varying(20),
    creation_datetime timestamp without time zone,
    size_kb numeric(10,0),
    description character varying(4000),
    scan_id numeric(20,0) NOT NULL,
    task_name character varying(20) NOT NULL,
    stats_folder_name character varying(50)
);


ALTER TABLE mrs_analysis_stats_files OWNER TO postgres;

--
-- Name: mrs_analysis_stats_files_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_analysis_stats_files_counter
    START WITH 12175
    INCREMENT BY 5
    NO MINVALUE
    NO MAXVALUE
    CACHE 10;


ALTER TABLE mrs_analysis_stats_files_counter OWNER TO postgres;

--
-- Name: mrs_analysis_stats_files_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_analysis_stats_files_vw AS
 SELECT mrs_analysis_stats_files.file_id,
    mrs_analysis_stats_files.label,
    mrs_analysis_stats_files.file_type,
    mrs_analysis_stats_files.creation_datetime,
    mrs_analysis_stats_files.size_kb,
    mrs_analysis_stats_files.description,
    mrs_analysis_stats_files.scan_id,
    mrs_analysis_stats_files.task_name,
    mrs_analysis_stats_files.stats_folder_name
   FROM mrs_analysis_stats_files;


ALTER TABLE mrs_analysis_stats_files_vw OWNER TO postgres;

--
-- Name: mrs_analysis_sub_study; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_sub_study (
    id numeric(10,0) NOT NULL,
    sub_study_name character varying(100) NOT NULL,
    scan_id numeric(10,0) NOT NULL,
    study_id numeric(10,0) NOT NULL
);


ALTER TABLE mrs_analysis_sub_study OWNER TO postgres;

--
-- Name: mrs_analysis_sub_study_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_analysis_sub_study_counter
    START WITH 123
    INCREMENT BY 5
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE mrs_analysis_sub_study_counter OWNER TO postgres;

--
-- Name: mrs_analysis_sub_study_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_analysis_sub_study_vw AS
 SELECT mrs_analysis_sub_study.id,
    mrs_analysis_sub_study.sub_study_name,
    mrs_analysis_sub_study.scan_id,
    mrs_analysis_sub_study.study_id
   FROM mrs_analysis_sub_study;


ALTER TABLE mrs_analysis_sub_study_vw OWNER TO postgres;

--
-- Name: mrs_analysis_substudy_permission; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_substudy_permission (
    study_id numeric(8,0) NOT NULL,
    sub_study_name character varying(50) NOT NULL,
    permission character varying(20),
    sub_study_creator character varying(30)
);


ALTER TABLE mrs_analysis_substudy_permission OWNER TO postgres;

--
-- Name: mrs_analysis_substudy_permission_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_analysis_substudy_permission_vw AS
 SELECT mrs_analysis_substudy_permission.study_id,
    mrs_analysis_substudy_permission.sub_study_name,
    mrs_analysis_substudy_permission.permission,
    mrs_analysis_substudy_permission.sub_study_creator
   FROM mrs_analysis_substudy_permission;


ALTER TABLE mrs_analysis_substudy_permission_vw OWNER TO postgres;

--
-- Name: mrs_analysis_summary_by_scanner; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_summary_by_scanner (
    scanner character varying(50) NOT NULL,
    dti_anal bigint,
    dti_total bigint,
    vbm_anal bigint,
    vbm_total bigint,
    fs_anal bigint,
    fs_total bigint,
    fmri_anal bigint,
    fmri_total bigint
);


ALTER TABLE mrs_analysis_summary_by_scanner OWNER TO postgres;

--
-- Name: mrs_analysis_summary_by_scanner_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_summary_by_scanner_hist (
    scanner character varying(50) NOT NULL,
    dti_anal bigint,
    dti_total bigint,
    vbm_anal bigint,
    vbm_total bigint,
    fs_anal bigint,
    fs_total bigint,
    fmri_anal bigint,
    fmri_total bigint,
    date timestamp without time zone
);


ALTER TABLE mrs_analysis_summary_by_scanner_hist OWNER TO postgres;

--
-- Name: mrs_analysis_summary_by_scanner_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_analysis_summary_by_scanner_vw AS
 SELECT mrs_analysis_summary_by_scanner.scanner,
    mrs_analysis_summary_by_scanner.dti_anal,
    mrs_analysis_summary_by_scanner.dti_total,
    mrs_analysis_summary_by_scanner.vbm_anal,
    mrs_analysis_summary_by_scanner.vbm_total,
    mrs_analysis_summary_by_scanner.fs_anal,
    mrs_analysis_summary_by_scanner.fs_total,
    mrs_analysis_summary_by_scanner.fmri_anal,
    mrs_analysis_summary_by_scanner.fmri_total
   FROM mrs_analysis_summary_by_scanner;


ALTER TABLE mrs_analysis_summary_by_scanner_vw OWNER TO postgres;

--
-- Name: mrs_analysis_vbm_img; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_vbm_img (
    file_id numeric(20,0) NOT NULL,
    label character varying(200) NOT NULL,
    file_type character varying(20),
    creation_datetime timestamp without time zone,
    size_kb numeric(10,0),
    description character varying(4000),
    scan_id numeric(20,0) NOT NULL
);


ALTER TABLE mrs_analysis_vbm_img OWNER TO postgres;

--
-- Name: mrs_analysis_vbm_img_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_analysis_vbm_img_counter
    START WITH 293
    INCREMENT BY 5
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE mrs_analysis_vbm_img_counter OWNER TO postgres;

--
-- Name: mrs_analysis_vbm_img_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_analysis_vbm_img_vw AS
 SELECT mrs_analysis_vbm_img.file_id,
    mrs_analysis_vbm_img.label,
    mrs_analysis_vbm_img.file_type,
    mrs_analysis_vbm_img.creation_datetime,
    mrs_analysis_vbm_img.size_kb,
    mrs_analysis_vbm_img.description,
    mrs_analysis_vbm_img.scan_id
   FROM mrs_analysis_vbm_img;


ALTER TABLE mrs_analysis_vbm_img_vw OWNER TO postgres;

--
-- Name: mrs_analysis_vbm_qa_values; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_analysis_vbm_qa_values (
    scan_id integer NOT NULL,
    qa_value numeric(5,2),
    qa_status numeric(1,0)
);


ALTER TABLE mrs_analysis_vbm_qa_values OWNER TO postgres;

--
-- Name: mrs_analysis_vbm_qa_values_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_analysis_vbm_qa_values_vw AS
 SELECT mrs_analysis_vbm_qa_values.scan_id,
    mrs_analysis_vbm_qa_values.qa_value,
    mrs_analysis_vbm_qa_values.qa_status
   FROM mrs_analysis_vbm_qa_values;


ALTER TABLE mrs_analysis_vbm_qa_values_vw OWNER TO postgres;

--
-- Name: mrs_analysis_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_analysis_vw AS
 SELECT mrs_analysis.analysis_id,
    mrs_analysis.label,
    mrs_analysis.description AS "desc",
    mrs_analysis.user_submit,
    mrs_analysis.date_submit
   FROM mrs_analysis;


ALTER TABLE mrs_analysis_vw OWNER TO postgres;

--
-- Name: mrs_anatomy_regions; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_anatomy_regions (
    anatomy_region_id numeric(4,0) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000),
    CONSTRAINT mrsanareg_label_nn CHECK ((label IS NOT NULL))
);


ALTER TABLE mrs_anatomy_regions OWNER TO postgres;

--
-- Name: mrs_anatomy_regions_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_anatomy_regions_hist (
    anatomy_region_id numeric(4,0),
    label character varying(200),
    description character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_anatomy_regions_hist OWNER TO postgres;

--
-- Name: mrs_anatomy_regions_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_anatomy_regions_vw AS
 SELECT mrs_anatomy_regions.anatomy_region_id,
    mrs_anatomy_regions.label,
    mrs_anatomy_regions.description
   FROM mrs_anatomy_regions;


ALTER TABLE mrs_anatomy_regions_vw OWNER TO postgres;

--
-- Name: mrs_app_options; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_app_options (
    id integer NOT NULL,
    study_id integer,
    app_name character varying(100) NOT NULL,
    option_str text NOT NULL
);


ALTER TABLE mrs_app_options OWNER TO ni_developers;

--
-- Name: mrs_app_options_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_app_options_hist (
    id integer,
    study_id integer,
    app_name character varying(100),
    option_str text,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_app_options_hist OWNER TO ni_developers;

--
-- Name: mrs_app_options_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_app_options_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_app_options_id_seq OWNER TO ni_developers;

--
-- Name: mrs_app_options_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_app_options_id_seq OWNED BY mrs_app_options.id;


--
-- Name: mrs_app_options_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_app_options_vw AS
 SELECT mrs_app_options.id,
    mrs_app_options.study_id,
    mrs_app_options.app_name,
    mrs_app_options.option_str
   FROM mrs_app_options;


ALTER TABLE mrs_app_options_vw OWNER TO ni_developers;

--
-- Name: mrs_asmt_resp_hist_new; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_asmt_resp_hist_new (
    assessment_id numeric(8,0),
    question_id character varying(20),
    question_instance numeric(3,0),
    response_value character varying,
    response_value_description text,
    response_sort_order numeric(3,0),
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_asmt_resp_hist_new OWNER TO ni_developers;

--
-- Name: mrs_asmts_4_olin; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_asmts_4_olin (
    ursi character varying(50),
    rater1 character varying(51),
    entry_code character varying(2),
    successfully_completed character varying(52),
    segment_interval character varying(31),
    segment_instance numeric(3,0),
    assessment_date character varying(53),
    assessment_id numeric(30,0),
    notes character varying(200),
    question_id character varying(20),
    sort_order numeric(4,0),
    label character varying(201),
    question_instance character varying(54),
    response_value character varying(202)
);


ALTER TABLE mrs_asmts_4_olin OWNER TO postgres;

--
-- Name: mrs_instrument_section_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_section_details (
    instrument_id numeric(8,0) NOT NULL,
    section_id numeric(8,0) NOT NULL,
    sort_order numeric(2,0),
    deletion_date timestamp without time zone,
    sa_questions_per_page numeric DEFAULT 1 NOT NULL
);


ALTER TABLE mrs_instrument_section_details OWNER TO postgres;

--
-- Name: mrs_asmts_and_responses_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_asmts_and_responses_vw AS
 SELECT assessment.ursi,
    assessment.assessment_id,
    assessment.assessment_date,
    assessment.segment_interval AS visit,
    assessment.dataentry_type_id,
    response.question_id,
    response.question_instance,
    response.response_value,
    response.response_value_description,
    question.label,
    question.specify_detail,
    (question.sort_order * section.sort_order) AS sort_order,
    assessment.instrument_id,
    assessment.entry_code,
    assessment.segment_interval,
    assessment.segment_instance,
    assessment.successfully_completed,
    assessment.rater1,
    assessment.rater2,
    assessment.site_id,
    assessment.source_type,
    assessment.entry_start_date,
    assessment.entry_end_date,
    assessment.elapsed_time,
    assessment.entry_username,
    assessment.resolution_date,
    assessment.supervisor_id,
    assessment.notes,
    assessment.hasemptyfields,
        CASE
            WHEN ((assessment.entry_code)::text = 'C'::text) THEN 1
            WHEN ((assessment.entry_code)::text = '1'::text) THEN 2
            WHEN ((assessment.entry_code)::text = '2'::text) THEN 3
            WHEN ((assessment.entry_code)::text = 'F'::text) THEN 4
            ELSE 5
        END AS entry_code_sort_order
   FROM (((mrs_assessment_responses response
     JOIN mrs_assessments assessment ON ((assessment.assessment_id = response.assessment_id)))
     LEFT JOIN mrs_instrument_questions question ON (((response.question_id)::text = (question.question_id)::text)))
     LEFT JOIN mrs_instrument_section_details section ON ((section.section_id = question.section_id)))
  WHERE (assessment.is_deleted IS FALSE);


ALTER TABLE mrs_asmts_and_responses_vw OWNER TO ni_developers;

--
-- Name: mrs_asmts_and_their_matches_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_asmts_and_their_matches_vw AS
 SELECT assessment1.assessment_id AS assessment1_id,
    assessment2.assessment_id AS assessment2_id,
    assessmentc.assessment_id AS assessmentc_id,
    assessmentf.assessment_id AS assessmentf_id,
    assessment1.instrument_id,
    assessment1.segment_interval,
    assessment1.segment_instance,
    assessment1.ursi,
    assessment1.site_id,
    assessment1.dataentry_type_id,
    assessment1.source_type,
    assessment1.study_id,
    assessment1.rater1,
    assessment1.assessment_date
   FROM (((( SELECT mrs_assessments.assessment_id,
            mrs_assessments.instrument_id,
            mrs_assessments.segment_interval,
            mrs_assessments.segment_instance,
            mrs_assessments.ursi,
            mrs_assessments.site_id,
            mrs_assessments.dataentry_type_id,
            mrs_assessments.source_type,
            mrs_assessments.study_id,
            mrs_assessments.rater1,
            mrs_assessments.assessment_date
           FROM mrs_assessments
          WHERE (((mrs_assessments.entry_code)::text = '1'::text) AND (mrs_assessments.is_deleted IS FALSE))) assessment1
     LEFT JOIN ( SELECT mrs_assessments.assessment_id,
            mrs_assessments.instrument_id,
            mrs_assessments.segment_interval,
            mrs_assessments.segment_instance,
            mrs_assessments.ursi,
            mrs_assessments.site_id,
            mrs_assessments.dataentry_type_id,
            mrs_assessments.source_type,
            mrs_assessments.study_id,
            mrs_assessments.rater1,
            mrs_assessments.assessment_date
           FROM mrs_assessments
          WHERE (((mrs_assessments.entry_code)::text = '2'::text) AND (mrs_assessments.is_deleted IS FALSE))) assessment2 ON (((((((((((assessment1.instrument_id = assessment2.instrument_id) AND ((assessment1.segment_interval)::text = (assessment2.segment_interval)::text)) AND (assessment1.segment_instance = assessment2.segment_instance)) AND ((assessment1.ursi)::text = (assessment2.ursi)::text)) AND ((assessment1.site_id)::text = (assessment2.site_id)::text)) AND (assessment1.dataentry_type_id = assessment2.dataentry_type_id)) AND (assessment1.source_type = assessment2.source_type)) AND (assessment1.study_id = assessment2.study_id)) AND (assessment1.rater1 = assessment2.rater1)) AND (assessment1.assessment_date = assessment2.assessment_date))))
     LEFT JOIN ( SELECT mrs_assessments.assessment_id,
            mrs_assessments.instrument_id,
            mrs_assessments.segment_interval,
            mrs_assessments.segment_instance,
            mrs_assessments.ursi,
            mrs_assessments.site_id,
            mrs_assessments.dataentry_type_id,
            mrs_assessments.source_type,
            mrs_assessments.study_id,
            mrs_assessments.rater1,
            mrs_assessments.assessment_date
           FROM mrs_assessments
          WHERE (((mrs_assessments.entry_code)::text = 'C'::text) AND (mrs_assessments.is_deleted IS FALSE))) assessmentc ON (((((((((((assessment1.instrument_id = assessmentc.instrument_id) AND ((assessment1.segment_interval)::text = (assessmentc.segment_interval)::text)) AND (assessment1.segment_instance = assessmentc.segment_instance)) AND ((assessment1.ursi)::text = (assessmentc.ursi)::text)) AND ((assessment1.site_id)::text = (assessmentc.site_id)::text)) AND (assessment1.dataentry_type_id = assessmentc.dataentry_type_id)) AND (assessment1.source_type = assessmentc.source_type)) AND (assessment1.study_id = assessmentc.study_id)) AND (assessment1.rater1 = assessmentc.rater1)) AND (assessment1.assessment_date = assessmentc.assessment_date))))
     LEFT JOIN ( SELECT mrs_assessments.assessment_id,
            mrs_assessments.instrument_id,
            mrs_assessments.segment_interval,
            mrs_assessments.segment_instance,
            mrs_assessments.ursi,
            mrs_assessments.site_id,
            mrs_assessments.dataentry_type_id,
            mrs_assessments.source_type,
            mrs_assessments.study_id,
            mrs_assessments.rater1,
            mrs_assessments.assessment_date
           FROM mrs_assessments
          WHERE (((mrs_assessments.entry_code)::text = 'F'::text) AND (mrs_assessments.is_deleted IS FALSE))) assessmentf ON (((((((((((assessment1.instrument_id = assessmentf.instrument_id) AND ((assessment1.segment_interval)::text = (assessmentf.segment_interval)::text)) AND (assessment1.segment_instance = assessmentf.segment_instance)) AND ((assessment1.ursi)::text = (assessmentf.ursi)::text)) AND ((assessment1.site_id)::text = (assessmentf.site_id)::text)) AND (assessment1.dataentry_type_id = assessmentf.dataentry_type_id)) AND (assessment1.source_type = assessmentf.source_type)) AND (assessment1.study_id = assessmentf.study_id)) AND (assessment1.rater1 = assessmentf.rater1)) AND (assessment1.assessment_date = assessmentf.assessment_date))));


ALTER TABLE mrs_asmts_and_their_matches_vw OWNER TO postgres;

--
-- Name: mrs_asmts_most_clean_mv; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_asmts_most_clean_mv (
    assessment_id numeric(8,0)
);


ALTER TABLE mrs_asmts_most_clean_mv OWNER TO postgres;

--
-- Name: mrs_asmts_most_complete_mv; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_asmts_most_complete_mv (
    assessment_id numeric
);


ALTER TABLE mrs_asmts_most_complete_mv OWNER TO postgres;

--
-- Name: mrs_asmts_most_complete_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_asmts_most_complete_vw AS
 SELECT
        CASE
            WHEN (mrs_asmts_and_their_matches_vw.assessmentc_id IS NOT NULL) THEN mrs_asmts_and_their_matches_vw.assessmentc_id
            WHEN ((mrs_asmts_and_their_matches_vw.assessmentc_id IS NULL) AND (mrs_asmts_and_their_matches_vw.assessmentf_id IS NULL)) THEN mrs_asmts_and_their_matches_vw.assessment1_id
            ELSE NULL::numeric
        END AS assessment_id
   FROM mrs_asmts_and_their_matches_vw
UNION ALL
 SELECT mrs_asmts_and_their_matches_vw.assessment2_id AS assessment_id
   FROM mrs_asmts_and_their_matches_vw
  WHERE (((mrs_asmts_and_their_matches_vw.assessmentc_id IS NULL) AND (mrs_asmts_and_their_matches_vw.assessmentf_id IS NULL)) AND (mrs_asmts_and_their_matches_vw.assessment2_id IS NOT NULL))
UNION ALL
 SELECT mrs_asmts_and_their_matches_vw.assessment1_id AS assessment_id
   FROM mrs_asmts_and_their_matches_vw
  WHERE (mrs_asmts_and_their_matches_vw.assessmentf_id IS NOT NULL)
UNION ALL
 SELECT mrs_asmts_and_their_matches_vw.assessment2_id AS assessment_id
   FROM mrs_asmts_and_their_matches_vw
  WHERE (mrs_asmts_and_their_matches_vw.assessmentf_id IS NOT NULL)
UNION ALL
 SELECT mrs_assessments.assessment_id
   FROM mrs_assessments
  WHERE (((mrs_assessments.entry_username)::text = 'TABLETAPP'::text) AND (mrs_assessments.is_deleted IS FALSE));


ALTER TABLE mrs_asmts_most_complete_vw OWNER TO postgres;

--
-- Name: mrs_legacy_sharing_rules_asmts; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_legacy_sharing_rules_asmts (
    sharing_rule_id numeric(8,0) NOT NULL,
    assessment_id numeric(20,0) NOT NULL
);


ALTER TABLE mrs_legacy_sharing_rules_asmts OWNER TO postgres;

--
-- Name: mrs_legacy_sharing_rules_studies; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_legacy_sharing_rules_studies (
    sharing_rule_id numeric(8,0) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    note text
);


ALTER TABLE mrs_legacy_sharing_rules_studies OWNER TO postgres;

--
-- Name: mrs_asmts_owners_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_asmts_owners_vw AS
 SELECT lsra.assessment_id,
    lsra.sharing_rule_id,
    lsrs.study_id
   FROM ((mrs_legacy_sharing_rules_studies lsrs
     JOIN mrs_legacy_sharing_rules_asmts lsra ON ((lsra.sharing_rule_id = lsrs.sharing_rule_id)))
     JOIN mrs_assessments asmts ON (((lsra.assessment_id = asmts.assessment_id) AND (asmts.is_deleted IS FALSE))))
UNION
 SELECT mrs_assessments.assessment_id,
    NULL::numeric AS sharing_rule_id,
    mrs_assessments.study_id
   FROM mrs_assessments
  WHERE ((mrs_assessments.study_id IS NOT NULL) AND (mrs_assessments.is_deleted IS FALSE));


ALTER TABLE mrs_asmts_owners_vw OWNER TO postgres;

--
-- Name: mrs_asmts_sorted_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_asmts_sorted_vw AS
 SELECT assessment.ursi,
    assessment.assessment_id,
    assessment.assessment_date,
    assessment.segment_interval AS visit,
    assessment.dataentry_type_id,
    assessment.instrument_id,
    assessment.entry_code,
    assessment.segment_interval,
    assessment.segment_instance,
    assessment.successfully_completed,
    assessment.rater1,
    assessment.rater2,
    assessment.site_id,
    assessment.source_type,
    assessment.entry_start_date,
    assessment.entry_end_date,
    assessment.elapsed_time,
    assessment.entry_username,
    assessment.resolution_date,
    assessment.supervisor_id,
    assessment.notes,
    assessment.missing_reason_id,
    assessment.hasemptyfields,
        CASE
            WHEN ((assessment.entry_code)::text = 'C'::text) THEN 1
            WHEN ((assessment.entry_code)::text = 'R'::text) THEN 2
            WHEN ((assessment.entry_code)::text = '1'::text) THEN 3
            WHEN ((assessment.entry_code)::text = '2'::text) THEN 4
            WHEN ((assessment.entry_code)::text = 'P'::text) THEN 5
            WHEN ((assessment.entry_code)::text = 'F'::text) THEN 6
            ELSE 5
        END AS entry_code_sort_order
   FROM mrs_assessments assessment
  WHERE (assessment.is_deleted IS FALSE);


ALTER TABLE mrs_asmts_sorted_vw OWNER TO postgres;

--
-- Name: mrs_ass_queue_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_ass_queue_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_ass_queue_counter OWNER TO postgres;

--
-- Name: mrs_assessment_event_types; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_assessment_event_types (
    event_type_id numeric(5,0) NOT NULL,
    label character varying(50),
    description character varying(200)
);


ALTER TABLE mrs_assessment_event_types OWNER TO postgres;

--
-- Name: mrs_assessment_event_types_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_assessment_event_types_vw AS
 SELECT mrs_assessment_event_types.event_type_id,
    mrs_assessment_event_types.label,
    mrs_assessment_event_types.description
   FROM mrs_assessment_event_types;


ALTER TABLE mrs_assessment_event_types_vw OWNER TO postgres;

--
-- Name: mrs_assessment_events; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_assessment_events (
    event_id numeric(25,0) NOT NULL,
    assessment_id numeric(10,0),
    question_id character varying,
    page_id numeric(3,0),
    question_instance numeric(2,0),
    page_instance numeric(2,0),
    "timestamp" numeric(25,0),
    timezone_offset numeric(8,0),
    event_type_id numeric(2,0)
);


ALTER TABLE mrs_assessment_events OWNER TO postgres;

--
-- Name: mrs_assessment_events_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_assessment_events_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 10;


ALTER TABLE mrs_assessment_events_counter OWNER TO postgres;

--
-- Name: mrs_assessment_events_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_assessment_events_vw AS
 SELECT mrs_assessment_events.event_id,
    mrs_assessment_events.assessment_id,
    mrs_assessment_events.question_id,
    mrs_assessment_events.page_id,
    mrs_assessment_events.question_instance,
    mrs_assessment_events.page_instance,
    mrs_assessment_events."timestamp",
    mrs_assessment_events.timezone_offset,
    mrs_assessment_events.event_type_id
   FROM mrs_assessment_events;


ALTER TABLE mrs_assessment_events_vw OWNER TO postgres;

--
-- Name: mrs_assessment_orphans_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_assessment_orphans_vw AS
 SELECT a.assessment_id,
    a.instrument_id,
    a.segment_interval,
    a.segment_instance,
    a.ursi,
    a.site_id,
    a.entry_code,
    a.dataentry_type_id,
    a.source_type,
    a.rater1,
    a.rater2,
    a.assessment_date,
    a.entry_username,
    a.entry_start_date,
    a.entry_end_date,
    a.elapsed_time,
    a.supervisor_id,
    a.resolution_date,
    s.study_id,
    s.label AS study_label
   FROM (mrs_assessments a
     LEFT JOIN mrs_studies s ON ((s.study_id = a.study_id)))
  WHERE (((2 <> ( SELECT count(b.assessment_id) AS count
           FROM mrs_assessments b
          WHERE (((((((((a.instrument_id = b.instrument_id) AND ((a.segment_interval)::text = (b.segment_interval)::text)) AND (a.segment_instance = b.segment_instance)) AND ((a.ursi)::text = (b.ursi)::text)) AND ((a.site_id)::text = (b.site_id)::text)) AND ((a.entry_code)::text <> (b.entry_code)::text)) AND (a.dataentry_type_id = b.dataentry_type_id)) AND (a.source_type = b.source_type)) AND (a.rater1 = b.rater1)))) AND ((a.entry_code)::text <> ALL (ARRAY['C'::text, 'R'::text, 'P'::text, 'O'::text, 'S'::text]))) AND (a.is_deleted IS FALSE));


ALTER TABLE mrs_assessment_orphans_vw OWNER TO ni_developers;

--
-- Name: mrs_assessment_responses_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_assessment_responses_hist (
    assessment_id numeric(8,0),
    question_id character varying(20),
    question_instance numeric(4,0),
    response_value character varying,
    response_value_description text,
    response_sort_order numeric(3,0),
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_assessment_responses_hist OWNER TO postgres;

--
-- Name: mrs_assessment_resp_hist_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_assessment_resp_hist_vw AS
 SELECT mrs_assessment_responses_hist.assessment_id,
    mrs_assessment_responses_hist.question_id,
    mrs_assessment_responses_hist.question_instance,
    mrs_assessment_responses_hist.response_value,
    mrs_assessment_responses_hist.response_value_description,
    mrs_assessment_responses_hist.response_sort_order,
    mrs_assessment_responses_hist.mod_user,
    mrs_assessment_responses_hist.mod_date
   FROM mrs_assessment_responses_hist;


ALTER TABLE mrs_assessment_resp_hist_vw OWNER TO postgres;

--
-- Name: mrs_assessment_responses_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_assessment_responses_vw AS
 SELECT mrs_assessment_responses.assessment_id,
    mrs_assessment_responses.question_id,
    mrs_assessment_responses.question_instance,
    mrs_assessment_responses.response_value,
    mrs_assessment_responses.response_value_description,
    mrs_assessment_responses.response_sort_order
   FROM mrs_assessment_responses;


ALTER TABLE mrs_assessment_responses_vw OWNER TO postgres;

--
-- Name: mrs_assessments_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_assessments_hist (
    assessment_id numeric(8,0),
    instrument_id numeric(8,0),
    segment_interval character varying(20),
    segment_instance numeric(3,0),
    ursi character varying(9),
    site_id character varying(4),
    entry_code character varying(1),
    dataentry_type_id numeric(8,0),
    source_type numeric(3,0),
    rater1 character varying(5),
    rater2 character varying(5),
    assessment_date timestamp without time zone,
    entry_username character varying(40),
    entry_start_date timestamp without time zone,
    entry_end_date timestamp without time zone,
    elapsed_time numeric(3,0),
    supervisor_id character varying(40),
    resolution_date timestamp without time zone,
    mod_user character varying(40),
    mod_date timestamp without time zone,
    successfully_completed character varying(2),
    notes character varying(4000),
    xml_source text,
    hasemptyfields character varying(6),
    study_id numeric(4,0),
    submission_date timestamp without time zone,
    is_single_entry boolean DEFAULT false,
    missing_reason_id numeric,
    dx_excluded boolean,
    ongoing_entry boolean,
    client_device_id integer,
    client_dbid integer,
    auto_queue_generated boolean,
    from_protocol_id numeric,
    is_deleted boolean
);


ALTER TABLE mrs_assessments_hist OWNER TO postgres;

--
-- Name: mrs_assessments_hist_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_assessments_hist_vw AS
 SELECT mrs_assessments_hist.assessment_id,
    mrs_assessments_hist.instrument_id,
    mrs_assessments_hist.segment_interval,
    mrs_assessments_hist.segment_instance,
    mrs_assessments_hist.ursi,
    mrs_assessments_hist.site_id,
    mrs_assessments_hist.entry_code,
    mrs_assessments_hist.dataentry_type_id,
    mrs_assessments_hist.source_type,
    mrs_assessments_hist.rater1,
    mrs_assessments_hist.rater2,
    mrs_assessments_hist.assessment_date,
    mrs_assessments_hist.entry_username,
    mrs_assessments_hist.entry_start_date,
    mrs_assessments_hist.entry_end_date,
    mrs_assessments_hist.elapsed_time,
    mrs_assessments_hist.supervisor_id,
    mrs_assessments_hist.resolution_date,
    mrs_assessments_hist.mod_user,
    mrs_assessments_hist.mod_date,
    mrs_assessments_hist.successfully_completed,
    mrs_assessments_hist.notes,
    mrs_assessments_hist.xml_source,
    mrs_assessments_hist.hasemptyfields,
    mrs_assessments_hist.study_id,
    mrs_assessments_hist.submission_date,
    mrs_assessments_hist.dx_excluded
   FROM mrs_assessments_hist;


ALTER TABLE mrs_assessments_hist_vw OWNER TO ni_developers;

--
-- Name: mrs_assessments_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_assessments_vw AS
 SELECT mrs_assessments.assessment_id,
    mrs_assessments.instrument_id,
    mrs_assessments.segment_interval,
    mrs_assessments.segment_instance,
    mrs_assessments.ursi,
    mrs_assessments.site_id,
    mrs_assessments.entry_code,
    mrs_assessments.dataentry_type_id,
    mrs_assessments.source_type,
    mrs_assessments.rater1,
    mrs_assessments.rater2,
    mrs_assessments.assessment_date,
    mrs_assessments.entry_username,
    mrs_assessments.entry_start_date,
    mrs_assessments.entry_end_date,
    mrs_assessments.elapsed_time,
    mrs_assessments.supervisor_id,
    mrs_assessments.resolution_date,
    mrs_assessments.successfully_completed,
    mrs_assessments.notes,
    mrs_assessments.xml_source,
    mrs_assessments.hasemptyfields,
    mrs_assessments.study_id,
    mrs_assessments.submission_date,
    mrs_assessments.last_qid,
    mrs_assessments.is_single_entry,
    mrs_assessments.missing_reason_id,
    mrs_assessments.dx_excluded,
    mrs_assessments.ongoing_entry,
    mrs_assessments.auto_queue_generated,
    mrs_assessments.from_protocol_id
   FROM mrs_assessments
  WHERE (mrs_assessments.is_deleted IS FALSE);


ALTER TABLE mrs_assessments_vw OWNER TO ni_developers;

--
-- Name: mrs_auto_message_counter; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_auto_message_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_auto_message_counter OWNER TO ni_developers;

--
-- Name: mrs_auto_messages; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_auto_messages (
    message_id numeric(10,0) NOT NULL,
    message_subject text,
    message_from text,
    message_to text,
    message_cc text,
    message_body text,
    sent_time timestamp without time zone,
    message_type_id numeric(8,0),
    study_id numeric(8,0)
);


ALTER TABLE mrs_auto_messages OWNER TO ni_developers;

--
-- Name: mrs_auto_messages_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_auto_messages_hist (
    message_id numeric(10,0),
    message_subject text,
    message_from text,
    message_to text,
    message_cc text,
    message_body text,
    sent_time timestamp without time zone,
    message_type_id numeric(8,0),
    study_id numeric(8,0),
    mod_date timestamp without time zone,
    mod_user character varying
);


ALTER TABLE mrs_auto_messages_hist OWNER TO ni_developers;

--
-- Name: mrs_auto_messages_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_auto_messages_vw AS
 SELECT mrs_auto_messages.message_id,
    mrs_auto_messages.message_subject,
    mrs_auto_messages.message_from,
    mrs_auto_messages.message_to,
    mrs_auto_messages.message_cc,
    mrs_auto_messages.message_body,
    mrs_auto_messages.sent_time,
    mrs_auto_messages.message_type_id,
    mrs_auto_messages.study_id
   FROM mrs_auto_messages;


ALTER TABLE mrs_auto_messages_vw OWNER TO ni_developers;

--
-- Name: mrs_bcc; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_bcc
    START WITH 171
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 20;


ALTER TABLE mrs_bcc OWNER TO postgres;

--
-- Name: mrs_behavioral_uploads; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_behavioral_uploads (
    upload_id numeric(10,0) NOT NULL,
    file_name character varying(200),
    file_size_k numeric(8,0),
    dest_session_id numeric(10,0),
    dest_series_id character varying(10)
);


ALTER TABLE mrs_behavioral_uploads OWNER TO postgres;

--
-- Name: COLUMN mrs_behavioral_uploads.dest_session_id; Type: COMMENT; Schema: mrsdba; Owner: postgres
--

COMMENT ON COLUMN mrs_behavioral_uploads.dest_session_id IS 'If the uploaded file is stored under session, this value will be the corresponding scan id, otherwise, it''s null value.';


--
-- Name: COLUMN mrs_behavioral_uploads.dest_series_id; Type: COMMENT; Schema: mrsdba; Owner: postgres
--

COMMENT ON COLUMN mrs_behavioral_uploads.dest_series_id IS 'If the uploaded file is stored under series, this value will be the corresponding series id, otherwise, it''s null.';


--
-- Name: mrs_behavioral_uploads_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_behavioral_uploads_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_behavioral_uploads_counter OWNER TO postgres;

--
-- Name: mrs_behavioral_uploads_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_behavioral_uploads_hist (
    upload_id numeric(10,0),
    file_name character varying(200),
    file_size_k numeric(8,0),
    dest_session_id numeric(10,0),
    dest_series_id character varying(10),
    mod_user character varying(50),
    mod_date timestamp without time zone,
    action character varying(10)
);


ALTER TABLE mrs_behavioral_uploads_hist OWNER TO postgres;

--
-- Name: mrs_billing_codes_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_billing_codes_counter
    START WITH 980
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 20;


ALTER TABLE mrs_billing_codes_counter OWNER TO postgres;

--
-- Name: mrs_charge_code_site_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_charge_code_site_details (
    site_charge_id numeric(8,0) NOT NULL,
    charge_code_id numeric(8,0) NOT NULL,
    site_id character varying(3) NOT NULL,
    funding_source character varying(30),
    notes character varying(400),
    is_enabled boolean
);


ALTER TABLE mrs_charge_code_site_details OWNER TO postgres;

--
-- Name: mrs_charge_code_site_details_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_charge_code_site_details_hist (
    site_charge_id numeric(8,0),
    charge_code_id numeric(8,0),
    site_id character varying(3),
    funding_source character varying(30),
    notes character varying(400),
    is_enabled boolean,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_charge_code_site_details_hist OWNER TO postgres;

--
-- Name: mrs_charge_code_site_modalities; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_charge_code_site_modalities (
    site_modality_id numeric(8,0) NOT NULL,
    site_charge_id numeric(8,0),
    modality_id numeric(4,0),
    is_default boolean,
    uses_credits boolean
);


ALTER TABLE mrs_charge_code_site_modalities OWNER TO postgres;

--
-- Name: mrs_charge_code_site_modalities_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_charge_code_site_modalities_hist (
    site_modality_id numeric(8,0),
    site_charge_id numeric(8,0),
    modality_id numeric(4,0),
    is_default boolean,
    uses_credits boolean,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_charge_code_site_modalities_hist OWNER TO postgres;

--
-- Name: mrs_charge_code_study_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_charge_code_study_details (
    study_charge_id numeric(8,0) NOT NULL,
    charge_code_id numeric(8,0) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    funding_source character varying(30),
    notes character varying(400),
    is_enabled boolean
);


ALTER TABLE mrs_charge_code_study_details OWNER TO postgres;

--
-- Name: mrs_charge_code_study_details_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_charge_code_study_details_hist (
    study_charge_id numeric(8,0),
    charge_code_id numeric(8,0),
    study_id numeric(4,0),
    funding_source character varying(30),
    notes character varying(400),
    is_enabled boolean,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_charge_code_study_details_hist OWNER TO postgres;

--
-- Name: mrs_charge_code_study_modalities; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_charge_code_study_modalities (
    study_modality_id numeric(8,0) NOT NULL,
    study_charge_id numeric(8,0),
    modality_id numeric(4,0),
    is_default boolean,
    uses_credits boolean
);


ALTER TABLE mrs_charge_code_study_modalities OWNER TO postgres;

--
-- Name: mrs_charge_code_study_modalities_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_charge_code_study_modalities_hist (
    study_modality_id numeric(8,0),
    study_charge_id numeric(8,0),
    modality_id numeric(4,0),
    is_default boolean,
    uses_credits boolean,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_charge_code_study_modalities_hist OWNER TO postgres;

--
-- Name: mrs_charge_codes; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_charge_codes (
    charge_code_id numeric(16,0) NOT NULL,
    charge_code character varying(40) NOT NULL,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    project_number character varying
);


ALTER TABLE mrs_charge_codes OWNER TO postgres;

--
-- Name: mrs_charge_codes_sites_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_charge_codes_sites_vw AS
 SELECT cc.charge_code_id,
    cc.charge_code,
    cc.project_number,
    site.site_id,
    site.funding_source,
    cc.start_date,
    cc.end_date,
    site.notes,
    mod.is_default,
    mod.uses_credits,
    mod.modality_id,
    modalities.label AS modality_label,
    site.is_enabled,
    site.site_charge_id,
    mod.site_modality_id
   FROM (((mrs_charge_codes cc
     JOIN mrs_charge_code_site_details site ON ((cc.charge_code_id = site.charge_code_id)))
     LEFT JOIN mrs_charge_code_site_modalities mod ON ((site.site_charge_id = mod.site_charge_id)))
     LEFT JOIN mrs_modalities modalities ON ((mod.modality_id = modalities.modality_id)))
  ORDER BY cc.charge_code_id, site.site_id;


ALTER TABLE mrs_charge_codes_sites_vw OWNER TO ni_developers;

--
-- Name: mrs_study_status; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_status (
    status_id character varying(200) NOT NULL,
    label character varying(50),
    description character varying(4000),
    CONSTRAINT mrsstustat_statusid_nn CHECK ((status_id IS NOT NULL))
);


ALTER TABLE mrs_study_status OWNER TO postgres;

--
-- Name: mrs_charge_codes_studies_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_charge_codes_studies_vw AS
 SELECT cc.charge_code_id,
    cc.charge_code,
    cc.project_number,
    s.hrrc_num,
    s.irb_number,
    std.study_id,
    std.funding_source,
    cc.start_date,
    cc.end_date,
    std.notes,
    mod.is_default,
    mod.uses_credits,
    mod.modality_id,
    modalities.label AS modality_label,
    s.grant_number,
    std.is_enabled,
    ss.label AS study_status_label,
    std.study_charge_id,
    mod.study_modality_id
   FROM (((((mrs_charge_codes cc
     JOIN mrs_charge_code_study_details std ON ((cc.charge_code_id = std.charge_code_id)))
     JOIN mrs_studies s ON ((std.study_id = s.study_id)))
     JOIN mrs_study_status ss ON (((s.status_id)::text = (ss.status_id)::text)))
     LEFT JOIN mrs_charge_code_study_modalities mod ON ((std.study_charge_id = mod.study_charge_id)))
     LEFT JOIN mrs_modalities modalities ON ((mod.modality_id = modalities.modality_id)))
  ORDER BY cc.charge_code_id, std.study_id;


ALTER TABLE mrs_charge_codes_studies_vw OWNER TO ni_developers;

--
-- Name: mrs_charge_codes_all_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_charge_codes_all_vw AS
 SELECT cc.charge_code_id,
    cc.charge_code,
    cc.project_number,
    cc.hrrc_num,
    NULL::character varying AS site_id,
    cc.irb_number,
    cc.study_id,
    cc.funding_source,
    cc.start_date,
    cc.end_date,
    cc.notes,
    cc.is_default,
    cc.uses_credits,
    cc.modality_id,
    cc.modality_label,
    cc.grant_number,
    cc.is_enabled,
    cc.study_status_label,
    NULL::numeric AS site_charge_id,
    NULL::numeric AS site_modality_id,
    cc.study_charge_id,
    cc.study_modality_id
   FROM mrs_charge_codes_studies_vw cc
UNION
 SELECT site.charge_code_id,
    site.charge_code,
    site.project_number,
    NULL::character varying AS hrrc_num,
    site.site_id,
    NULL::character varying AS irb_number,
    NULL::numeric AS study_id,
    site.funding_source,
    site.start_date,
    site.end_date,
    site.notes,
    site.is_default,
    site.uses_credits,
    site.modality_id,
    site.modality_label,
    NULL::character varying AS grant_number,
    site.is_enabled,
    NULL::character varying AS study_status_label,
    site.site_charge_id,
    site.site_modality_id,
    NULL::numeric AS study_charge_id,
    NULL::numeric AS study_modality_id
   FROM mrs_charge_codes_sites_vw site;


ALTER TABLE mrs_charge_codes_all_vw OWNER TO ni_developers;

--
-- Name: mrs_charge_codes_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_charge_codes_hist (
    charge_code_id numeric(16,0),
    charge_code character varying(40),
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    mod_user character varying(40),
    mod_date timestamp without time zone,
    project_number character varying
);


ALTER TABLE mrs_charge_codes_hist OWNER TO postgres;

--
-- Name: mrs_charge_codes_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_charge_codes_vw AS
 SELECT mrs_charge_codes.charge_code_id,
    mrs_charge_codes.charge_code,
    mrs_charge_codes.project_number,
    mrs_charge_codes.start_date,
    mrs_charge_codes.end_date
   FROM mrs_charge_codes;


ALTER TABLE mrs_charge_codes_vw OWNER TO ni_developers;

--
-- Name: mrs_client_assessment_backups; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_client_assessment_backups (
    backup_id integer NOT NULL,
    device_id integer NOT NULL,
    username character varying NOT NULL,
    date timestamp with time zone NOT NULL,
    assessment_json text,
    study_id numeric
);


ALTER TABLE mrs_client_assessment_backups OWNER TO ni_developers;

--
-- Name: mrs_client_assessment_backups_backup_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_client_assessment_backups_backup_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_client_assessment_backups_backup_id_seq OWNER TO ni_developers;

--
-- Name: mrs_client_assessment_backups_backup_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_client_assessment_backups_backup_id_seq OWNED BY mrs_client_assessment_backups.backup_id;


--
-- Name: mrs_client_assessment_backups_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_client_assessment_backups_hist (
    backup_id integer,
    device_id integer,
    username character varying,
    date timestamp with time zone,
    assessment_json text,
    mod_user character varying,
    mod_date timestamp with time zone,
    study_id numeric
);


ALTER TABLE mrs_client_assessment_backups_hist OWNER TO ni_developers;

--
-- Name: mrs_client_assessment_backups_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_client_assessment_backups_vw AS
 SELECT mrs_client_assessment_backups.backup_id,
    mrs_client_assessment_backups.device_id,
    mrs_client_assessment_backups.study_id,
    mrs_client_assessment_backups.username,
    mrs_client_assessment_backups.date,
    mrs_client_assessment_backups.assessment_json
   FROM mrs_client_assessment_backups;


ALTER TABLE mrs_client_assessment_backups_vw OWNER TO ni_developers;

--
-- Name: mrs_client_devices; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_client_devices (
    device_id integer NOT NULL,
    reg_username character varying,
    reg_date timestamp with time zone,
    reg_remote_address character varying,
    reg_http_client_ip character varying,
    reg_http_x_forwarded_ip character varying,
    reg_user_agent character varying,
    reg_request_url character varying,
    reg_http_referer character varying
);


ALTER TABLE mrs_client_devices OWNER TO ni_developers;

--
-- Name: mrs_client_devices_device_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_client_devices_device_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_client_devices_device_id_seq OWNER TO ni_developers;

--
-- Name: mrs_client_devices_device_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_client_devices_device_id_seq OWNED BY mrs_client_devices.device_id;


--
-- Name: mrs_client_devices_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_client_devices_hist (
    device_id integer NOT NULL,
    reg_username character varying,
    reg_date timestamp with time zone,
    reg_remote_address character varying,
    reg_http_client_ip character varying,
    reg_http_x_forwarded_ip character varying,
    reg_user_agent character varying,
    reg_request_url character varying,
    reg_http_referer character varying,
    mod_user character varying,
    mod_date timestamp with time zone
);


ALTER TABLE mrs_client_devices_hist OWNER TO ni_developers;

--
-- Name: mrs_client_devices_hist_device_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_client_devices_hist_device_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_client_devices_hist_device_id_seq OWNER TO ni_developers;

--
-- Name: mrs_client_devices_hist_device_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_client_devices_hist_device_id_seq OWNED BY mrs_client_devices_hist.device_id;


--
-- Name: mrs_client_devices_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_client_devices_vw AS
 SELECT mrs_client_devices.device_id,
    mrs_client_devices.reg_username,
    mrs_client_devices.reg_remote_address,
    mrs_client_devices.reg_http_client_ip,
    mrs_client_devices.reg_http_x_forwarded_ip,
    mrs_client_devices.reg_user_agent,
    mrs_client_devices.reg_request_url,
    mrs_client_devices.reg_http_referer
   FROM mrs_client_devices;


ALTER TABLE mrs_client_devices_vw OWNER TO ni_developers;

--
-- Name: mrs_client_error_log; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_client_error_log (
    error_message character varying(2000),
    src_url character varying(400),
    line_number character varying(10),
    page_url character varying(400),
    shared_vars text,
    user_note text,
    client_agent character varying(200),
    username character varying(40),
    error_timestamp timestamp with time zone
);


ALTER TABLE mrs_client_error_log OWNER TO postgres;

--
-- Name: mrs_rdoc_coins_question_map; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_rdoc_coins_question_map (
    id integer NOT NULL,
    coins_question_id integer NOT NULL,
    rdoc_inst_id character varying,
    rdoc_question_short_tag character varying NOT NULL,
    transform character varying,
    transform_ui_cache character varying
);


ALTER TABLE mrs_rdoc_coins_question_map OWNER TO ni_developers;

--
-- Name: mrs_coins_join_rdoc_mapping_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_coins_join_rdoc_mapping_vw AS
 SELECT q.question_id,
    q.label,
    q.description,
    q.example_description,
    q.exclusion_description,
    q.max_instances,
    q.section_id,
    q.sort_order,
    q.dsm_question_type,
    q.disp_label_first,
    q.formula_question_type,
    q.formula,
    q.deletion_date,
    q.is_required,
    q.is_sa_hidden,
    q.is_sa_radio_type,
    q.sa_label,
    q.is_auto_complete_type,
    q.autopop_qid,
    q.assumed_value,
    q.response_format_id,
    q.other_option_label,
    q.specify_detail,
    q.multiple_choice,
    q.isvasquestion,
    q.vas_minimum,
    q.vas_maximum,
    q.vas_display_extrema,
    q.vas_display_cursor_value,
    q.vas_display_center_mark,
    q.istextquestion,
    q.vas_interval,
    q.vas_min_label,
    q.vas_max_label,
    q.numeric_response_min,
    q.numeric_response_max,
    q.is_media_upload,
    q.vas_recording_interval,
    q.copied_from_question_id,
    q.dx_excluded,
    q.vas_mid_label,
    q.table_row_id,
    q.table_col_id,
    q.is_de_hidden,
    q.id,
    d.instrument_id,
    m.id AS mapping_id,
    m.rdoc_inst_id,
    m.rdoc_question_short_tag,
    m.transform_ui_cache,
    m.transform
   FROM ((mrs_instrument_questions q
     JOIN mrs_instrument_section_details d ON ((q.section_id = d.section_id)))
     JOIN mrs_rdoc_coins_question_map m ON ((q.id = m.coins_question_id)));


ALTER TABLE mrs_coins_join_rdoc_mapping_vw OWNER TO ni_developers;

--
-- Name: mrs_collection_techniques_collection_technique_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_collection_techniques_collection_technique_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_collection_techniques_collection_technique_id_seq OWNER TO ni_developers;

--
-- Name: mrs_collection_techniques_collection_technique_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_collection_techniques_collection_technique_id_seq OWNED BY mrs_collection_techniques.collection_technique_id;


--
-- Name: mrs_collection_techniques_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_collection_techniques_hist (
    collection_technique_id integer,
    collection_technique character varying(100),
    description character varying(400),
    url character varying(200),
    dx_order integer,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_collection_techniques_hist OWNER TO ni_developers;

--
-- Name: mrs_collection_techniques_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_collection_techniques_vw AS
 SELECT ct.collection_technique_id,
    ct.collection_technique,
    ct.description,
    ct.url,
    ct.dx_order
   FROM mrs_collection_techniques ct;


ALTER TABLE mrs_collection_techniques_vw OWNER TO ni_developers;

--
-- Name: mrs_configs; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_configs (
    group_label character varying(25) NOT NULL,
    group_description character varying(128) NOT NULL,
    config_label character varying(50) NOT NULL,
    config_value character varying(25) NOT NULL,
    config_description character varying(128) NOT NULL,
    CONSTRAINT mrsconfig_configdesc_nn CHECK ((config_description IS NOT NULL)),
    CONSTRAINT mrsconfig_configlabel_nn CHECK ((config_label IS NOT NULL)),
    CONSTRAINT mrsconfig_configvalue_nn CHECK ((config_value IS NOT NULL)),
    CONSTRAINT mrsconfig_groupdesc_nn CHECK ((group_description IS NOT NULL)),
    CONSTRAINT mrsconfig_grouplabel_nn CHECK ((group_label IS NOT NULL))
);


ALTER TABLE mrs_configs OWNER TO postgres;

--
-- Name: mrs_configs_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_configs_hist (
    group_label character varying(25),
    group_description character varying(128),
    config_label character varying(50),
    config_value character varying(25),
    config_description character varying(128)
);


ALTER TABLE mrs_configs_hist OWNER TO postgres;

--
-- Name: mrs_configs_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_configs_vw AS
 SELECT mrs_configs.group_label,
    mrs_configs.group_description,
    mrs_configs.config_label,
    mrs_configs.config_value,
    mrs_configs.config_description
   FROM mrs_configs;


ALTER TABLE mrs_configs_vw OWNER TO postgres;

--
-- Name: mrs_person_role_det_addresses; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_person_role_det_addresses (
    prd_id numeric(6,0) NOT NULL,
    address_id numeric(8,0) NOT NULL
);


ALTER TABLE mrs_person_role_det_addresses OWNER TO postgres;

--
-- Name: mrs_person_role_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_person_role_details (
    person_id character varying(40) NOT NULL,
    role_id numeric(4,0) NOT NULL,
    alias_id numeric(6,0),
    study_id numeric(4,0) NOT NULL,
    prd_id numeric(6,0),
    is_hidden boolean
);


ALTER TABLE mrs_person_role_details OWNER TO postgres;

--
-- Name: mrs_personaddress_types; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_personaddress_types (
    address_type_id numeric(4,0) NOT NULL,
    label character varying(100) NOT NULL,
    description character varying(100)
);


ALTER TABLE mrs_personaddress_types OWNER TO postgres;

--
-- Name: mrs_personaddresses; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_personaddresses (
    address_id numeric(4,0) NOT NULL,
    address_line_1 character varying(100) NOT NULL,
    address_line_2 character varying(100),
    msc character varying(100),
    city character varying(100),
    state character varying(100),
    zip character varying(8),
    country character varying(100),
    address_type_id numeric(4,0) NOT NULL,
    preference_id numeric(4,0) DEFAULT 1
);


ALTER TABLE mrs_personaddresses OWNER TO postgres;

--
-- Name: mrs_persons; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_persons (
    person_id character varying(40) NOT NULL,
    first_name character varying(50),
    middle_name character varying(50),
    last_name character varying(50),
    site_id character varying(3) NOT NULL,
    department character varying(50),
    institution character varying(50),
    contact_email character varying(50),
    CONSTRAINT mrsperson_siteid_nn CHECK ((site_id IS NOT NULL))
);


ALTER TABLE mrs_persons OWNER TO postgres;

--
-- Name: mrs_contacts_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_contacts_vw AS
 SELECT r.study_id,
    r.person_id,
    p.site_id,
    p.first_name,
    p.last_name,
    a.address_line_1 AS email
   FROM mrs_persons p,
    mrs_personaddresses a,
    mrs_person_role_details r,
    mrs_person_role_det_addresses x
  WHERE ((((r.prd_id = x.prd_id) AND (a.address_id = x.address_id)) AND ((p.person_id)::text IN ( SELECT r.person_id
           FROM mrs_person_role_details p_1,
            mrs_person_role_det_addresses x_1
          WHERE (r.prd_id = x_1.prd_id)))) AND (a.address_type_id IN ( SELECT mrs_personaddress_types.address_type_id
           FROM mrs_personaddress_types
          WHERE ((mrs_personaddress_types.label)::text = 'EMAIL'::text))));


ALTER TABLE mrs_contacts_vw OWNER TO postgres;

--
-- Name: mrs_instrument_code_responses; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_instrument_code_responses (
    label character varying(1000),
    description character varying(4000),
    value numeric(8,0) NOT NULL,
    question_id character varying(20) NOT NULL,
    sort_order numeric(6,0) NOT NULL,
    target_qid character varying,
    is_critical boolean DEFAULT false,
    is_hidden boolean DEFAULT false,
    specify_detail character(1),
    skip_revscore boolean DEFAULT false,
    response_id integer NOT NULL,
    CONSTRAINT mrsincore_questionid_nn CHECK ((question_id IS NOT NULL)),
    CONSTRAINT mrsincore_value_nn CHECK ((value IS NOT NULL))
);


ALTER TABLE mrs_instrument_code_responses OWNER TO ni_developers;

--
-- Name: mrs_critical_responses_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_critical_responses_vw AS
 SELECT mrs_assessment_responses.assessment_id,
    mrs_assessment_responses.question_id,
    mrs_assessment_responses.question_instance,
    mrs_assessment_responses.response_value,
    mrs_assessment_responses.response_value_description
   FROM mrs_assessment_responses
  WHERE (((mrs_assessment_responses.question_id)::text, (mrs_assessment_responses.response_value)::text) IN ( SELECT c.question_id,
            (c.value)::text AS value
           FROM ((( SELECT mrs_instrument_code_responses.label,
                    mrs_instrument_code_responses.description,
                    mrs_instrument_code_responses.value,
                    mrs_instrument_code_responses.question_id,
                    mrs_instrument_code_responses.sort_order,
                    mrs_instrument_code_responses.target_qid,
                    mrs_instrument_code_responses.is_critical
                   FROM mrs_instrument_code_responses
                  WHERE (mrs_instrument_code_responses.is_critical = true)) c
             JOIN mrs_instrument_questions q ON (((q.question_id)::text = (c.question_id)::text)))
             JOIN mrs_instrument_section_details s ON ((s.section_id = q.section_id)))));


ALTER TABLE mrs_critical_responses_vw OWNER TO postgres;

--
-- Name: mrs_data_domains; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_data_domains (
    data_domain_id numeric(10,0) NOT NULL,
    label character varying(400) NOT NULL,
    study_id numeric(10,0) NOT NULL
);


ALTER TABLE mrs_data_domains OWNER TO postgres;

--
-- Name: mrs_data_domains_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_data_domains_hist (
    data_domain_id numeric(10,0),
    label character varying(400),
    study_id numeric(10,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_data_domains_hist OWNER TO postgres;

--
-- Name: mrs_data_domains_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_data_domains_vw AS
 SELECT dd.data_domain_id,
    dd.label,
    dd.study_id,
    s.label AS study_label
   FROM mrs_data_domains dd,
    mrs_studies s
  WHERE (dd.study_id = s.study_id);


ALTER TABLE mrs_data_domains_vw OWNER TO postgres;

--
-- Name: mrs_data_qc_constraints; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_data_qc_constraints (
    constraint_id integer NOT NULL,
    device_id numeric,
    daq_event_type_id integer NOT NULL,
    event_parameter_id numeric NOT NULL,
    constraint_formula text NOT NULL,
    label text
);


ALTER TABLE mrs_data_qc_constraints OWNER TO ni_developers;

--
-- Name: mrs_data_qc_constraints_constraint_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_data_qc_constraints_constraint_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_data_qc_constraints_constraint_id_seq OWNER TO ni_developers;

--
-- Name: mrs_data_qc_constraints_constraint_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_data_qc_constraints_constraint_id_seq OWNED BY mrs_data_qc_constraints.constraint_id;


--
-- Name: mrs_data_qc_constraints_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_data_qc_constraints_hist (
    constraint_id integer,
    device_id numeric,
    daq_event_type_id integer,
    event_parameter_id numeric,
    constraint_formula text,
    label text,
    mod_user text,
    mod_date timestamp without time zone
);


ALTER TABLE mrs_data_qc_constraints_hist OWNER TO ni_developers;

--
-- Name: mrs_scan_data_types; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_data_types (
    scan_data_type_id numeric NOT NULL,
    label character varying,
    description character varying,
    value_type character varying,
    max_instances numeric
);


ALTER TABLE mrs_scan_data_types OWNER TO postgres;

--
-- Name: mrs_series_data; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_series_data (
    series_data_id numeric NOT NULL,
    series_id character varying,
    scan_data_type_id numeric,
    value character varying,
    series_data_type_instance numeric
);


ALTER TABLE mrs_series_data OWNER TO postgres;

--
-- Name: mrs_data_qc_constraints_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_data_qc_constraints_vw AS
 SELECT qc.constraint_id,
    qc.device_id,
    l.study_id,
    qc.daq_event_type_id,
    qc.event_parameter_id,
    qc.constraint_formula,
    qc.label,
    t.label AS event_param_label,
    t.description AS event_param_desc,
    d.series_data_id,
    d.series_id,
    d.scan_data_type_id,
    d.value,
    d.series_data_type_instance
   FROM ((((mrs_data_qc_constraints qc
     JOIN mrs_series_labels l ON ((qc.daq_event_type_id = l.label_id)))
     JOIN mrs_scan_data_types t ON ((qc.event_parameter_id = t.scan_data_type_id)))
     LEFT JOIN mrs_series s ON ((l.label_id = s.label_id)))
     LEFT JOIN mrs_series_data d ON ((((s.series_id)::text = (d.series_id)::text) AND (qc.event_parameter_id = d.scan_data_type_id))));


ALTER TABLE mrs_data_qc_constraints_vw OWNER TO ni_developers;

--
-- Name: mrs_dataentry_types; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_dataentry_types (
    dataentry_type_id numeric(8,0) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000) NOT NULL,
    CONSTRAINT mrsdattyp_description_nn CHECK ((description IS NOT NULL)),
    CONSTRAINT mrsdattyp_label_nn CHECK ((label IS NOT NULL))
);


ALTER TABLE mrs_dataentry_types OWNER TO postgres;

--
-- Name: mrs_dataentry_types_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_dataentry_types_hist (
    dataentry_type_id numeric(8,0),
    label character varying(200),
    description character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_dataentry_types_hist OWNER TO postgres;

--
-- Name: mrs_dataentry_types_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_dataentry_types_vw AS
 SELECT mrs_dataentry_types.dataentry_type_id,
    mrs_dataentry_types.label,
    mrs_dataentry_types.description
   FROM mrs_dataentry_types;


ALTER TABLE mrs_dataentry_types_vw OWNER TO postgres;

--
-- Name: mrs_disambig_asmts_nomatch; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_disambig_asmts_nomatch (
    assessment_id numeric(10,0) NOT NULL,
    notes character varying(400)
);


ALTER TABLE mrs_disambig_asmts_nomatch OWNER TO postgres;

--
-- Name: mrs_doc_category_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_doc_category_details (
    file_id numeric(8,0) NOT NULL,
    category_id numeric(4,0) NOT NULL,
    mod_user character varying(40) NOT NULL,
    mod_date timestamp without time zone NOT NULL,
    CONSTRAINT mrsdocade_moddate_nn CHECK ((mod_date IS NOT NULL)),
    CONSTRAINT mrsdocade_moduser_nn CHECK ((mod_user IS NOT NULL))
);


ALTER TABLE mrs_doc_category_details OWNER TO postgres;

--
-- Name: mrs_doc_cat_details_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_doc_cat_details_vw AS
 SELECT dcd.file_id,
    dcd.category_id
   FROM mrs_doc_category_details dcd;


ALTER TABLE mrs_doc_cat_details_vw OWNER TO postgres;

--
-- Name: mrs_doc_proj_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_doc_proj_details (
    file_id numeric(8,0) NOT NULL,
    project_id numeric(4,0) NOT NULL,
    mod_user character varying(40) NOT NULL,
    mod_date timestamp without time zone NOT NULL
);


ALTER TABLE mrs_doc_proj_details OWNER TO postgres;

--
-- Name: mrs_doc_proj_details_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_doc_proj_details_vw AS
 SELECT d.file_id,
    d.project_id
   FROM mrs_doc_proj_details d;


ALTER TABLE mrs_doc_proj_details_vw OWNER TO postgres;

--
-- Name: mrs_document_categories; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_document_categories (
    category_id numeric(4,0) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000),
    parent_id numeric(4,0),
    study_id numeric(4,0) NOT NULL,
    mod_user character varying(40) NOT NULL,
    mod_date timestamp without time zone NOT NULL,
    CONSTRAINT mrsdoccat_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsdoccat_moddate_nn CHECK ((mod_date IS NOT NULL)),
    CONSTRAINT mrsdoccat_moduser_nn CHECK ((mod_user IS NOT NULL)),
    CONSTRAINT mrsdoccat_studyid_nn CHECK ((study_id IS NOT NULL))
);


ALTER TABLE mrs_document_categories OWNER TO postgres;

--
-- Name: mrs_document_categories_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_document_categories_vw AS
 SELECT c.category_id,
    c.label,
    c.description,
    c.study_id,
    s.label AS study_label,
    c.parent_id,
    p.label AS parent_label,
    c.mod_user,
    c.mod_date
   FROM ((mrs_document_categories c
     LEFT JOIN mrs_document_categories p ON ((c.parent_id = p.category_id)))
     JOIN mrs_studies s ON ((c.study_id = s.study_id)));


ALTER TABLE mrs_document_categories_vw OWNER TO postgres;

--
-- Name: mrs_documents; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_documents (
    file_id numeric(8,0) NOT NULL,
    file_name character varying(200) NOT NULL,
    file_mime_type character varying(200) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000),
    file_size character varying(40) NOT NULL,
    path_relative character varying(200) NOT NULL,
    site_id character varying(3) NOT NULL,
    mod_user character varying(40) NOT NULL,
    mod_date timestamp without time zone NOT NULL,
    CONSTRAINT mrsdocume_filemimetype_nn CHECK ((file_mime_type IS NOT NULL)),
    CONSTRAINT mrsdocume_filename_nn CHECK ((file_name IS NOT NULL)),
    CONSTRAINT mrsdocume_filesize_nn CHECK ((file_size IS NOT NULL)),
    CONSTRAINT mrsdocume_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsdocume_moddate_nn CHECK ((mod_date IS NOT NULL)),
    CONSTRAINT mrsdocume_moduser_nn CHECK ((mod_user IS NOT NULL)),
    CONSTRAINT mrsdocume_pathrelative_nn CHECK ((path_relative IS NOT NULL)),
    CONSTRAINT mrsdocume_siteid_nn CHECK ((site_id IS NOT NULL))
);


ALTER TABLE mrs_documents OWNER TO postgres;

--
-- Name: mrs_documents_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_documents_vw AS
 SELECT d.file_id,
    d.file_name,
    d.file_mime_type,
    d.label AS file_label,
    d.description AS file_description,
    d.file_size,
    d.path_relative,
    d.site_id,
    d.mod_user,
    d.mod_date
   FROM mrs_documents d;


ALTER TABLE mrs_documents_vw OWNER TO postgres;

--
-- Name: mrs_drug_categories; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_drug_categories (
    category_id numeric(4,0) NOT NULL,
    category_name character varying(100) NOT NULL,
    description character varying(4000),
    entered_date timestamp without time zone NOT NULL,
    user_entered character varying(40) NOT NULL,
    notes character varying(4000),
    CONSTRAINT mrsdrgcat_catnam_nn CHECK ((category_name IS NOT NULL)),
    CONSTRAINT mrsdrgcat_entereddate_nn CHECK ((entered_date IS NOT NULL)),
    CONSTRAINT mrsdrgcat_userentered_nn CHECK ((user_entered IS NOT NULL))
);


ALTER TABLE mrs_drug_categories OWNER TO postgres;

--
-- Name: mrs_drug_categories_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_drug_categories_vw AS
 SELECT mrs_drug_categories.category_id,
    mrs_drug_categories.category_name,
    mrs_drug_categories.description,
    mrs_drug_categories.notes,
    mrs_drug_categories.entered_date,
    mrs_drug_categories.user_entered
   FROM mrs_drug_categories;


ALTER TABLE mrs_drug_categories_vw OWNER TO postgres;

--
-- Name: mrs_drug_prop_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_drug_prop_details (
    property_id numeric(4,0) NOT NULL,
    label character varying(40) NOT NULL,
    description character varying(4000),
    entered_date timestamp without time zone NOT NULL,
    user_entered character varying(40) NOT NULL,
    notes character varying(4000),
    CONSTRAINT mrsdrugprop_entereddate_nn CHECK ((entered_date IS NOT NULL)),
    CONSTRAINT mrsdrugprop_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsdrugprop_userentered_nn CHECK ((user_entered IS NOT NULL))
);


ALTER TABLE mrs_drug_prop_details OWNER TO postgres;

--
-- Name: mrs_drug_prop_details_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_drug_prop_details_hist (
    property_id numeric(4,0),
    label character varying(40),
    description character varying(4000),
    entered_date timestamp without time zone,
    user_entered character varying(40),
    notes character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_drug_prop_details_hist OWNER TO postgres;

--
-- Name: mrs_drug_properties; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_drug_properties (
    drug_code character varying(5) NOT NULL,
    property_id numeric(4,0) NOT NULL
);


ALTER TABLE mrs_drug_properties OWNER TO postgres;

--
-- Name: mrs_drug_properties_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_drug_properties_hist (
    drug_code numeric(4,0),
    property_id numeric(4,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_drug_properties_hist OWNER TO postgres;

--
-- Name: mrs_dsm_codes; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_dsm_codes (
    dsm_code_id character varying(5) NOT NULL,
    version character varying(20) NOT NULL,
    axis_id character varying(3) NOT NULL,
    axis_num character varying(2),
    code character varying(7),
    group_id character varying(2),
    description character varying(200),
    qualifier character varying(200),
    CONSTRAINT mrsdsmcod_axisid_nn CHECK ((axis_id IS NOT NULL)),
    CONSTRAINT mrsdsmcod_dsmcodeid_nn CHECK ((dsm_code_id IS NOT NULL)),
    CONSTRAINT mrsdsmcod_version_nn CHECK ((version IS NOT NULL))
);


ALTER TABLE mrs_dsm_codes OWNER TO postgres;

--
-- Name: mrs_dsm_codes_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_dsm_codes_vw AS
 SELECT mrs_dsm_codes.dsm_code_id,
    mrs_dsm_codes.version,
    mrs_dsm_codes.axis_id,
    mrs_dsm_codes.axis_num,
    mrs_dsm_codes.code,
    mrs_dsm_codes.group_id,
    mrs_dsm_codes.description,
    mrs_dsm_codes.qualifier
   FROM mrs_dsm_codes;


ALTER TABLE mrs_dsm_codes_vw OWNER TO postgres;

--
-- Name: mrs_dsm_groups; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_dsm_groups (
    version character varying(20) NOT NULL,
    group_id character varying(2),
    axis_num character varying(2),
    group_num character varying(2),
    group_description character varying(200),
    CONSTRAINT mrsdsmgro_version_nn CHECK ((version IS NOT NULL))
);


ALTER TABLE mrs_dsm_groups OWNER TO postgres;

--
-- Name: mrs_dsm_groups_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_dsm_groups_vw AS
 SELECT mrs_dsm_groups.version,
    mrs_dsm_groups.group_id,
    mrs_dsm_groups.axis_num,
    mrs_dsm_groups.group_num,
    mrs_dsm_groups.group_description
   FROM mrs_dsm_groups;


ALTER TABLE mrs_dsm_groups_vw OWNER TO postgres;

--
-- Name: mrs_dsm_specifiers; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_dsm_specifiers (
    specifier_id character varying(5) NOT NULL,
    dsm_code_id character varying(5) NOT NULL,
    specifier character varying(200),
    CONSTRAINT mrsdsmspe_dsmcodeid_nn CHECK ((dsm_code_id IS NOT NULL)),
    CONSTRAINT mrsdsmspe_specifierid_nn CHECK ((specifier_id IS NOT NULL))
);


ALTER TABLE mrs_dsm_specifiers OWNER TO postgres;

--
-- Name: mrs_dsm_specifiers_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_dsm_specifiers_vw AS
 SELECT mrs_dsm_specifiers.specifier_id,
    mrs_dsm_specifiers.dsm_code_id,
    mrs_dsm_specifiers.specifier
   FROM mrs_dsm_specifiers;


ALTER TABLE mrs_dsm_specifiers_vw OWNER TO postgres;

--
-- Name: mrs_eeg_devices_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_eeg_devices_hist (
    eeg_id numeric(3,0),
    label character varying(200),
    description character varying(4000),
    site_id character varying(3),
    model character varying(25),
    manufacturer character varying(25),
    station character varying(25),
    software_version character varying(25),
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    input_impedance numeric(4,0),
    number_of_channels numeric(4,0),
    modality_id numeric(4,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_eeg_devices_hist OWNER TO postgres;

--
-- Name: mrs_eeg_devices_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_eeg_devices_vw AS
 SELECT mrs_eeg_devices.eeg_id,
    mrs_eeg_devices.label,
    mrs_eeg_devices.description,
    mrs_eeg_devices.site_id,
    mrs_eeg_devices.model,
    mrs_eeg_devices.manufacturer,
    mrs_eeg_devices.station,
    mrs_eeg_devices.software_version,
    mrs_eeg_devices.start_date,
    mrs_eeg_devices.end_date,
    mrs_eeg_devices.input_impedance,
    mrs_eeg_devices.number_of_channels,
    mrs_eeg_devices.modality_id
   FROM mrs_eeg_devices;


ALTER TABLE mrs_eeg_devices_vw OWNER TO postgres;

--
-- Name: mrs_eeg_series; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_eeg_series (
    series_id character varying(8) NOT NULL,
    eeg_session_id numeric(8,0),
    eeg_study_task_id numeric(6,0),
    sort_order numeric(8,0) DEFAULT 0
);


ALTER TABLE mrs_eeg_series OWNER TO postgres;

--
-- Name: mrs_eeg_series_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_eeg_series_hist (
    series_id character varying(8),
    eeg_session_id numeric(8,0),
    eeg_study_task_id numeric(6,0),
    sort_order numeric(8,0) DEFAULT 0,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_eeg_series_hist OWNER TO postgres;

--
-- Name: mrs_eeg_series_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_eeg_series_vw AS
 SELECT mrs_eeg_series.series_id,
    mrs_eeg_series.eeg_session_id,
    mrs_eeg_series.eeg_study_task_id,
    mrs_eeg_series.sort_order
   FROM mrs_eeg_series;


ALTER TABLE mrs_eeg_series_vw OWNER TO postgres;

--
-- Name: mrs_eeg_sessions; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_eeg_sessions (
    eeg_session_id numeric(8,0) NOT NULL,
    segment_interval character varying(20),
    study_id numeric(4,0),
    eeg_id numeric(3,0) NOT NULL,
    scan_date timestamp without time zone,
    operator_id character varying(40),
    ursi character varying(9),
    station character varying(25),
    cap numeric(3,0),
    capno character varying(50),
    impedance numeric(3,0),
    impedance_other character varying(75),
    amp_gain numeric(3,0),
    amp_lpf numeric(3,0),
    amp_hpf character varying(3),
    eye_tracking_aso character varying(1),
    eye_tracking_spem character varying(1),
    eye_tracking_na character varying(1),
    eye_tracking_pupillometry character varying(1),
    eye_tracking_other character varying(50),
    eye_tracked character varying(1),
    notes character varying(4000),
    label character varying(200) NOT NULL,
    amp_hpft character varying(3),
    CONSTRAINT mrseegses_eegid_nn CHECK ((eeg_id IS NOT NULL))
);


ALTER TABLE mrs_eeg_sessions OWNER TO postgres;

--
-- Name: mrs_eeg_sessions_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_eeg_sessions_hist (
    eeg_session_id numeric(8,0),
    segment_interval character varying(20),
    study_id numeric(4,0),
    eeg_id numeric(3,0),
    scan_date timestamp without time zone,
    operator_id character varying(40),
    ursi character varying(9),
    station character varying(25),
    cap numeric(3,0),
    capno character varying(50),
    impedance numeric(3,0),
    impedance_other character varying(75),
    amp_gain numeric(3,0),
    amp_lpf numeric(3,0),
    amp_hpf character varying,
    eye_tracking_aso character varying(1),
    eye_tracking_spem character varying(1),
    eye_tracking_na character varying(1),
    eye_tracking_pupillometry character varying(1),
    eye_tracking_other character varying(50),
    eye_tracked character varying(1),
    notes character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    label character varying(200)
);


ALTER TABLE mrs_eeg_sessions_hist OWNER TO postgres;

--
-- Name: mrs_eeg_sessions_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_eeg_sessions_vw AS
 SELECT mrs_eeg_sessions.eeg_session_id,
    mrs_eeg_sessions.label,
    mrs_eeg_sessions.segment_interval,
    mrs_eeg_sessions.study_id,
    mrs_eeg_sessions.eeg_id,
    mrs_eeg_sessions.scan_date,
    mrs_eeg_sessions.operator_id,
    mrs_eeg_sessions.ursi,
    mrs_eeg_sessions.station,
    mrs_eeg_sessions.cap,
    mrs_eeg_sessions.capno,
    mrs_eeg_sessions.impedance,
    mrs_eeg_sessions.impedance_other,
    mrs_eeg_sessions.amp_gain,
    mrs_eeg_sessions.amp_lpf,
    mrs_eeg_sessions.amp_hpf,
    mrs_eeg_sessions.eye_tracking_aso,
    mrs_eeg_sessions.eye_tracking_spem,
    mrs_eeg_sessions.eye_tracking_na,
    mrs_eeg_sessions.eye_tracking_pupillometry,
    mrs_eeg_sessions.eye_tracking_other,
    mrs_eeg_sessions.eye_tracked,
    mrs_eeg_sessions.notes
   FROM mrs_eeg_sessions;


ALTER TABLE mrs_eeg_sessions_vw OWNER TO postgres;

--
-- Name: mrs_eeg_study_tasks; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_eeg_study_tasks (
    eeg_study_task_id numeric(6,0) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    CONSTRAINT mrsstutas_description_nn CHECK ((description IS NOT NULL)),
    CONSTRAINT mrsstutas_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsstutas_study_id_nn CHECK ((study_id IS NOT NULL))
);


ALTER TABLE mrs_eeg_study_tasks OWNER TO postgres;

--
-- Name: mrs_eeg_study_tasks_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_eeg_study_tasks_hist (
    eeg_study_task_id numeric(6,0),
    label character varying(200),
    description character varying(4000),
    study_id numeric(4,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_eeg_study_tasks_hist OWNER TO postgres;

--
-- Name: mrs_eeg_study_tasks_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_eeg_study_tasks_vw AS
 SELECT mrs_eeg_study_tasks.eeg_study_task_id,
    mrs_eeg_study_tasks.label,
    mrs_eeg_study_tasks.description,
    mrs_eeg_study_tasks.study_id
   FROM mrs_eeg_study_tasks;


ALTER TABLE mrs_eeg_study_tasks_vw OWNER TO postgres;

--
-- Name: mrs_generic_category_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_generic_category_details (
    drug_code character varying(5) NOT NULL,
    category_id numeric(4,0) NOT NULL
);


ALTER TABLE mrs_generic_category_details OWNER TO postgres;

--
-- Name: mrs_generic_drugs; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_generic_drugs (
    drug_code character varying(5) NOT NULL,
    generic_name character varying(100) NOT NULL,
    description character varying(4000),
    equivalency numeric(8,4),
    notes character varying(4000),
    entered_date timestamp without time zone NOT NULL,
    user_entered character varying(40) NOT NULL,
    CONSTRAINT mrsgdrugs_entereddate_nn CHECK ((entered_date IS NOT NULL)),
    CONSTRAINT mrsgdrugs_genericname_nn CHECK ((generic_name IS NOT NULL)),
    CONSTRAINT mrsgdrugs_userentered_nn CHECK ((user_entered IS NOT NULL))
);


ALTER TABLE mrs_generic_drugs OWNER TO postgres;

--
-- Name: mrs_generic_cat_details_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_generic_cat_details_vw AS
 SELECT a.generic_name,
    b.drug_code,
    a.description AS generic_name_description,
    c.category_name,
    b.category_id,
    c.description AS category_name_description
   FROM mrs_generic_drugs a,
    mrs_generic_category_details b,
    mrs_drug_categories c
  WHERE (((a.drug_code)::text = (b.drug_code)::text) AND (b.category_id = c.category_id));


ALTER TABLE mrs_generic_cat_details_vw OWNER TO postgres;

--
-- Name: mrs_generic_drugs_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_generic_drugs_vw AS
 SELECT mrs_generic_drugs.drug_code,
    mrs_generic_drugs.generic_name,
    mrs_generic_drugs.description,
    mrs_generic_drugs.equivalency,
    mrs_generic_drugs.notes,
    mrs_generic_drugs.entered_date,
    mrs_generic_drugs.user_entered
   FROM mrs_generic_drugs;


ALTER TABLE mrs_generic_drugs_vw OWNER TO postgres;

--
-- Name: mrs_generic_trade_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_generic_trade_details (
    drug_code character varying(5) NOT NULL,
    trade_id numeric(4,0) NOT NULL
);


ALTER TABLE mrs_generic_trade_details OWNER TO postgres;

--
-- Name: mrs_trade_names; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_trade_names (
    trade_id numeric(4,0) NOT NULL,
    trade_name character varying(100) NOT NULL,
    description character varying(4000),
    entered_date timestamp without time zone NOT NULL,
    user_entered character varying(40) NOT NULL,
    notes character varying(4000),
    CONSTRAINT mrstrdnam_entereddate_nn CHECK ((entered_date IS NOT NULL)),
    CONSTRAINT mrstrdnam_trdnam_nn CHECK ((trade_name IS NOT NULL)),
    CONSTRAINT mrstrdnam_userentered_nn CHECK ((user_entered IS NOT NULL))
);


ALTER TABLE mrs_trade_names OWNER TO postgres;

--
-- Name: mrs_generic_trade_details_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_generic_trade_details_vw AS
 SELECT a.generic_name,
    b.drug_code,
    a.description AS generic_name_description,
    a.notes AS generic_name_notes,
    c.trade_name,
    c.notes AS trade_name_notes,
    b.trade_id,
    c.description AS trade_name_description,
    dc.category_name,
    dc.category_id
   FROM mrs_generic_drugs a,
    mrs_generic_trade_details b,
    mrs_trade_names c,
    mrs_generic_category_details gcd,
    mrs_drug_categories dc
  WHERE (((((b.drug_code)::text = (a.drug_code)::text) AND (b.trade_id = c.trade_id)) AND ((gcd.drug_code)::text = (a.drug_code)::text)) AND (gcd.category_id = dc.category_id));


ALTER TABLE mrs_generic_trade_details_vw OWNER TO postgres;

--
-- Name: mrs_image_headers; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_image_headers (
    scan_id numeric(8,0) NOT NULL,
    type_id character varying(20) NOT NULL,
    type_code character varying(1) NOT NULL,
    attribute_name character varying(30) NOT NULL,
    attribute_value character varying(128) NOT NULL,
    posx character varying(6) NOT NULL,
    posy character varying(6) NOT NULL,
    CONSTRAINT mrsimahea_attributename_nn CHECK ((attribute_name IS NOT NULL)),
    CONSTRAINT mrsimahea_attributevalue_nn CHECK ((attribute_value IS NOT NULL)),
    CONSTRAINT mrsimahea_posx_nn CHECK ((posx IS NOT NULL)),
    CONSTRAINT mrsimahea_posy_nn CHECK ((posy IS NOT NULL)),
    CONSTRAINT mrsimahea_scanid_nn CHECK ((scan_id IS NOT NULL)),
    CONSTRAINT mrsimahea_typecode_nn CHECK ((type_code IS NOT NULL)),
    CONSTRAINT mrsimahea_typeid_nn CHECK ((type_id IS NOT NULL))
);


ALTER TABLE mrs_image_headers OWNER TO postgres;

--
-- Name: mrs_image_headers_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_image_headers_hist (
    scan_id numeric(8,0),
    type_id character varying(20),
    type_code character varying(1),
    attribute_name character varying(30),
    attribute_value character varying(128),
    posx character varying(6),
    posy character varying(6),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_image_headers_hist OWNER TO postgres;

--
-- Name: mrs_images; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_images (
    image_id character varying(8) NOT NULL,
    image_file character varying(100) NOT NULL,
    series_id character varying(8) NOT NULL,
    create_date timestamp without time zone,
    audit_date timestamp without time zone,
    audit_user character varying(40),
    audit_notes character varying(4000),
    checksum character varying(25),
    CONSTRAINT mrsimages_imagefile_nn CHECK ((image_file IS NOT NULL)),
    CONSTRAINT mrsimages_seriesid_nn CHECK ((series_id IS NOT NULL))
);


ALTER TABLE mrs_images OWNER TO postgres;

--
-- Name: mrs_images_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_images_hist (
    image_id character varying(8),
    image_file character varying(100),
    series_id character varying(8),
    create_date timestamp without time zone,
    audit_date timestamp without time zone,
    audit_user character varying(40),
    audit_notes character varying(4000),
    checksum character varying(25),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_images_hist OWNER TO postgres;

--
-- Name: mrs_inst_code_responses_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_inst_code_responses_vw AS
 SELECT mrs_instrument_code_responses.label,
    mrs_instrument_code_responses.description,
    mrs_instrument_code_responses.value,
    mrs_instrument_code_responses.question_id,
    mrs_instrument_code_responses.sort_order,
    mrs_instrument_code_responses.target_qid,
    mrs_instrument_code_responses.is_critical,
    mrs_instrument_code_responses.is_hidden,
    mrs_instrument_code_responses.specify_detail,
    mrs_instrument_code_responses.skip_revscore
   FROM mrs_instrument_code_responses;


ALTER TABLE mrs_inst_code_responses_vw OWNER TO postgres;

--
-- Name: mrs_inst_ques_loop_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_inst_ques_loop_id_seq
    START WITH 7
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE mrs_inst_ques_loop_id_seq OWNER TO postgres;

--
-- Name: mrs_instrument_question_jumps; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_instrument_question_jumps (
    question_jump_id integer NOT NULL,
    question_id text NOT NULL,
    target_qid text NOT NULL,
    formula text NOT NULL,
    sort_order numeric NOT NULL
);


ALTER TABLE mrs_instrument_question_jumps OWNER TO ni_developers;

--
-- Name: mrs_inst_question_jumps_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_inst_question_jumps_vw AS
 SELECT mrs_instrument_question_jumps.question_jump_id,
    mrs_instrument_question_jumps.question_id,
    mrs_instrument_question_jumps.target_qid,
    mrs_instrument_question_jumps.formula,
    mrs_instrument_question_jumps.sort_order
   FROM mrs_instrument_question_jumps;


ALTER TABLE mrs_inst_question_jumps_vw OWNER TO ni_developers;

--
-- Name: mrs_instrument_question_score; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_question_score (
    question_id character varying(20) NOT NULL,
    study_id numeric(10,0) NOT NULL,
    selected character(1)
);


ALTER TABLE mrs_instrument_question_score OWNER TO postgres;

--
-- Name: mrs_inst_question_score_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_inst_question_score_vw AS
 SELECT mrs_instrument_question_score.question_id,
    mrs_instrument_question_score.study_id,
    mrs_instrument_question_score.selected
   FROM mrs_instrument_question_score;


ALTER TABLE mrs_inst_question_score_vw OWNER TO postgres;

--
-- Name: mrs_inst_questions_dets_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_inst_questions_dets_vw AS
 SELECT mrs_instrument_section_details.sort_order AS section_sort_order,
    mrs_instrument_questions.question_id,
    mrs_instrument_questions.label,
    mrs_instrument_questions.description,
    mrs_instrument_questions.deletion_date,
    mrs_instrument_questions.example_description,
    mrs_instrument_questions.exclusion_description,
    mrs_instrument_questions.max_instances,
    mrs_instrument_questions.section_id,
    mrs_instrument_questions.sort_order,
    mrs_instrument_questions.dsm_question_type,
    mrs_instrument_questions.disp_label_first,
    mrs_instrument_questions.formula_question_type,
    mrs_instrument_questions.formula,
    mrs_instrument_questions.is_required,
    mrs_instrument_questions.is_sa_hidden,
    mrs_instrument_questions.is_sa_radio_type,
    mrs_instrument_questions.is_auto_complete_type,
    mrs_instrument_questions.sa_label,
    mrs_instrument_questions.autopop_qid,
    mrs_instrument_questions.assumed_value,
    mrs_instrument_questions.response_format_id,
    mrs_instrument_questions.other_option_label,
    mrs_instrument_questions.specify_detail,
    mrs_instrument_questions.multiple_choice,
    mrs_instrument_questions.istextquestion,
    mrs_instrument_questions.isvasquestion,
    mrs_instrument_questions.vas_minimum,
    mrs_instrument_questions.vas_maximum,
    mrs_instrument_questions.vas_interval,
    mrs_instrument_questions.vas_display_extrema,
    mrs_instrument_questions.vas_display_cursor_value,
    mrs_instrument_questions.vas_display_center_mark,
    mrs_instrument_questions.vas_min_label,
    mrs_instrument_questions.vas_mid_label,
    mrs_instrument_questions.vas_max_label,
    mrs_instrument_questions.numeric_response_min,
    mrs_instrument_questions.numeric_response_max,
    mrs_instrument_questions.is_media_upload,
    mrs_instrument_questions.vas_recording_interval,
    mrs_instrument_questions.table_row_id,
    mrs_instrument_questions.table_col_id,
    mrs_instrument_section_details.instrument_id,
    mrs_instrument_questions.is_de_hidden
   FROM (mrs_instrument_questions
     JOIN mrs_instrument_section_details ON ((mrs_instrument_questions.section_id = mrs_instrument_section_details.section_id)));


ALTER TABLE mrs_inst_questions_dets_vw OWNER TO ni_developers;

--
-- Name: mrs_inst_questions_lov_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_inst_questions_lov_vw AS
 SELECT assd.instrument_id,
    aa.label AS instrument_name,
    aa.version,
    aq.question_id,
    aq.id,
    aq.formula_question_type,
    aq.formula,
    aq.sort_order,
    aq.label AS question_label,
    assd.sort_order AS section_sort_order,
    aq.sort_order AS question_sort_order,
    assd.section_id
   FROM ((mrs_instruments aa
     JOIN mrs_instrument_section_details assd ON ((assd.instrument_id = aa.instrument_id)))
     JOIN mrs_instrument_questions aq ON ((aq.section_id = assd.section_id)))
  WHERE (aq.deletion_date IS NULL);


ALTER TABLE mrs_inst_questions_lov_vw OWNER TO ni_developers;

--
-- Name: mrs_inst_questions_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_inst_questions_vw AS
 SELECT mrs_instrument_questions.question_id,
    mrs_instrument_questions.label,
    mrs_instrument_questions.description,
    mrs_instrument_questions.example_description,
    mrs_instrument_questions.exclusion_description,
    mrs_instrument_questions.max_instances,
    mrs_instrument_questions.section_id,
    mrs_instrument_questions.sort_order,
    mrs_instrument_questions.dsm_question_type,
    mrs_instrument_questions.disp_label_first,
    mrs_instrument_questions.formula_question_type,
    mrs_instrument_questions.formula,
    mrs_instrument_questions.deletion_date,
    mrs_instrument_questions.is_required,
    mrs_instrument_questions.is_sa_hidden,
    mrs_instrument_questions.is_sa_radio_type,
    mrs_instrument_questions.sa_label,
    mrs_instrument_questions.is_auto_complete_type,
    mrs_instrument_questions.autopop_qid,
    mrs_instrument_questions.assumed_value,
    mrs_instrument_questions.response_format_id,
    mrs_instrument_questions.other_option_label,
    mrs_instrument_questions.specify_detail,
    mrs_instrument_questions.multiple_choice,
    mrs_instrument_questions.isvasquestion,
    mrs_instrument_questions.vas_minimum,
    mrs_instrument_questions.vas_maximum,
    mrs_instrument_questions.vas_display_extrema,
    mrs_instrument_questions.vas_display_cursor_value,
    mrs_instrument_questions.vas_display_center_mark,
    mrs_instrument_questions.istextquestion,
    mrs_instrument_questions.vas_interval,
    mrs_instrument_questions.vas_min_label,
    mrs_instrument_questions.vas_max_label,
    mrs_instrument_questions.numeric_response_min,
    mrs_instrument_questions.numeric_response_max,
    mrs_instrument_questions.is_media_upload,
    mrs_instrument_questions.vas_recording_interval,
    mrs_instrument_questions.copied_from_question_id,
    mrs_instrument_questions.dx_excluded,
    mrs_instrument_questions.vas_mid_label,
    mrs_instrument_questions.table_row_id,
    mrs_instrument_questions.table_col_id,
    mrs_instrument_questions.is_de_hidden
   FROM mrs_instrument_questions;


ALTER TABLE mrs_inst_questions_vw OWNER TO ni_developers;

--
-- Name: mrs_instrument_sections; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_sections (
    section_id numeric(8,0) NOT NULL,
    label character varying(2000) NOT NULL,
    description character varying(4000),
    parent_id numeric(8,0),
    multi_inst_grid numeric(1,0),
    sa_label character varying(2000),
    sa_description character varying(4000),
    is_likert_grid boolean DEFAULT false,
    is_table_grid boolean,
    CONSTRAINT mrsinssec_label_nn CHECK ((label IS NOT NULL))
);


ALTER TABLE mrs_instrument_sections OWNER TO postgres;

--
-- Name: mrs_inst_section_details_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_inst_section_details_vw AS
 SELECT mrs_instrument_section_details.instrument_id,
    mrs_instrument_section_details.sort_order,
    mrs_instrument_section_details.deletion_date,
    mrs_instrument_section_details.sa_questions_per_page,
    mrs_instrument_sections.section_id,
    mrs_instrument_sections.label,
    mrs_instrument_sections.description,
    mrs_instrument_sections.parent_id,
    mrs_instrument_sections.multi_inst_grid,
    mrs_instrument_sections.sa_label,
    mrs_instrument_sections.sa_description,
    mrs_instrument_sections.is_likert_grid
   FROM (mrs_instrument_section_details
     JOIN mrs_instrument_sections USING (section_id));


ALTER TABLE mrs_inst_section_details_vw OWNER TO ni_developers;

--
-- Name: mrs_inst_sections_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_inst_sections_vw AS
 SELECT mrs_instrument_sections.section_id,
    mrs_instrument_sections.label,
    mrs_instrument_sections.description,
    mrs_instrument_sections.parent_id,
    mrs_instrument_sections.multi_inst_grid,
    mrs_instrument_sections.sa_label,
    mrs_instrument_sections.sa_description,
    mrs_instrument_sections.is_likert_grid,
    mrs_instrument_sections.is_table_grid
   FROM mrs_instrument_sections;


ALTER TABLE mrs_inst_sections_vw OWNER TO ni_developers;

--
-- Name: mrs_inst_studies_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_inst_studies_vw AS
 SELECT mrs_instruments.instrument_id,
    mrs_instruments.label,
    mrs_instruments.salabel,
    mrs_instruments.description,
    mrs_instruments.version,
    mrs_instruments.display_type,
    mrs_instruments.max_per_segment,
    mrs_instruments_studies.study_id,
    mrs_instruments_studies.sa_review,
    mrs_instruments_studies.is_owner,
    mrs_instruments_studies.is_hidden,
    mrs_instruments.copyright_notice,
    mrs_instruments.hide_sa_previous,
    mrs_instruments.skip_question_text,
    mrs_instruments_studies.enforce_schedule,
    mrs_instruments.is_locked,
    mrs_instruments_studies.dx_excluded,
    mrs_instruments_studies.single_entry,
    mrs_instruments_studies.ongoing_entry,
    mrs_instruments.sa_hide_skipped_questions,
    mrs_instruments_studies.instrument_study_id
   FROM (mrs_instruments
     JOIN mrs_instruments_studies ON ((mrs_instruments.instrument_id = mrs_instruments_studies.instrument_id)));


ALTER TABLE mrs_inst_studies_vw OWNER TO ni_developers;

--
-- Name: mrs_inst_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_inst_vw AS
 SELECT mrs_instruments.instrument_id,
    mrs_instruments.label,
    mrs_instruments.description,
    mrs_instruments.version,
    mrs_instruments.display_type,
    mrs_instruments.max_per_segment,
    mrs_instruments.salabel,
    mrs_instruments.copyright_notice,
    mrs_instruments.hide_sa_previous,
    mrs_instruments.skip_question_text,
    mrs_instruments.is_locked,
    mrs_instruments.sa_hide_skipped_questions
   FROM mrs_instruments;


ALTER TABLE mrs_inst_vw OWNER TO ni_developers;

--
-- Name: mrs_instrument_code_responses_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_code_responses_hist (
    label character varying(1000),
    description character varying(4000),
    value numeric(8,0),
    question_id character varying(20),
    sort_order numeric(6,0),
    target_qid character varying,
    is_critical boolean,
    is_hidden boolean,
    specify_detail character(1),
    skip_revscore boolean,
    mod_user character varying(40),
    mod_date timestamp without time zone,
    response_id integer
);


ALTER TABLE mrs_instrument_code_responses_hist OWNER TO postgres;

--
-- Name: mrs_instrument_code_responses_response_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_instrument_code_responses_response_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_instrument_code_responses_response_id_seq OWNER TO ni_developers;

--
-- Name: mrs_instrument_code_responses_response_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_instrument_code_responses_response_id_seq OWNED BY mrs_instrument_code_responses.response_id;


--
-- Name: mrs_instrument_question_jumps_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_instrument_question_jumps_hist (
    question_jump_id integer,
    question_id text,
    target_qid text,
    formula text,
    sort_order numeric,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_instrument_question_jumps_hist OWNER TO ni_developers;

--
-- Name: mrs_instrument_question_jumps_question_jump_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_instrument_question_jumps_question_jump_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_instrument_question_jumps_question_jump_id_seq OWNER TO ni_developers;

--
-- Name: mrs_instrument_question_jumps_question_jump_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_instrument_question_jumps_question_jump_id_seq OWNED BY mrs_instrument_question_jumps.question_jump_id;


--
-- Name: mrs_instrument_question_loops; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_question_loops (
    loop_id numeric(8,0) NOT NULL,
    question_id character varying(20) NOT NULL,
    target_qid character varying(20) NOT NULL,
    operand1 character varying(20) NOT NULL,
    operand2 character varying(20) NOT NULL,
    test_operator character varying(3) NOT NULL
);


ALTER TABLE mrs_instrument_question_loops OWNER TO postgres;

--
-- Name: mrs_instrument_question_loops_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_question_loops_hist (
    loop_id numeric(8,0) NOT NULL,
    question_id character varying(20) NOT NULL,
    target_qid character varying(20) NOT NULL,
    operand1 character varying(20) NOT NULL,
    operand2 character varying(20) NOT NULL,
    test_operator character varying(3) NOT NULL,
    mod_user character varying(35) NOT NULL,
    mod_date timestamp without time zone
);


ALTER TABLE mrs_instrument_question_loops_hist OWNER TO postgres;

--
-- Name: mrs_instrument_question_loops_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_instrument_question_loops_vw AS
 SELECT mrs_instrument_question_loops.loop_id,
    mrs_instrument_question_loops.question_id,
    mrs_instrument_question_loops.target_qid,
    mrs_instrument_question_loops.operand1,
    mrs_instrument_question_loops.operand2,
    mrs_instrument_question_loops.test_operator
   FROM mrs_instrument_question_loops;


ALTER TABLE mrs_instrument_question_loops_vw OWNER TO postgres;

--
-- Name: mrs_instrument_question_media; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_question_media (
    question_media_id integer NOT NULL,
    question_id character varying NOT NULL,
    media_type_id integer NOT NULL,
    sort_order integer NOT NULL,
    url character varying NOT NULL,
    "position" numeric(1,0) NOT NULL,
    attributes character varying,
    caption character varying
);


ALTER TABLE mrs_instrument_question_media OWNER TO postgres;

--
-- Name: mrs_instrument_question_media_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_question_media_hist (
    question_media_id integer,
    question_id character varying,
    media_type_id integer,
    sort_order integer,
    url character varying,
    "position" numeric(1,0),
    attributes character varying,
    caption character varying,
    mod_user character varying,
    mod_date timestamp with time zone
);


ALTER TABLE mrs_instrument_question_media_hist OWNER TO postgres;

--
-- Name: mrs_instrument_question_media_question_media_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_instrument_question_media_question_media_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_instrument_question_media_question_media_id_seq OWNER TO postgres;

--
-- Name: mrs_instrument_question_media_question_media_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: postgres
--

ALTER SEQUENCE mrs_instrument_question_media_question_media_id_seq OWNED BY mrs_instrument_question_media.question_media_id;


--
-- Name: mrs_instrument_question_media_types; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_question_media_types (
    media_type_id integer NOT NULL,
    label character varying NOT NULL,
    description character varying,
    html_wrapper character varying
);


ALTER TABLE mrs_instrument_question_media_types OWNER TO postgres;

--
-- Name: mrs_instrument_question_media_types_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_question_media_types_hist (
    media_type_id integer,
    label character varying,
    description character varying,
    html_wrapper character varying,
    mod_user character varying,
    mod_date timestamp with time zone
);


ALTER TABLE mrs_instrument_question_media_types_hist OWNER TO postgres;

--
-- Name: mrs_instrument_question_media_types_media_type_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_instrument_question_media_types_media_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_instrument_question_media_types_media_type_id_seq OWNER TO postgres;

--
-- Name: mrs_instrument_question_media_types_media_type_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: postgres
--

ALTER SEQUENCE mrs_instrument_question_media_types_media_type_id_seq OWNED BY mrs_instrument_question_media_types.media_type_id;


--
-- Name: mrs_instrument_question_media_types_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_instrument_question_media_types_vw AS
 SELECT mt.media_type_id,
    mt.label,
    mt.description,
    mt.html_wrapper
   FROM mrs_instrument_question_media_types mt;


ALTER TABLE mrs_instrument_question_media_types_vw OWNER TO postgres;

--
-- Name: mrs_instrument_question_media_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_instrument_question_media_vw AS
 SELECT m.question_media_id,
    m.question_id,
    m.media_type_id,
    m.sort_order,
    m.url,
    m."position",
    m.attributes,
    m.caption,
    mt.label AS type_label,
    mt.description AS type_description,
    mt.html_wrapper
   FROM (mrs_instrument_question_media m
     JOIN mrs_instrument_question_media_types mt ON ((mt.media_type_id = m.media_type_id)));


ALTER TABLE mrs_instrument_question_media_vw OWNER TO postgres;

--
-- Name: mrs_instrument_question_response_format; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_question_response_format (
    format_id numeric(3,0) NOT NULL,
    label character varying(20),
    example character varying(50),
    regex character varying
);


ALTER TABLE mrs_instrument_question_response_format OWNER TO postgres;

--
-- Name: mrs_instrument_question_response_format_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_instrument_question_response_format_vw AS
 SELECT mrs_instrument_question_response_format.format_id,
    mrs_instrument_question_response_format.label,
    mrs_instrument_question_response_format.example,
    mrs_instrument_question_response_format.regex
   FROM mrs_instrument_question_response_format;


ALTER TABLE mrs_instrument_question_response_format_vw OWNER TO ni_developers;

--
-- Name: mrs_instrument_questions_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_questions_hist (
    question_id character varying(20),
    label character varying,
    description character varying(4000),
    example_description character varying(4000),
    exclusion_description character varying(4000),
    max_instances numeric(3,0),
    section_id numeric(8,0),
    sort_order numeric(8,0),
    dsm_question_type character varying(1),
    disp_label_first character varying(1),
    formula_question_type character varying(1),
    formula text,
    deletion_date timestamp without time zone,
    is_required boolean,
    is_sa_hidden boolean,
    is_sa_radio_type boolean,
    sa_label character varying,
    is_auto_complete_type boolean,
    autopop_qid character varying(20),
    assumed_value character varying(100),
    response_format_id numeric(3,0),
    other_option_label character varying(50),
    specify_detail character(1),
    multiple_choice character(1),
    isvasquestion boolean,
    vas_minimum numeric(3,0),
    vas_maximum numeric(4,0),
    vas_display_extrema boolean,
    vas_display_cursor_value boolean,
    vas_display_center_mark boolean,
    istextquestion boolean,
    vas_interval numeric(3,0),
    vas_min_label character varying(40),
    vas_max_label character varying(40),
    numeric_response_min numeric(10,3),
    numeric_response_max numeric(10,3),
    is_media_upload boolean,
    vas_recording_interval integer,
    copied_from_question_id character varying(20),
    dx_excluded boolean,
    mod_user character varying(40),
    mod_date timestamp without time zone,
    vas_mid_label character varying(40),
    table_row_id numeric(10,0),
    table_col_id numeric(10,0),
    is_de_hidden boolean
);


ALTER TABLE mrs_instrument_questions_hist OWNER TO postgres;

--
-- Name: mrs_instrument_questions_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_instrument_questions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_instrument_questions_id_seq OWNER TO postgres;

--
-- Name: mrs_instrument_questions_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: postgres
--

ALTER SEQUENCE mrs_instrument_questions_id_seq OWNED BY mrs_instrument_questions.id;


--
-- Name: mrs_instrument_section_details_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_section_details_hist (
    instrument_id numeric(8,0),
    section_id numeric(8,0),
    sort_order numeric(2,0),
    deletion_date timestamp without time zone,
    sa_questions_per_page numeric,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_instrument_section_details_hist OWNER TO postgres;

--
-- Name: mrs_instrument_sections_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instrument_sections_hist (
    section_id numeric(8,0),
    label character varying(2000),
    description character varying(4000),
    parent_id numeric(8,0),
    multi_inst_grid numeric(1,0),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    sa_label character varying(2000),
    sa_description character varying(4000),
    is_likert_grid boolean,
    is_table_grid boolean
);


ALTER TABLE mrs_instrument_sections_hist OWNER TO postgres;

--
-- Name: mrs_instrument_table_cols; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_instrument_table_cols (
    col_id numeric(10,0) NOT NULL,
    table_id numeric(10,0) NOT NULL,
    label text,
    sort_order integer
);


ALTER TABLE mrs_instrument_table_cols OWNER TO ni_developers;

--
-- Name: mrs_instrument_table_cols_counter; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_instrument_table_cols_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_instrument_table_cols_counter OWNER TO ni_developers;

--
-- Name: mrs_instrument_table_cols_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_instrument_table_cols_hist (
    col_id numeric(10,0),
    table_id numeric(10,0),
    label text,
    sort_order integer,
    mod_user character varying(50),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_instrument_table_cols_hist OWNER TO ni_developers;

--
-- Name: mrs_instrument_table_cols_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_instrument_table_cols_vw AS
 SELECT mrs_instrument_table_cols.col_id,
    mrs_instrument_table_cols.table_id,
    mrs_instrument_table_cols.label,
    mrs_instrument_table_cols.sort_order
   FROM mrs_instrument_table_cols;


ALTER TABLE mrs_instrument_table_cols_vw OWNER TO ni_developers;

--
-- Name: mrs_instrument_table_rows; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_instrument_table_rows (
    row_id numeric(10,0) NOT NULL,
    table_id numeric(10,0) NOT NULL,
    label text,
    sort_order integer
);


ALTER TABLE mrs_instrument_table_rows OWNER TO ni_developers;

--
-- Name: mrs_instrument_table_rows_counter; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_instrument_table_rows_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_instrument_table_rows_counter OWNER TO ni_developers;

--
-- Name: mrs_instrument_table_rows_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_instrument_table_rows_hist (
    row_id numeric(10,0),
    table_id numeric(10,0),
    label text,
    sort_order integer,
    mod_user character varying(50),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_instrument_table_rows_hist OWNER TO ni_developers;

--
-- Name: mrs_instrument_table_rows_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_instrument_table_rows_vw AS
 SELECT mrs_instrument_table_rows.row_id,
    mrs_instrument_table_rows.table_id,
    mrs_instrument_table_rows.label,
    mrs_instrument_table_rows.sort_order
   FROM mrs_instrument_table_rows;


ALTER TABLE mrs_instrument_table_rows_vw OWNER TO ni_developers;

--
-- Name: mrs_instrument_tables; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_instrument_tables (
    table_id numeric(10,0) NOT NULL,
    section_id numeric(10,0) NOT NULL,
    num_rows integer,
    num_cols integer,
    label text,
    description text,
    sort_order integer
);


ALTER TABLE mrs_instrument_tables OWNER TO ni_developers;

--
-- Name: mrs_instrument_tables_counter; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_instrument_tables_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_instrument_tables_counter OWNER TO ni_developers;

--
-- Name: mrs_instrument_tables_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_instrument_tables_hist (
    table_id numeric(10,0),
    section_id numeric(10,0),
    num_rows integer,
    num_cols integer,
    label text,
    description text,
    sort_order integer,
    mod_user character varying(50),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_instrument_tables_hist OWNER TO ni_developers;

--
-- Name: mrs_instrument_tables_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_instrument_tables_vw AS
 SELECT mrs_instrument_tables.table_id,
    mrs_instrument_tables.section_id,
    mrs_instrument_tables.num_rows,
    mrs_instrument_tables.num_cols,
    mrs_instrument_tables.label,
    mrs_instrument_tables.description,
    mrs_instrument_tables.sort_order
   FROM mrs_instrument_tables;


ALTER TABLE mrs_instrument_tables_vw OWNER TO ni_developers;

--
-- Name: mrs_instruments_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_instruments_hist (
    instrument_id numeric(8,0),
    label character varying(200),
    description character varying(4000),
    version character varying(12),
    display_type numeric(1,0),
    max_per_segment numeric(3,0),
    salabel character varying(200),
    copyright_notice character varying,
    hide_sa_previous boolean,
    skip_question_text character varying(200),
    is_locked numeric(1,0),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    sa_hide_skipped_questions boolean
);


ALTER TABLE mrs_instruments_hist OWNER TO ni_developers;

--
-- Name: mrs_instruments_studies_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_instruments_studies_hist (
    instrument_id numeric(8,0) NOT NULL,
    study_id numeric(8,0) NOT NULL,
    is_owner numeric(1,0) DEFAULT 1,
    mod_user character varying(40),
    mod_date timestamp without time zone,
    is_hidden numeric(1,0),
    enforce_schedule boolean,
    dx_excluded boolean,
    single_entry boolean,
    ongoing_entry boolean,
    sa_review boolean,
    instrument_study_id integer
);


ALTER TABLE mrs_instruments_studies_hist OWNER TO postgres;

--
-- Name: mrs_instruments_studies_instrument_study_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_instruments_studies_instrument_study_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_instruments_studies_instrument_study_id_seq OWNER TO ni_developers;

--
-- Name: mrs_instruments_studies_instrument_study_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_instruments_studies_instrument_study_id_seq OWNED BY mrs_instruments_studies.instrument_study_id;


--
-- Name: mrs_legacy_sharing_rules; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_legacy_sharing_rules (
    sharing_rule_id numeric(8,0) NOT NULL,
    study_id numeric(4,0),
    instrument_id numeric(8,0),
    rater_id numeric(5,0),
    segment_interval character varying(20),
    segment_instance numeric(3,0),
    site_id character varying(3),
    ursi character varying(9),
    assessment_id numeric(8,0),
    entry_code character varying(1),
    dataentry_type_id numeric(8,0),
    source_type numeric(3,0),
    approved_by character varying(40) NOT NULL,
    approval_date timestamp without time zone NOT NULL,
    deleted_by character varying(40),
    deletion_date timestamp without time zone,
    note text
);


ALTER TABLE mrs_legacy_sharing_rules OWNER TO postgres;

--
-- Name: mrs_legacy_sharing_rules_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_legacy_sharing_rules_hist (
    sharing_rule_id numeric(8,0) NOT NULL,
    study_id numeric(4,0),
    instrument_id numeric(8,0),
    rater_id numeric(5,0),
    segment_interval character varying(20),
    segment_instance numeric(3,0),
    site_id character varying(3),
    ursi character varying(9),
    assessment_id numeric(8,0),
    entry_code character varying(1),
    dataentry_type_id numeric(8,0),
    source_type numeric(3,0),
    approved_by character varying(40) NOT NULL,
    approval_date timestamp without time zone NOT NULL,
    deleted_by character varying(40),
    deletion_date timestamp without time zone,
    note text,
    mod_user character varying(40) NOT NULL,
    mod_date timestamp without time zone NOT NULL
);


ALTER TABLE mrs_legacy_sharing_rules_hist OWNER TO postgres;

--
-- Name: mrs_legacy_sharing_rules_studies_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_legacy_sharing_rules_studies_hist (
    sharing_rule_id numeric(8,0) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    note text,
    mod_user character varying(40) NOT NULL,
    mod_date timestamp without time zone NOT NULL
);


ALTER TABLE mrs_legacy_sharing_rules_studies_hist OWNER TO postgres;

--
-- Name: mrs_mail; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_mail (
    mail_id integer NOT NULL,
    study_id numeric,
    use_coins_template boolean DEFAULT true NOT NULL,
    from_label character varying,
    recipients character varying,
    reply_to_address character varying,
    subject character varying,
    text_body character varying,
    html_body character varying,
    disclamer_text character varying,
    menu_link_key character varying,
    send_time timestamp without time zone NOT NULL,
    sent timestamp without time zone
);


ALTER TABLE mrs_mail OWNER TO ni_developers;

--
-- Name: mrs_mail_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_mail_hist (
    mail_id integer,
    study_id numeric,
    use_coins_template boolean,
    from_label character varying,
    recipients character varying,
    reply_to_address character varying,
    subject character varying,
    text_body character varying,
    html_body character varying,
    disclamer_text character varying,
    menu_link_key character varying,
    send_time timestamp without time zone,
    sent timestamp without time zone,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_mail_hist OWNER TO ni_developers;

--
-- Name: mrs_mail_mail_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_mail_mail_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_mail_mail_id_seq OWNER TO ni_developers;

--
-- Name: mrs_mail_mail_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_mail_mail_id_seq OWNED BY mrs_mail.mail_id;


--
-- Name: mrs_mail_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_mail_vw AS
 SELECT mrs_mail.mail_id,
    mrs_mail.study_id,
    mrs_mail.use_coins_template,
    mrs_mail.from_label,
    mrs_mail.recipients,
    mrs_mail.reply_to_address,
    mrs_mail.subject,
    mrs_mail.text_body,
    mrs_mail.html_body,
    mrs_mail.disclamer_text,
    mrs_mail.menu_link_key,
    mrs_mail.send_time,
    mrs_mail.sent
   FROM mrs_mail;


ALTER TABLE mrs_mail_vw OWNER TO ni_developers;

--
-- Name: mrs_mcic_basics_sbjx_map; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_mcic_basics_sbjx_map (
    sbj_id numeric,
    ursi character varying(9)
);


ALTER TABLE mrs_mcic_basics_sbjx_map OWNER TO postgres;

--
-- Name: mrs_mcic_sbjx_bx_share_int; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_mcic_sbjx_bx_share_int (
    site character varying(3000),
    subject_type character varying(3000),
    ursi character varying(3000),
    age_at_fmr character varying(3000),
    age_at_smr character varying(3000),
    sex character varying(3000),
    hand character varying(3000),
    hgt character varying(3000),
    wgt character varying(3000),
    ethnic character varying(3000),
    race character varying(3000),
    sub_edu character varying(3000),
    sub_ses character varying(3000),
    wrat3rt character varying(3000),
    addl_cols_tbd character varying(3000),
    dad_edu character varying(3000),
    mom_edu character varying(3000),
    parent_ses character varying(3000),
    dose_confidence character varying(3000),
    years_since_diag character varying(3000),
    years_since_treatment character varying(3000),
    neuroleptic_naive character varying(3000),
    site_ref character varying(3000),
    bf1 character varying(3000),
    ca6 character varying(3000),
    antipsychdy_typ character varying(3000),
    antipsychdy_atyp character varying(3000),
    antipsychdy_cloz character varying(3000),
    on_antipsych character varying(3000),
    anti_psych_type character varying(3000),
    sans_sap_date character varying(3000),
    fmr_to_symptoms character varying(3000),
    fmri_hallucinations character varying(3000),
    gr_affect character varying(3000),
    gr_alogi character varying(3000),
    gr_avol character varying(3000),
    gr_anhed character varying(3000),
    gr_attn character varying(3000),
    gr_delsn character varying(3000),
    gr_hallcn character varying(3000),
    gr_bizr character varying(3000),
    gr_postht character varying(3000),
    pos_symptoms character varying(3000),
    neg_symptoms character varying(3000),
    disorg_symptoms character varying(3000),
    sa_tot character varying(3000),
    ba_tot character varying(3000),
    aims_tot character varying(3000),
    calgary_tot character varying(3000),
    alcohol_dep character varying(3000),
    barb_dep character varying(3000),
    opiod_dep character varying(3000),
    cocaine_dep character varying(3000),
    amphet_dep character varying(3000),
    thc_dep character varying(3000),
    length_of_illness character varying(3000),
    years_since_first_symptoms character varying(3000),
    antipsychdy_typ_debug character varying(3000),
    antipsychdy_atyp_debug character varying(3000),
    antipsychdy_cloz_debug character varying(3000),
    cur_psy_dis_diag character varying(3000),
    cur_mood_dis_diag character varying(3000),
    past_psy_dis_diag character varying(3000),
    past_mood_dis_diag character varying(3000),
    cur_alc_rel_diag character varying(3000),
    past_alc_rel_diag character varying(3000),
    cur_cann_rel_diag character varying(3000),
    past_cann_rel_diag character varying(3000),
    all_other_cur_diag character varying(3000),
    all_other_past_diag character varying(3000),
    t1_structural character varying(3000),
    t2_structural character varying(3000),
    dti character varying(3000),
    fmri_sensori_motor character varying(3000),
    fmri_sirp character varying(3000),
    fmri_breathhold character varying(3000),
    fmri_aod character varying(3000),
    dti_fieldmag character varying(3000),
    dti_fieldphase character varying(3000),
    fmri_fieldmag character varying(3000),
    fmri_fieldphase character varying(3000),
    length_of_illness_calc character varying(3000),
    nb1 character varying(200),
    nb7 character varying(200),
    nb8 character varying(200),
    nb9 character varying(200),
    nb21 character varying(200),
    nb22 character varying(200),
    nb23 character varying(200),
    nb103 character varying(200),
    nb24 character varying(200),
    nb88 character varying(200),
    nb89 character varying(200),
    nb25 character varying(200),
    nb26 character varying(200),
    nb27 character varying(200),
    nb28 character varying(200),
    nb29 character varying(200),
    nb30 character varying(200),
    nb31 character varying(200),
    nb32 character varying(200),
    nb33 character varying(200),
    nb35 character varying(200),
    nb36 character varying(200),
    nb37 character varying(200),
    nb38 character varying(200),
    nb39 character varying(200),
    nb42 character varying(200),
    nb45 character varying(200),
    nb46 character varying(200),
    nb47 character varying(200),
    nb48 character varying(200),
    nb49 character varying(200),
    nb50 character varying(200),
    nb51 character varying(200),
    nb52 character varying(200),
    nb53 character varying(200),
    nb54 character varying(200),
    nb55 character varying(200),
    nb56 character varying(200),
    nb57 character varying(200),
    nb58 character varying(200),
    nb63 character varying(200),
    nb64 character varying(200),
    nb65 character varying(200),
    nb66 character varying(200),
    nb79 character varying(200),
    nb80 character varying(200),
    nb81 character varying(200),
    nb82 character varying(200),
    nb87 character varying(200),
    nb90 character varying(200),
    nb91 character varying(200),
    nb92 character varying(200),
    nb93 character varying(200),
    nb94 character varying(200),
    nb100 character varying(200),
    nb101 character varying(200),
    nb102 character varying(200),
    nb99 character varying(200),
    nb104 character varying(200),
    nb95 character varying(200),
    nb96 character varying(200),
    nb97 character varying(200),
    nb98 character varying(200)
);


ALTER TABLE mrs_mcic_sbjx_bx_share_int OWNER TO postgres;

--
-- Name: mrs_mcic_basics_share_int_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_mcic_basics_share_int_vw AS
 SELECT
        CASE
            WHEN ((s.site)::text = 'MRN'::text) THEN 'A'::character varying
            ELSE s.site
        END AS site,
    s.subject_type,
    s.ursi,
        CASE
            WHEN ((s.age_at_fmr)::text = '.'::text) THEN s.age_at_smr
            ELSE s.age_at_fmr
        END AS age,
    s.sex,
    s.hand,
    s.hgt,
    s.wgt,
    s.ethnic,
    s.race,
    s.sub_edu,
    s.sub_ses,
    s.wrat3rt,
    s.dad_edu,
    s.mom_edu,
    s.parent_ses,
    s.neuroleptic_naive,
    s.antipsychdy_typ,
    s.antipsychdy_atyp,
    s.antipsychdy_cloz,
    s.on_antipsych,
    s.years_since_diag,
    s.years_since_treatment,
    s.years_since_first_symptoms,
    s.length_of_illness,
    s.length_of_illness_calc,
    s.fmr_to_symptoms,
    s.fmri_hallucinations,
    s.gr_affect,
    s.gr_alogi,
    s.gr_avol,
    s.gr_anhed,
    s.gr_attn,
    s.gr_delsn,
    s.gr_hallcn,
    s.gr_bizr,
    s.gr_postht,
    s.pos_symptoms,
    s.neg_symptoms,
    s.disorg_symptoms,
    s.sa_tot,
    s.ba_tot,
    s.aims_tot,
    s.calgary_tot,
    s.cur_psy_dis_diag,
    s.past_psy_dis_diag,
    s.cur_mood_dis_diag,
    s.past_mood_dis_diag,
    s.cur_alc_rel_diag,
    s.past_alc_rel_diag,
    s.cur_cann_rel_diag,
    s.past_cann_rel_diag,
    s.all_other_cur_diag,
    s.all_other_past_diag,
    s.t1_structural,
    s.t2_structural,
    s.dti,
    s.dti_fieldmag,
    s.dti_fieldphase,
    s.fmri_sensori_motor,
    s.fmri_sirp,
    s.fmri_breathhold,
    s.fmri_aod,
    s.fmri_fieldmag,
    s.fmri_fieldphase,
    s.nb1,
    s.nb7,
    s.nb8,
    s.nb9,
    s.nb21,
    s.nb22,
    s.nb23,
    s.nb103,
    s.nb24,
    s.nb88,
    s.nb89,
    s.nb25,
    s.nb26,
    s.nb27,
    s.nb28,
    s.nb29,
    s.nb30,
    s.nb31,
    s.nb32,
    s.nb33,
    s.nb35,
    s.nb36,
    s.nb37,
    s.nb38,
    s.nb39,
    s.nb42,
    s.nb45,
    s.nb46,
    s.nb47,
    s.nb48,
    s.nb49,
    s.nb50,
    s.nb51,
    s.nb52,
    s.nb53,
    s.nb54,
    s.nb55,
    s.nb56,
    s.nb57,
    s.nb58,
    s.nb63,
    s.nb64,
    s.nb65,
    s.nb66,
    s.nb79,
    s.nb80,
    s.nb81,
    s.nb82,
    s.nb87,
    s.nb90,
    s.nb91,
    s.nb92,
    s.nb93,
    s.nb94,
    s.nb100,
    s.nb101,
    s.nb102,
    s.nb99,
    s.nb104,
    s.nb95,
    s.nb96,
    s.nb97,
    s.nb98
   FROM mrs_mcic_sbjx_bx_share_int s,
    mrs_mcic_basics_sbjx_map m
  WHERE ((((s.ursi)::text !~~ 'T%'::text) AND ((s.ursi)::text !~~ 'N%'::text)) AND ((s.ursi)::text = (m.ursi)::text));


ALTER TABLE mrs_mcic_basics_share_int_vw OWNER TO postgres;

--
-- Name: mrs_mcic_sbjx_bx_share; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_mcic_sbjx_bx_share (
    site character varying(3000),
    subject_type character varying(3000),
    ursi character varying(3000),
    age_at_fmr character varying(3000),
    age_at_smr character varying(3000),
    sex character varying(3000),
    hand character varying(3000),
    hgt character varying(3000),
    wgt character varying(3000),
    ethnic character varying(3000),
    race character varying(3000),
    sub_edu character varying(3000),
    sub_ses character varying(3000),
    wrat3rt character varying(3000),
    addl_cols_tbd character varying(3000),
    dad_edu character varying(3000),
    mom_edu character varying(3000),
    parent_ses character varying(3000),
    dose_confidence character varying(3000),
    years_since_diag character varying(3000),
    years_since_treatment character varying(3000),
    neuroleptic_naive character varying(3000),
    site_ref character varying(3000),
    bf1 character varying(3000),
    ca6 character varying(3000),
    antipsychdy_typ character varying(3000),
    antipsychdy_atyp character varying(3000),
    antipsychdy_cloz character varying(3000),
    on_antipsych character varying(3000),
    anti_psych_type character varying(3000),
    sans_sap_date character varying(3000),
    fmr_to_symptoms character varying(3000),
    fmri_hallucinations character varying(3000),
    gr_affect character varying(3000),
    gr_alogi character varying(3000),
    gr_avol character varying(3000),
    gr_anhed character varying(3000),
    gr_attn character varying(3000),
    gr_delsn character varying(3000),
    gr_hallcn character varying(3000),
    gr_bizr character varying(3000),
    gr_postht character varying(3000),
    pos_symptoms character varying(3000),
    neg_symptoms character varying(3000),
    disorg_symptoms character varying(3000),
    sa_tot character varying(3000),
    ba_tot character varying(3000),
    aims_tot character varying(3000),
    calgary_tot character varying(3000),
    alcohol_dep character varying(3000),
    barb_dep character varying(3000),
    opiod_dep character varying(3000),
    cocaine_dep character varying(3000),
    amphet_dep character varying(3000),
    thc_dep character varying(3000),
    length_of_illness character varying(3000),
    years_since_first_symptoms character varying(3000),
    antipsychdy_typ_debug character varying(3000),
    antipsychdy_atyp_debug character varying(3000),
    antipsychdy_cloz_debug character varying(3000),
    cur_psy_dis_diag character varying(3000),
    cur_mood_dis_diag character varying(3000),
    past_psy_dis_diag character varying(3000),
    past_mood_dis_diag character varying(3000),
    cur_alc_rel_diag character varying(3000),
    past_alc_rel_diag character varying(3000),
    cur_cann_rel_diag character varying(3000),
    past_cann_rel_diag character varying(3000),
    all_other_cur_diag character varying(3000),
    all_other_past_diag character varying(3000),
    t1_structural character varying(3000),
    t2_structural character varying(3000),
    dti character varying(3000),
    fmri_sensori_motor character varying(3000),
    fmri_sirp character varying(3000),
    fmri_breathhold character varying(3000),
    fmri_aod character varying(3000),
    dti_fieldmag character varying(3000),
    dti_fieldphase character varying(3000),
    fmri_fieldmag character varying(3000),
    fmri_fieldphase character varying(3000),
    length_of_illness_calc character varying(3000),
    nb1 character varying(200),
    nb7 character varying(200),
    nb8 character varying(200),
    nb9 character varying(200),
    nb21 character varying(200),
    nb22 character varying(200),
    nb23 character varying(200),
    nb103 character varying(200),
    nb24 character varying(200),
    nb88 character varying(200),
    nb89 character varying(200),
    nb25 character varying(200),
    nb26 character varying(200),
    nb27 character varying(200),
    nb28 character varying(200),
    nb29 character varying(200),
    nb30 character varying(200),
    nb31 character varying(200),
    nb32 character varying(200),
    nb33 character varying(200),
    nb35 character varying(200),
    nb36 character varying(200),
    nb37 character varying(200),
    nb38 character varying(200),
    nb39 character varying(200),
    nb42 character varying(200),
    nb45 character varying(200),
    nb46 character varying(200),
    nb47 character varying(200),
    nb48 character varying(200),
    nb49 character varying(200),
    nb50 character varying(200),
    nb51 character varying(200),
    nb52 character varying(200),
    nb53 character varying(200),
    nb54 character varying(200),
    nb55 character varying(200),
    nb56 character varying(200),
    nb57 character varying(200),
    nb58 character varying(200),
    nb63 character varying(200),
    nb64 character varying(200),
    nb65 character varying(200),
    nb66 character varying(200),
    nb79 character varying(200),
    nb80 character varying(200),
    nb81 character varying(200),
    nb82 character varying(200),
    nb87 character varying(200),
    nb90 character varying(200),
    nb91 character varying(200),
    nb92 character varying(200),
    nb93 character varying(200),
    nb94 character varying(200),
    nb100 character varying(200),
    nb101 character varying(200),
    nb102 character varying(200),
    nb99 character varying(200),
    nb104 character varying(200),
    nb95 character varying(200),
    nb96 character varying(200),
    nb97 character varying(200),
    nb98 character varying(200)
);


ALTER TABLE mrs_mcic_sbjx_bx_share OWNER TO postgres;

--
-- Name: mrs_mcic_basics_share_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_mcic_basics_share_vw AS
 SELECT
        CASE s.site
            WHEN 'MRN'::text THEN 'A'::character varying
            ELSE s.site
        END AS site,
    s.subject_type,
    m.sbj_id,
        CASE
            WHEN ((s.age_at_fmr)::text = '.'::text) THEN s.age_at_smr
            ELSE s.age_at_fmr
        END AS age,
    s.sex,
    s.hand,
    s.hgt,
    s.wgt,
    s.ethnic,
    s.race,
    s.sub_edu,
    s.sub_ses,
    s.length_of_illness,
    s.length_of_illness_calc,
    s.wrat3rt,
    s.dad_edu,
    s.mom_edu,
    s.parent_ses,
    s.neuroleptic_naive,
    s.antipsychdy_typ,
    s.antipsychdy_atyp,
    s.antipsychdy_cloz,
    s.on_antipsych,
    s.fmr_to_symptoms,
    s.fmri_hallucinations,
    s.gr_affect,
    s.gr_alogi,
    s.gr_avol,
    s.gr_anhed,
    s.gr_attn,
    s.gr_delsn,
    s.gr_hallcn,
    s.gr_bizr,
    s.gr_postht,
    s.pos_symptoms,
    s.neg_symptoms,
    s.disorg_symptoms,
    s.sa_tot,
    s.ba_tot,
    s.aims_tot,
    s.calgary_tot,
    s.cur_psy_dis_diag,
    s.past_psy_dis_diag,
    s.cur_mood_dis_diag,
    s.past_mood_dis_diag,
    s.cur_alc_rel_diag,
    s.past_alc_rel_diag,
    s.cur_cann_rel_diag,
    s.past_cann_rel_diag,
    s.all_other_cur_diag,
    s.all_other_past_diag,
    s.t1_structural,
    s.t2_structural,
    s.dti,
    s.dti_fieldmag,
    s.dti_fieldphase,
    s.fmri_sensori_motor,
    s.fmri_sirp,
    s.fmri_breathhold,
    s.fmri_aod,
    s.fmri_fieldmag,
    s.fmri_fieldphase,
    s.nb1,
    s.nb7,
    s.nb8,
    s.nb9,
    s.nb21,
    s.nb22,
    s.nb23,
    s.nb103,
    s.nb24,
    s.nb88,
    s.nb89,
    s.nb25,
    s.nb26,
    s.nb27,
    s.nb28,
    s.nb29,
    s.nb30,
    s.nb31,
    s.nb32,
    s.nb33,
    s.nb35,
    s.nb36,
    s.nb37,
    s.nb38,
    s.nb39,
    s.nb42,
    s.nb45,
    s.nb46,
    s.nb47,
    s.nb48,
    s.nb49,
    s.nb50,
    s.nb51,
    s.nb52,
    s.nb53,
    s.nb54,
    s.nb55,
    s.nb56,
    s.nb57,
    s.nb58,
    s.nb63,
    s.nb64,
    s.nb65,
    s.nb66,
    s.nb79,
    s.nb80,
    s.nb81,
    s.nb82,
    s.nb87,
    s.nb90,
    s.nb91,
    s.nb92,
    s.nb93,
    s.nb94,
    s.nb100,
    s.nb101,
    s.nb102,
    s.nb99,
    s.nb104,
    s.nb95,
    s.nb96,
    s.nb97,
    s.nb98
   FROM mrs_mcic_sbjx_bx_share s,
    mrs_mcic_basics_sbjx_map m
  WHERE ((((s.ursi)::text !~~ 'T%'::text) AND ((s.ursi)::text !~~ 'N%'::text)) AND ((s.ursi)::text = (m.ursi)::text));


ALTER TABLE mrs_mcic_basics_share_vw OWNER TO postgres;

--
-- Name: mrs_mcic_sbjx_bx; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_mcic_sbjx_bx (
    site character varying(20),
    subject_type character varying(200),
    family_history character varying(200),
    ursi character varying(9),
    birth_date timestamp without time zone,
    fmr_date character varying(200),
    smr_date character varying(200),
    neuropsych_date character varying(200),
    age_at_fmr character varying(4),
    age_at_smr character varying(4),
    sex character varying(1),
    hand character varying(200),
    hgt character varying(200),
    wgt character varying(200),
    bmi character varying(200),
    ethnic character varying(200),
    race character varying(200),
    sub_edu character varying(200),
    sub_ses character varying(200),
    marital_stat character varying(200),
    nicotine_use character varying(200),
    wrat3rt character varying(200),
    dad_edu character varying(200),
    mom_edu character varying(200),
    parent_ses character varying(200),
    dose_confidence character varying(200),
    years_since_diag character varying(200),
    years_since_treatment character varying(200),
    antipsychdy_typ character varying(200),
    antipsychdy_atyp character varying(200),
    antipsychdy_cloz character varying(200),
    on_antipsych character varying(200),
    anti_psych_type character varying(200),
    anti_psychdose_typ character varying(200),
    anti_psychdose_atyp character varying(200),
    anti_psychdose_cloz character varying(200),
    sans_sap_date character varying(200),
    fmr_to_symptoms character varying(200),
    fmri_hallucinations character varying(200),
    gr_affect character varying(200),
    gr_alogi character varying(200),
    gr_avol character varying(200),
    gr_anhed character varying(200),
    gr_attn character varying(200),
    gr_delsn character varying(200),
    gr_hallcn character varying(200),
    gr_bizr character varying(200),
    gr_postht character varying(200),
    pos_symptoms character varying(200),
    neg_symptoms character varying(200),
    disorg_symptoms character varying(200),
    sa_tot character varying(200),
    ba_tot character varying(200),
    aims_tot character varying(200),
    calgary_tot character varying(200),
    on_antipark character varying(200),
    antipark_dose character varying(200),
    alcohol_dep character varying(200),
    alcohol_abuse character varying(200),
    barb_dep character varying(200),
    barb_abuse character varying(200),
    opiod_dep character varying(200),
    opiod_abuse character varying(200),
    cocaine_dep character varying(200),
    amphet_dep character varying(200),
    amphet_abuse character varying(200),
    pcp_abuse character varying(200),
    halluc_abuse character varying(200),
    thc_dep character varying(200),
    thc_abuse character varying(200),
    cocaine_abuse character varying(200)
);


ALTER TABLE mrs_mcic_sbjx_bx OWNER TO postgres;

--
-- Name: mrs_mcic_basics_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_mcic_basics_vw AS
 SELECT mrs_mcic_sbjx_bx.site,
    mrs_mcic_sbjx_bx.subject_type,
    mrs_mcic_sbjx_bx.family_history,
    mrs_mcic_sbjx_bx.ursi,
    mrs_mcic_sbjx_bx.birth_date,
    mrs_mcic_sbjx_bx.fmr_date,
    mrs_mcic_sbjx_bx.smr_date,
    mrs_mcic_sbjx_bx.neuropsych_date,
    mrs_mcic_sbjx_bx.age_at_fmr,
    mrs_mcic_sbjx_bx.age_at_smr,
    mrs_mcic_sbjx_bx.sex,
    mrs_mcic_sbjx_bx.hand,
    mrs_mcic_sbjx_bx.hgt,
    mrs_mcic_sbjx_bx.wgt,
    mrs_mcic_sbjx_bx.bmi,
    mrs_mcic_sbjx_bx.ethnic,
    mrs_mcic_sbjx_bx.race,
    mrs_mcic_sbjx_bx.sub_edu,
    mrs_mcic_sbjx_bx.sub_ses,
    mrs_mcic_sbjx_bx.marital_stat,
    mrs_mcic_sbjx_bx.nicotine_use,
    mrs_mcic_sbjx_bx.wrat3rt,
    mrs_mcic_sbjx_bx.dad_edu,
    mrs_mcic_sbjx_bx.mom_edu,
    mrs_mcic_sbjx_bx.parent_ses,
    mrs_mcic_sbjx_bx.dose_confidence,
    mrs_mcic_sbjx_bx.years_since_diag,
    mrs_mcic_sbjx_bx.years_since_treatment,
    mrs_mcic_sbjx_bx.antipsychdy_typ,
    mrs_mcic_sbjx_bx.antipsychdy_atyp,
    mrs_mcic_sbjx_bx.antipsychdy_cloz,
    mrs_mcic_sbjx_bx.on_antipsych,
    mrs_mcic_sbjx_bx.anti_psych_type,
    mrs_mcic_sbjx_bx.anti_psychdose_typ,
    mrs_mcic_sbjx_bx.anti_psychdose_atyp,
    mrs_mcic_sbjx_bx.anti_psychdose_cloz,
    mrs_mcic_sbjx_bx.sans_sap_date,
    mrs_mcic_sbjx_bx.fmr_to_symptoms,
    mrs_mcic_sbjx_bx.fmri_hallucinations,
    mrs_mcic_sbjx_bx.gr_affect,
    mrs_mcic_sbjx_bx.gr_alogi,
    mrs_mcic_sbjx_bx.gr_avol,
    mrs_mcic_sbjx_bx.gr_anhed,
    mrs_mcic_sbjx_bx.gr_attn,
    mrs_mcic_sbjx_bx.gr_delsn,
    mrs_mcic_sbjx_bx.gr_hallcn,
    mrs_mcic_sbjx_bx.gr_bizr,
    mrs_mcic_sbjx_bx.gr_postht,
    mrs_mcic_sbjx_bx.pos_symptoms,
    mrs_mcic_sbjx_bx.neg_symptoms,
    mrs_mcic_sbjx_bx.disorg_symptoms,
    mrs_mcic_sbjx_bx.sa_tot,
    mrs_mcic_sbjx_bx.ba_tot,
    mrs_mcic_sbjx_bx.aims_tot,
    mrs_mcic_sbjx_bx.calgary_tot,
    mrs_mcic_sbjx_bx.on_antipark,
    mrs_mcic_sbjx_bx.antipark_dose,
    mrs_mcic_sbjx_bx.alcohol_dep,
    mrs_mcic_sbjx_bx.alcohol_abuse,
    mrs_mcic_sbjx_bx.barb_dep,
    mrs_mcic_sbjx_bx.barb_abuse,
    mrs_mcic_sbjx_bx.opiod_dep,
    mrs_mcic_sbjx_bx.opiod_abuse,
    mrs_mcic_sbjx_bx.cocaine_dep,
    mrs_mcic_sbjx_bx.amphet_dep,
    mrs_mcic_sbjx_bx.amphet_abuse,
    mrs_mcic_sbjx_bx.pcp_abuse,
    mrs_mcic_sbjx_bx.halluc_abuse,
    mrs_mcic_sbjx_bx.thc_dep,
    mrs_mcic_sbjx_bx.thc_abuse,
    mrs_mcic_sbjx_bx.cocaine_abuse
   FROM mrs_mcic_sbjx_bx
  WHERE (((mrs_mcic_sbjx_bx.ursi)::text !~~ 'T%'::text) AND ((mrs_mcic_sbjx_bx.ursi)::text !~~ 'N%'::text));


ALTER TABLE mrs_mcic_basics_vw OWNER TO postgres;

--
-- Name: mrs_mcic_sbjx_ebx; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_mcic_sbjx_ebx (
    ursi character varying(9),
    mcic1 character varying(200),
    mcic2 character varying(200),
    mcic3 character varying(200),
    mcic4 character varying(200),
    mcic5 character varying(200),
    mcic6 character varying(200),
    mcic7 character varying(200),
    mcic8 character varying(200),
    mcic9 character varying(200),
    mcic10 character varying(200),
    mcic11 character varying(200),
    mcic12 character varying(200),
    mcic13 character varying(200),
    mcic14 character varying(200),
    mcic15 character varying(200),
    mcic16 character varying(200),
    mcic17 character varying(200),
    mcic18 character varying(200),
    mcic19 character varying(200),
    mcic20 character varying(200),
    mcic21 character varying(200),
    mcic22 character varying(200),
    mcic23 character varying(200),
    mcic24 character varying(200),
    mcic25 character varying(200),
    mcic26 character varying(200),
    mcic27 character varying(200),
    mcic28 character varying(200),
    mcic29 character varying(200),
    mcic30 character varying(200),
    mcic31 character varying(200),
    mcic32 character varying(200),
    mcic33 character varying(200),
    mcic34 character varying(200),
    mcic35 character varying(200),
    mcic36 character varying(200),
    mcic37 character varying(200),
    mcic38 character varying(200),
    mcic39 character varying(200),
    mcic40 character varying(200),
    mcic41 character varying(200),
    mcic42 character varying(200),
    mcic43 character varying(200),
    mcic44 character varying(200),
    mcic45 character varying(200),
    mcic46 character varying(200),
    mcic47 character varying(200),
    mcic48 character varying(200),
    mcic49 character varying(200),
    mcic50 character varying(200),
    mcic51 character varying(200),
    mcic52 character varying(200),
    mcic53 character varying(200),
    mcic54 character varying(200),
    mcic55 character varying(200),
    mcic56 character varying(200),
    mcic57 character varying(200),
    mcic58 character varying(200),
    mcic59 character varying(200),
    mcic60 character varying(200),
    mcic61 character varying(200),
    mcic62 character varying(200),
    mcic63 character varying(200),
    mcic64 character varying(200),
    mcic65 character varying(200),
    mcic66 character varying(200),
    mcic67 character varying(200),
    mcic68 character varying(200),
    mcic69 character varying(200),
    mcic70 character varying(200),
    mcic71 character varying(200),
    mcic72 character varying(200),
    mcic73 character varying(200),
    mcic74 character varying(200),
    mcic75 character varying(200),
    mcic76 character varying(200),
    mcic77 character varying(200),
    mcic78 character varying(200),
    mcic79 character varying(200),
    mcic80 character varying(200),
    mcic81 character varying(200),
    mcic82 character varying(200),
    mcic83 character varying(200),
    mcic84 character varying(200),
    mcic85 character varying(200),
    mcic86 character varying(200),
    mcic87 character varying(200),
    mcic88 character varying(200),
    mcic89 character varying(200),
    mcic90 character varying(200),
    mcic91 character varying(200),
    mcic92 character varying(200),
    mcic93 character varying(200),
    mcic94 character varying(200),
    mcic95 character varying(200),
    mcic96 character varying(200),
    mcic97 character varying(200),
    mcic98 character varying(200),
    mcic99 character varying(200),
    mcic100 character varying(200),
    mcic101 character varying(200),
    mcic102 character varying(200),
    mcic103 character varying(200),
    mcic104 character varying(200),
    mcic105 character varying(200),
    mcic106 character varying(200),
    mcic107 character varying(200),
    mcic108 character varying(200),
    mcic109 character varying(200),
    mcic110 character varying(200),
    mcic111 character varying(200),
    mcic112 character varying(200),
    mcic113 character varying(200),
    mcic114 character varying(200),
    mcic115 character varying(200),
    mcic116 character varying(200),
    mcic117 character varying(200),
    mcic118 character varying(200),
    mcic119 character varying(200),
    mcic120 character varying(200),
    mcic121 character varying(200),
    mcic122 character varying(200),
    mcic123 character varying(200),
    mcic124 character varying(200),
    mcic125 character varying(200),
    mcic126 character varying(200),
    mcic127 character varying(200),
    mcic128 character varying(200),
    mcic129 character varying(200),
    mcic130 character varying(200),
    mcic131 character varying(200),
    mcic132 character varying(200),
    mcic133 character varying(200),
    mcic134 character varying(200),
    mcic135 character varying(200),
    mcic136 character varying(200),
    mcic137 character varying(200),
    mcic138 character varying(200),
    mcic139 character varying(200),
    mcic140 character varying(200),
    mcic141 character varying(200),
    mcic142 character varying(200),
    mcic143 character varying(200),
    mcic144 character varying(200),
    mcic145 character varying(200),
    mcic146 character varying(200),
    mcic147 character varying(200),
    mcic148 character varying(200),
    mcic149 character varying(200),
    mcic150 character varying(200),
    mcic151 character varying(200),
    mcic152 character varying(200),
    mcic153 character varying(200),
    mcic154 character varying(200),
    mcic155 character varying(200),
    mcic156 character varying(200),
    mcic157 character varying(200),
    mcic158 character varying(200),
    mcic159 character varying(200),
    mcic160 character varying(200),
    mcic161 character varying(200),
    mcic162 character varying(200),
    mcic163 character varying(200),
    mcic164 character varying(200),
    mcic165 character varying(200),
    mcic166 character varying(200),
    mcic167 character varying(200),
    mcic168 character varying(200),
    mcic169 character varying(200),
    mcic170 character varying(200),
    mcic171 character varying(200),
    mcic172 character varying(200),
    mcic173 character varying(200),
    mcic174 character varying(200),
    mcic175 character varying(200),
    mcic176 character varying(200),
    mcic177 character varying(200),
    mcic178 character varying(200),
    mcic179 character varying(200),
    mcic180 character varying(200),
    mcic181 character varying(200),
    mcic182 character varying(200),
    mcic183 character varying(200),
    mcic184 character varying(200),
    mcic185 character varying(200),
    mcic186 character varying(200),
    mcic187 character varying(200),
    mcic188 character varying(200),
    mcic189 character varying(200),
    mcic190 character varying(200),
    mcic191 character varying(200),
    mcic192 character varying(200),
    mcic193 character varying(200),
    mcic194 character varying(200),
    mcic195 character varying(200),
    mcic196 character varying(200),
    mcic197 character varying(200),
    mcic198 character varying(200),
    mcic199 character varying(200),
    mcic200 character varying(200),
    mcic201 character varying(200),
    mcic202 character varying(200),
    mcic203 character varying(200),
    mcic204 character varying(200),
    mcic205 character varying(200),
    mcic206 character varying(200),
    mcic207 character varying(200),
    mcic208 character varying(200),
    mcic209 character varying(200),
    mcic210 character varying(200),
    mcic211 character varying(200),
    mcic212 character varying(200),
    mcic213 character varying(200),
    mcic214 character varying(200),
    mcic215 character varying(200),
    mcic216 character varying(200),
    mcic217 character varying(200),
    mcic218 character varying(200),
    mcic219 character varying(200),
    mcic220 character varying(200),
    mcic221 character varying(200),
    mcic222 character varying(200),
    mcic223 character varying(200),
    mcic224 character varying(200),
    mcic225 character varying(200),
    mcic226 character varying(200),
    mcic227 character varying(200),
    mcic228 character varying(200),
    mcic229 character varying(200),
    mcic230 character varying(200),
    mcic231 character varying(200),
    mcic232 character varying(200),
    mcic233 character varying(200),
    mcic234 character varying(200),
    mcic235 character varying(200),
    mcic236 character varying(200),
    mcic237 character varying(200),
    mcic238 character varying(200),
    mcic239 character varying(200),
    mcic240 character varying(200),
    mcic241 character varying(200),
    mcic242 character varying(200),
    mcic243 character varying(200),
    mcic244 character varying(200),
    mcic245 character varying(200),
    mcic246 character varying(200),
    mcic247 character varying(200),
    mcic248 character varying(200),
    mcic249 character varying(200),
    mcic250 character varying(200),
    mcic251 character varying(200),
    mcic252 character varying(200),
    mcic253 character varying(200),
    mcic254 character varying(200),
    mcic255 character varying(200),
    mcic256 character varying(200),
    mcic257 character varying(200),
    mcic258 character varying(200),
    mcic259 character varying(200),
    mcic260 character varying(200),
    mcic261 character varying(200),
    mcic262 character varying(200),
    mcic263 character varying(200),
    mcic264 character varying(200),
    mcic265 character varying(200),
    mcic266 character varying(200),
    mcic267 character varying(200),
    mcic268 character varying(200),
    mcic269 character varying(200),
    mcic270 character varying(200),
    mcic271 character varying(200),
    mcic272 character varying(200),
    mcic273 character varying(200),
    mcic274 character varying(200),
    mcic275 character varying(200),
    mcic276 character varying(200),
    mcic277 character varying(200),
    mcic278 character varying(200),
    mcic279 character varying(200),
    mcic280 character varying(200),
    mcic281 character varying(200),
    mcic282 character varying(200),
    mcic283 character varying(200),
    mcic284 character varying(200),
    mcic285 character varying(200),
    mcic286 character varying(200),
    mcic287 character varying(200),
    mcic288 character varying(200),
    mcic289 character varying(200),
    mcic290 character varying(200),
    mcic291 character varying(200),
    mcic292 character varying(200),
    mcic293 character varying(200),
    mcic294 character varying(200),
    mcic295 character varying(200),
    mcic296 character varying(200),
    mcic297 character varying(200),
    mcic298 character varying(200),
    mcic299 character varying(200),
    mcic300 character varying(200),
    mcic301 character varying(200),
    mcic302 character varying(200),
    mcic303 character varying(200),
    mcic304 character varying(200),
    mcic305 character varying(200),
    mcic306 character varying(200),
    mcic307 character varying(200),
    mcic308 character varying(200),
    mcic309 character varying(200),
    mcic310 character varying(200),
    mcic311 character varying(200),
    mcic312 character varying(200),
    mcic313 character varying(200),
    mcic314 character varying(200),
    mcic315 character varying(200),
    mcic316 character varying(200),
    mcic317 character varying(200),
    mcic318 character varying(200),
    mcic319 character varying(200),
    mcic320 character varying(200),
    mcic321 character varying(200),
    mcic322 character varying(200),
    mcic323 character varying(200),
    mcic324 character varying(200),
    mcic325 character varying(200),
    mcic326 character varying(200),
    mcic327 character varying(200),
    mcic328 character varying(200),
    mcic329 character varying(200),
    mcic330 character varying(200),
    mcic331 character varying(200),
    mcic332 character varying(200),
    mcic333 character varying(200),
    mcic334 character varying(200),
    mcic335 character varying(200),
    mcic336 character varying(200),
    mcic337 character varying(200),
    mcic338 character varying(200),
    mcic339 character varying(200),
    mcic340 character varying(200),
    mcic341 character varying(200),
    mcic342 character varying(200),
    mcic343 character varying(200),
    mcic344 character varying(200),
    mcic345 character varying(200),
    mcic346 character varying(200),
    mcic347 character varying(200),
    mcic348 character varying(200),
    mcic349 character varying(200),
    mcic350 character varying(200),
    mcic351 character varying(200),
    mcic352 character varying(200),
    mcic353 character varying(200),
    mcic354 character varying(200),
    mcic355 character varying(200),
    mcic356 character varying(200),
    mcic357 character varying(200),
    mcic358 character varying(200),
    mcic359 character varying(200),
    mcic360 character varying(200),
    mcic361 character varying(200),
    mcic362 character varying(200),
    mcic363 character varying(200),
    mcic364 character varying(200),
    mcic365 character varying(200),
    mcic366 character varying(200),
    mcic367 character varying(200),
    mcic368 character varying(200),
    mcic369 character varying(200),
    mcic370 character varying(200),
    mcic371 character varying(200),
    mcic372 character varying(200),
    mcic373 character varying(200),
    mcic374 character varying(200),
    mcic375 character varying(200),
    mcic376 character varying(200),
    mcic377 character varying(200),
    mcic378 character varying(200),
    mcic379 character varying(200),
    mcic380 character varying(200),
    mcic381 character varying(200),
    mcic382 character varying(200),
    mcic383 character varying(200),
    mcic384 character varying(200),
    mcic385 character varying(200),
    mcic386 character varying(200),
    mcic387 character varying(200),
    mcic388 character varying(200),
    mcic389 character varying(200),
    mcic390 character varying(200),
    mcic391 character varying(200),
    mcic392 character varying(200),
    mcic393 character varying(200),
    mcic394 character varying(200),
    mcic395 character varying(200),
    mcic396 character varying(200),
    mcic397 character varying(200),
    mcic398 character varying(200),
    mcic399 character varying(200),
    mcic400 character varying(200),
    mcic401 character varying(200),
    mcic402 character varying(200),
    mcic403 character varying(200),
    mcic404 character varying(200),
    mcic405 character varying(200),
    mcic406 character varying(200),
    mcic407 character varying(200),
    mcic408 character varying(200),
    mcic409 character varying(200),
    mcic410 character varying(200),
    mcic411 character varying(200),
    mcic412 character varying(200),
    mcic413 character varying(200),
    mcic414 character varying(200),
    mcic415 character varying(200),
    mcic416 character varying(200),
    mcic417 character varying(200),
    mcic418 character varying(200),
    am1 character varying(200),
    am10 character varying(200),
    am11 character varying(200),
    am12 character varying(200),
    am13 character varying(200),
    am14 character varying(200),
    am2 character varying(200),
    am3 character varying(200),
    am4 character varying(200),
    am5 character varying(200),
    am6 character varying(200),
    am7 character varying(200),
    am8 character varying(200),
    am9 character varying(200),
    ba1 character varying(200),
    ba2 character varying(200),
    ba3 character varying(200),
    ba4 character varying(200),
    ba5 character varying(200),
    cd1 character varying(200),
    cd2 character varying(200),
    cd3 character varying(200),
    cd4 character varying(200),
    cd5 character varying(200),
    cd6 character varying(200),
    cd7 character varying(200),
    cd8 character varying(200),
    cd9 character varying(200),
    cb1 character varying(200),
    cb2 character varying(200),
    cb3 character varying(200),
    cb4 character varying(200),
    cb5 character varying(200),
    cb6 character varying(200),
    cb7 character varying(200),
    cb8 character varying(200),
    cb9 character varying(200),
    cb10 character varying(200),
    cb11 character varying(200),
    cb12 character varying(200),
    cb13 character varying(200),
    cb14 character varying(200),
    cb15 character varying(200),
    cb16 character varying(200),
    cb17 character varying(200),
    cb18 character varying(200),
    cb19 character varying(200),
    cb20 character varying(200),
    cb21 character varying(200),
    cb22 character varying(200),
    cb23 character varying(200),
    cb24 character varying(200),
    cb25 character varying(200),
    cb26 character varying(200),
    cb27 character varying(200),
    cb28 character varying(200),
    cb29 character varying(200),
    cb30 character varying(200),
    cb31 character varying(200),
    cb32 character varying(200),
    cb33 character varying(200),
    cb34 character varying(200),
    cb35 character varying(200),
    cb36 character varying(200),
    cb37 character varying(200),
    cb38 character varying(200),
    cb39 character varying(200),
    cb40 character varying(200),
    cb41 character varying(200),
    cb42 character varying(200),
    ne1 character varying(200),
    ne2 character varying(200),
    ne3 character varying(200),
    ne4 character varying(200),
    ne5 character varying(200),
    ne6 character varying(200),
    ne7 character varying(200),
    ne8 character varying(200),
    ne9 character varying(200),
    ne10 character varying(200),
    ne11 character varying(200),
    ne12 character varying(200),
    ne13 character varying(200),
    ne14 character varying(200),
    ne15 character varying(200),
    ne16 character varying(200),
    ne17 character varying(200),
    ne18 character varying(200),
    ne19 character varying(200),
    ne20 character varying(200),
    ne21 character varying(200),
    ne22 character varying(200),
    ne23 character varying(200),
    ne24 character varying(200),
    ne25 character varying(200),
    ne26 character varying(200),
    ne27 character varying(200),
    ne28 character varying(200),
    ne29 character varying(200),
    ne30 character varying(200),
    ne31 character varying(200),
    ne32 character varying(200),
    ne33 character varying(200),
    ne34 character varying(200),
    ne35 character varying(200),
    ne36 character varying(200),
    ne37 character varying(200),
    ne38 character varying(200),
    ne39 character varying(200),
    ne40 character varying(200),
    ne41 character varying(200),
    ne42 character varying(200),
    ne43 character varying(200),
    ne44 character varying(200),
    ne45 character varying(200),
    ne46 character varying(200),
    ne47 character varying(200),
    ne48 character varying(200),
    ne49 character varying(200),
    ne50 character varying(200),
    ne51 character varying(200),
    ne52 character varying(200),
    ne53 character varying(200),
    ne54 character varying(200),
    ne55 character varying(200),
    ne56 character varying(200),
    ne57 character varying(200),
    ne58 character varying(200),
    ne59 character varying(200),
    ne60 character varying(200),
    ne61 character varying(200),
    ne62 character varying(200),
    ne63 character varying(200),
    ne64 character varying(200),
    ne65 character varying(200),
    ne66 character varying(200),
    ne67 character varying(200),
    ne68 character varying(200),
    ne69 character varying(200),
    ne70 character varying(200),
    ne71 character varying(200),
    ne72 character varying(200),
    ne73 character varying(200),
    ne74 character varying(200),
    ne75 character varying(200),
    ne76 character varying(200),
    ne77 character varying(200),
    ne78 character varying(200),
    ne79 character varying(200),
    ne80 character varying(200),
    ne81 character varying(200),
    nb1 character varying(200),
    nb2 character varying(200),
    nb3 character varying(200),
    nb4 character varying(200),
    nb5 character varying(200),
    nb6 character varying(200),
    nb7 character varying(200),
    nb8 character varying(200),
    nb9 character varying(200),
    nb10 character varying(200),
    nb11 character varying(200),
    nb12 character varying(200),
    nb13 character varying(200),
    nb14 character varying(200),
    nb15 character varying(200),
    nb16 character varying(200),
    nb17 character varying(200),
    nb18 character varying(200),
    nb19 character varying(200),
    nb20 character varying(200),
    nb21 character varying(200),
    nb22 character varying(200),
    nb23 character varying(200),
    nb24 character varying(200),
    nb25 character varying(200),
    nb26 character varying(200),
    nb27 character varying(200),
    nb28 character varying(200),
    nb29 character varying(200),
    nb30 character varying(200),
    nb31 character varying(200),
    nb32 character varying(200),
    nb33 character varying(200),
    nb34 character varying(200),
    nb35 character varying(200),
    nb36 character varying(200),
    nb37 character varying(200),
    nb38 character varying(200),
    nb39 character varying(200),
    nb40 character varying(200),
    nb41 character varying(200),
    nb42 character varying(200),
    nb43 character varying(200),
    nb44 character varying(200),
    nb45 character varying(200),
    nb46 character varying(200),
    nb47 character varying(200),
    nb48 character varying(200),
    nb49 character varying(200),
    nb50 character varying(200),
    nb51 character varying(200),
    nb52 character varying(200),
    nb53 character varying(200),
    nb54 character varying(200),
    nb55 character varying(200),
    nb56 character varying(200),
    nb57 character varying(200),
    nb58 character varying(200),
    nb59 character varying(200),
    nb60 character varying(200),
    nb61 character varying(200),
    nb62 character varying(200),
    nb63 character varying(200),
    nb64 character varying(200),
    nb65 character varying(200),
    nb66 character varying(200),
    nb67 character varying(200),
    nb68 character varying(200),
    nb69 character varying(200),
    nb70 character varying(200),
    nb71 character varying(200),
    nb72 character varying(200),
    nb73 character varying(200),
    nb74 character varying(200),
    nb75 character varying(200),
    nb76 character varying(200),
    nb77 character varying(200),
    nb78 character varying(200),
    nb79 character varying(200),
    nb80 character varying(200),
    nb81 character varying(200),
    nb82 character varying(200),
    nb83 character varying(200),
    nb84 character varying(200),
    nb85 character varying(200),
    nb86 character varying(200),
    nb87 character varying(200),
    nb88 character varying(200),
    nb89 character varying(200),
    nb90 character varying(200),
    nb91 character varying(200),
    nb92 character varying(200),
    nb93 character varying(200),
    nb94 character varying(200),
    nb95 character varying(200),
    nb96 character varying(200),
    nb97 character varying(200),
    nb98 character varying(200),
    nb99 character varying(200),
    nb100 character varying(200),
    nb101 character varying(200),
    nb102 character varying(200),
    nb103 character varying(200),
    nb104 character varying(200),
    nb105 character varying(200),
    v3 character varying(200),
    v4 character varying(200),
    v5 character varying(200),
    v6 character varying(200),
    v7 character varying(200),
    v8 character varying(200),
    v9 character varying(200),
    v10 character varying(200),
    v11 character varying(200),
    v12 character varying(200),
    v13 character varying(200),
    v14 character varying(200),
    v15 character varying(200),
    v16 character varying(200),
    v17 character varying(200),
    v18 character varying(200),
    v19 character varying(200),
    v20 character varying(200),
    v21 character varying(200),
    v22 character varying(200),
    v23 character varying(200),
    v24 character varying(200),
    v25 character varying(200),
    v26 character varying(200),
    v27 character varying(200),
    v28 character varying(200),
    v29 character varying(200),
    v30 character varying(200),
    v31 character varying(200),
    v32 character varying(200),
    v33 character varying(200),
    v34 character varying(200),
    v35 character varying(200),
    v36 character varying(200),
    v37 character varying(200),
    v38 character varying(200),
    v39 character varying(200),
    v40 character varying(200),
    v41 character varying(200),
    v42 character varying(200),
    v43 character varying(200),
    v44 character varying(200),
    v45 character varying(200),
    v46 character varying(200),
    v47 character varying(200),
    v48 character varying(200),
    v49 character varying(200),
    v50 character varying(200),
    v51 character varying(200),
    v52 character varying(200),
    v53 character varying(200),
    v56 character varying(200),
    v54 character varying(200),
    v55 character varying(200),
    v57 character varying(200),
    v58 character varying(200),
    v59 character varying(200),
    v60 character varying(200),
    v61 character varying(200),
    v62 character varying(200),
    v63 character varying(200),
    v64 character varying(200),
    v65 character varying(200),
    v66 character varying(200),
    v67 character varying(200),
    v68 character varying(200),
    v69 character varying(200),
    v70 character varying(200),
    v71 character varying(200),
    v72 character varying(200),
    v73 character varying(200),
    v74 character varying(200),
    v75 character varying(200),
    v76 character varying(200),
    v77 character varying(200),
    v78 character varying(200),
    v79 character varying(200),
    v80 character varying(200),
    v81 character varying(200),
    v82 character varying(200),
    v83 character varying(200),
    ss11 character varying(200),
    ss12 character varying(200),
    ss13 character varying(200),
    ss14 character varying(200),
    ss15 character varying(200),
    ss16 character varying(200),
    ss17 character varying(200),
    ss18 character varying(200),
    ss19 character varying(200),
    ss20 character varying(200),
    ss21 character varying(200),
    ss22 character varying(200),
    ss23 character varying(200),
    ss25 character varying(200),
    ss26 character varying(200),
    ss24 character varying(200),
    ss27 character varying(200),
    ss28 character varying(200),
    ss29 character varying(200),
    ss30 character varying(200),
    ss31 character varying(200),
    ss32 character varying(200),
    ss33 character varying(200),
    ss34 character varying(200),
    ss35 character varying(200),
    sa1 character varying(200),
    sa2 character varying(200),
    sa3 character varying(200),
    sa4 character varying(200),
    sa5 character varying(200),
    sa6 character varying(200),
    sa7 character varying(200),
    sa8 character varying(200),
    sa9 character varying(200),
    sa10 character varying(200),
    sa11 character varying(200),
    sa12 character varying(200),
    sa13 character varying(200),
    sa14 character varying(200),
    sa15 character varying(200),
    sa16 character varying(200),
    sa17 character varying(200),
    sa18 character varying(200),
    sa19 character varying(200),
    sa20 character varying(200),
    sa21 character varying(200),
    sa22 character varying(200),
    sa23 character varying(200),
    sa24 character varying(200)
);


ALTER TABLE mrs_mcic_sbjx_ebx OWNER TO postgres;

--
-- Name: mrs_mcic_extbasics_share_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_mcic_extbasics_share_vw AS
 SELECT mrs_mcic_sbjx_ebx.ursi,
    mrs_mcic_sbjx_ebx.mcic1,
    mrs_mcic_sbjx_ebx.mcic2,
    mrs_mcic_sbjx_ebx.mcic3,
    mrs_mcic_sbjx_ebx.mcic4,
    mrs_mcic_sbjx_ebx.mcic5,
    mrs_mcic_sbjx_ebx.mcic6,
    mrs_mcic_sbjx_ebx.mcic7,
    mrs_mcic_sbjx_ebx.mcic8,
    mrs_mcic_sbjx_ebx.mcic9,
    mrs_mcic_sbjx_ebx.mcic10,
    mrs_mcic_sbjx_ebx.mcic11,
    mrs_mcic_sbjx_ebx.mcic12,
    mrs_mcic_sbjx_ebx.mcic13,
    mrs_mcic_sbjx_ebx.mcic14,
    mrs_mcic_sbjx_ebx.mcic15,
    mrs_mcic_sbjx_ebx.mcic16,
    mrs_mcic_sbjx_ebx.mcic17,
    mrs_mcic_sbjx_ebx.mcic18,
    mrs_mcic_sbjx_ebx.mcic19,
    mrs_mcic_sbjx_ebx.mcic20,
    mrs_mcic_sbjx_ebx.mcic21,
    mrs_mcic_sbjx_ebx.mcic22,
    mrs_mcic_sbjx_ebx.mcic23,
    mrs_mcic_sbjx_ebx.mcic24,
    mrs_mcic_sbjx_ebx.mcic25,
    mrs_mcic_sbjx_ebx.mcic26,
    mrs_mcic_sbjx_ebx.mcic27,
    mrs_mcic_sbjx_ebx.mcic28,
    mrs_mcic_sbjx_ebx.mcic29,
    mrs_mcic_sbjx_ebx.mcic30,
    mrs_mcic_sbjx_ebx.mcic31,
    mrs_mcic_sbjx_ebx.mcic32,
    mrs_mcic_sbjx_ebx.mcic33,
    mrs_mcic_sbjx_ebx.mcic34,
    mrs_mcic_sbjx_ebx.mcic35,
    mrs_mcic_sbjx_ebx.mcic36,
    mrs_mcic_sbjx_ebx.mcic37,
    mrs_mcic_sbjx_ebx.mcic38,
    mrs_mcic_sbjx_ebx.mcic39,
    mrs_mcic_sbjx_ebx.mcic40,
    mrs_mcic_sbjx_ebx.mcic41,
    mrs_mcic_sbjx_ebx.mcic42,
    mrs_mcic_sbjx_ebx.mcic43,
    mrs_mcic_sbjx_ebx.mcic44,
    mrs_mcic_sbjx_ebx.mcic45,
    mrs_mcic_sbjx_ebx.mcic46,
    mrs_mcic_sbjx_ebx.mcic47,
    mrs_mcic_sbjx_ebx.mcic48,
    mrs_mcic_sbjx_ebx.mcic49,
    mrs_mcic_sbjx_ebx.mcic50,
    mrs_mcic_sbjx_ebx.mcic51,
    mrs_mcic_sbjx_ebx.mcic52,
    mrs_mcic_sbjx_ebx.mcic53,
    mrs_mcic_sbjx_ebx.mcic54,
    mrs_mcic_sbjx_ebx.mcic55,
    mrs_mcic_sbjx_ebx.mcic56,
    mrs_mcic_sbjx_ebx.mcic57,
    mrs_mcic_sbjx_ebx.mcic58,
    mrs_mcic_sbjx_ebx.mcic59,
    mrs_mcic_sbjx_ebx.mcic60,
    mrs_mcic_sbjx_ebx.mcic61,
    mrs_mcic_sbjx_ebx.mcic62,
    mrs_mcic_sbjx_ebx.mcic63,
    mrs_mcic_sbjx_ebx.mcic64,
    mrs_mcic_sbjx_ebx.mcic65,
    mrs_mcic_sbjx_ebx.mcic66,
    mrs_mcic_sbjx_ebx.mcic67,
    mrs_mcic_sbjx_ebx.mcic68,
    mrs_mcic_sbjx_ebx.mcic69,
    mrs_mcic_sbjx_ebx.mcic70,
    mrs_mcic_sbjx_ebx.mcic71,
    mrs_mcic_sbjx_ebx.mcic72,
    mrs_mcic_sbjx_ebx.mcic73,
    mrs_mcic_sbjx_ebx.mcic74,
    mrs_mcic_sbjx_ebx.mcic75,
    mrs_mcic_sbjx_ebx.mcic76,
    mrs_mcic_sbjx_ebx.mcic77,
    mrs_mcic_sbjx_ebx.mcic78,
    mrs_mcic_sbjx_ebx.mcic79,
    mrs_mcic_sbjx_ebx.mcic80,
    mrs_mcic_sbjx_ebx.mcic81,
    mrs_mcic_sbjx_ebx.mcic82,
    mrs_mcic_sbjx_ebx.mcic83,
    mrs_mcic_sbjx_ebx.mcic84,
    mrs_mcic_sbjx_ebx.mcic85,
    mrs_mcic_sbjx_ebx.mcic86,
    mrs_mcic_sbjx_ebx.mcic87,
    mrs_mcic_sbjx_ebx.mcic88,
    mrs_mcic_sbjx_ebx.mcic89,
    mrs_mcic_sbjx_ebx.mcic90,
    mrs_mcic_sbjx_ebx.mcic91,
    mrs_mcic_sbjx_ebx.mcic92,
    mrs_mcic_sbjx_ebx.mcic93,
    mrs_mcic_sbjx_ebx.mcic94,
    mrs_mcic_sbjx_ebx.mcic95,
    mrs_mcic_sbjx_ebx.mcic96,
    mrs_mcic_sbjx_ebx.mcic97,
    mrs_mcic_sbjx_ebx.mcic98,
    mrs_mcic_sbjx_ebx.mcic99,
    mrs_mcic_sbjx_ebx.mcic100,
    mrs_mcic_sbjx_ebx.mcic101,
    mrs_mcic_sbjx_ebx.mcic102,
    mrs_mcic_sbjx_ebx.mcic103,
    mrs_mcic_sbjx_ebx.mcic104,
    mrs_mcic_sbjx_ebx.mcic105,
    mrs_mcic_sbjx_ebx.mcic106,
    mrs_mcic_sbjx_ebx.mcic107,
    mrs_mcic_sbjx_ebx.mcic108,
    mrs_mcic_sbjx_ebx.mcic109,
    mrs_mcic_sbjx_ebx.mcic110,
    mrs_mcic_sbjx_ebx.mcic111,
    mrs_mcic_sbjx_ebx.mcic112,
    mrs_mcic_sbjx_ebx.mcic113,
    mrs_mcic_sbjx_ebx.mcic114,
    mrs_mcic_sbjx_ebx.mcic115,
    mrs_mcic_sbjx_ebx.mcic116,
    mrs_mcic_sbjx_ebx.mcic117,
    mrs_mcic_sbjx_ebx.mcic118,
    mrs_mcic_sbjx_ebx.mcic119,
    mrs_mcic_sbjx_ebx.mcic120,
    mrs_mcic_sbjx_ebx.mcic121,
    mrs_mcic_sbjx_ebx.mcic122,
    mrs_mcic_sbjx_ebx.mcic123,
    mrs_mcic_sbjx_ebx.mcic124,
    mrs_mcic_sbjx_ebx.mcic125,
    mrs_mcic_sbjx_ebx.mcic126,
    mrs_mcic_sbjx_ebx.mcic127,
    mrs_mcic_sbjx_ebx.mcic128,
    mrs_mcic_sbjx_ebx.mcic129,
    mrs_mcic_sbjx_ebx.mcic130,
    mrs_mcic_sbjx_ebx.mcic131,
    mrs_mcic_sbjx_ebx.mcic132,
    mrs_mcic_sbjx_ebx.mcic133,
    mrs_mcic_sbjx_ebx.mcic134,
    mrs_mcic_sbjx_ebx.mcic135,
    mrs_mcic_sbjx_ebx.mcic136,
    mrs_mcic_sbjx_ebx.mcic137,
    mrs_mcic_sbjx_ebx.mcic138,
    mrs_mcic_sbjx_ebx.mcic139,
    mrs_mcic_sbjx_ebx.mcic140,
    mrs_mcic_sbjx_ebx.mcic141,
    mrs_mcic_sbjx_ebx.mcic142,
    mrs_mcic_sbjx_ebx.mcic143,
    mrs_mcic_sbjx_ebx.mcic144,
    mrs_mcic_sbjx_ebx.mcic145,
    mrs_mcic_sbjx_ebx.mcic146,
    mrs_mcic_sbjx_ebx.mcic147,
    mrs_mcic_sbjx_ebx.mcic148,
    mrs_mcic_sbjx_ebx.mcic149,
    mrs_mcic_sbjx_ebx.mcic150,
    mrs_mcic_sbjx_ebx.mcic151,
    mrs_mcic_sbjx_ebx.mcic152,
    mrs_mcic_sbjx_ebx.mcic153,
    mrs_mcic_sbjx_ebx.mcic154,
    mrs_mcic_sbjx_ebx.mcic155,
    mrs_mcic_sbjx_ebx.mcic156,
    mrs_mcic_sbjx_ebx.mcic157,
    mrs_mcic_sbjx_ebx.mcic158,
    mrs_mcic_sbjx_ebx.mcic159,
    mrs_mcic_sbjx_ebx.mcic160,
    mrs_mcic_sbjx_ebx.mcic161,
    mrs_mcic_sbjx_ebx.mcic162,
    mrs_mcic_sbjx_ebx.mcic163,
    mrs_mcic_sbjx_ebx.mcic164,
    mrs_mcic_sbjx_ebx.mcic165,
    mrs_mcic_sbjx_ebx.mcic166,
    mrs_mcic_sbjx_ebx.mcic167,
    mrs_mcic_sbjx_ebx.mcic168,
    mrs_mcic_sbjx_ebx.mcic169,
    mrs_mcic_sbjx_ebx.mcic170,
    mrs_mcic_sbjx_ebx.mcic171,
    mrs_mcic_sbjx_ebx.mcic172,
    mrs_mcic_sbjx_ebx.mcic173,
    mrs_mcic_sbjx_ebx.mcic174,
    mrs_mcic_sbjx_ebx.mcic175,
    mrs_mcic_sbjx_ebx.mcic176,
    mrs_mcic_sbjx_ebx.mcic177,
    mrs_mcic_sbjx_ebx.mcic178,
    mrs_mcic_sbjx_ebx.mcic179,
    mrs_mcic_sbjx_ebx.mcic180,
    mrs_mcic_sbjx_ebx.mcic181,
    mrs_mcic_sbjx_ebx.mcic182,
    mrs_mcic_sbjx_ebx.mcic183,
    mrs_mcic_sbjx_ebx.mcic184,
    mrs_mcic_sbjx_ebx.mcic185,
    mrs_mcic_sbjx_ebx.mcic186,
    mrs_mcic_sbjx_ebx.mcic187,
    mrs_mcic_sbjx_ebx.mcic188,
    mrs_mcic_sbjx_ebx.mcic189,
    mrs_mcic_sbjx_ebx.mcic190,
    mrs_mcic_sbjx_ebx.mcic191,
    mrs_mcic_sbjx_ebx.mcic192,
    mrs_mcic_sbjx_ebx.mcic193,
    mrs_mcic_sbjx_ebx.mcic194,
    mrs_mcic_sbjx_ebx.mcic195,
    mrs_mcic_sbjx_ebx.mcic196,
    mrs_mcic_sbjx_ebx.mcic197,
    mrs_mcic_sbjx_ebx.mcic198,
    mrs_mcic_sbjx_ebx.mcic199,
    mrs_mcic_sbjx_ebx.mcic200,
    mrs_mcic_sbjx_ebx.mcic201,
    mrs_mcic_sbjx_ebx.mcic202,
    mrs_mcic_sbjx_ebx.mcic203,
    mrs_mcic_sbjx_ebx.mcic204,
    mrs_mcic_sbjx_ebx.mcic205,
    mrs_mcic_sbjx_ebx.mcic206,
    mrs_mcic_sbjx_ebx.mcic207,
    mrs_mcic_sbjx_ebx.mcic208,
    mrs_mcic_sbjx_ebx.mcic209,
    mrs_mcic_sbjx_ebx.mcic210,
    mrs_mcic_sbjx_ebx.mcic211,
    mrs_mcic_sbjx_ebx.mcic212,
    mrs_mcic_sbjx_ebx.mcic213,
    mrs_mcic_sbjx_ebx.mcic214,
    mrs_mcic_sbjx_ebx.mcic215,
    mrs_mcic_sbjx_ebx.mcic216,
    mrs_mcic_sbjx_ebx.mcic217,
    mrs_mcic_sbjx_ebx.mcic218,
    mrs_mcic_sbjx_ebx.mcic219,
    mrs_mcic_sbjx_ebx.mcic220,
    mrs_mcic_sbjx_ebx.mcic221,
    mrs_mcic_sbjx_ebx.mcic222,
    mrs_mcic_sbjx_ebx.mcic223,
    mrs_mcic_sbjx_ebx.mcic224,
    mrs_mcic_sbjx_ebx.mcic225,
    mrs_mcic_sbjx_ebx.mcic226,
    mrs_mcic_sbjx_ebx.mcic227,
    mrs_mcic_sbjx_ebx.mcic228,
    mrs_mcic_sbjx_ebx.mcic229,
    mrs_mcic_sbjx_ebx.mcic230,
    mrs_mcic_sbjx_ebx.mcic231,
    mrs_mcic_sbjx_ebx.mcic232,
    mrs_mcic_sbjx_ebx.mcic233,
    mrs_mcic_sbjx_ebx.mcic234,
    mrs_mcic_sbjx_ebx.mcic235,
    mrs_mcic_sbjx_ebx.mcic236,
    mrs_mcic_sbjx_ebx.mcic237,
    mrs_mcic_sbjx_ebx.mcic238,
    mrs_mcic_sbjx_ebx.mcic239,
    mrs_mcic_sbjx_ebx.mcic240,
    mrs_mcic_sbjx_ebx.mcic241,
    mrs_mcic_sbjx_ebx.mcic242,
    mrs_mcic_sbjx_ebx.mcic243,
    mrs_mcic_sbjx_ebx.mcic244,
    mrs_mcic_sbjx_ebx.mcic245,
    mrs_mcic_sbjx_ebx.mcic246,
    mrs_mcic_sbjx_ebx.mcic247,
    mrs_mcic_sbjx_ebx.mcic248,
    mrs_mcic_sbjx_ebx.mcic249,
    mrs_mcic_sbjx_ebx.mcic250,
    mrs_mcic_sbjx_ebx.mcic251,
    mrs_mcic_sbjx_ebx.mcic252,
    mrs_mcic_sbjx_ebx.mcic253,
    mrs_mcic_sbjx_ebx.mcic254,
    mrs_mcic_sbjx_ebx.mcic255,
    mrs_mcic_sbjx_ebx.mcic256,
    mrs_mcic_sbjx_ebx.mcic257,
    mrs_mcic_sbjx_ebx.mcic258,
    mrs_mcic_sbjx_ebx.mcic259,
    mrs_mcic_sbjx_ebx.mcic260,
    mrs_mcic_sbjx_ebx.mcic261,
    mrs_mcic_sbjx_ebx.mcic262,
    mrs_mcic_sbjx_ebx.mcic263,
    mrs_mcic_sbjx_ebx.mcic264,
    mrs_mcic_sbjx_ebx.mcic265,
    mrs_mcic_sbjx_ebx.mcic266,
    mrs_mcic_sbjx_ebx.mcic267,
    mrs_mcic_sbjx_ebx.mcic268,
    mrs_mcic_sbjx_ebx.mcic269,
    mrs_mcic_sbjx_ebx.mcic270,
    mrs_mcic_sbjx_ebx.mcic271,
    mrs_mcic_sbjx_ebx.mcic272,
    mrs_mcic_sbjx_ebx.mcic273,
    mrs_mcic_sbjx_ebx.mcic274,
    mrs_mcic_sbjx_ebx.mcic275,
    mrs_mcic_sbjx_ebx.mcic276,
    mrs_mcic_sbjx_ebx.mcic277,
    mrs_mcic_sbjx_ebx.mcic278,
    mrs_mcic_sbjx_ebx.mcic279,
    mrs_mcic_sbjx_ebx.mcic280,
    mrs_mcic_sbjx_ebx.mcic281,
    mrs_mcic_sbjx_ebx.mcic282,
    mrs_mcic_sbjx_ebx.mcic283,
    mrs_mcic_sbjx_ebx.mcic284,
    mrs_mcic_sbjx_ebx.mcic285,
    mrs_mcic_sbjx_ebx.mcic286,
    mrs_mcic_sbjx_ebx.mcic287,
    mrs_mcic_sbjx_ebx.mcic288,
    mrs_mcic_sbjx_ebx.mcic289,
    mrs_mcic_sbjx_ebx.mcic290,
    mrs_mcic_sbjx_ebx.mcic291,
    mrs_mcic_sbjx_ebx.mcic292,
    mrs_mcic_sbjx_ebx.mcic293,
    mrs_mcic_sbjx_ebx.mcic294,
    mrs_mcic_sbjx_ebx.mcic295,
    mrs_mcic_sbjx_ebx.mcic296,
    mrs_mcic_sbjx_ebx.mcic297,
    mrs_mcic_sbjx_ebx.mcic298,
    mrs_mcic_sbjx_ebx.mcic299,
    mrs_mcic_sbjx_ebx.mcic300,
    mrs_mcic_sbjx_ebx.mcic301,
    mrs_mcic_sbjx_ebx.mcic302,
    mrs_mcic_sbjx_ebx.mcic303,
    mrs_mcic_sbjx_ebx.mcic304,
    mrs_mcic_sbjx_ebx.mcic305,
    mrs_mcic_sbjx_ebx.mcic306,
    mrs_mcic_sbjx_ebx.mcic307,
    mrs_mcic_sbjx_ebx.mcic308,
    mrs_mcic_sbjx_ebx.mcic309,
    mrs_mcic_sbjx_ebx.mcic310,
    mrs_mcic_sbjx_ebx.mcic311,
    mrs_mcic_sbjx_ebx.mcic312,
    mrs_mcic_sbjx_ebx.mcic313,
    mrs_mcic_sbjx_ebx.mcic314,
    mrs_mcic_sbjx_ebx.mcic315,
    mrs_mcic_sbjx_ebx.mcic316,
    mrs_mcic_sbjx_ebx.mcic317,
    mrs_mcic_sbjx_ebx.mcic318,
    mrs_mcic_sbjx_ebx.mcic319,
    mrs_mcic_sbjx_ebx.mcic320,
    mrs_mcic_sbjx_ebx.mcic321,
    mrs_mcic_sbjx_ebx.mcic322,
    mrs_mcic_sbjx_ebx.mcic323,
    mrs_mcic_sbjx_ebx.mcic324,
    mrs_mcic_sbjx_ebx.mcic325,
    mrs_mcic_sbjx_ebx.mcic326,
    mrs_mcic_sbjx_ebx.mcic327,
    mrs_mcic_sbjx_ebx.mcic328,
    mrs_mcic_sbjx_ebx.mcic329,
    mrs_mcic_sbjx_ebx.mcic330,
    mrs_mcic_sbjx_ebx.mcic331,
    mrs_mcic_sbjx_ebx.mcic332,
    mrs_mcic_sbjx_ebx.mcic333,
    mrs_mcic_sbjx_ebx.mcic334,
    mrs_mcic_sbjx_ebx.mcic335,
    mrs_mcic_sbjx_ebx.mcic336,
    mrs_mcic_sbjx_ebx.mcic337,
    mrs_mcic_sbjx_ebx.mcic338,
    mrs_mcic_sbjx_ebx.mcic339,
    mrs_mcic_sbjx_ebx.mcic340,
    mrs_mcic_sbjx_ebx.mcic341,
    mrs_mcic_sbjx_ebx.mcic342,
    mrs_mcic_sbjx_ebx.mcic343,
    mrs_mcic_sbjx_ebx.mcic344,
    mrs_mcic_sbjx_ebx.mcic345,
    mrs_mcic_sbjx_ebx.mcic346,
    mrs_mcic_sbjx_ebx.mcic347,
    mrs_mcic_sbjx_ebx.mcic348,
    mrs_mcic_sbjx_ebx.mcic349,
    mrs_mcic_sbjx_ebx.mcic350,
    mrs_mcic_sbjx_ebx.mcic351,
    mrs_mcic_sbjx_ebx.mcic352,
    mrs_mcic_sbjx_ebx.mcic353,
    mrs_mcic_sbjx_ebx.mcic354,
    mrs_mcic_sbjx_ebx.mcic355,
    mrs_mcic_sbjx_ebx.mcic356,
    mrs_mcic_sbjx_ebx.mcic357,
    mrs_mcic_sbjx_ebx.mcic358,
    mrs_mcic_sbjx_ebx.mcic359,
    mrs_mcic_sbjx_ebx.mcic360,
    mrs_mcic_sbjx_ebx.mcic361,
    mrs_mcic_sbjx_ebx.mcic362,
    mrs_mcic_sbjx_ebx.mcic363,
    mrs_mcic_sbjx_ebx.mcic364,
    mrs_mcic_sbjx_ebx.mcic365,
    mrs_mcic_sbjx_ebx.mcic366,
    mrs_mcic_sbjx_ebx.mcic367,
    mrs_mcic_sbjx_ebx.mcic368,
    mrs_mcic_sbjx_ebx.mcic369,
    mrs_mcic_sbjx_ebx.mcic370,
    mrs_mcic_sbjx_ebx.mcic371,
    mrs_mcic_sbjx_ebx.mcic372,
    mrs_mcic_sbjx_ebx.mcic373,
    mrs_mcic_sbjx_ebx.mcic374,
    mrs_mcic_sbjx_ebx.mcic375,
    mrs_mcic_sbjx_ebx.mcic376,
    mrs_mcic_sbjx_ebx.mcic377,
    mrs_mcic_sbjx_ebx.mcic378,
    mrs_mcic_sbjx_ebx.mcic379,
    mrs_mcic_sbjx_ebx.mcic380,
    mrs_mcic_sbjx_ebx.mcic381,
    mrs_mcic_sbjx_ebx.mcic382,
    mrs_mcic_sbjx_ebx.mcic383,
    mrs_mcic_sbjx_ebx.mcic384,
    mrs_mcic_sbjx_ebx.mcic385,
    mrs_mcic_sbjx_ebx.mcic386,
    mrs_mcic_sbjx_ebx.mcic387,
    mrs_mcic_sbjx_ebx.mcic388,
    mrs_mcic_sbjx_ebx.mcic389,
    mrs_mcic_sbjx_ebx.mcic390,
    mrs_mcic_sbjx_ebx.mcic391,
    mrs_mcic_sbjx_ebx.mcic392,
    mrs_mcic_sbjx_ebx.mcic393,
    mrs_mcic_sbjx_ebx.mcic394,
    mrs_mcic_sbjx_ebx.mcic395,
    mrs_mcic_sbjx_ebx.mcic396,
    mrs_mcic_sbjx_ebx.mcic397,
    mrs_mcic_sbjx_ebx.mcic398,
    mrs_mcic_sbjx_ebx.mcic399,
    mrs_mcic_sbjx_ebx.mcic400,
    mrs_mcic_sbjx_ebx.mcic401,
    mrs_mcic_sbjx_ebx.mcic402,
    mrs_mcic_sbjx_ebx.mcic403,
    mrs_mcic_sbjx_ebx.mcic404,
    mrs_mcic_sbjx_ebx.mcic405,
    mrs_mcic_sbjx_ebx.mcic406,
    mrs_mcic_sbjx_ebx.mcic407,
    mrs_mcic_sbjx_ebx.mcic408,
    mrs_mcic_sbjx_ebx.mcic409,
    mrs_mcic_sbjx_ebx.mcic410,
    mrs_mcic_sbjx_ebx.mcic411,
    mrs_mcic_sbjx_ebx.mcic412,
    mrs_mcic_sbjx_ebx.mcic413,
    mrs_mcic_sbjx_ebx.mcic414,
    mrs_mcic_sbjx_ebx.mcic415,
    mrs_mcic_sbjx_ebx.mcic416,
    mrs_mcic_sbjx_ebx.mcic417,
    mrs_mcic_sbjx_ebx.mcic418,
    mrs_mcic_sbjx_ebx.am1,
    mrs_mcic_sbjx_ebx.am10,
    mrs_mcic_sbjx_ebx.am11,
    mrs_mcic_sbjx_ebx.am12,
    mrs_mcic_sbjx_ebx.am13,
    mrs_mcic_sbjx_ebx.am14,
    mrs_mcic_sbjx_ebx.am2,
    mrs_mcic_sbjx_ebx.am3,
    mrs_mcic_sbjx_ebx.am4,
    mrs_mcic_sbjx_ebx.am5,
    mrs_mcic_sbjx_ebx.am6,
    mrs_mcic_sbjx_ebx.am7,
    mrs_mcic_sbjx_ebx.am8,
    mrs_mcic_sbjx_ebx.am9,
    mrs_mcic_sbjx_ebx.ba1,
    mrs_mcic_sbjx_ebx.ba2,
    mrs_mcic_sbjx_ebx.ba3,
    mrs_mcic_sbjx_ebx.ba4,
    mrs_mcic_sbjx_ebx.ba5,
    mrs_mcic_sbjx_ebx.cd1,
    mrs_mcic_sbjx_ebx.cd2,
    mrs_mcic_sbjx_ebx.cd3,
    mrs_mcic_sbjx_ebx.cd4,
    mrs_mcic_sbjx_ebx.cd5,
    mrs_mcic_sbjx_ebx.cd6,
    mrs_mcic_sbjx_ebx.cd7,
    mrs_mcic_sbjx_ebx.cd8,
    mrs_mcic_sbjx_ebx.cd9,
    mrs_mcic_sbjx_ebx.cb1,
    mrs_mcic_sbjx_ebx.cb2,
    mrs_mcic_sbjx_ebx.cb3,
    mrs_mcic_sbjx_ebx.cb4,
    mrs_mcic_sbjx_ebx.cb5,
    mrs_mcic_sbjx_ebx.cb6,
    mrs_mcic_sbjx_ebx.cb7,
    mrs_mcic_sbjx_ebx.cb8,
    mrs_mcic_sbjx_ebx.cb9,
    mrs_mcic_sbjx_ebx.cb10,
    mrs_mcic_sbjx_ebx.cb11,
    mrs_mcic_sbjx_ebx.cb12,
    mrs_mcic_sbjx_ebx.cb13,
    mrs_mcic_sbjx_ebx.cb14,
    mrs_mcic_sbjx_ebx.cb15,
    mrs_mcic_sbjx_ebx.cb16,
    mrs_mcic_sbjx_ebx.cb17,
    mrs_mcic_sbjx_ebx.cb18,
    mrs_mcic_sbjx_ebx.cb19,
    mrs_mcic_sbjx_ebx.cb20,
    mrs_mcic_sbjx_ebx.cb21,
    mrs_mcic_sbjx_ebx.cb22,
    mrs_mcic_sbjx_ebx.cb23,
    mrs_mcic_sbjx_ebx.cb24,
    mrs_mcic_sbjx_ebx.cb25,
    mrs_mcic_sbjx_ebx.cb26,
    mrs_mcic_sbjx_ebx.cb27,
    mrs_mcic_sbjx_ebx.cb28,
    mrs_mcic_sbjx_ebx.cb29,
    mrs_mcic_sbjx_ebx.cb30,
    mrs_mcic_sbjx_ebx.cb31,
    mrs_mcic_sbjx_ebx.cb32,
    mrs_mcic_sbjx_ebx.cb33,
    mrs_mcic_sbjx_ebx.cb34,
    mrs_mcic_sbjx_ebx.cb35,
    mrs_mcic_sbjx_ebx.cb36,
    mrs_mcic_sbjx_ebx.cb37,
    mrs_mcic_sbjx_ebx.cb38,
    mrs_mcic_sbjx_ebx.cb39,
    mrs_mcic_sbjx_ebx.cb40,
    mrs_mcic_sbjx_ebx.cb41,
    mrs_mcic_sbjx_ebx.cb42,
    mrs_mcic_sbjx_ebx.ne1,
    mrs_mcic_sbjx_ebx.ne2,
    mrs_mcic_sbjx_ebx.ne3,
    mrs_mcic_sbjx_ebx.ne4,
    mrs_mcic_sbjx_ebx.ne5,
    mrs_mcic_sbjx_ebx.ne6,
    mrs_mcic_sbjx_ebx.ne7,
    mrs_mcic_sbjx_ebx.ne8,
    mrs_mcic_sbjx_ebx.ne9,
    mrs_mcic_sbjx_ebx.ne10,
    mrs_mcic_sbjx_ebx.ne11,
    mrs_mcic_sbjx_ebx.ne12,
    mrs_mcic_sbjx_ebx.ne13,
    mrs_mcic_sbjx_ebx.ne14,
    mrs_mcic_sbjx_ebx.ne15,
    mrs_mcic_sbjx_ebx.ne16,
    mrs_mcic_sbjx_ebx.ne17,
    mrs_mcic_sbjx_ebx.ne18,
    mrs_mcic_sbjx_ebx.ne19,
    mrs_mcic_sbjx_ebx.ne20,
    mrs_mcic_sbjx_ebx.ne21,
    mrs_mcic_sbjx_ebx.ne22,
    mrs_mcic_sbjx_ebx.ne23,
    mrs_mcic_sbjx_ebx.ne24,
    mrs_mcic_sbjx_ebx.ne25,
    mrs_mcic_sbjx_ebx.ne26,
    mrs_mcic_sbjx_ebx.ne27,
    mrs_mcic_sbjx_ebx.ne28,
    mrs_mcic_sbjx_ebx.ne29,
    mrs_mcic_sbjx_ebx.ne30,
    mrs_mcic_sbjx_ebx.ne31,
    mrs_mcic_sbjx_ebx.ne32,
    mrs_mcic_sbjx_ebx.ne33,
    mrs_mcic_sbjx_ebx.ne34,
    mrs_mcic_sbjx_ebx.ne35,
    mrs_mcic_sbjx_ebx.ne36,
    mrs_mcic_sbjx_ebx.ne37,
    mrs_mcic_sbjx_ebx.ne38,
    mrs_mcic_sbjx_ebx.ne39,
    mrs_mcic_sbjx_ebx.ne40,
    mrs_mcic_sbjx_ebx.ne41,
    mrs_mcic_sbjx_ebx.ne42,
    mrs_mcic_sbjx_ebx.ne43,
    mrs_mcic_sbjx_ebx.ne44,
    mrs_mcic_sbjx_ebx.ne45,
    mrs_mcic_sbjx_ebx.ne46,
    mrs_mcic_sbjx_ebx.ne47,
    mrs_mcic_sbjx_ebx.ne48,
    mrs_mcic_sbjx_ebx.ne49,
    mrs_mcic_sbjx_ebx.ne50,
    mrs_mcic_sbjx_ebx.ne51,
    mrs_mcic_sbjx_ebx.ne52,
    mrs_mcic_sbjx_ebx.ne53,
    mrs_mcic_sbjx_ebx.ne54,
    mrs_mcic_sbjx_ebx.ne55,
    mrs_mcic_sbjx_ebx.ne56,
    mrs_mcic_sbjx_ebx.ne57,
    mrs_mcic_sbjx_ebx.ne58,
    mrs_mcic_sbjx_ebx.ne59,
    mrs_mcic_sbjx_ebx.ne60,
    mrs_mcic_sbjx_ebx.ne61,
    mrs_mcic_sbjx_ebx.ne62,
    mrs_mcic_sbjx_ebx.ne63,
    mrs_mcic_sbjx_ebx.ne64,
    mrs_mcic_sbjx_ebx.ne65,
    mrs_mcic_sbjx_ebx.ne66,
    mrs_mcic_sbjx_ebx.ne67,
    mrs_mcic_sbjx_ebx.ne68,
    mrs_mcic_sbjx_ebx.ne69,
    mrs_mcic_sbjx_ebx.ne70,
    mrs_mcic_sbjx_ebx.ne71,
    mrs_mcic_sbjx_ebx.ne72,
    mrs_mcic_sbjx_ebx.ne73,
    mrs_mcic_sbjx_ebx.ne74,
    mrs_mcic_sbjx_ebx.ne75,
    mrs_mcic_sbjx_ebx.ne76,
    mrs_mcic_sbjx_ebx.ne77,
    mrs_mcic_sbjx_ebx.ne78,
    mrs_mcic_sbjx_ebx.ne79,
    mrs_mcic_sbjx_ebx.ne80,
    mrs_mcic_sbjx_ebx.ne81,
    mrs_mcic_sbjx_ebx.nb1,
    mrs_mcic_sbjx_ebx.nb2,
    mrs_mcic_sbjx_ebx.nb3,
    mrs_mcic_sbjx_ebx.nb4,
    mrs_mcic_sbjx_ebx.nb5,
    mrs_mcic_sbjx_ebx.nb6,
    mrs_mcic_sbjx_ebx.nb7,
    mrs_mcic_sbjx_ebx.nb8,
    mrs_mcic_sbjx_ebx.nb9,
    mrs_mcic_sbjx_ebx.nb10,
    mrs_mcic_sbjx_ebx.nb11,
    mrs_mcic_sbjx_ebx.nb12,
    mrs_mcic_sbjx_ebx.nb13,
    mrs_mcic_sbjx_ebx.nb14,
    mrs_mcic_sbjx_ebx.nb15,
    mrs_mcic_sbjx_ebx.nb16,
    mrs_mcic_sbjx_ebx.nb17,
    mrs_mcic_sbjx_ebx.nb18,
    mrs_mcic_sbjx_ebx.nb19,
    mrs_mcic_sbjx_ebx.nb20,
    mrs_mcic_sbjx_ebx.nb21,
    mrs_mcic_sbjx_ebx.nb22,
    mrs_mcic_sbjx_ebx.nb23,
    mrs_mcic_sbjx_ebx.nb24,
    mrs_mcic_sbjx_ebx.nb25,
    mrs_mcic_sbjx_ebx.nb26,
    mrs_mcic_sbjx_ebx.nb27,
    mrs_mcic_sbjx_ebx.nb28,
    mrs_mcic_sbjx_ebx.nb29,
    mrs_mcic_sbjx_ebx.nb30,
    mrs_mcic_sbjx_ebx.nb31,
    mrs_mcic_sbjx_ebx.nb32,
    mrs_mcic_sbjx_ebx.nb33,
    mrs_mcic_sbjx_ebx.nb34,
    mrs_mcic_sbjx_ebx.nb35,
    mrs_mcic_sbjx_ebx.nb36,
    mrs_mcic_sbjx_ebx.nb37,
    mrs_mcic_sbjx_ebx.nb38,
    mrs_mcic_sbjx_ebx.nb39,
    mrs_mcic_sbjx_ebx.nb40,
    mrs_mcic_sbjx_ebx.nb41,
    mrs_mcic_sbjx_ebx.nb42,
    mrs_mcic_sbjx_ebx.nb43,
    mrs_mcic_sbjx_ebx.nb44,
    mrs_mcic_sbjx_ebx.nb45,
    mrs_mcic_sbjx_ebx.nb46,
    mrs_mcic_sbjx_ebx.nb47,
    mrs_mcic_sbjx_ebx.nb48,
    mrs_mcic_sbjx_ebx.nb49,
    mrs_mcic_sbjx_ebx.nb50,
    mrs_mcic_sbjx_ebx.nb51,
    mrs_mcic_sbjx_ebx.nb52,
    mrs_mcic_sbjx_ebx.nb53,
    mrs_mcic_sbjx_ebx.nb54,
    mrs_mcic_sbjx_ebx.nb55,
    mrs_mcic_sbjx_ebx.nb56,
    mrs_mcic_sbjx_ebx.nb57,
    mrs_mcic_sbjx_ebx.nb58,
    mrs_mcic_sbjx_ebx.nb59,
    mrs_mcic_sbjx_ebx.nb60,
    mrs_mcic_sbjx_ebx.nb61,
    mrs_mcic_sbjx_ebx.nb62,
    mrs_mcic_sbjx_ebx.nb63,
    mrs_mcic_sbjx_ebx.nb64,
    mrs_mcic_sbjx_ebx.nb65,
    mrs_mcic_sbjx_ebx.nb66,
    mrs_mcic_sbjx_ebx.nb67,
    mrs_mcic_sbjx_ebx.nb68,
    mrs_mcic_sbjx_ebx.nb69,
    mrs_mcic_sbjx_ebx.nb70,
    mrs_mcic_sbjx_ebx.nb71,
    mrs_mcic_sbjx_ebx.nb72,
    mrs_mcic_sbjx_ebx.nb73,
    mrs_mcic_sbjx_ebx.nb74,
    mrs_mcic_sbjx_ebx.nb75,
    mrs_mcic_sbjx_ebx.nb76,
    mrs_mcic_sbjx_ebx.nb77,
    mrs_mcic_sbjx_ebx.nb78,
    mrs_mcic_sbjx_ebx.nb79,
    mrs_mcic_sbjx_ebx.nb80,
    mrs_mcic_sbjx_ebx.nb81,
    mrs_mcic_sbjx_ebx.nb82,
    mrs_mcic_sbjx_ebx.nb83,
    mrs_mcic_sbjx_ebx.nb84,
    mrs_mcic_sbjx_ebx.nb85,
    mrs_mcic_sbjx_ebx.nb86,
    mrs_mcic_sbjx_ebx.nb87,
    mrs_mcic_sbjx_ebx.nb88,
    mrs_mcic_sbjx_ebx.nb89,
    mrs_mcic_sbjx_ebx.nb90,
    mrs_mcic_sbjx_ebx.nb91,
    mrs_mcic_sbjx_ebx.nb92,
    mrs_mcic_sbjx_ebx.nb93,
    mrs_mcic_sbjx_ebx.nb94,
    mrs_mcic_sbjx_ebx.nb95,
    mrs_mcic_sbjx_ebx.nb96,
    mrs_mcic_sbjx_ebx.nb97,
    mrs_mcic_sbjx_ebx.nb98,
    mrs_mcic_sbjx_ebx.nb99,
    mrs_mcic_sbjx_ebx.nb100,
    mrs_mcic_sbjx_ebx.nb101,
    mrs_mcic_sbjx_ebx.nb102,
    mrs_mcic_sbjx_ebx.nb103,
    mrs_mcic_sbjx_ebx.nb104,
    mrs_mcic_sbjx_ebx.nb105,
    mrs_mcic_sbjx_ebx.v3,
    mrs_mcic_sbjx_ebx.v4,
    mrs_mcic_sbjx_ebx.v5,
    mrs_mcic_sbjx_ebx.v6,
    mrs_mcic_sbjx_ebx.v7,
    mrs_mcic_sbjx_ebx.v8,
    mrs_mcic_sbjx_ebx.v9,
    mrs_mcic_sbjx_ebx.v10,
    mrs_mcic_sbjx_ebx.v11,
    mrs_mcic_sbjx_ebx.v12,
    mrs_mcic_sbjx_ebx.v13,
    mrs_mcic_sbjx_ebx.v14,
    mrs_mcic_sbjx_ebx.v15,
    mrs_mcic_sbjx_ebx.v16,
    mrs_mcic_sbjx_ebx.v17,
    mrs_mcic_sbjx_ebx.v18,
    mrs_mcic_sbjx_ebx.v19,
    mrs_mcic_sbjx_ebx.v20,
    mrs_mcic_sbjx_ebx.v21,
    mrs_mcic_sbjx_ebx.v22,
    mrs_mcic_sbjx_ebx.v23,
    mrs_mcic_sbjx_ebx.v24,
    mrs_mcic_sbjx_ebx.v25,
    mrs_mcic_sbjx_ebx.v26,
    mrs_mcic_sbjx_ebx.v27,
    mrs_mcic_sbjx_ebx.v28,
    mrs_mcic_sbjx_ebx.v29,
    mrs_mcic_sbjx_ebx.v30,
    mrs_mcic_sbjx_ebx.v31,
    mrs_mcic_sbjx_ebx.v32,
    mrs_mcic_sbjx_ebx.v33,
    mrs_mcic_sbjx_ebx.v34,
    mrs_mcic_sbjx_ebx.v35,
    mrs_mcic_sbjx_ebx.v36,
    mrs_mcic_sbjx_ebx.v37,
    mrs_mcic_sbjx_ebx.v38,
    mrs_mcic_sbjx_ebx.v39,
    mrs_mcic_sbjx_ebx.v40,
    mrs_mcic_sbjx_ebx.v41,
    mrs_mcic_sbjx_ebx.v42,
    mrs_mcic_sbjx_ebx.v43,
    mrs_mcic_sbjx_ebx.v44,
    mrs_mcic_sbjx_ebx.v45,
    mrs_mcic_sbjx_ebx.v46,
    mrs_mcic_sbjx_ebx.v47,
    mrs_mcic_sbjx_ebx.v48,
    mrs_mcic_sbjx_ebx.v49,
    mrs_mcic_sbjx_ebx.v50,
    mrs_mcic_sbjx_ebx.v51,
    mrs_mcic_sbjx_ebx.v52,
    mrs_mcic_sbjx_ebx.v53,
    mrs_mcic_sbjx_ebx.v56,
    mrs_mcic_sbjx_ebx.v54,
    mrs_mcic_sbjx_ebx.v55,
    mrs_mcic_sbjx_ebx.v57,
    mrs_mcic_sbjx_ebx.v58,
    mrs_mcic_sbjx_ebx.v59,
    mrs_mcic_sbjx_ebx.v60,
    mrs_mcic_sbjx_ebx.v61,
    mrs_mcic_sbjx_ebx.v62,
    mrs_mcic_sbjx_ebx.v63,
    mrs_mcic_sbjx_ebx.v64,
    mrs_mcic_sbjx_ebx.v65,
    mrs_mcic_sbjx_ebx.v66,
    mrs_mcic_sbjx_ebx.v67,
    mrs_mcic_sbjx_ebx.v68,
    mrs_mcic_sbjx_ebx.v69,
    mrs_mcic_sbjx_ebx.v70,
    mrs_mcic_sbjx_ebx.v71,
    mrs_mcic_sbjx_ebx.v72,
    mrs_mcic_sbjx_ebx.v73,
    mrs_mcic_sbjx_ebx.v74,
    mrs_mcic_sbjx_ebx.v75,
    mrs_mcic_sbjx_ebx.v76,
    mrs_mcic_sbjx_ebx.v77,
    mrs_mcic_sbjx_ebx.v78,
    mrs_mcic_sbjx_ebx.v79,
    mrs_mcic_sbjx_ebx.v80,
    mrs_mcic_sbjx_ebx.v81,
    mrs_mcic_sbjx_ebx.v82,
    mrs_mcic_sbjx_ebx.v83,
    mrs_mcic_sbjx_ebx.ss11,
    mrs_mcic_sbjx_ebx.ss12,
    mrs_mcic_sbjx_ebx.ss13,
    mrs_mcic_sbjx_ebx.ss14,
    mrs_mcic_sbjx_ebx.ss15,
    mrs_mcic_sbjx_ebx.ss16,
    mrs_mcic_sbjx_ebx.ss17,
    mrs_mcic_sbjx_ebx.ss18,
    mrs_mcic_sbjx_ebx.ss19,
    mrs_mcic_sbjx_ebx.ss20,
    mrs_mcic_sbjx_ebx.ss21,
    mrs_mcic_sbjx_ebx.ss22,
    mrs_mcic_sbjx_ebx.ss23,
    mrs_mcic_sbjx_ebx.ss25,
    mrs_mcic_sbjx_ebx.ss26,
    mrs_mcic_sbjx_ebx.ss24,
    mrs_mcic_sbjx_ebx.ss27,
    mrs_mcic_sbjx_ebx.ss28,
    mrs_mcic_sbjx_ebx.ss29,
    mrs_mcic_sbjx_ebx.ss30,
    mrs_mcic_sbjx_ebx.ss31,
    mrs_mcic_sbjx_ebx.ss32,
    mrs_mcic_sbjx_ebx.ss33,
    mrs_mcic_sbjx_ebx.ss34,
    mrs_mcic_sbjx_ebx.ss35,
    mrs_mcic_sbjx_ebx.sa1,
    mrs_mcic_sbjx_ebx.sa2,
    mrs_mcic_sbjx_ebx.sa3,
    mrs_mcic_sbjx_ebx.sa4,
    mrs_mcic_sbjx_ebx.sa5,
    mrs_mcic_sbjx_ebx.sa6,
    mrs_mcic_sbjx_ebx.sa7,
    mrs_mcic_sbjx_ebx.sa8,
    mrs_mcic_sbjx_ebx.sa9,
    mrs_mcic_sbjx_ebx.sa10,
    mrs_mcic_sbjx_ebx.sa11,
    mrs_mcic_sbjx_ebx.sa12,
    mrs_mcic_sbjx_ebx.sa13,
    mrs_mcic_sbjx_ebx.sa14,
    mrs_mcic_sbjx_ebx.sa15,
    mrs_mcic_sbjx_ebx.sa16,
    mrs_mcic_sbjx_ebx.sa17,
    mrs_mcic_sbjx_ebx.sa18,
    mrs_mcic_sbjx_ebx.sa19,
    mrs_mcic_sbjx_ebx.sa20,
    mrs_mcic_sbjx_ebx.sa21,
    mrs_mcic_sbjx_ebx.sa22,
    mrs_mcic_sbjx_ebx.sa23,
    mrs_mcic_sbjx_ebx.sa24
   FROM mrs_mcic_sbjx_ebx;


ALTER TABLE mrs_mcic_extbasics_share_vw OWNER TO postgres;

--
-- Name: mrs_mcic_has_imaging_dti; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_mcic_has_imaging_dti (
    ursi character varying(9),
    dti character varying(1)
);


ALTER TABLE mrs_mcic_has_imaging_dti OWNER TO postgres;

--
-- Name: mrs_mcic_has_imaging_dti_fm; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_mcic_has_imaging_dti_fm (
    ursi character varying(9),
    fieldmag character varying(1),
    fieldphase character varying(1)
);


ALTER TABLE mrs_mcic_has_imaging_dti_fm OWNER TO postgres;

--
-- Name: mrs_mcic_has_imaging_fmr_fm; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_mcic_has_imaging_fmr_fm (
    ursi character varying(9),
    fieldmag character varying(1),
    fieldphase character varying(1)
);


ALTER TABLE mrs_mcic_has_imaging_fmr_fm OWNER TO postgres;

--
-- Name: mrs_mcic_has_imaging_fmri; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_mcic_has_imaging_fmri (
    ursi character varying(9),
    smtask character varying(1),
    oddtask character varying(1),
    breathtask character varying(1),
    sirptask character varying(1)
);


ALTER TABLE mrs_mcic_has_imaging_fmri OWNER TO postgres;

--
-- Name: mrs_mcic_has_imaging_smr; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_mcic_has_imaging_smr (
    ursi character varying(9),
    t1 character varying(1),
    t2 character varying(1)
);


ALTER TABLE mrs_mcic_has_imaging_smr OWNER TO postgres;

--
-- Name: mrs_message_types; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_message_types (
    message_type_id numeric(12,0) NOT NULL,
    label character varying(100),
    description character varying(500)
);


ALTER TABLE mrs_message_types OWNER TO postgres;

--
-- Name: mrs_message_types_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_message_types_vw AS
 SELECT mrs_message_types.message_type_id,
    mrs_message_types.label,
    mrs_message_types.description
   FROM mrs_message_types;


ALTER TABLE mrs_message_types_vw OWNER TO postgres;

--
-- Name: mrs_messages; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_messages (
    message_id numeric(12,0) NOT NULL,
    message_subject character varying(150),
    message_body character varying(4000),
    message_from character varying(50),
    message_to character varying(4000)
);


ALTER TABLE mrs_messages OWNER TO postgres;

--
-- Name: COLUMN mrs_messages.message_to; Type: COMMENT; Schema: mrsdba; Owner: postgres
--

COMMENT ON COLUMN mrs_messages.message_to IS 'this could be ''ALL'' (meaning all ursis in this study) or comma seperated URSIs';


--
-- Name: mrs_messages_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_messages_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_messages_counter OWNER TO postgres;

--
-- Name: mrs_messages_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_messages_hist (
    message_id numeric(12,0) NOT NULL,
    message_subject character varying(150),
    message_body character varying(4000),
    message_from character varying(50),
    message_to character varying(4000),
    mod_user character varying(50),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_messages_hist OWNER TO postgres;

--
-- Name: mrs_messages_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_messages_vw AS
 SELECT mrs_messages.message_id,
    mrs_messages.message_subject,
    mrs_messages.message_body,
    mrs_messages.message_from,
    mrs_messages.message_to
   FROM mrs_messages;


ALTER TABLE mrs_messages_vw OWNER TO postgres;

--
-- Name: mrs_missing_assessment_reasons; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_missing_assessment_reasons (
    id numeric(10,0) NOT NULL,
    label character varying(50),
    description character varying(500)
);


ALTER TABLE mrs_missing_assessment_reasons OWNER TO postgres;

--
-- Name: mrs_missing_assessment_reasons_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_missing_assessment_reasons_counter
    START WITH 1
    INCREMENT BY 2
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_missing_assessment_reasons_counter OWNER TO postgres;

--
-- Name: mrs_missing_assessment_reasons_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_missing_assessment_reasons_hist (
    id numeric(10,0),
    label character varying(50),
    description character varying(500),
    study_id numeric(10,0),
    date timestamp without time zone
);


ALTER TABLE mrs_missing_assessment_reasons_hist OWNER TO postgres;

--
-- Name: mrs_missing_assessment_reasons_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_missing_assessment_reasons_vw AS
 SELECT mrs_missing_assessment_reasons.id,
    mrs_missing_assessment_reasons.label,
    mrs_missing_assessment_reasons.description
   FROM mrs_missing_assessment_reasons;


ALTER TABLE mrs_missing_assessment_reasons_vw OWNER TO postgres;

--
-- Name: mrs_modalities_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_modalities_hist (
    modality_id numeric(4,0),
    label character varying(200),
    description character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    attribute_view character varying(100),
    acquisition_level character varying(10),
    attribute_view_id_column character varying
);


ALTER TABLE mrs_modalities_hist OWNER TO postgres;

--
-- Name: mrs_modalities_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_modalities_vw AS
 SELECT mrs_modalities.modality_id,
    mrs_modalities.label,
    mrs_modalities.description,
    mrs_modalities.acquisition_level,
    mrs_modalities.parent_modality_id,
    mrs_modalities.attribute_view,
    mrs_modalities.attribute_view_id_column,
    mrs_modalities.dx_filter_order
   FROM mrs_modalities;


ALTER TABLE mrs_modalities_vw OWNER TO postgres;

--
-- Name: mrs_modality_properties; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_modality_properties (
    prop_id numeric(10,0) NOT NULL,
    modality_id numeric(4,0) NOT NULL,
    label character varying(100) NOT NULL,
    description character varying(4000)
);


ALTER TABLE mrs_modality_properties OWNER TO postgres;

--
-- Name: mrs_modality_props_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_modality_props_vw AS
 SELECT mrs_modalities.acquisition_level AS modality_acquisition_level,
    mrs_modalities.description AS modality_description,
    mrs_modalities.label AS modality_label,
    mrs_modalities.modality_id,
    mrs_modalities.parent_modality_id,
    mrs_modality_properties.description AS property_description,
    mrs_modality_properties.label AS property_label,
    mrs_modality_properties.prop_id AS property_id
   FROM mrs_modalities,
    mrs_modality_properties
  WHERE (mrs_modalities.modality_id = mrs_modality_properties.modality_id);


ALTER TABLE mrs_modality_props_vw OWNER TO postgres;

--
-- Name: mrs_nonrev_slot_uses; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_nonrev_slot_uses (
    amount_used numeric(4,0),
    notes character varying(500),
    date_used timestamp without time zone,
    charge_code character varying(16),
    scan_slot_id numeric(8,0),
    pi_id character varying(30),
    tech_slots_used numeric,
    modality_id numeric DEFAULT (1)::numeric NOT NULL
);


ALTER TABLE mrs_nonrev_slot_uses OWNER TO postgres;

--
-- Name: mrs_nonrev_slot_uses_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_nonrev_slot_uses_hist (
    amount_used numeric(4,0),
    date_used timestamp without time zone,
    charge_code character varying(16),
    scan_slot_id numeric(8,0),
    notes character varying(500),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    mod_notes character varying(200),
    pi_id character varying(30),
    tech_slots_used numeric,
    modality_id numeric
);


ALTER TABLE mrs_nonrev_slot_uses_hist OWNER TO postgres;

--
-- Name: mrs_nonrev_slot_uses_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_nonrev_slot_uses_vw AS
 SELECT mrs_nonrev_slot_uses.amount_used,
    mrs_nonrev_slot_uses.tech_slots_used,
    mrs_nonrev_slot_uses.notes,
    mrs_nonrev_slot_uses.date_used,
    mrs_nonrev_slot_uses.charge_code,
    mrs_nonrev_slot_uses.scan_slot_id,
    mrs_nonrev_slot_uses.pi_id,
    mrs_nonrev_slot_uses.modality_id
   FROM mrs_nonrev_slot_uses;


ALTER TABLE mrs_nonrev_slot_uses_vw OWNER TO postgres;

--
-- Name: mrs_subject_details_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_details_vw AS
 SELECT d.ursi,
    d.anchor_date,
    u.site_id,
    trunc((to_number(to_char((now() - (u.birth_date)::timestamp with time zone), 'DD'::text), 'FM999999'::text) / (365)::numeric)) AS age,
    u.birth_date,
    u.gender,
    c.config_label AS ethnicity,
    u.entered_date,
    u.user_entered,
    d.subject_type_id,
    t.label AS type_label,
    t.study_id,
    s.label AS study_label,
    s.sa_review_emails,
    d.enrolled_date,
    d.consent_date,
    d.disenrolled_date,
    d.user_enrolled,
    d.notes,
    d.isphilinked,
    d.agreestosharedata,
    u.email_address,
    u.email_address_confirmed,
    u.email_address_confirmed_date,
    d.usid,
    d.dx_excluded,
    u.password,
    u.is_p2_active,
    u.first_name,
    u.last_name,
    u.first_name_at_birth,
    u.middle_name_at_birth,
    u.last_name_at_birth,
    u.physical_sex_at_birth,
    u.city_born_in
   FROM ((((mrs_studies s
     JOIN mrs_subject_types t USING (study_id))
     JOIN mrs_subject_type_details d ON ((t.subject_type_id = d.subject_type_id)))
     JOIN mrs_subjects u USING (usid))
     LEFT JOIN mrs_configs c ON (((d.ethnic_category)::text = (c.config_value)::text)))
  WHERE ((((d.ethnic_category)::text = ''::text) OR (d.ethnic_category IS NULL)) OR ((c.group_label)::text = 'ETHNIC_CATEGORY'::text));


ALTER TABLE mrs_subject_details_vw OWNER TO ni_developers;

--
-- Name: mrs_oldest_ursi_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_oldest_ursi_vw AS
 SELECT DISTINCT sd1.usid,
    sd1.ursi AS oldest_ursi
   FROM mrs_subject_details_vw sd1
  WHERE (NOT (EXISTS ( SELECT 1
           FROM mrs_subject_details_vw sd1a
          WHERE (((sd1a.usid)::text = (sd1.usid)::text) AND (sd1a.enrolled_date < sd1.enrolled_date)))));


ALTER TABLE mrs_oldest_ursi_vw OWNER TO ni_developers;

--
-- Name: mrs_per_role_det_addrss_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_per_role_det_addrss_hist (
    prd_id numeric(6,0) NOT NULL,
    address_id numeric(8,0) NOT NULL,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_per_role_det_addrss_hist OWNER TO postgres;

--
-- Name: mrs_per_role_det_phones_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_per_role_det_phones_hist (
    prd_id numeric(6,0) NOT NULL,
    phone_id numeric(8,0) NOT NULL,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_per_role_det_phones_hist OWNER TO postgres;

--
-- Name: mrs_perad_address_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_perad_address_id_seq
    START WITH 61
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 20;


ALTER TABLE mrs_perad_address_id_seq OWNER TO postgres;

--
-- Name: mrs_perph_phone_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_perph_phone_id_seq
    START WITH 61
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 20;


ALTER TABLE mrs_perph_phone_id_seq OWNER TO postgres;

--
-- Name: mrs_person_alias; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_person_alias (
    alias_id numeric(5,0) NOT NULL,
    label character varying(40) NOT NULL,
    CONSTRAINT mrsperali_label_nn CHECK ((label IS NOT NULL))
);


ALTER TABLE mrs_person_alias OWNER TO postgres;

--
-- Name: mrs_person_alias_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_person_alias_hist (
    alias_id numeric(5,0),
    label character varying(40),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_person_alias_hist OWNER TO postgres;

--
-- Name: mrs_person_alias_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_person_alias_vw AS
 SELECT mrs_person_alias.alias_id,
    mrs_person_alias.label
   FROM mrs_person_alias;


ALTER TABLE mrs_person_alias_vw OWNER TO postgres;

--
-- Name: mrs_person_match_tmp; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_person_match_tmp (
    session_id character varying(40) NOT NULL,
    person_id character varying(40) NOT NULL,
    first_name character varying(100),
    middle_name character varying(100),
    last_name character varying(100),
    site_id character varying(8)
);


ALTER TABLE mrs_person_match_tmp OWNER TO postgres;

--
-- Name: mrs_person_match_tmp_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_person_match_tmp_vw AS
 SELECT p.session_id,
    p.person_id,
    p.first_name,
    p.middle_name,
    p.last_name,
    s.description AS site
   FROM mrs_person_match_tmp p,
    casdba.cas_sites s
  WHERE ((s.site_id)::text = (p.site_id)::text);


ALTER TABLE mrs_person_match_tmp_vw OWNER TO ni_developers;

--
-- Name: mrs_person_phone_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_person_phone_details (
    person_id character varying(40) NOT NULL,
    phone_id numeric(8,0) NOT NULL
);


ALTER TABLE mrs_person_phone_details OWNER TO postgres;

--
-- Name: mrs_person_role_det_add_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_person_role_det_add_vw AS
 SELECT mrs_person_role_det_addresses.prd_id,
    mrs_person_role_det_addresses.address_id
   FROM mrs_person_role_det_addresses;


ALTER TABLE mrs_person_role_det_add_vw OWNER TO postgres;

--
-- Name: mrs_person_role_det_phones; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_person_role_det_phones (
    prd_id numeric(6,0) NOT NULL,
    phone_id numeric(8,0) NOT NULL
);


ALTER TABLE mrs_person_role_det_phones OWNER TO postgres;

--
-- Name: mrs_person_role_det_phones_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_person_role_det_phones_vw AS
 SELECT mrs_person_role_det_phones.prd_id,
    mrs_person_role_det_phones.phone_id
   FROM mrs_person_role_det_phones;


ALTER TABLE mrs_person_role_det_phones_vw OWNER TO postgres;

--
-- Name: mrs_person_role_details_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_person_role_details_hist (
    person_id character varying(40),
    role_id numeric(4,0),
    alias_id numeric(6,0),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    study_id numeric(4,0),
    prd_id numeric(6,0),
    is_hidden boolean
);


ALTER TABLE mrs_person_role_details_hist OWNER TO postgres;

--
-- Name: mrs_person_role_details_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_person_role_details_vw AS
 SELECT mrs_person_role_details.person_id,
    mrs_person_role_details.role_id,
    mrs_person_role_details.alias_id,
    mrs_person_role_details.study_id,
    mrs_person_role_details.prd_id,
    mrs_person_role_details.is_hidden
   FROM mrs_person_role_details;


ALTER TABLE mrs_person_role_details_vw OWNER TO postgres;

--
-- Name: mrs_personaddress_types_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_personaddress_types_vw AS
 SELECT mrs_personaddress_types.address_type_id,
    mrs_personaddress_types.label,
    mrs_personaddress_types.description
   FROM mrs_personaddress_types;


ALTER TABLE mrs_personaddress_types_vw OWNER TO postgres;

--
-- Name: mrs_personaddresses_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_personaddresses_hist (
    address_id numeric(4,0) NOT NULL,
    address_line_1 character varying(100) NOT NULL,
    address_line_2 character varying(100),
    msc character varying(100),
    city character varying(100),
    state character varying(100),
    zip character varying(8),
    country character varying(100),
    address_type_id numeric(4,0) NOT NULL,
    preference_id numeric(4,0) DEFAULT 1,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_personaddresses_hist OWNER TO postgres;

--
-- Name: mrs_personaddresses_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_personaddresses_vw AS
 SELECT mrs_personaddresses.address_id,
    mrs_personaddresses.address_line_1,
    mrs_personaddresses.address_line_2,
    mrs_personaddresses.msc,
    mrs_personaddresses.city,
    mrs_personaddresses.state,
    mrs_personaddresses.zip,
    mrs_personaddresses.country,
    mrs_personaddresses.address_type_id,
    mrs_personaddresses.preference_id
   FROM mrs_personaddresses;


ALTER TABLE mrs_personaddresses_vw OWNER TO postgres;

--
-- Name: mrs_personphone_types; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_personphone_types (
    phone_type_id numeric(4,0) NOT NULL,
    label character varying(100) NOT NULL,
    description character varying(100)
);


ALTER TABLE mrs_personphone_types OWNER TO postgres;

--
-- Name: mrs_personphone_types_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_personphone_types_vw AS
 SELECT mrs_personphone_types.phone_type_id,
    mrs_personphone_types.label,
    mrs_personphone_types.description
   FROM mrs_personphone_types;


ALTER TABLE mrs_personphone_types_vw OWNER TO postgres;

--
-- Name: mrs_personphones; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_personphones (
    phone_id numeric(4,0) NOT NULL,
    country_code character varying(3) NOT NULL,
    area_code character varying(3) NOT NULL,
    phone_number character varying(8) NOT NULL,
    phone_type_id numeric(4,0) NOT NULL,
    sms_preference_id numeric(4,0) DEFAULT 1,
    preference_id numeric(4,0) DEFAULT 1
);


ALTER TABLE mrs_personphones OWNER TO postgres;

--
-- Name: mrs_personphones_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_personphones_hist (
    phone_id numeric(4,0) NOT NULL,
    country_code character varying(3) NOT NULL,
    area_code character varying(3) NOT NULL,
    phone_number character varying(8) NOT NULL,
    phone_type_id numeric(4,0) NOT NULL,
    sms_preference_id numeric(4,0),
    preference_id numeric(4,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_personphones_hist OWNER TO postgres;

--
-- Name: mrs_personphones_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_personphones_vw AS
 SELECT mrs_personphones.phone_id,
    mrs_personphones.country_code,
    mrs_personphones.area_code,
    mrs_personphones.phone_number,
    mrs_personphones.phone_type_id,
    mrs_personphones.sms_preference_id,
    mrs_personphones.preference_id
   FROM mrs_personphones;


ALTER TABLE mrs_personphones_vw OWNER TO postgres;

--
-- Name: mrs_persons2_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_persons2_vw AS
 SELECT mrs_persons.person_id,
    mrs_persons.first_name,
    mrs_persons.middle_name,
    mrs_persons.last_name,
    mrs_persons.site_id,
    mrs_persons.department,
    mrs_persons.institution,
    mrs_persons.contact_email
   FROM mrs_persons;


ALTER TABLE mrs_persons2_vw OWNER TO postgres;

--
-- Name: mrs_persons_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_persons_hist (
    person_id character varying(40),
    first_name character varying(50),
    middle_name character varying(50),
    last_name character varying(50),
    site_id character varying(3),
    department character varying(50),
    institution character varying(50),
    contact_email character varying(50),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_persons_hist OWNER TO postgres;

--
-- Name: mrs_roles; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_roles (
    role_id numeric(4,0) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000) NOT NULL,
    CONSTRAINT mrsroles_description_nn CHECK ((description IS NOT NULL)),
    CONSTRAINT mrsroles_label_nn CHECK ((label IS NOT NULL))
);


ALTER TABLE mrs_roles OWNER TO postgres;

--
-- Name: mrs_persons_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_persons_vw AS
 SELECT p.person_id,
    p.first_name,
    p.middle_name,
    p.last_name,
    a.label AS alias,
    d.alias_id,
    p.site_id,
    p.department,
    p.institution,
    p.contact_email,
    r.role_id,
    r.label AS role_label,
    d.study_id
   FROM (((mrs_persons p
     JOIN mrs_person_role_details d ON (((d.person_id)::text = (p.person_id)::text)))
     JOIN mrs_roles r ON ((d.role_id = r.role_id)))
     LEFT JOIN mrs_person_alias a ON ((d.alias_id = a.alias_id)));


ALTER TABLE mrs_persons_vw OWNER TO postgres;

--
-- Name: mrs_phones; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_phones (
    phone_id numeric(8,0) NOT NULL,
    area_code character varying(3) NOT NULL,
    phone_num character varying(8) NOT NULL,
    extension character varying(5),
    notes character varying(4000)
);


ALTER TABLE mrs_phones OWNER TO postgres;

--
-- Name: mrs_phones_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_phones_hist (
    phone_id numeric(8,0),
    area_code character varying(3),
    phone_num character varying(8),
    extension character varying(5),
    notes character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_phones_hist OWNER TO postgres;

--
-- Name: mrs_phones_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_phones_vw AS
 SELECT mrs_phones.phone_id,
    mrs_phones.area_code,
    mrs_phones.phone_num,
    mrs_phones.extension,
    mrs_phones.notes
   FROM mrs_phones;


ALTER TABLE mrs_phones_vw OWNER TO postgres;

--
-- Name: mrs_pi_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_pi_vw AS
 SELECT DISTINCT p.person_id,
    p.first_name,
    p.middle_name,
    p.last_name,
    a.label AS alias,
    p.site_id,
    p.department,
    p.institution,
    p.contact_email
   FROM mrs_persons p,
    mrs_roles r,
    (mrs_person_role_details d
     LEFT JOIN mrs_person_alias a ON ((a.alias_id = d.alias_id)))
  WHERE ((((d.person_id)::text = (p.person_id)::text) AND (d.role_id = r.role_id)) AND ((r.label)::text = 'PI'::text));


ALTER TABLE mrs_pi_vw OWNER TO postgres;

--
-- Name: mrs_proj_co_investigator; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_proj_co_investigator (
    project_id numeric(10,0) NOT NULL,
    person_id character varying(40) NOT NULL
);


ALTER TABLE mrs_proj_co_investigator OWNER TO postgres;

--
-- Name: mrs_proj_co_inv_details_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_proj_co_inv_details_vw AS
 SELECT mrs_proj_co_investigator.person_id,
    mrs_proj_co_investigator.project_id
   FROM mrs_proj_co_investigator;


ALTER TABLE mrs_proj_co_inv_details_vw OWNER TO postgres;

--
-- Name: mrs_proj_co_inv_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_proj_co_inv_hist (
    project_id numeric(10,0),
    person_id character varying(40),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_proj_co_inv_hist OWNER TO postgres;

--
-- Name: mrs_proj_data_dom_det_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_proj_data_dom_det_hist (
    project_id numeric(10,0),
    data_domain_id numeric(10,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_proj_data_dom_det_hist OWNER TO postgres;

--
-- Name: mrs_proj_data_dom_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_proj_data_dom_details (
    data_domain_id numeric(10,0) NOT NULL,
    project_id numeric(10,0) NOT NULL
);


ALTER TABLE mrs_proj_data_dom_details OWNER TO postgres;

--
-- Name: mrs_proj_data_dom_details_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_proj_data_dom_details_vw AS
 SELECT mrs_proj_data_dom_details.data_domain_id,
    mrs_proj_data_dom_details.project_id
   FROM mrs_proj_data_dom_details;


ALTER TABLE mrs_proj_data_dom_details_vw OWNER TO postgres;

--
-- Name: mrs_proj_study_det_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_proj_study_det_hist (
    study_id numeric(10,0),
    project_id numeric(10,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_proj_study_det_hist OWNER TO postgres;

--
-- Name: mrs_proj_study_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_proj_study_details (
    study_id numeric(10,0) NOT NULL,
    project_id numeric(10,0) NOT NULL
);


ALTER TABLE mrs_proj_study_details OWNER TO postgres;

--
-- Name: mrs_protocol_reqs_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_protocol_reqs_counter
    START WITH 1469
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 20;


ALTER TABLE mrs_protocol_reqs_counter OWNER TO postgres;

--
-- Name: mrs_protocol_requirements; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_protocol_requirements (
    protocol_req_id numeric(8,0) NOT NULL,
    protocol_id numeric(8,0) NOT NULL,
    table_name character varying(30) NOT NULL,
    owner character varying(30) NOT NULL,
    column_name character varying(30) NOT NULL,
    column_type character varying(30) NOT NULL,
    column_req_value_string character varying(30),
    column_req_value_number numeric(8,0),
    sort_order numeric,
    CONSTRAINT mrsproreq_coltype_check CHECK (((column_type)::text = ANY (ARRAY[('STRING'::character varying)::text, ('NUMBER'::character varying)::text])))
);


ALTER TABLE mrs_protocol_requirements OWNER TO postgres;

--
-- Name: mrs_protocol_requirements_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_protocol_requirements_hist (
    protocol_req_id numeric,
    protocol_id numeric,
    table_name text,
    owner text,
    column_name text,
    column_type text,
    column_req_value_string text,
    column_req_value_number numeric,
    sort_order numeric,
    mod_user text,
    mod_date timestamp with time zone
);


ALTER TABLE mrs_protocol_requirements_hist OWNER TO ni_developers;

--
-- Name: mrs_protocol_requirements_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_protocol_requirements_vw AS
 SELECT mrs_protocol_requirements.protocol_req_id,
    mrs_protocol_requirements.protocol_id,
    mrs_protocol_requirements.table_name,
    mrs_protocol_requirements.owner,
    mrs_protocol_requirements.column_name,
    mrs_protocol_requirements.column_type,
    mrs_protocol_requirements.column_req_value_string,
    mrs_protocol_requirements.column_req_value_number,
    mrs_protocol_requirements.sort_order
   FROM mrs_protocol_requirements;


ALTER TABLE mrs_protocol_requirements_vw OWNER TO ni_developers;

--
-- Name: mrs_protocols; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_protocols (
    protocol_id numeric(8,0) NOT NULL,
    subject_type_id numeric(8,0) NOT NULL,
    protocol_type_id numeric(7,0) NOT NULL,
    description character varying(1000),
    start_minutes_from_segment_interval numeric DEFAULT 0 NOT NULL,
    end_minutes_from_segment_interval numeric DEFAULT 0 NOT NULL,
    source_type_id integer,
    segment_interval_id integer,
    label character varying(200),
    queue_type_id integer
);


ALTER TABLE mrs_protocols OWNER TO postgres;

--
-- Name: mrs_study_intervals; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_study_intervals (
    study_id numeric(8,0) NOT NULL,
    label character varying(50) NOT NULL,
    time_from_baseline numeric(8,0) NOT NULL,
    time_unit character varying(10) DEFAULT 'DAY'::character varying,
    segment_interval character varying(20) NOT NULL,
    is_hidden boolean DEFAULT false,
    segment_interval_id integer NOT NULL
);


ALTER TABLE mrs_study_intervals OWNER TO ni_developers;

--
-- Name: mrs_subject_assessments_queue_types; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_assessments_queue_types (
    queue_type_id integer NOT NULL,
    label character varying(50),
    sa_label character varying(50),
    description character varying(500),
    sa_description character varying(500)
);


ALTER TABLE mrs_subject_assessments_queue_types OWNER TO postgres;

--
-- Name: mrs_protocols_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_protocols_vw AS
 SELECT mp.protocol_id,
    mst.study_id,
    mp.subject_type_id,
    msi.segment_interval,
    msi.label AS segment_interval_label,
    msi.time_from_baseline,
    mp.protocol_type_id,
    mp.description,
    mp.start_minutes_from_segment_interval,
    mp.end_minutes_from_segment_interval,
    mp.source_type_id,
    mp.segment_interval_id,
    mp.label,
    mp.queue_type_id,
    qt.label AS queue_type_label
   FROM (((mrs_protocols mp
     JOIN mrs_subject_types mst ON ((mp.subject_type_id = mst.subject_type_id)))
     JOIN mrs_study_intervals msi ON ((mp.segment_interval_id = msi.segment_interval_id)))
     LEFT JOIN mrs_subject_assessments_queue_types qt ON ((mp.queue_type_id = qt.queue_type_id)));


ALTER TABLE mrs_protocols_vw OWNER TO ni_developers;

--
-- Name: mrs_study_intervals_subject_schedules; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_study_intervals_subject_schedules (
    study_intervals_subject_schedules_id integer NOT NULL,
    segment_interval_id integer NOT NULL,
    ursi character varying NOT NULL,
    segment_interval_timestamp timestamp without time zone
);


ALTER TABLE mrs_study_intervals_subject_schedules OWNER TO ni_developers;

--
-- Name: mrs_study_intervals_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_study_intervals_vw AS
 SELECT mrs_study_intervals.study_id,
    mrs_study_intervals.label,
    mrs_study_intervals.time_from_baseline,
    mrs_study_intervals.time_unit,
    mrs_study_intervals.segment_interval,
    mrs_study_intervals.is_hidden,
    mrs_study_intervals.segment_interval_id
   FROM mrs_study_intervals;


ALTER TABLE mrs_study_intervals_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_assessments_queue; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_assessments_queue (
    aqueue_id_deprecated numeric,
    login_id numeric NOT NULL,
    aqueue_id integer NOT NULL,
    from_protocol_id numeric,
    auto_queue_generated boolean DEFAULT false,
    start_date timestamp without time zone,
    end_date timestamp without time zone
);


ALTER TABLE mrs_subject_assessments_queue OWNER TO ni_developers;

--
-- Name: mrs_subject_logins; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_logins (
    login_id numeric NOT NULL,
    usid character varying NOT NULL,
    study_id numeric NOT NULL,
    subject_id character varying,
    source_type numeric NOT NULL,
    nonstop_queue boolean
);


ALTER TABLE mrs_subject_logins OWNER TO postgres;

--
-- Name: mrs_subject_type_det_active_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subject_type_det_active_vw AS
 SELECT d.usid,
    d.ursi,
    d.subject_type_id,
    t.label AS type_label,
    t.study_id,
    s.label AS study_label,
    d.enrolled_date,
    d.user_enrolled,
    d.agreestosharedata,
    d.consent_date,
    d.anchor_date
   FROM mrs_studies s,
    mrs_subject_types t,
    mrs_subject_type_details d
  WHERE (((t.subject_type_id = d.subject_type_id) AND (t.study_id = s.study_id)) AND (d.disenrolled_date IS NULL));


ALTER TABLE mrs_subject_type_det_active_vw OWNER TO postgres;

--
-- Name: mrs_protocol_times_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_protocol_times_vw AS
 SELECT DISTINCT get_time.login_id,
    get_time.subject_id,
    get_time.aqueue_id,
    get_time.protocol_id,
    get_time.protocol_label,
    get_time.ursi,
    get_time.timezone_name,
    get_time.subject_type_id,
    get_time.study_id,
    get_time.segment_interval_id,
    get_time.segment_interval,
    get_time.visit_label,
    get_time.protocol_type_id,
    get_time.source_type_id,
    get_time.auto_queue_generated,
    get_time.queue_type_id,
    get_time.start_minutes_from_segment_interval,
    get_time.end_minutes_from_segment_interval,
        CASE
            WHEN (get_time.scheduled_date IS NOT NULL) THEN get_time.scheduled_date
            WHEN (get_time.templated_date IS NOT NULL) THEN (get_time.templated_date + (get_time.template_time_and_unit_from_baseline)::interval)
            ELSE NULL::timestamp without time zone
        END AS event_date,
        CASE
            WHEN ((get_time.queued_start_date IS NOT NULL) AND (get_time.queued_end_date IS NOT NULL)) THEN get_time.queued_start_date
            WHEN (get_time.scheduled_date IS NOT NULL) THEN (get_time.scheduled_date + ((get_time.start_minutes_from_segment_interval || ' MINUTE'::text))::interval)
            WHEN (get_time.templated_date IS NOT NULL) THEN ((get_time.templated_date + (get_time.template_time_and_unit_from_baseline)::interval) + ((get_time.start_minutes_from_segment_interval || ' MINUTE'::text))::interval)
            ELSE NULL::timestamp without time zone
        END AS start_date,
        CASE
            WHEN ((get_time.queued_start_date IS NOT NULL) AND (get_time.queued_end_date IS NOT NULL)) THEN get_time.queued_end_date
            WHEN (get_time.scheduled_date IS NOT NULL) THEN (get_time.scheduled_date + ((get_time.end_minutes_from_segment_interval || ' MINUTE'::text))::interval)
            WHEN (get_time.templated_date IS NOT NULL) THEN ((get_time.templated_date + (get_time.template_time_and_unit_from_baseline)::interval) + ((get_time.end_minutes_from_segment_interval || ' MINUTE'::text))::interval)
            ELSE NULL::timestamp without time zone
        END AS end_date,
        CASE
            WHEN ((get_time.queued_start_date IS NOT NULL) AND (get_time.queued_end_date IS NOT NULL)) THEN 'queued'::text
            WHEN (get_time.scheduled_date IS NOT NULL) THEN 'scheduled'::text
            WHEN (get_time.templated_date IS NOT NULL) THEN 'templated'::text
            ELSE NULL::text
        END AS event_type
   FROM ( SELECT saq.login_id,
                CASE
                    WHEN (saq.aqueue_id IS NOT NULL) THEN sl.subject_id
                    ELSE NULL::character varying
                END AS subject_id,
            saq.aqueue_id,
            p.protocol_id,
            p.label AS protocol_label,
            stda.ursi,
            cs.timezone_name,
            p.subject_type_id,
            p.study_id,
            p.segment_interval_id,
            p.segment_interval,
            intv.label AS visit_label,
            p.protocol_type_id,
            p.queue_type_id,
            (p.source_type_id)::numeric AS source_type_id,
                CASE
                    WHEN (saq.auto_queue_generated IS NULL) THEN false
                    ELSE saq.auto_queue_generated
                END AS auto_queue_generated,
            saq.start_date AS queued_start_date,
            saq.end_date AS queued_end_date,
            siss.segment_interval_timestamp AS scheduled_date,
                CASE
                    WHEN (stda.anchor_date IS NULL) THEN ((stda.enrolled_date)::date)::timestamp without time zone
                    ELSE ((stda.anchor_date)::date)::timestamp without time zone
                END AS templated_date,
                CASE
                    WHEN (upper((intv.time_unit)::text) = ANY (ARRAY['DAY'::text, 'WEEK'::text, 'MONTH'::text, 'MONTHS'::text, 'YEAR'::text])) THEN ((intv.time_from_baseline || ' '::text) || (intv.time_unit)::text)
                    ELSE '0 day'::text
                END AS template_time_and_unit_from_baseline,
                CASE
                    WHEN (p.start_minutes_from_segment_interval IS NULL) THEN (0)::numeric
                    ELSE p.start_minutes_from_segment_interval
                END AS start_minutes_from_segment_interval,
                CASE
                    WHEN (p.end_minutes_from_segment_interval IS NULL) THEN (0)::numeric
                    ELSE p.end_minutes_from_segment_interval
                END AS end_minutes_from_segment_interval
           FROM (((((((mrs_protocols_vw p
             JOIN mrs_study_intervals_vw intv ON ((p.segment_interval_id = intv.segment_interval_id)))
             JOIN mrs_subject_type_det_active_vw stda ON ((p.subject_type_id = stda.subject_type_id)))
             JOIN mrs_studies ms ON ((stda.study_id = ms.study_id)))
             JOIN casdba.cas_sites cs ON (((ms.site_id)::text = (cs.site_id)::text)))
             LEFT JOIN mrs_study_intervals_subject_schedules siss ON (((p.segment_interval_id = siss.segment_interval_id) AND ((stda.ursi)::text = (siss.ursi)::text))))
             LEFT JOIN mrs_subject_logins sl ON ((((stda.study_id = sl.study_id) AND ((stda.usid)::text = (sl.usid)::text)) AND ((p.source_type_id)::numeric = sl.source_type))))
             LEFT JOIN mrs_subject_assessments_queue saq ON (((sl.login_id = saq.login_id) AND (p.protocol_id = saq.from_protocol_id))))) get_time;


ALTER TABLE mrs_protocol_times_vw OWNER TO ni_developers;

--
-- Name: mrs_protocol_types; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_protocol_types (
    protocol_type_id numeric(7,0) NOT NULL,
    label character varying(30) NOT NULL
);


ALTER TABLE mrs_protocol_types OWNER TO postgres;

--
-- Name: mrs_protocol_types_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_protocol_types_vw AS
 SELECT mrs_protocol_types.protocol_type_id,
    mrs_protocol_types.label
   FROM mrs_protocol_types;


ALTER TABLE mrs_protocol_types_vw OWNER TO postgres;

--
-- Name: mrs_protocols_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_protocols_counter
    START WITH 541
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 20;


ALTER TABLE mrs_protocols_counter OWNER TO postgres;

--
-- Name: mrs_protocols_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_protocols_hist (
    protocol_id numeric(8,0),
    subject_type_id numeric(8,0),
    protocol_type_id numeric(7,0),
    description character varying(1000),
    start_minutes_from_segment_interval numeric,
    end_minutes_from_segment_interval numeric,
    source_type_id integer,
    segment_interval_id integer,
    label character varying(200),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    queue_type_id integer
);


ALTER TABLE mrs_protocols_hist OWNER TO ni_developers;

--
-- Name: mrs_purchase_requests; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_purchase_requests (
    purchase_request_id character varying(24) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    CONSTRAINT mrspurreq_studyid_nn CHECK ((study_id IS NOT NULL))
);


ALTER TABLE mrs_purchase_requests OWNER TO postgres;

--
-- Name: mrs_purchase_requests_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_purchase_requests_hist (
    purchase_request_id character varying(24),
    study_id numeric(4,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_purchase_requests_hist OWNER TO postgres;

--
-- Name: mrs_purchase_requests_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_purchase_requests_vw AS
 SELECT ipr.purchase_request_id,
    ipr.study_id,
    s.label AS study_label
   FROM mrs_purchase_requests ipr,
    mrs_studies s
  WHERE (ipr.study_id = s.study_id);


ALTER TABLE mrs_purchase_requests_vw OWNER TO postgres;

--
-- Name: mrs_qa_threshold; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_qa_threshold (
    id integer NOT NULL,
    label character varying(20) NOT NULL,
    threshold numeric(8,2) NOT NULL,
    study_id character varying(100) NOT NULL,
    user_id character varying(50) NOT NULL
);


ALTER TABLE mrs_qa_threshold OWNER TO postgres;

--
-- Name: mrs_qa_threshold_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_qa_threshold_counter
    START WITH 5
    INCREMENT BY 5
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE mrs_qa_threshold_counter OWNER TO postgres;

--
-- Name: mrs_qa_threshold_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_qa_threshold_vw AS
 SELECT mrs_qa_threshold.id,
    mrs_qa_threshold.label,
    mrs_qa_threshold.threshold,
    mrs_qa_threshold.study_id,
    mrs_qa_threshold.user_id
   FROM mrs_qa_threshold;


ALTER TABLE mrs_qa_threshold_vw OWNER TO postgres;

--
-- Name: mrs_qb_asmt_data_sort_temp; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_qb_asmt_data_sort_temp (
    id integer NOT NULL,
    session_id character varying NOT NULL,
    username character varying NOT NULL,
    date timestamp with time zone NOT NULL,
    query_piece_sort_order numeric NOT NULL,
    study_id numeric NOT NULL,
    segment_interval character varying NOT NULL,
    instrument_id numeric NOT NULL,
    question_id character varying NOT NULL
);


ALTER TABLE mrs_qb_asmt_data_sort_temp OWNER TO ni_developers;

--
-- Name: mrs_qb_asmt_data_sort_temp_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_qb_asmt_data_sort_temp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_qb_asmt_data_sort_temp_id_seq OWNER TO ni_developers;

--
-- Name: mrs_qb_asmt_data_sort_temp_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_qb_asmt_data_sort_temp_id_seq OWNED BY mrs_qb_asmt_data_sort_temp.id;


--
-- Name: mrs_qb_asmt_pivot_categories_temp; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_qb_asmt_pivot_categories_temp (
    id integer NOT NULL,
    session_id character varying NOT NULL,
    username character varying NOT NULL,
    date timestamp with time zone NOT NULL,
    category character varying NOT NULL,
    data_sort_order integer NOT NULL,
    instrument_id numeric NOT NULL
);


ALTER TABLE mrs_qb_asmt_pivot_categories_temp OWNER TO ni_developers;

--
-- Name: mrs_qb_asmt_pivot_categories_temp_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_qb_asmt_pivot_categories_temp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_qb_asmt_pivot_categories_temp_id_seq OWNER TO ni_developers;

--
-- Name: mrs_qb_asmt_pivot_categories_temp_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_qb_asmt_pivot_categories_temp_id_seq OWNED BY mrs_qb_asmt_pivot_categories_temp.id;


--
-- Name: mrs_query_temp; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_query_temp (
    dbuser character varying(40),
    ursi character varying(9),
    enrolled_date timestamp without time zone,
    oldest_ursi character varying(11),
    ursi_match character varying(20)
);


ALTER TABLE mrs_query_temp OWNER TO postgres;

--
-- Name: mrs_racial_categories; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_racial_categories (
    racial_category_id numeric NOT NULL,
    label character varying(60)
);


ALTER TABLE mrs_racial_categories OWNER TO postgres;

--
-- Name: mrs_racial_categories_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_racial_categories_vw AS
 SELECT mrs_racial_categories.racial_category_id,
    mrs_racial_categories.label
   FROM mrs_racial_categories;


ALTER TABLE mrs_racial_categories_vw OWNER TO postgres;

--
-- Name: mrs_rad_comment_id_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_rad_comment_id_counter
    START WITH 161
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 20;


ALTER TABLE mrs_rad_comment_id_counter OWNER TO postgres;

--
-- Name: mrs_radiologist_comments; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_radiologist_comments (
    comment_id numeric NOT NULL,
    comment_text character varying(1000) NOT NULL,
    requires_followup boolean DEFAULT false,
    is_hidden boolean DEFAULT false,
    category text
);


ALTER TABLE mrs_radiologist_comments OWNER TO postgres;

--
-- Name: mrs_rad_comments_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_rad_comments_vw AS
 SELECT mrs_radiologist_comments.comment_id,
    mrs_radiologist_comments.comment_text,
    mrs_radiologist_comments.is_hidden,
    mrs_radiologist_comments.requires_followup,
    mrs_radiologist_comments.category
   FROM mrs_radiologist_comments;


ALTER TABLE mrs_rad_comments_vw OWNER TO postgres;

--
-- Name: mrs_radiologists_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_radiologists_vw AS
 SELECT p.person_id,
    p.first_name,
    p.middle_name,
    p.last_name,
    a.label AS alias,
    p.site_id,
    p.department,
    p.institution,
    p.contact_email
   FROM (((mrs_persons p
     JOIN mrs_person_role_details d ON (((d.person_id)::text = (p.person_id)::text)))
     JOIN mrs_roles r ON ((d.role_id = r.role_id)))
     LEFT JOIN mrs_person_alias a ON ((d.alias_id = a.alias_id)))
  WHERE ((r.label)::text = 'RADIOLOGIST'::text);


ALTER TABLE mrs_radiologists_vw OWNER TO postgres;

--
-- Name: mrs_radiology_recommendation_codes; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_radiology_recommendation_codes (
    code character varying(2) NOT NULL,
    label character varying,
    description character varying,
    visible boolean DEFAULT true NOT NULL
);


ALTER TABLE mrs_radiology_recommendation_codes OWNER TO ni_developers;

--
-- Name: mrs_radiology_recommendation_codes_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_radiology_recommendation_codes_vw AS
 SELECT mrs_radiology_recommendation_codes.code,
    mrs_radiology_recommendation_codes.label,
    mrs_radiology_recommendation_codes.description,
    mrs_radiology_recommendation_codes.visible
   FROM mrs_radiology_recommendation_codes;


ALTER TABLE mrs_radiology_recommendation_codes_vw OWNER TO ni_developers;

--
-- Name: mrs_raters_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_raters_vw AS
 SELECT p.person_id,
    p.first_name,
    p.middle_name,
    p.last_name,
    a.alias_id,
    a.label AS alias_label,
    p.site_id,
    p.department,
    p.institution,
    p.contact_email,
    d.study_id,
    d.is_hidden,
    d.prd_id
   FROM mrs_persons p,
    mrs_roles r,
    (mrs_person_alias a
     LEFT JOIN mrs_person_role_details d ON ((d.alias_id = a.alias_id)))
  WHERE ((((d.person_id)::text = (p.person_id)::text) AND (d.role_id = r.role_id)) AND ((r.label)::text = 'RATER'::text));


ALTER TABLE mrs_raters_vw OWNER TO postgres;

--
-- Name: mrs_study_scanner_rates; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_scanner_rates (
    scanner_id numeric(3,0) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    rate_amt numeric(8,2) NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000),
    start_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone,
    CONSTRAINT mrsstscra_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsstscra_rateamt_nn CHECK ((rate_amt IS NOT NULL)),
    CONSTRAINT mrsstscra_scannerid_nn CHECK ((scanner_id IS NOT NULL)),
    CONSTRAINT mrsstscra_startdate_nn CHECK ((start_date IS NOT NULL)),
    CONSTRAINT mrsstscra_studyid_nn CHECK ((study_id IS NOT NULL))
);


ALTER TABLE mrs_study_scanner_rates OWNER TO postgres;

--
-- Name: mrs_rates_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_rates_vw AS
 SELECT issr.scanner_id,
    sc.label AS scanner_label,
    issr.study_id,
    st.label AS study_label,
    issr.label AS rate_label,
    issr.rate_amt
   FROM mrs_study_scanner_rates issr,
    mrs_studies st,
    mrs_scanners sc
  WHERE ((issr.scanner_id = sc.scanner_id) AND (issr.study_id = st.study_id));


ALTER TABLE mrs_rates_vw OWNER TO postgres;

--
-- Name: mrs_rdoc_coins_question_map_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_rdoc_coins_question_map_hist (
    id integer,
    coins_question_id integer,
    rdoc_inst_id character varying,
    rdoc_question_short_tag character varying,
    transform character varying,
    transform_ui_cache character varying,
    mod_user character varying,
    mod_date timestamp with time zone
);


ALTER TABLE mrs_rdoc_coins_question_map_hist OWNER TO ni_developers;

--
-- Name: mrs_rdoc_coins_question_map_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_rdoc_coins_question_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_rdoc_coins_question_map_id_seq OWNER TO ni_developers;

--
-- Name: mrs_rdoc_coins_question_map_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_rdoc_coins_question_map_id_seq OWNED BY mrs_rdoc_coins_question_map.id;


--
-- Name: mrs_rdoc_coins_question_map_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_rdoc_coins_question_map_vw AS
 SELECT mrs_rdoc_coins_question_map.id,
    mrs_rdoc_coins_question_map.coins_question_id,
    mrs_rdoc_coins_question_map.rdoc_inst_id,
    mrs_rdoc_coins_question_map.rdoc_question_short_tag,
    mrs_rdoc_coins_question_map.transform,
    mrs_rdoc_coins_question_map.transform_ui_cache
   FROM mrs_rdoc_coins_question_map;


ALTER TABLE mrs_rdoc_coins_question_map_vw OWNER TO ni_developers;

--
-- Name: mrs_recent_scan_exports; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_recent_scan_exports (
    scan_export_id numeric(8,0) NOT NULL,
    db_username character varying(40) NOT NULL,
    export_date timestamp without time zone NOT NULL,
    query_text text NOT NULL,
    label character varying(200) NOT NULL
);


ALTER TABLE mrs_recent_scan_exports OWNER TO postgres;

--
-- Name: mrs_recruitment_criteria; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_recruitment_criteria (
    criteria_id numeric(10,0) NOT NULL,
    label character varying(50),
    description character varying(500)
);


ALTER TABLE mrs_recruitment_criteria OWNER TO postgres;

--
-- Name: mrs_recruitment_criteria_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_recruitment_criteria_vw AS
 SELECT mrs_recruitment_criteria.criteria_id,
    mrs_recruitment_criteria.label,
    mrs_recruitment_criteria.description
   FROM mrs_recruitment_criteria;


ALTER TABLE mrs_recruitment_criteria_vw OWNER TO postgres;

--
-- Name: mrs_req_mod_cond_data; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_req_mod_cond_data (
    modality_id numeric,
    scan_data_type_id numeric,
    sort_order numeric
);


ALTER TABLE mrs_req_mod_cond_data OWNER TO postgres;

--
-- Name: mrs_req_mod_cond_data_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_req_mod_cond_data_vw AS
 SELECT mrs_req_mod_cond_data.modality_id,
    mrs_req_mod_cond_data.scan_data_type_id,
    mrs_req_mod_cond_data.sort_order
   FROM mrs_req_mod_cond_data;


ALTER TABLE mrs_req_mod_cond_data_vw OWNER TO postgres;

--
-- Name: mrs_roles_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_roles_hist (
    role_id numeric(4,0),
    label character varying(200),
    description character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_roles_hist OWNER TO postgres;

--
-- Name: mrs_roles_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_roles_vw AS
 SELECT mrs_roles.role_id,
    mrs_roles.label,
    mrs_roles.description
   FROM mrs_roles;


ALTER TABLE mrs_roles_vw OWNER TO postgres;

--
-- Name: mrs_saved_queries; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_saved_queries (
    id integer NOT NULL,
    json_strng text NOT NULL
);


ALTER TABLE mrs_saved_queries OWNER TO ni_developers;

--
-- Name: mrs_saved_queries_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_saved_queries_hist (
    id integer,
    json_strng text,
    mod_user character varying,
    mod_date date
);


ALTER TABLE mrs_saved_queries_hist OWNER TO ni_developers;

--
-- Name: mrs_saved_queries_hist_orig; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_saved_queries_hist_orig (
    username character varying(30) NOT NULL,
    label character varying(200) NOT NULL,
    json_strng text,
    mod_user character varying(30),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_saved_queries_hist_orig OWNER TO postgres;

--
-- Name: mrs_saved_queries_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_saved_queries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_saved_queries_id_seq OWNER TO ni_developers;

--
-- Name: mrs_saved_queries_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_saved_queries_id_seq OWNED BY mrs_saved_queries.id;


--
-- Name: mrs_saved_queries_orig; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_saved_queries_orig (
    username character varying(30) NOT NULL,
    label character varying(200) NOT NULL,
    json_strng text
);


ALTER TABLE mrs_saved_queries_orig OWNER TO postgres;

--
-- Name: mrs_saved_user_queries; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_saved_user_queries (
    id integer NOT NULL,
    username character varying(30) NOT NULL,
    label character varying(200) NOT NULL,
    query_id integer
);


ALTER TABLE mrs_saved_user_queries OWNER TO ni_developers;

--
-- Name: mrs_saved_queries_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_saved_queries_vw AS
 SELECT q.json_strng,
    u.username,
    u.label,
    u.query_id
   FROM (mrs_saved_queries q
     JOIN mrs_saved_user_queries u ON ((q.id = u.query_id)));


ALTER TABLE mrs_saved_queries_vw OWNER TO ni_developers;

--
-- Name: mrs_saved_user_queries_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_saved_user_queries_hist (
    id integer,
    username character varying(30),
    label character varying(200),
    query_id integer,
    mod_user character varying,
    mod_date date
);


ALTER TABLE mrs_saved_user_queries_hist OWNER TO ni_developers;

--
-- Name: mrs_saved_user_queries_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_saved_user_queries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_saved_user_queries_id_seq OWNER TO ni_developers;

--
-- Name: mrs_saved_user_queries_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_saved_user_queries_id_seq OWNED BY mrs_saved_user_queries.id;


--
-- Name: mrs_scan_data_menu_values; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_data_menu_values (
    scan_data_type_id numeric,
    value character varying,
    label character varying
);


ALTER TABLE mrs_scan_data_menu_values OWNER TO postgres;

--
-- Name: mrs_scan_data_menu_values_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_scan_data_menu_values_vw AS
 SELECT mrs_scan_data_menu_values.scan_data_type_id,
    mrs_scan_data_menu_values.value,
    mrs_scan_data_menu_values.label
   FROM mrs_scan_data_menu_values;


ALTER TABLE mrs_scan_data_menu_values_vw OWNER TO postgres;

--
-- Name: mrs_scan_data_types_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_scan_data_types_vw AS
 SELECT mrs_scan_data_types.scan_data_type_id,
    mrs_scan_data_types.label,
    mrs_scan_data_types.description,
    mrs_scan_data_types.value_type,
    mrs_scan_data_types.max_instances
   FROM mrs_scan_data_types;


ALTER TABLE mrs_scan_data_types_vw OWNER TO postgres;

--
-- Name: mrs_scan_session_summary_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_scan_session_summary_vw AS
 SELECT study.pi_id,
    scan.study_id,
    study.label AS study_label,
    scan.scanner_id,
    scanner.label AS scanner_label,
    scanner.site_id,
    scanner.modality_id,
    scan.ursi,
    scan.scan_date,
    scan.scan_id,
    scan.label AS scan_label,
    scan.segment_interval,
    scan.notes AS scan_notes,
    series.series_id,
    sl.label AS series_label,
    series.base_path,
    sl.label_id,
    series.study_code_id,
    code.label AS study_code_label,
    series.usable,
    series.notes AS series_notes,
    series.sort_order AS series_sort_order
   FROM (((((mrs_scan_sessions scan
     LEFT JOIN mrs_series series ON ((scan.scan_id = series.scan_id)))
     JOIN mrs_studies study ON ((scan.study_id = study.study_id)))
     JOIN mrs_scanners scanner ON ((scan.scanner_id = scanner.scanner_id)))
     LEFT JOIN mrs_series_labels sl ON ((series.label_id = sl.label_id)))
     LEFT JOIN mrs_study_codes code ON ((series.study_code_id = code.code_id)))
  ORDER BY series.sort_order;


ALTER TABLE mrs_scan_session_summary_vw OWNER TO ni_developers;

--
-- Name: mrs_scan_sessions2_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_scan_sessions2_vw AS
 SELECT mrs_scan_sessions.scan_id,
    mrs_scan_sessions.label,
    mrs_scan_sessions.segment_interval,
    mrs_scan_sessions.study_id,
    mrs_scan_sessions.scanner_id,
    mrs_scan_sessions.scan_date,
    mrs_scan_sessions.operator_id,
    mrs_scan_sessions.ursi,
    mrs_scan_sessions.subject_height,
    mrs_scan_sessions.subject_height_units,
    mrs_scan_sessions.subject_mass,
    mrs_scan_sessions.subject_mass_units,
    mrs_scan_sessions.subject_age,
    mrs_scan_sessions.notes,
    mrs_scan_sessions.study_dir_name,
    mrs_scan_sessions.consented_under_study_id,
    mrs_scan_sessions.billto_study_id,
    mrs_scan_sessions.charge_code_id,
    mrs_scan_sessions.contrast_vials_used,
    mrs_scan_sessions.tech_slots_used,
    mrs_scan_sessions.billing_notes,
    mrs_scan_sessions.power_injector_used,
    mrs_scan_sessions.pi_dir_name,
    mrs_scan_sessions.priority,
    mrs_scan_sessions.radiology_loaded,
    mrs_scan_sessions.oxygen_used
   FROM mrs_scan_sessions;


ALTER TABLE mrs_scan_sessions2_vw OWNER TO ni_developers;

--
-- Name: mrs_scan_sessions_all_mods_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_scan_sessions_all_mods_vw AS
 SELECT DISTINCT subq.study_id,
    subq.study_label,
    subq.scanner_id,
    subq.scanner_label,
    subq.modality_label,
    subq.site_id,
    subq.scan_id,
    subq.scan_label,
    subq.segment_interval,
    subq.scan_date,
    subq.operator_id,
    subq.ursi,
    subq.subject_height,
    subq.subject_height_units,
    subq.subject_mass,
    subq.subject_mass_units,
    subq.subject_age,
    subq.notes,
    subq.study_dir_name,
    subq.consented_under_study_id,
    subq.billto_study_id,
    subq.charge_code_id,
    subq.contrast_vials_used,
    subq.pi_first_name,
    subq.pi_last_name,
    subq.hrrc_num,
    subq.billing_notes,
    subq.tech_slots_used,
    subq.power_injector_used,
    subq.modality_id,
    subq.is_phantom
   FROM ( SELECT scan.study_id,
            study.label AS study_label,
            scan.scanner_id,
            scanner.label AS scanner_label,
            m.label AS modality_label,
            scanner.site_id,
            scan.scan_id,
            scan.label AS scan_label,
            scan.segment_interval,
            scan.scan_date,
            scan.operator_id,
            scan.ursi,
            scan.subject_height,
            scan.subject_height_units,
            scan.subject_mass,
            scan.subject_mass_units,
            date_part('year'::text, age(scan.scan_date, subject.birth_date)) AS subject_age,
            scan.notes,
            scan.study_dir_name,
            scan.consented_under_study_id,
            scan.billto_study_id,
            scan.charge_code_id,
            scan.contrast_vials_used,
            pi.first_name AS pi_first_name,
            pi.last_name AS pi_last_name,
            study.hrrc_num,
            scan.billing_notes,
            scan.tech_slots_used,
            scan.power_injector_used,
            m.modality_id,
            scan.is_phantom
           FROM (((((((mrs_scan_sessions scan
             JOIN mrs_studies study ON ((study.study_id = scan.study_id)))
             JOIN mrs_pi_vw pi ON (((pi.person_id)::text = (study.pi_id)::text)))
             JOIN mrs_scanners scanner ON ((scanner.scanner_id = scan.scanner_id)))
             JOIN mrs_modalities m ON ((m.modality_id = scanner.modality_id)))
             LEFT JOIN mrs_subject_type_details std ON (((std.ursi)::text = (scan.ursi)::text)))
             LEFT JOIN mrs_subject_types st ON (((st.study_id = scan.study_id) AND (std.subject_type_id = st.subject_type_id))))
             LEFT JOIN mrs_subjects subject ON (((subject.usid)::text = (std.usid)::text)))
        UNION ALL
         SELECT eeg.study_id,
            study.label AS study_label,
            eeg.eeg_id AS scanner_id,
            scanner.label AS scanner_label,
            m.label AS modality_label,
            scanner.site_id,
            (- eeg.eeg_session_id) AS scan_id,
            eeg.label AS scan_label,
            eeg.segment_interval,
            eeg.scan_date,
            eeg.operator_id,
            eeg.ursi,
            (-1) AS subject_height,
            'na'::character varying AS subject_height_units,
            (-1) AS subject_mass,
            'na'::character varying AS subject_mass_units,
            date_part('year'::text, age(eeg.scan_date, subject.birth_date)) AS subject_age,
            eeg.notes,
            'na'::character varying AS study_dir_name,
            (-1) AS consented_under_study_id,
            (-1) AS billto_study_id,
            (-1) AS charge_code_id,
            (-1) AS contrast_vials_used,
            pi.first_name AS pi_first_name,
            pi.last_name AS pi_last_name,
            study.hrrc_num,
            'na'::character varying AS billing_notes,
            (-1) AS tech_slots_used,
            false AS power_injector_used,
            m.modality_id,
            NULL::boolean AS is_phantom
           FROM (((((((mrs_eeg_sessions eeg
             JOIN mrs_studies study ON ((eeg.study_id = study.study_id)))
             JOIN mrs_pi_vw pi ON (((pi.person_id)::text = (study.pi_id)::text)))
             JOIN mrs_eeg_devices scanner ON ((scanner.eeg_id = eeg.eeg_id)))
             JOIN mrs_modalities m ON ((m.modality_id = scanner.modality_id)))
             JOIN mrs_subject_type_details std ON (((std.ursi)::text = (eeg.ursi)::text)))
             JOIN mrs_subject_types st ON (((st.study_id = eeg.study_id) AND (std.subject_type_id = st.subject_type_id))))
             JOIN mrs_subjects subject ON (((subject.usid)::text = (std.usid)::text)))) subq;


ALTER TABLE mrs_scan_sessions_all_mods_vw OWNER TO ni_developers;

--
-- Name: mrs_scan_sessions_ext_props; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_sessions_ext_props (
    scan_id numeric(10,0) NOT NULL,
    prop_id numeric(10,0) NOT NULL,
    prop_value character varying(100) NOT NULL
);


ALTER TABLE mrs_scan_sessions_ext_props OWNER TO postgres;

--
-- Name: mrs_scan_sessions_ext_props_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_scan_sessions_ext_props_vw AS
 SELECT mrs_modality_properties.description,
    mrs_modality_properties.label,
    mrs_modality_properties.modality_id,
    mrs_modality_properties.prop_id,
    mrs_scan_sessions_ext_props.prop_value,
    mrs_scan_sessions_ext_props.scan_id
   FROM mrs_modality_properties,
    mrs_scan_sessions_ext_props
  WHERE (mrs_scan_sessions_ext_props.prop_id = mrs_modality_properties.prop_id);


ALTER TABLE mrs_scan_sessions_ext_props_vw OWNER TO postgres;

--
-- Name: mrs_scan_sessions_from_archive; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_sessions_from_archive (
    scan_id numeric(8,0) NOT NULL,
    label character varying(200) NOT NULL,
    ursi character varying(9) NOT NULL,
    notes character varying(4000),
    study_dir_name character varying(40) NOT NULL,
    pi_dir_name text NOT NULL,
    study_id numeric(8,0) NOT NULL,
    scanner_model character varying(30),
    micis_scan_id numeric(8,0),
    CONSTRAINT mrsscases_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsscases_ursi_nn CHECK ((ursi IS NOT NULL))
);


ALTER TABLE mrs_scan_sessions_from_archive OWNER TO postgres;

--
-- Name: TABLE mrs_scan_sessions_from_archive; Type: COMMENT; Schema: mrsdba; Owner: postgres
--

COMMENT ON TABLE mrs_scan_sessions_from_archive IS 'This table is populated with scan sessions in archive via cron job';


--
-- Name: mrs_scan_sessions_from_archive_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_scan_sessions_from_archive_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_scan_sessions_from_archive_counter OWNER TO postgres;

--
-- Name: mrs_scan_sessions_from_archive_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_sessions_from_archive_hist (
    scan_id numeric(8,0),
    label character varying(200),
    ursi character varying(9),
    notes character varying(4000),
    study_dir_name character varying(40),
    pi_dir_name text,
    study_id numeric(8,0),
    scanner_model character varying(30),
    micis_scan_id numeric(8,0)
);


ALTER TABLE mrs_scan_sessions_from_archive_hist OWNER TO postgres;

--
-- Name: mrs_scan_sessions_from_archive_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_scan_sessions_from_archive_vw AS
 SELECT mrs_scan_sessions_from_archive.scan_id,
    mrs_scan_sessions_from_archive.label,
    mrs_scan_sessions_from_archive.ursi,
    mrs_scan_sessions_from_archive.notes,
    mrs_scan_sessions_from_archive.study_dir_name,
    mrs_scan_sessions_from_archive.pi_dir_name,
    mrs_scan_sessions_from_archive.study_id,
    mrs_scan_sessions_from_archive.scanner_model,
    mrs_scan_sessions_from_archive.micis_scan_id
   FROM mrs_scan_sessions_from_archive;


ALTER TABLE mrs_scan_sessions_from_archive_vw OWNER TO postgres;

--
-- Name: mrs_scan_sessions_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_sessions_hist (
    scan_id numeric(8,0),
    label character varying(200),
    segment_interval character varying(20),
    study_id numeric(4,0),
    scanner_id numeric(3,0),
    account_number character varying(16),
    cost numeric(8,2),
    scan_date timestamp without time zone,
    operator_id character varying(40),
    radiologist_id character varying(40),
    ursi character varying,
    report_ind character varying(1),
    subject_type character varying(1),
    subject_height numeric(6,2),
    subject_height_units character varying(10),
    subject_mass numeric(5,2),
    subject_mass_units character varying(10),
    subject_age numeric(4,1),
    new_consent character varying(1),
    notes character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    consented_under_study_id numeric(4,0),
    billto_study_id numeric(4,0),
    study_dir_name character varying(200),
    contrast_vials_used numeric(5,0) DEFAULT 0,
    tech_slots_used numeric(5,0) DEFAULT 0,
    billing_notes character varying(4000),
    power_injector_used boolean DEFAULT false,
    priority character varying(1),
    pi_dir_name character varying(200),
    radiology_loaded character varying(1),
    oxygen_used boolean DEFAULT false,
    iv_supplies_used boolean,
    priority_notes text,
    charge_code_id numeric(16,0),
    assigned_radiologist character varying(40),
    dx_excluded boolean,
    review_end_date timestamp without time zone,
    review_load_date date,
    injector_type text DEFAULT 'none'::text,
    is_phantom boolean,
    funding_source text,
    project_number text,
    charge_code text
);


ALTER TABLE mrs_scan_sessions_hist OWNER TO postgres;

--
-- Name: mrs_scan_sessions_hist_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_scan_sessions_hist_vw AS
 SELECT mrs_scan_sessions_hist.scan_id,
    mrs_scan_sessions_hist.label,
    mrs_scan_sessions_hist.segment_interval,
    mrs_scan_sessions_hist.study_id,
    mrs_scan_sessions_hist.scanner_id,
    mrs_scan_sessions_hist.account_number,
    mrs_scan_sessions_hist.cost,
    mrs_scan_sessions_hist.scan_date,
    mrs_scan_sessions_hist.operator_id,
    mrs_scan_sessions_hist.radiologist_id,
    mrs_scan_sessions_hist.ursi,
    mrs_scan_sessions_hist.report_ind,
    mrs_scan_sessions_hist.subject_type,
    mrs_scan_sessions_hist.subject_height,
    mrs_scan_sessions_hist.subject_height_units,
    mrs_scan_sessions_hist.subject_mass,
    mrs_scan_sessions_hist.subject_mass_units,
    mrs_scan_sessions_hist.subject_age,
    mrs_scan_sessions_hist.new_consent,
    mrs_scan_sessions_hist.notes,
    mrs_scan_sessions_hist.mod_user,
    mrs_scan_sessions_hist.mod_date,
    mrs_scan_sessions_hist.consented_under_study_id,
    mrs_scan_sessions_hist.billto_study_id,
    mrs_scan_sessions_hist.charge_code_id,
    mrs_scan_sessions_hist.study_dir_name,
    mrs_scan_sessions_hist.contrast_vials_used,
    mrs_scan_sessions_hist.tech_slots_used,
    mrs_scan_sessions_hist.billing_notes,
    mrs_scan_sessions_hist.power_injector_used,
    mrs_scan_sessions_hist.priority,
    mrs_scan_sessions_hist.pi_dir_name,
    mrs_scan_sessions_hist.radiology_loaded,
    mrs_scan_sessions_hist.oxygen_used,
    mrs_scan_sessions_hist.funding_source,
    mrs_scan_sessions_hist.charge_code,
    mrs_scan_sessions_hist.project_number
   FROM mrs_scan_sessions_hist;


ALTER TABLE mrs_scan_sessions_hist_vw OWNER TO ni_developers;

--
-- Name: mrs_scan_sessions_qb_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_scan_sessions_qb_vw AS
 SELECT study.label AS study_label,
    study.hrrc_num,
    scan.ursi,
    date_part('year'::text, age(scan.scan_date, subject.birth_date)) AS subject_age,
    scanner.label AS scanner_label,
    scan.segment_interval,
    scan.scan_id,
    scan.label AS scan_label,
    scan.scan_date,
    scan.notes,
    scan.study_id
   FROM ((((mrs_scan_sessions scan
     JOIN mrs_studies study ON ((study.study_id = scan.study_id)))
     JOIN mrs_scanners scanner ON ((scanner.scanner_id = scan.scanner_id)))
     JOIN mrs_subject_type_details std ON (((std.ursi)::text = (scan.ursi)::text)))
     JOIN mrs_subjects subject ON (((subject.usid)::text = (std.usid)::text)));


ALTER TABLE mrs_scan_sessions_qb_vw OWNER TO postgres;

--
-- Name: mrs_scan_sessions_review; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_sessions_review (
    scan_id numeric(8,0) NOT NULL,
    person_id character varying(40) NOT NULL,
    review_date timestamp without time zone NOT NULL,
    impression character(1) NOT NULL,
    recommendation character varying(4000) NOT NULL,
    findings character varying(4000) NOT NULL,
    recommendation_code character varying(2),
    recommendation_comments character varying(4000),
    report_template character varying(5) DEFAULT 'MRN'::character varying
);


ALTER TABLE mrs_scan_sessions_review OWNER TO postgres;

--
-- Name: mrs_scan_sessions_review_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_sessions_review_hist (
    scan_id numeric(8,0),
    person_id character varying(40),
    review_date timestamp with time zone,
    impression character varying(1),
    recommendation character varying(4000),
    recommendation_code character varying(2),
    recommendation_comments character varying(4000),
    report_template character varying(5),
    findings character varying(4000),
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_scan_sessions_review_hist OWNER TO postgres;

--
-- Name: mrs_scan_sessions_review_hist_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_scan_sessions_review_hist_vw AS
 SELECT mrs_scan_sessions_review_hist.scan_id,
    mrs_scan_sessions_review_hist.person_id,
    mrs_scan_sessions_review_hist.review_date,
    mrs_scan_sessions_review_hist.impression,
    mrs_scan_sessions_review_hist.recommendation,
    mrs_scan_sessions_review_hist.recommendation_code,
    mrs_scan_sessions_review_hist.recommendation_comments,
    mrs_scan_sessions_review_hist.report_template,
    mrs_scan_sessions_review_hist.findings,
    mrs_scan_sessions_review_hist.mod_user,
    mrs_scan_sessions_review_hist.mod_date
   FROM mrs_scan_sessions_review_hist;


ALTER TABLE mrs_scan_sessions_review_hist_vw OWNER TO postgres;

--
-- Name: mrs_scan_sessions_review_include; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_sessions_review_include (
    scan_sessions_review_include_id numeric(8,0),
    scan_id numeric(8,0) NOT NULL
);


ALTER TABLE mrs_scan_sessions_review_include OWNER TO postgres;

--
-- Name: mrs_scan_sessions_review_include_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_sessions_review_include_hist (
    scan_sessions_review_include_id numeric(8,0),
    scan_id numeric(8,0) NOT NULL,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_scan_sessions_review_include_hist OWNER TO postgres;

--
-- Name: mrs_scan_sessions_review_include_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_scan_sessions_review_include_vw AS
 SELECT mrs_scan_sessions_review_include.scan_sessions_review_include_id,
    mrs_scan_sessions_review_include.scan_id
   FROM mrs_scan_sessions_review_include;


ALTER TABLE mrs_scan_sessions_review_include_vw OWNER TO postgres;

--
-- Name: mrs_scan_sessions_review_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_scan_sessions_review_vw AS
 SELECT ss.priority,
    ss.radiology_loaded,
    to_char((ss.review_load_date)::timestamp with time zone, 'MM/DD/YYYY'::text) AS review_load_date,
    ss.scan_id AS session_scan_id,
    ss.label AS scan_label,
    ss.scan_date,
    ss.segment_interval AS visit,
    ss.ursi,
    sc.label AS scanner_label,
    sc.scanner_id,
    ssr.scan_id AS review_scan_id,
    ssr.person_id AS radiologist_id,
    ssr.review_date,
    ssr.recommendation_code,
    ssr.recommendation_comments,
    st.label AS studyname,
    st.study_id,
    p.first_name AS pi_first_name,
    p.last_name AS pi_last_name,
    ssr.impression,
    ssr.recommendation,
    ssr.findings,
    sc.site_id,
    si.label AS site_label,
    ssr.report_template,
    ss.review_end_date,
        CASE
            WHEN (ss.review_end_date IS NOT NULL) THEN (ss.review_end_date - ssr.review_date)
            ELSE NULL::interval
        END AS total_review_time
   FROM mrs_scanners sc,
    casdba.cas_sites si,
    mrs_studies st,
    mrs_persons p,
    (mrs_scan_sessions ss
     LEFT JOIN mrs_scan_sessions_review ssr ON ((ss.scan_id = ssr.scan_id)))
  WHERE ((((((ss.scanner_id = sc.scanner_id) AND ((sc.site_id)::text = (si.site_id)::text)) AND (sc.modality_id = (1)::numeric)) AND (ss.study_id = st.study_id)) AND ((p.person_id)::text = (st.pi_id)::text)) AND (((((sc.site_id)::text = ANY (ARRAY[('7'::character varying)::text, ('8'::character varying)::text])) AND (ss.study_id <> (28)::numeric)) OR (((ss.study_id = (28)::numeric) AND (ss.scan_date > '1900-01-01 00:00:00'::timestamp without time zone)) AND ((ss.label)::text = 'structural'::text))) OR (((sc.site_id)::text = '50'::text) AND (ss.scan_date > '2009-01-01 00:00:00'::timestamp without time zone))));


ALTER TABLE mrs_scan_sessions_review_vw OWNER TO ni_developers;

--
-- Name: mrs_scan_sessions_stage; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_sessions_stage (
    scan_id numeric(8,0) NOT NULL,
    label character varying(200),
    segment_interval character varying(40),
    scanner_id numeric(3,0),
    scan_date timestamp without time zone NOT NULL,
    subject_age numeric(4,1),
    notes character varying(4000),
    study_dir_name character varying(40),
    pi_id character varying(40),
    ursi character varying(40),
    is_error boolean,
    file_path text,
    source_filename text,
    user_entered text,
    date_added timestamp with time zone,
    uid text,
    study_id numeric
);


ALTER TABLE mrs_scan_sessions_stage OWNER TO postgres;

--
-- Name: mrs_scan_sessions_stage_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_scan_sessions_stage_hist (
    scan_id numeric(8,0),
    label character varying(200),
    segment_interval character varying(40),
    scanner_id numeric(3,0),
    scan_date timestamp without time zone,
    subject_age numeric(4,1),
    notes character varying(4000),
    study_dir_name character varying(40),
    pi_id character varying(40),
    ursi character varying(40),
    is_error boolean,
    file_path text,
    source_filename text,
    user_entered text,
    date_added timestamp with time zone,
    uid text,
    study_id numeric,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_scan_sessions_stage_hist OWNER TO ni_developers;

--
-- Name: mrs_scan_sessions_stage_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_scan_sessions_stage_vw AS
 SELECT i.scan_id,
    i.label,
    i.segment_interval,
    v.label AS segment_label,
    i.scanner_id,
    d.label AS scanner_label,
    i.scan_date,
    i.subject_age,
    i.notes,
    i.study_id,
    i.study_dir_name,
    s.label AS study_label,
    s.site_id AS study_site_id,
    i.pi_id,
    i.ursi,
    i.is_error,
    i.file_path,
    i.source_filename,
    i.user_entered,
    i.date_added,
    i.uid
   FROM (((mrs_scan_sessions_stage i
     LEFT JOIN mrs_studies s ON ((s.study_id = i.study_id)))
     LEFT JOIN mrs_study_intervals v ON ((((v.segment_interval)::text = (i.segment_interval)::text) AND (v.study_id = s.study_id))))
     LEFT JOIN mrs_scanners d ON ((d.scanner_id = i.scanner_id)));


ALTER TABLE mrs_scan_sessions_stage_vw OWNER TO ni_developers;

--
-- Name: mrs_scan_sessions_t_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_scan_sessions_t_vw AS
 SELECT scan.scan_id,
    scan.label,
    scan.segment_interval,
    scan.study_id,
    scan.scanner_id,
    scan.scan_date,
    scan.operator_id,
    scan.ursi,
    scan.subject_height,
    scan.subject_height_units,
    scan.subject_mass,
    scan.subject_mass_units,
    scan.subject_age,
    scan.notes,
    scan.study_dir_name,
    scan.consented_under_study_id,
    scan.billto_study_id,
    scan.charge_code_id,
    scan.contrast_vials_used,
    scan.tech_slots_used,
    scan.billing_notes,
    scan.power_injector_used,
    scan.pi_dir_name,
    scan.priority,
    scan.radiology_loaded,
    scan.oxygen_used,
    m.modality_id,
        CASE
            WHEN ((scan.assigned_radiologist IS NULL) OR ((scan.assigned_radiologist)::text = ''::text)) THEN study.default_radiologist
            ELSE scan.assigned_radiologist
        END AS assigned_radiologist,
    scan.dx_excluded,
    scan.is_phantom
   FROM (((mrs_scan_sessions scan
     JOIN mrs_studies study ON ((study.study_id = scan.study_id)))
     JOIN mrs_scanners scanner ON ((scanner.scanner_id = scan.scanner_id)))
     JOIN mrs_modalities m ON ((m.modality_id = scanner.modality_id)));


ALTER TABLE mrs_scan_sessions_t_vw OWNER TO ni_developers;

--
-- Name: mrs_scan_sessions_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_scan_sessions_vw AS
 SELECT DISTINCT scan.study_id,
    study.label AS study_label,
    scan.scanner_id,
    scanner.label AS scanner_label,
    m.label AS modality_label,
    scanner.site_id,
    scan.scan_id,
    scan.label AS scan_label,
    scan.segment_interval,
    scan.scan_date,
    scan.operator_id,
    scan.ursi,
    scan.subject_height,
    scan.subject_height_units,
    scan.subject_mass,
    scan.subject_mass_units,
    date_part('year'::text, age(scan.scan_date, subject.birth_date)) AS subject_age,
    scan.notes,
    scan.study_dir_name,
    scan.consented_under_study_id,
    scan.billto_study_id,
    scan.charge_code_id,
    scan.contrast_vials_used,
    pi.first_name AS pi_first_name,
    pi.last_name AS pi_last_name,
    study.hrrc_num,
    scan.billing_notes,
    scan.tech_slots_used,
    scan.injector_type,
    m.modality_id,
    scan.priority,
    scan.radiology_loaded,
    scan.oxygen_used,
    scan.iv_supplies_used,
    lower(COALESCE(scan.pi_dir_name, (study.pi_id)::text)) AS pi_dir_name,
    scan.priority_notes,
        CASE
            WHEN ((scan.assigned_radiologist IS NULL) OR ((scan.assigned_radiologist)::text = ''::text)) THEN study.default_radiologist
            ELSE scan.assigned_radiologist
        END AS assigned_radiologist,
    scan.dx_excluded,
    scan.is_phantom,
    scan.funding_source,
    scan.charge_code,
    scan.project_number
   FROM (((((((mrs_scan_sessions scan
     JOIN mrs_studies study ON ((study.study_id = scan.study_id)))
     JOIN mrs_pi_vw pi ON (((pi.person_id)::text = (study.pi_id)::text)))
     JOIN mrs_scanners scanner ON ((scanner.scanner_id = scan.scanner_id)))
     JOIN mrs_modalities m ON ((m.modality_id = scanner.modality_id)))
     LEFT JOIN mrs_subject_type_details std ON (((std.ursi)::text = (scan.ursi)::text)))
     LEFT JOIN mrs_subject_types st ON (((st.study_id = scan.study_id) AND (std.subject_type_id = st.subject_type_id))))
     LEFT JOIN mrs_subjects subject ON (((subject.usid)::text = (std.usid)::text)));


ALTER TABLE mrs_scan_sessions_vw OWNER TO ni_developers;

--
-- Name: mrs_scan_slot_uses; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_slot_uses (
    scan_slot_id numeric(8,0),
    amount_used numeric(4,0),
    scan_id numeric(8,0),
    scan_slot_use_id numeric,
    CONSTRAINT mrs_scan_slot_use_id_not_null CHECK ((scan_slot_use_id IS NOT NULL))
);


ALTER TABLE mrs_scan_slot_uses OWNER TO postgres;

--
-- Name: mrs_scan_slot_uses_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_scan_slot_uses_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE mrs_scan_slot_uses_counter OWNER TO postgres;

--
-- Name: mrs_scan_slot_uses_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_scan_slot_uses_vw AS
 SELECT mrs_scan_slot_uses.scan_slot_id,
    mrs_scan_slot_uses.amount_used,
    mrs_scan_slot_uses.scan_id,
    mrs_scan_slot_uses.scan_slot_use_id
   FROM mrs_scan_slot_uses;


ALTER TABLE mrs_scan_slot_uses_vw OWNER TO postgres;

--
-- Name: mrs_scan_slots; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_slots (
    scan_slot_id numeric(8,0),
    count numeric(4,0),
    user_entered character varying(40),
    date_effective timestamp without time zone,
    pi_id character varying(40),
    default_charge_code_id numeric
);


ALTER TABLE mrs_scan_slots OWNER TO postgres;

--
-- Name: mrs_scan_slots_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_scan_slots_counter
    START WITH 2361
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 20;


ALTER TABLE mrs_scan_slots_counter OWNER TO postgres;

--
-- Name: mrs_scan_slots_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scan_slots_hist (
    scan_slot_id numeric(8,0),
    count numeric(4,0),
    pi_id character varying(40),
    date_effective timestamp without time zone,
    user_mod character varying(40),
    date_mod timestamp without time zone,
    notes character varying(200),
    default_charge_code_id numeric
);


ALTER TABLE mrs_scan_slots_hist OWNER TO postgres;

--
-- Name: mrs_scan_slots_hist_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_scan_slots_hist_vw AS
 SELECT mrs_scan_slots_hist.scan_slot_id,
    mrs_scan_slots_hist.count,
    mrs_scan_slots_hist.pi_id,
    mrs_scan_slots_hist.date_effective,
    mrs_scan_slots_hist.user_mod,
    mrs_scan_slots_hist.date_mod
   FROM mrs_scan_slots_hist;


ALTER TABLE mrs_scan_slots_hist_vw OWNER TO postgres;

--
-- Name: mrs_scan_slots_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_scan_slots_vw AS
 SELECT mrs_scan_slots.scan_slot_id,
    mrs_scan_slots.count,
    mrs_scan_slots.user_entered,
    mrs_scan_slots.date_effective,
    mrs_scan_slots.pi_id,
    mrs_scan_slots.default_charge_code_id
   FROM mrs_scan_slots;


ALTER TABLE mrs_scan_slots_vw OWNER TO postgres;

--
-- Name: mrs_scanners2_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_scanners2_vw AS
 SELECT mrs_scanners.scanner_id,
    mrs_scanners.label,
    mrs_scanners.description,
    mrs_scanners.site_id,
    mrs_scanners.model,
    mrs_scanners.manufacturer,
    mrs_scanners.station,
    mrs_scanners.software_version,
    mrs_scanners.start_date,
    mrs_scanners.end_date,
    mrs_scanners.field_strength,
    mrs_scanners.modality_id
   FROM mrs_scanners;


ALTER TABLE mrs_scanners2_vw OWNER TO postgres;

--
-- Name: mrs_scanners_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_scanners_hist (
    scanner_id numeric(3,0),
    label character varying(200),
    description character varying(4000),
    site_id character varying,
    model character varying(35),
    manufacturer character varying(25),
    station character varying(25),
    software_version character varying(25),
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    field_strength numeric(4,2),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    modality_id numeric
);


ALTER TABLE mrs_scanners_hist OWNER TO postgres;

--
-- Name: mrs_scanners_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_scanners_vw AS
 SELECT s.scanner_id,
    s.label,
    s.description,
    s.site_id,
    s.model,
    s.manufacturer,
    s.station,
    s.software_version,
    s.field_strength,
    s.modality_id,
    m.label AS modality_label,
    l.site_dir_name
   FROM ((mrs_scanners s
     JOIN mrs_modalities m ON ((m.modality_id = s.modality_id)))
     JOIN casdba.cas_sites l ON (((l.site_id)::text = (s.site_id)::text)))
  WHERE (s.end_date IS NULL)
UNION ALL
 SELECT s.eeg_id AS scanner_id,
    s.label,
    s.description,
    s.site_id,
    s.model,
    s.manufacturer,
    s.station,
    s.software_version,
    0.00::numeric(4,2) AS field_strength,
    m.modality_id,
    m.label AS modality_label,
    NULL::text AS site_dir_name
   FROM (mrs_eeg_devices s
     JOIN mrs_modalities m ON ((m.modality_id = s.modality_id)));


ALTER TABLE mrs_scanners_vw OWNER TO ni_developers;

--
-- Name: mrs_series_analysis; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_series_analysis (
    series_id character varying(8) NOT NULL,
    cpu_host character varying(50),
    cpu_env character varying(100),
    start_timedate timestamp without time zone,
    end_timedate timestamp without time zone,
    instance numeric(2,0) DEFAULT 1 NOT NULL,
    notes character varying(4000),
    is_usable boolean DEFAULT true NOT NULL,
    software_id numeric(3,0) DEFAULT 1 NOT NULL
);


ALTER TABLE mrs_series_analysis OWNER TO postgres;

--
-- Name: mrs_series_analysis_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_series_analysis_vw AS
 SELECT mrs_series_analysis.series_id,
    mrs_series_analysis.cpu_host,
    mrs_series_analysis.cpu_env,
    mrs_series_analysis.start_timedate,
    mrs_series_analysis.end_timedate,
    mrs_series_analysis.instance,
    mrs_series_analysis.notes,
    mrs_series_analysis.is_usable,
    mrs_series_analysis.software_id
   FROM mrs_series_analysis;


ALTER TABLE mrs_series_analysis_vw OWNER TO postgres;

--
-- Name: mrs_series_data_comp_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_series_data_comp_vw AS
 SELECT d.series_data_id,
    d.series_id,
    d.scan_data_type_id,
    d.value,
    d.series_data_type_instance,
    s.sort_order,
    l.label,
    l.description,
    l.study_id,
    l.modality_id,
    l.dest_study_id,
    l.is_hidden,
    l.label_id,
    l.definition_id,
    l.approval_user,
    l.approval_date,
    l.rad_loaded,
    l.dx_excluded,
    ss.ursi,
    ss.label AS scan_label
   FROM (((mrs_series_data d
     JOIN mrs_series s USING (series_id))
     JOIN mrs_series_labels l USING (label_id))
     JOIN mrs_scan_sessions ss ON ((ss.scan_id = s.scan_id)));


ALTER TABLE mrs_series_data_comp_vw OWNER TO ni_developers;

--
-- Name: mrs_series_data_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_series_data_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE mrs_series_data_counter OWNER TO postgres;

--
-- Name: mrs_series_data_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_series_data_hist (
    series_data_id numeric,
    series_id character varying,
    scan_data_type_id numeric,
    value character varying,
    series_data_type_instance numeric,
    mod_user character varying,
    mod_date timestamp without time zone
);


ALTER TABLE mrs_series_data_hist OWNER TO postgres;

--
-- Name: mrs_series_data_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_series_data_vw AS
 SELECT mrs_series_data.series_data_id,
    mrs_series_data.series_id,
    mrs_series_data.scan_data_type_id,
    mrs_series_data.value,
    mrs_series_data.series_data_type_instance
   FROM mrs_series_data;


ALTER TABLE mrs_series_data_vw OWNER TO postgres;

--
-- Name: mrs_series_definitions_definition_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_series_definitions_definition_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_series_definitions_definition_id_seq OWNER TO ni_developers;

--
-- Name: mrs_series_definitions_definition_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_series_definitions_definition_id_seq OWNED BY mrs_series_definitions.definition_id;


--
-- Name: mrs_series_definitions_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_series_definitions_hist (
    definition_id integer,
    definition character varying(200),
    description character varying(400),
    url character varying(200),
    collection_technique_id integer,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_series_definitions_hist OWNER TO ni_developers;

--
-- Name: mrs_series_definitions_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_series_definitions_vw AS
 SELECT sd.definition_id,
    sd.definition,
    sd.description,
    sd.url,
    sd.collection_technique_id
   FROM mrs_series_definitions sd;


ALTER TABLE mrs_series_definitions_vw OWNER TO ni_developers;

--
-- Name: mrs_series_fmri_params; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_series_fmri_params (
    series_id character varying(8) NOT NULL,
    mtd numeric(6,3),
    mad numeric(6,3)
);


ALTER TABLE mrs_series_fmri_params OWNER TO postgres;

--
-- Name: mrs_series_fmri_params_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_series_fmri_params_vw AS
 SELECT mrs_series_fmri_params.series_id,
    mrs_series_fmri_params.mtd,
    mrs_series_fmri_params.mad
   FROM mrs_series_fmri_params;


ALTER TABLE mrs_series_fmri_params_vw OWNER TO postgres;

--
-- Name: mrs_series_from_archive; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_series_from_archive (
    series_id numeric(8,0) NOT NULL,
    label character varying(200) NOT NULL,
    scan_id numeric(8,0) NOT NULL,
    notes character varying(4000),
    sort_order numeric(8,0) DEFAULT 0,
    modality_id numeric(4,0),
    micis_series_id numeric(10,0),
    usable character(1) DEFAULT 'Y'::bpchar,
    CONSTRAINT mrsseries_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsseries_scanid_nn CHECK ((scan_id IS NOT NULL))
);


ALTER TABLE mrs_series_from_archive OWNER TO postgres;

--
-- Name: TABLE mrs_series_from_archive; Type: COMMENT; Schema: mrsdba; Owner: postgres
--

COMMENT ON TABLE mrs_series_from_archive IS 'This table is populated with series from archive via cron jobs.';


--
-- Name: COLUMN mrs_series_from_archive.micis_series_id; Type: COMMENT; Schema: mrsdba; Owner: postgres
--

COMMENT ON COLUMN mrs_series_from_archive.micis_series_id IS 'if not null, the value will be the series id in table mrs_series';


--
-- Name: mrs_series_from_archive_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_series_from_archive_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_series_from_archive_counter OWNER TO postgres;

--
-- Name: mrs_series_from_archive_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_series_from_archive_hist (
    series_id numeric(8,0),
    label character varying(200),
    scan_id numeric(8,0),
    notes character varying(4000),
    sort_order numeric(8,0),
    modality_id numeric(4,0),
    micis_series_id numeric(10,0),
    usable character(1) DEFAULT 'Y'::bpchar
);


ALTER TABLE mrs_series_from_archive_hist OWNER TO postgres;

--
-- Name: mrs_series_from_archive_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_series_from_archive_vw AS
 SELECT mrs_series_from_archive.series_id,
    mrs_series_from_archive.label,
    mrs_series_from_archive.scan_id,
    mrs_series_from_archive.notes,
    mrs_series_from_archive.sort_order,
    mrs_series_from_archive.modality_id,
    mrs_series_from_archive.micis_series_id,
    mrs_series_from_archive.usable
   FROM mrs_series_from_archive;


ALTER TABLE mrs_series_from_archive_vw OWNER TO postgres;

--
-- Name: mrs_series_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_series_hist (
    series_id character varying(8),
    description character varying(4000),
    modality_id numeric(4,0),
    scan_id numeric(8,0),
    anatomy_region_id numeric(4,0),
    base_path character varying(300),
    study_code_id numeric(4,0),
    usable character varying(1),
    notes character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    sort_order numeric(8,0),
    label_id integer,
    dx_excluded boolean
);


ALTER TABLE mrs_series_hist OWNER TO postgres;

--
-- Name: mrs_series_labels_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_series_labels_hist (
    label character varying(200),
    description character varying(4000),
    study_id numeric(4,0),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    modality_id numeric,
    dest_study_id numeric,
    is_hidden boolean,
    label_id integer,
    definition_id integer,
    approval_user character varying(40),
    approval_date timestamp without time zone,
    rad_loaded boolean,
    dx_excluded boolean
);


ALTER TABLE mrs_series_labels_hist OWNER TO ni_developers;

--
-- Name: mrs_series_labels_label_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_series_labels_label_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_series_labels_label_id_seq OWNER TO ni_developers;

--
-- Name: mrs_series_labels_label_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_series_labels_label_id_seq OWNED BY mrs_series_labels.label_id;


--
-- Name: mrs_series_labels_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_series_labels_vw AS
 SELECT sl.label_id,
    sl.label,
    sl.description,
    sl.study_id,
    m.label AS modality,
    m.modality_id,
    sl.dest_study_id,
    sl.is_hidden,
    sl.definition_id,
    sl.approval_user,
    sl.approval_date,
    sl.rad_loaded,
    sl.dx_excluded
   FROM (mrs_series_labels sl
     JOIN mrs_modalities m ON ((m.modality_id = sl.modality_id)));


ALTER TABLE mrs_series_labels_vw OWNER TO postgres;

--
-- Name: mrs_series_level2_analysis; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_series_level2_analysis (
    scan_id numeric(15,0) NOT NULL,
    module character varying(200) NOT NULL,
    cpu_host character varying(100),
    cpu_env character varying(100),
    start_time timestamp without time zone,
    end_time timestamp without time zone,
    instance numeric(2,0) DEFAULT 1 NOT NULL,
    notes character varying(4000) DEFAULT ''::character varying,
    is_usable integer DEFAULT 1,
    software_id numeric(3,0)
);


ALTER TABLE mrs_series_level2_analysis OWNER TO postgres;

--
-- Name: mrs_series_level2_analysis_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_series_level2_analysis_vw AS
 SELECT mrs_series_level2_analysis.scan_id,
    mrs_series_level2_analysis.module,
    mrs_series_level2_analysis.cpu_host,
    mrs_series_level2_analysis.cpu_env,
    mrs_series_level2_analysis.start_time,
    mrs_series_level2_analysis.end_time,
    mrs_series_level2_analysis.instance,
    mrs_series_level2_analysis.notes,
    mrs_series_level2_analysis.is_usable,
    mrs_series_level2_analysis.software_id
   FROM mrs_series_level2_analysis;


ALTER TABLE mrs_series_level2_analysis_vw OWNER TO postgres;

--
-- Name: mrs_series_mismatches; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_series_mismatches (
    a_m_series_ids character varying,
    m_a_series_ids character varying,
    scanner character varying(100) NOT NULL,
    "time" timestamp without time zone NOT NULL
);


ALTER TABLE mrs_series_mismatches OWNER TO postgres;

--
-- Name: mrs_series_stage; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_series_stage (
    label character varying(200) NOT NULL,
    scan_id numeric(8,0) NOT NULL,
    base_path character varying(300),
    study_code_id numeric(4,0) NOT NULL,
    usable character varying(1) NOT NULL,
    notes character varying(4000),
    sort_order numeric(2,0) DEFAULT 0
);


ALTER TABLE mrs_series_stage OWNER TO postgres;

--
-- Name: mrs_series_stage_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_series_stage_vw AS
 SELECT mrs_series_stage.label,
    mrs_series_stage.scan_id,
    mrs_series_stage.base_path,
    mrs_series_stage.study_code_id,
    mrs_series_stage.usable,
    mrs_series_stage.notes,
    mrs_series_stage.sort_order
   FROM mrs_series_stage;


ALTER TABLE mrs_series_stage_vw OWNER TO postgres;

--
-- Name: mrs_sharing_rules; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_sharing_rules (
    sharing_rule_id numeric(8,0) NOT NULL,
    study_id numeric(4,0),
    instrument_id numeric(8,0),
    rater_id numeric(5,0),
    segment_interval character varying(20),
    segment_instance numeric(3,0),
    site_id character varying(3),
    ursi character varying(9),
    assessment_id numeric(8,0),
    entry_code character varying(1),
    dataentry_type_id numeric(8,0),
    source_type numeric(3,0),
    approved_by character varying(40) NOT NULL,
    approval_date timestamp without time zone NOT NULL,
    deleted_by character varying(40),
    deletion_date timestamp without time zone,
    note text
);


ALTER TABLE mrs_sharing_rules OWNER TO postgres;

--
-- Name: mrs_sharing_rules_asmts_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_sharing_rules_asmts_vw AS
 SELECT mrs_sharing_rules_asmts.sharing_rule_id,
    mrs_sharing_rules_asmts.assessment_id
   FROM mrs_sharing_rules_asmts;


ALTER TABLE mrs_sharing_rules_asmts_vw OWNER TO postgres;

--
-- Name: mrs_sharing_rules_bak; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_sharing_rules_bak (
    sharing_rule_id numeric(8,0),
    sharing_rule_study_id numeric(4,0),
    sharing_rule_instrument_id numeric(8,0),
    sharing_rule_rater_id numeric(5,0),
    sharing_rule_seg_int character varying(20),
    sharing_rule_seg_inst numeric(3,0),
    sharing_rule_site_id character varying(3),
    sharing_rule_subject_type_id numeric(4,0),
    sharing_rule_usid character varying(9),
    sharing_rule_assessment_id numeric(8,0),
    sharing_rule_entry_code character varying(1),
    sharing_rule_dataentry_type_id numeric(8,0),
    sharing_rule_source_type numeric(3,0),
    sharing_rule_approved_by character varying(40),
    sharing_rule_approval_date timestamp without time zone,
    sharing_rule_deleted_by character varying(40),
    sharing_rule_deletion_date timestamp without time zone,
    sharing_rule_note text
);


ALTER TABLE mrs_sharing_rules_bak OWNER TO postgres;

--
-- Name: mrs_sharing_rules_dets_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_sharing_rules_dets_vw AS
 SELECT DISTINCT sr.sharing_rule_id,
    sr.study_id,
    sr.instrument_id,
    sr.rater_id,
    sr.segment_interval,
    sr.segment_instance,
    sr.site_id,
    sr.ursi,
    sr.assessment_id,
    sr.entry_code,
    sr.dataentry_type_id,
    sr.source_type,
    sr.approved_by,
    to_char(sr.approval_date, 'MM/DD/YYYY'::text) AS approval_date,
    sr.deleted_by,
    to_char(sr.deletion_date, 'MM-DD-YYYY'::text) AS deletion_date,
    sr.note,
    s1.label AS donorlabel,
    s1.hrrc_num AS donorhrrc,
    srs.study_id AS recipient_study_id,
    srs.recipient_approved_by,
    to_char(srs.recipient_approval_date, 'MM/DD/YYYY'::text) AS recipient_approval_date,
    srs.donor_approved_by,
    to_char(srs.donor_approval_date, 'MM/DD/YYYY'::text) AS donor_approval_date,
    srs.note AS sharing_rules_studies_note,
    s2.label AS reciplabel,
    s2.hrrc_num AS reciphrrc,
    ct.asmt_count,
    r.alias_label AS rater_label,
    i.label AS instrument_label
   FROM ((((((mrs_sharing_rules sr
     RIGHT JOIN mrs_sharing_rules_studies srs ON ((srs.sharing_rule_id = sr.sharing_rule_id)))
     LEFT JOIN mrs_studies s1 ON ((sr.study_id = s1.study_id)))
     LEFT JOIN mrs_studies s2 ON ((srs.study_id = s2.study_id)))
     LEFT JOIN mrs_raters_vw r ON ((sr.rater_id = r.alias_id)))
     LEFT JOIN mrs_instruments i ON ((sr.instrument_id = i.instrument_id)))
     JOIN ( SELECT q.rule_id,
            count(q.assessment_id) AS asmt_count
           FROM ( SELECT DISTINCT sra.sharing_rule_id AS rule_id,
                    sra.assessment_id
                   FROM mrs_sharing_rules_asmts sra
                UNION
                 SELECT DISTINCT lsra.sharing_rule_id AS rule_id,
                    lsra.assessment_id
                   FROM mrs_legacy_sharing_rules_asmts lsra) q
          GROUP BY q.rule_id) ct ON ((ct.rule_id = sr.sharing_rule_id)));


ALTER TABLE mrs_sharing_rules_dets_vw OWNER TO ni_developers;

--
-- Name: mrs_sharing_rules_exceptions; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_sharing_rules_exceptions (
    sharing_rule_id numeric(8,0) NOT NULL,
    sharing_rules_exception_id numeric(8,0) NOT NULL,
    instrument_id numeric(8,0),
    rater_id numeric(5,0),
    segment_interval character varying(20),
    segment_instance numeric(3,0),
    site_id character varying(3),
    ursi character varying(9),
    assessment_id numeric(8,0),
    entry_code numeric(1,0),
    dataentry_type_id numeric(8,0),
    source_type numeric(3,0),
    approved_by character varying(40) NOT NULL,
    approval_date timestamp without time zone NOT NULL,
    deleted_by character varying(40),
    deletion_date timestamp without time zone,
    note text
);


ALTER TABLE mrs_sharing_rules_exceptions OWNER TO postgres;

--
-- Name: mrs_sharing_rules_exceptions_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_sharing_rules_exceptions_hist (
    sharing_rule_id numeric(8,0) NOT NULL,
    sharing_rules_exception_id numeric(8,0) NOT NULL,
    instrument_id numeric(8,0),
    rater_id numeric(5,0),
    segment_interval character varying(20),
    segment_instance numeric(3,0),
    site_id character varying(3),
    ursi character varying(9),
    assessment_id numeric(8,0),
    entry_code numeric(1,0),
    dataentry_type_id numeric(8,0),
    source_type numeric(3,0),
    approved_by character varying(40) NOT NULL,
    approval_date timestamp without time zone NOT NULL,
    deleted_by character varying(40),
    deletion_date timestamp without time zone,
    note text,
    mod_user character varying(40) NOT NULL,
    mod_date timestamp without time zone NOT NULL
);


ALTER TABLE mrs_sharing_rules_exceptions_hist OWNER TO postgres;

--
-- Name: mrs_sharing_rules_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_sharing_rules_hist (
    sharing_rule_id numeric(8,0) NOT NULL,
    study_id numeric(4,0),
    instrument_id numeric(8,0),
    rater_id numeric(5,0),
    segment_interval character varying(20),
    segment_instance numeric(3,0),
    site_id character varying(3),
    ursi character varying(9),
    assessment_id numeric(8,0),
    entry_code character varying(1),
    dataentry_type_id numeric(8,0),
    source_type numeric(3,0),
    approved_by character varying(40) NOT NULL,
    approval_date timestamp without time zone NOT NULL,
    deleted_by character varying(40),
    deletion_date timestamp without time zone,
    note text,
    mod_user character varying(40) NOT NULL,
    mod_date timestamp without time zone NOT NULL
);


ALTER TABLE mrs_sharing_rules_hist OWNER TO postgres;

--
-- Name: mrs_sharing_rules_studies_bak; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_sharing_rules_studies_bak (
    sharing_rules_studies_rule_id numeric(8,0),
    sharing_rules_studies_study_id numeric(4,0),
    sharing_rules_studies_recipient_approved_by character varying(40),
    sharing_rules_studies_recipient_approval_date timestamp without time zone,
    sharing_rules_studies_donor_approved_by character varying(40),
    sharing_rules_studies_donor_approval_date timestamp without time zone,
    sharing_rules_studies_deleted_by character varying(40),
    sharing_rules_studies_deletion_date timestamp without time zone,
    sharing_rules_studies_note text
);


ALTER TABLE mrs_sharing_rules_studies_bak OWNER TO postgres;

--
-- Name: mrs_sharing_rules_studies_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_sharing_rules_studies_hist (
    sharing_rule_id numeric(8,0) NOT NULL,
    study_id numeric(4,0) NOT NULL,
    recipient_approved_by character varying(40) NOT NULL,
    recipient_approval_date timestamp without time zone NOT NULL,
    donor_approved_by character varying(40) NOT NULL,
    donor_approval_date timestamp without time zone NOT NULL,
    deleted_by character varying(40),
    deletion_date timestamp without time zone,
    note text,
    mod_user character varying(40) NOT NULL,
    mod_date timestamp without time zone NOT NULL
);


ALTER TABLE mrs_sharing_rules_studies_hist OWNER TO postgres;

--
-- Name: mrs_sharing_rules_studies_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_sharing_rules_studies_vw AS
 SELECT mrs_sharing_rules_studies.sharing_rule_id,
    mrs_sharing_rules_studies.study_id,
    mrs_sharing_rules_studies.recipient_approved_by,
    mrs_sharing_rules_studies.recipient_approval_date,
    mrs_sharing_rules_studies.donor_approved_by,
    mrs_sharing_rules_studies.donor_approval_date,
    mrs_sharing_rules_studies.deleted_by,
    mrs_sharing_rules_studies.deletion_date,
    mrs_sharing_rules_studies.note
   FROM mrs_sharing_rules_studies;


ALTER TABLE mrs_sharing_rules_studies_vw OWNER TO postgres;

--
-- Name: mrs_sharing_rules_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_sharing_rules_vw AS
 SELECT mrs_sharing_rules.sharing_rule_id,
    mrs_sharing_rules.study_id,
    mrs_sharing_rules.instrument_id,
    mrs_sharing_rules.rater_id,
    mrs_sharing_rules.segment_interval,
    mrs_sharing_rules.segment_instance,
    mrs_sharing_rules.site_id,
    mrs_sharing_rules.ursi,
    mrs_sharing_rules.assessment_id,
    mrs_sharing_rules.entry_code,
    mrs_sharing_rules.dataentry_type_id,
    mrs_sharing_rules.source_type,
    mrs_sharing_rules.approved_by,
    mrs_sharing_rules.approval_date,
    mrs_sharing_rules.deleted_by,
    mrs_sharing_rules.deletion_date,
    mrs_sharing_rules.note
   FROM mrs_sharing_rules;


ALTER TABLE mrs_sharing_rules_vw OWNER TO postgres;

--
-- Name: mrs_softwares; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_softwares (
    software_id numeric(3,0) NOT NULL,
    name character varying(50) NOT NULL,
    version character varying(20) NOT NULL,
    description character varying(4000)
);


ALTER TABLE mrs_softwares OWNER TO postgres;

--
-- Name: mrs_softwares_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_softwares_counter
    START WITH 17
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrs_softwares_counter OWNER TO postgres;

--
-- Name: mrs_sorted_questionids_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_sorted_questionids_vw AS
 SELECT assd.instrument_id,
    aa.label AS instrument_name,
    aa.version,
    aq.question_id,
    translate((aq.question_id)::text, 'x1234567890.'::text, 'x'::text) AS b_nonnum,
    to_number(translate((aq.question_id)::text, ('1'::text || translate((aq.question_id)::text, 'x1234567890.'::text, 'x'::text)), '1'::text), 'FM99999'::text) AS b_num,
    (aq.sort_order * assd.sort_order) AS sort_order
   FROM mrs_instruments aa,
    mrs_instrument_questions aq,
    mrs_instrument_sections ase,
    mrs_instrument_section_details assd
  WHERE (((ase.section_id = assd.section_id) AND (ase.section_id = aq.section_id)) AND (aa.instrument_id = assd.instrument_id))
  ORDER BY translate((aq.question_id)::text, 'x1234567890.'::text, 'x'::text), to_number(translate((aq.question_id)::text, ('1'::text || translate((aq.question_id)::text, 'x1234567890.'::text, 'x'::text)), '1'::text), 'FM99999'::text);


ALTER TABLE mrs_sorted_questionids_vw OWNER TO postgres;

--
-- Name: mrs_source_type; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_source_type (
    source_type numeric(3,0) NOT NULL,
    label character varying(200),
    description character varying(4000),
    source_type_id integer NOT NULL,
    CONSTRAINT mrssource_sourcetype_nn CHECK ((source_type IS NOT NULL))
);


ALTER TABLE mrs_source_type OWNER TO ni_developers;

--
-- Name: mrs_source_type_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_source_type_hist (
    source_type numeric(3,0),
    label character varying(200),
    description character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_source_type_hist OWNER TO postgres;

--
-- Name: mrs_source_type_source_type_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_source_type_source_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_source_type_source_type_id_seq OWNER TO ni_developers;

--
-- Name: mrs_source_type_source_type_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_source_type_source_type_id_seq OWNED BY mrs_source_type.source_type_id;


--
-- Name: mrs_source_type_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_source_type_vw AS
 SELECT mrs_source_type.source_type,
    mrs_source_type.label,
    mrs_source_type.description,
    mrs_source_type.source_type_id
   FROM mrs_source_type;


ALTER TABLE mrs_source_type_vw OWNER TO ni_developers;

--
-- Name: mrs_specifiers_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_specifiers_vw AS
 SELECT mrs_dsm_specifiers.specifier_id,
    mrs_dsm_specifiers.dsm_code_id,
    mrs_dsm_specifiers.specifier
   FROM mrs_dsm_specifiers;


ALTER TABLE mrs_specifiers_vw OWNER TO postgres;

--
-- Name: mrs_stats_system; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_stats_system (
    collect_time timestamp without time zone,
    users_active_count numeric(6,0),
    users_inactive_count numeric(6,0),
    sites_count numeric(6,0),
    scanners_count numeric(6,0),
    studies_inactive_count numeric(6,0),
    studies_active_count numeric(6,0),
    subjects_count numeric(6,0),
    scan_sessions_count numeric(6,0),
    instruments_count numeric(6,0),
    assessments_count numeric(6,0),
    questions_count numeric(10,0)
);


ALTER TABLE mrs_stats_system OWNER TO postgres;

--
-- Name: mrs_stats_system_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_stats_system_vw AS
 SELECT mrs_stats_system.collect_time,
    mrs_stats_system.users_active_count,
    mrs_stats_system.users_inactive_count,
    mrs_stats_system.sites_count,
    mrs_stats_system.scanners_count,
    mrs_stats_system.studies_active_count,
    mrs_stats_system.studies_inactive_count,
    mrs_stats_system.subjects_count,
    mrs_stats_system.scan_sessions_count,
    mrs_stats_system.instruments_count,
    mrs_stats_system.assessments_count,
    mrs_stats_system.questions_count
   FROM mrs_stats_system;


ALTER TABLE mrs_stats_system_vw OWNER TO postgres;

--
-- Name: mrs_studies2_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_studies2_vw AS
 SELECT mrs_studies.study_id,
    mrs_studies.label,
    mrs_studies.description,
    mrs_studies.hrrc_num,
    mrs_studies.end_date,
    mrs_studies.expiration_date,
    mrs_studies.remaining_sessions,
    mrs_studies.approved_sessions,
    mrs_studies.pi_id,
    mrs_studies.allowphiremoval,
    mrs_studies.co_pi_id,
    mrs_studies.irb_number,
    mrs_studies.status_id,
    mrs_studies.primary_research_area_id,
    mrs_studies.secondary_research_area_id,
    mrs_studies.hrrc_consent_date,
    mrs_studies.hrrc_title,
    mrs_studies.grant_number,
    mrs_studies.url_reference,
    mrs_studies.url_description,
    mrs_studies.date_created,
    mrs_studies.sponsor,
    mrs_studies.add_to_recruitment,
    mrs_studies.recruitment_study_purpose,
    mrs_studies.recruitment_protocol_summary,
    mrs_studies.recruitment_contact_name,
    mrs_studies.recruitment_contact_email,
    mrs_studies.recruitment_contact_phone,
    mrs_studies.exp_warn_emails,
    mrs_studies.rad_review_emails,
    mrs_studies.reuse_ursi,
    mrs_studies.max_enrollment,
    mrs_studies.site_id,
    mrs_studies.sa_review_emails,
    mrs_studies.share_inst_emails,
    mrs_studies.parent_study_id,
    mrs_studies.dx_excluded,
    mrs_studies.dx_description,
    mrs_studies.default_radiologist,
    mrs_studies.hide_savenexit_in_sa,
    mrs_studies.nonstop_queue_in_sa,
    mrs_studies.tracker_enabled,
    mrs_studies.is_rdoc_study
   FROM mrs_studies;


ALTER TABLE mrs_studies2_vw OWNER TO ni_developers;

--
-- Name: mrs_studies_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_studies_hist (
    study_id numeric(4,0),
    label character varying(200),
    description character varying(4000),
    hrrc_num character varying(10),
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    expiration_date timestamp without time zone,
    remaining_sessions numeric(3,0),
    approved_sessions numeric(3,0),
    pi_id character varying(40),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    co_pi_id character varying(40),
    irb_number character varying(10),
    status_id character varying(2),
    primary_research_area_id character varying(3),
    secondary_research_area_id character varying(3),
    hrrc_consent_date timestamp without time zone,
    hrrc_title character varying(200),
    grant_number character varying(200),
    url_reference character varying(200),
    url_description character varying(200),
    date_created timestamp without time zone,
    sponsor character varying(200),
    add_to_recruitment character varying(1),
    recruitment_study_purpose character varying(1000),
    recruitment_protocol_summary character varying(1000),
    recruitment_contact_name character varying(30),
    recruitment_contact_email character varying(30),
    recruitment_contact_phone character varying(30),
    exp_warn_emails character varying(400),
    rad_review_emails character varying(400),
    reuse_ursi boolean,
    max_enrollment numeric(5,0),
    site_id character varying(3),
    sa_review_emails character varying(400),
    share_inst_emails character varying(400),
    parent_study_id numeric(4,0) DEFAULT NULL::numeric,
    dx_excluded boolean,
    dx_description character varying(4000),
    default_radiologist character varying(40),
    hide_savenexit_in_sa boolean,
    nonstop_queue_in_sa boolean,
    study_css_url character varying,
    study_dir_name text,
    self_enroll_enabled boolean,
    recruitment_study boolean,
    tracker_enabled boolean,
    is_rdoc_study boolean
);


ALTER TABLE mrs_studies_hist OWNER TO postgres;

--
-- Name: mrs_studies_hist_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_studies_hist_vw AS
 SELECT mrs_studies_hist.study_id,
    mrs_studies_hist.label,
    mrs_studies_hist.description,
    mrs_studies_hist.hrrc_num,
    mrs_studies_hist.start_date,
    mrs_studies_hist.end_date,
    mrs_studies_hist.expiration_date,
    mrs_studies_hist.remaining_sessions,
    mrs_studies_hist.approved_sessions,
    mrs_studies_hist.pi_id,
    mrs_studies_hist.mod_user,
    mrs_studies_hist.mod_date,
    mrs_studies_hist.co_pi_id,
    mrs_studies_hist.irb_number,
    mrs_studies_hist.status_id,
    mrs_studies_hist.primary_research_area_id,
    mrs_studies_hist.secondary_research_area_id,
    mrs_studies_hist.hrrc_consent_date,
    mrs_studies_hist.hrrc_title,
    mrs_studies_hist.grant_number,
    mrs_studies_hist.url_reference,
    mrs_studies_hist.url_description,
    mrs_studies_hist.date_created,
    mrs_studies_hist.sponsor,
    mrs_studies_hist.add_to_recruitment,
    mrs_studies_hist.recruitment_study_purpose,
    mrs_studies_hist.recruitment_protocol_summary,
    mrs_studies_hist.recruitment_contact_name,
    mrs_studies_hist.recruitment_contact_email,
    mrs_studies_hist.recruitment_contact_phone,
    mrs_studies_hist.exp_warn_emails,
    mrs_studies_hist.rad_review_emails,
    mrs_studies_hist.reuse_ursi,
    mrs_studies_hist.max_enrollment,
    mrs_studies_hist.site_id,
    mrs_studies_hist.sa_review_emails,
    mrs_studies_hist.share_inst_emails,
    mrs_studies_hist.parent_study_id,
    mrs_studies_hist.dx_excluded,
    mrs_studies_hist.dx_description,
    mrs_studies_hist.default_radiologist,
    mrs_studies_hist.hide_savenexit_in_sa,
    mrs_studies_hist.nonstop_queue_in_sa
   FROM mrs_studies_hist;


ALTER TABLE mrs_studies_hist_vw OWNER TO ni_developers;

--
-- Name: mrs_studies_researc_areas_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_studies_researc_areas_hist (
    studies_research_areas_id numeric(6,0),
    study_research_area_id numeric(4,0),
    study_id numeric(4,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_studies_researc_areas_hist OWNER TO postgres;

--
-- Name: mrs_studies_research_areas; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_studies_research_areas (
    studies_research_areas_id numeric(6,0) NOT NULL,
    study_research_area_id numeric(4,0),
    study_id numeric(4,0)
);


ALTER TABLE mrs_studies_research_areas OWNER TO postgres;

--
-- Name: mrs_studies_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_studies_vw AS
 SELECT s.site_id,
    s.study_id,
    s.label,
    s.description,
    s.hrrc_num,
    s.end_date,
    s.expiration_date,
    s.remaining_sessions,
    s.approved_sessions,
    s.pi_id,
    s.allowphiremoval,
    s.co_pi_id,
    s.irb_number,
    s.status_id,
    s.primary_research_area_id,
    s.secondary_research_area_id,
    s.hrrc_consent_date,
    s.hrrc_title,
    s.grant_number,
    s.url_reference,
    s.url_description,
    s.date_created,
    s.sponsor,
    s.add_to_recruitment,
    s.recruitment_study_purpose,
    s.recruitment_protocol_summary,
    s.recruitment_contact_name,
    s.recruitment_contact_email,
    s.recruitment_contact_phone,
    s.exp_warn_emails,
    s.rad_review_emails,
    s.max_enrollment,
    s.reuse_ursi,
    s.share_inst_emails,
    s.parent_study_id,
    s.dx_excluded,
    s.dx_description,
    s.default_radiologist,
    s.study_css_url,
    s.study_dir_name,
    s.self_enroll_enabled,
    s.recruitment_study,
    s.tracker_enabled,
    s.is_rdoc_study
   FROM mrs_studies s;


ALTER TABLE mrs_studies_vw OWNER TO ni_developers;

--
-- Name: mrs_studies_with_enrollment_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_studies_with_enrollment_vw AS
 SELECT mrs_studies.study_id,
    mrs_studies.hide_savenexit_in_sa,
    mrs_studies.nonstop_queue_in_sa,
    mrs_studies.label,
    mrs_studies.sa_review_emails,
    mrs_studies.description,
    mrs_studies.hrrc_num,
    mrs_studies.expiration_date,
    mrs_studies.exp_warn_emails,
    mrs_studies.remaining_sessions,
    mrs_studies.approved_sessions,
    mrs_studies.pi_id,
    mrs_studies.allowphiremoval,
    mrs_studies.co_pi_id,
    mrs_studies.rad_review_emails,
    mrs_studies.irb_number,
    mrs_studies.status_id,
    mrs_studies.hrrc_consent_date,
    mrs_studies.grant_number,
    mrs_studies.url_reference,
    mrs_studies.url_description,
    mrs_studies.date_created,
    mrs_studies.sponsor,
    mrs_studies.hrrc_title,
    mrs_studies.primary_research_area_id,
    mrs_studies.secondary_research_area_id,
    mrs_studies.add_to_recruitment,
    mrs_studies.recruitment_study_purpose,
    mrs_studies.recruitment_protocol_summary,
    mrs_studies.recruitment_contact_name,
    mrs_studies.recruitment_contact_email,
    mrs_studies.recruitment_contact_phone,
    mrs_studies.site_id,
    mrs_studies.study_dir_name,
    mrs_studies.study_css_url,
    mrs_studies.max_enrollment,
    mrs_studies.self_enroll_enabled,
    mrs_studies.recruitment_study,
    ( SELECT count(1) AS count
           FROM mrs_subject_type_details_vw sd
          WHERE ((sd.study_id = mrs_studies.study_id) AND (sd.disenrolled_date IS NULL))) AS count,
    mrs_studies.reuse_ursi,
    mrs_studies.share_inst_emails,
    mrs_studies.parent_study_id,
    mrs_studies.dx_excluded,
    mrs_studies.default_radiologist,
    mrs_studies.is_rdoc_study
   FROM (mrs_studies
     LEFT JOIN mrs_pi_vw pi ON (((mrs_studies.pi_id)::text = (pi.person_id)::text)))
  GROUP BY mrs_studies.study_id, mrs_studies.label, mrs_studies.description, mrs_studies.hrrc_num, mrs_studies.expiration_date, mrs_studies.exp_warn_emails, mrs_studies.remaining_sessions, mrs_studies.approved_sessions, mrs_studies.pi_id, mrs_studies.allowphiremoval, mrs_studies.co_pi_id, mrs_studies.rad_review_emails, mrs_studies.sa_review_emails, mrs_studies.irb_number, mrs_studies.status_id, mrs_studies.hrrc_consent_date, mrs_studies.grant_number, mrs_studies.url_reference, mrs_studies.url_description, mrs_studies.date_created, mrs_studies.sponsor, mrs_studies.hrrc_title, mrs_studies.primary_research_area_id, mrs_studies.secondary_research_area_id, mrs_studies.add_to_recruitment, mrs_studies.recruitment_study_purpose, mrs_studies.recruitment_protocol_summary, mrs_studies.recruitment_contact_name, mrs_studies.recruitment_contact_email, mrs_studies.recruitment_contact_phone, mrs_studies.site_id, mrs_studies.study_dir_name, mrs_studies.max_enrollment, mrs_studies.reuse_ursi, mrs_studies.share_inst_emails, mrs_studies.parent_study_id, mrs_studies.dx_excluded, mrs_studies.default_radiologist, mrs_studies.is_rdoc_study, mrs_studies.hide_savenexit_in_sa, mrs_studies.nonstop_queue_in_sa, mrs_studies.study_css_url, mrs_studies.self_enroll_enabled, mrs_studies.recruitment_study;


ALTER TABLE mrs_studies_with_enrollment_vw OWNER TO ni_developers;

--
-- Name: mrs_study_asmt_prot; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_asmt_prot (
    study_id numeric(8,0) NOT NULL,
    site_id character varying(3) NOT NULL,
    subject_type_id numeric(8,0) NOT NULL,
    instrument_id numeric(8,0) NOT NULL,
    task_order numeric(2,0) DEFAULT 0,
    task_length_minutes numeric(10,0) DEFAULT 0,
    segment_interval character varying(20) NOT NULL
);


ALTER TABLE mrs_study_asmt_prot OWNER TO postgres;

--
-- Name: mrs_study_asmt_prot_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_study_asmt_prot_vw AS
 SELECT mrs_study_asmt_prot.instrument_id,
    mrs_study_asmt_prot.segment_interval,
    mrs_study_asmt_prot.site_id,
    mrs_study_asmt_prot.study_id,
    mrs_study_asmt_prot.subject_type_id,
    mrs_study_asmt_prot.task_length_minutes,
    mrs_study_asmt_prot.task_order
   FROM mrs_study_asmt_prot;


ALTER TABLE mrs_study_asmt_prot_vw OWNER TO postgres;

--
-- Name: mrs_study_codes_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_codes_hist (
    code_id numeric(4,0),
    label character varying(200),
    description character varying(4000),
    study_id numeric(4,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_study_codes_hist OWNER TO postgres;

--
-- Name: mrs_study_codes_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_study_codes_vw AS
 SELECT mrs_study_codes.code_id,
    mrs_study_codes.label,
    mrs_study_codes.description,
    mrs_study_codes.study_id
   FROM mrs_study_codes;


ALTER TABLE mrs_study_codes_vw OWNER TO postgres;

--
-- Name: mrs_study_demo_config; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_demo_config (
    study_id numeric(4,0),
    demo_field_label character varying(30),
    demo_field_sort_order numeric(2,0),
    demo_field_question_id character varying(20),
    demo_field_subj_gender character varying(1),
    demo_field_subj_birth_date character varying(1)
);


ALTER TABLE mrs_study_demo_config OWNER TO postgres;

--
-- Name: mrs_study_demo_config_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_study_demo_config_vw AS
 SELECT mrs_study_demo_config.study_id,
    mrs_study_demo_config.demo_field_label,
    mrs_study_demo_config.demo_field_sort_order,
    mrs_study_demo_config.demo_field_question_id,
    mrs_study_demo_config.demo_field_subj_gender,
    mrs_study_demo_config.demo_field_subj_birth_date
   FROM mrs_study_demo_config;


ALTER TABLE mrs_study_demo_config_vw OWNER TO postgres;

--
-- Name: mrs_study_ids_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_study_ids_vw AS
 SELECT mrs_studies.study_id,
    mrs_studies.pi_id
   FROM mrs_studies;


ALTER TABLE mrs_study_ids_vw OWNER TO postgres;

--
-- Name: mrs_study_intervals_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_intervals_hist (
    study_id numeric(8,0) NOT NULL,
    label character varying(50) NOT NULL,
    time_from_baseline numeric(8,0) NOT NULL,
    time_unit character varying(10) DEFAULT 'DAY'::character varying,
    segment_interval character varying(20) NOT NULL,
    mod_user character varying(40),
    mod_date timestamp without time zone,
    is_hidden boolean
);


ALTER TABLE mrs_study_intervals_hist OWNER TO postgres;

--
-- Name: mrs_study_intervals_segment_interval_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_study_intervals_segment_interval_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_study_intervals_segment_interval_id_seq OWNER TO ni_developers;

--
-- Name: mrs_study_intervals_segment_interval_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_study_intervals_segment_interval_id_seq OWNED BY mrs_study_intervals.segment_interval_id;


--
-- Name: mrs_study_intervals_subject_s_study_intervals_subject_sched_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_study_intervals_subject_s_study_intervals_subject_sched_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_study_intervals_subject_s_study_intervals_subject_sched_seq OWNER TO ni_developers;

--
-- Name: mrs_study_intervals_subject_s_study_intervals_subject_sched_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_study_intervals_subject_s_study_intervals_subject_sched_seq OWNED BY mrs_study_intervals_subject_schedules.study_intervals_subject_schedules_id;


--
-- Name: mrs_study_intervals_subject_schedules_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_study_intervals_subject_schedules_hist (
    study_intervals_subject_schedules_id integer,
    segment_interval_id integer,
    ursi character varying,
    segment_interval_timestamp timestamp without time zone,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_study_intervals_subject_schedules_hist OWNER TO ni_developers;

--
-- Name: mrs_study_intervals_subject_schedules_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_study_intervals_subject_schedules_vw AS
 SELECT mrs_study_intervals_subject_schedules.study_intervals_subject_schedules_id,
    mrs_study_intervals_subject_schedules.segment_interval_id,
    mrs_study_intervals_subject_schedules.ursi,
    mrs_study_intervals_subject_schedules.segment_interval_timestamp
   FROM mrs_study_intervals_subject_schedules;


ALTER TABLE mrs_study_intervals_subject_schedules_vw OWNER TO ni_developers;

--
-- Name: mrs_study_messages; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_messages (
    message_id numeric(12,0) NOT NULL,
    study_id numeric(8,0) NOT NULL,
    message_type_id numeric(3,0) NOT NULL,
    auto_send boolean,
    days_in_advance integer
);


ALTER TABLE mrs_study_messages OWNER TO postgres;

--
-- Name: mrs_study_messages_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_messages_hist (
    message_id numeric(12,0),
    study_id numeric(8,0) NOT NULL,
    message_type_id numeric(3,0) NOT NULL,
    mod_user character varying(50),
    mod_date timestamp without time zone,
    auto_send boolean,
    days_in_advance integer
);


ALTER TABLE mrs_study_messages_hist OWNER TO postgres;

--
-- Name: mrs_study_messages_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_study_messages_vw AS
 SELECT mrs_study_messages.message_id,
    mrs_study_messages.study_id,
    mrs_study_messages.message_type_id,
    mrs_study_messages.auto_send,
    mrs_study_messages.days_in_advance
   FROM mrs_study_messages;


ALTER TABLE mrs_study_messages_vw OWNER TO postgres;

--
-- Name: mrs_study_missing_assessment_reasons; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_missing_assessment_reasons (
    reason_id numeric(10,0) NOT NULL,
    study_id numeric(10,0) NOT NULL
);


ALTER TABLE mrs_study_missing_assessment_reasons OWNER TO postgres;

--
-- Name: mrs_study_missing_assessment_reasons_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_study_missing_assessment_reasons_vw AS
 SELECT mrs_study_missing_assessment_reasons.reason_id,
    mrs_study_missing_assessment_reasons.study_id
   FROM mrs_study_missing_assessment_reasons;


ALTER TABLE mrs_study_missing_assessment_reasons_vw OWNER TO postgres;

--
-- Name: mrs_study_proj_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_proj_hist (
    project_id numeric(10,0),
    label character varying(400),
    priority numeric(10,0),
    date_requested timestamp without time zone,
    date_approved timestamp without time zone,
    datasource_category character varying(100),
    outcome_measures character varying(4000),
    outcome_dependencies character varying(4000),
    notes character varying(4000),
    parent_project_id numeric(10,0),
    pr_inv_person_id character varying(40),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_study_proj_hist OWNER TO postgres;

--
-- Name: mrs_study_projects; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_projects (
    project_id numeric(10,0) NOT NULL,
    label character varying(400) NOT NULL,
    priority numeric(10,0) NOT NULL,
    date_requested timestamp without time zone,
    date_approved timestamp without time zone,
    datasource_category character varying(100),
    outcome_measures character varying(4000),
    outcome_dependencies character varying(4000),
    notes character varying(4000),
    parent_project_id numeric(10,0),
    pr_inv_person_id character varying(40) NOT NULL
);


ALTER TABLE mrs_study_projects OWNER TO postgres;

--
-- Name: mrs_study_projects_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_study_projects_vw AS
 SELECT sp.project_id,
    sp.label,
    sp.priority,
    sp.date_requested,
    sp.date_approved,
    sp.datasource_category,
    sp.outcome_measures,
    sp.outcome_dependencies,
    sp.notes,
    sp.parent_project_id,
    sp.pr_inv_person_id,
    psp.label AS parent_project_label,
    p.first_name,
    p.last_name,
    s.label AS pr_inv_site,
    d.study_id,
    mrs_get_col_list_f(sp.project_id, 'coinvestigators'::character varying, ', '::character varying) AS co_inv_person_names,
    mrs_get_col_list_f(sp.project_id, 'domains'::character varying, ', '::character varying) AS data_domains
   FROM ((((mrs_study_projects psp
     RIGHT JOIN mrs_study_projects sp ON ((psp.parent_project_id = sp.project_id)))
     JOIN mrs_persons p ON (((sp.pr_inv_person_id)::text = (p.person_id)::text)))
     JOIN casdba.cas_sites s ON (((p.site_id)::text = (s.site_id)::text)))
     JOIN mrs_proj_study_details d ON ((d.project_id = sp.project_id)));


ALTER TABLE mrs_study_projects_vw OWNER TO ni_developers;

--
-- Name: mrs_study_recruitment_criteria; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_recruitment_criteria (
    study_id numeric(10,0) NOT NULL,
    criteria_id numeric(10,0) NOT NULL,
    value character varying(1000)
);


ALTER TABLE mrs_study_recruitment_criteria OWNER TO postgres;

--
-- Name: mrs_study_recruitment_criteria_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_recruitment_criteria_hist (
    study_id numeric(10,0),
    criteria_id numeric(10,0),
    value character varying(1000),
    mod_user character varying(50),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_study_recruitment_criteria_hist OWNER TO postgres;

--
-- Name: mrs_study_recruitment_criteria_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_study_recruitment_criteria_vw AS
 SELECT mrs_study_recruitment_criteria.study_id,
    mrs_study_recruitment_criteria.criteria_id,
    mrs_study_recruitment_criteria.value
   FROM mrs_study_recruitment_criteria;


ALTER TABLE mrs_study_recruitment_criteria_vw OWNER TO postgres;

--
-- Name: mrs_study_research_area; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_research_area (
    study_research_area_id character varying NOT NULL,
    label character varying(40),
    description character varying(200)
);


ALTER TABLE mrs_study_research_area OWNER TO postgres;

--
-- Name: mrs_study_research_area_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_research_area_hist (
    study_research_area_id numeric(4,0),
    label character varying(40),
    description character varying(200),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_study_research_area_hist OWNER TO postgres;

--
-- Name: mrs_study_research_area_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_study_research_area_vw AS
 SELECT mrs_study_research_area.study_research_area_id,
    mrs_study_research_area.label,
    mrs_study_research_area.description
   FROM mrs_study_research_area;


ALTER TABLE mrs_study_research_area_vw OWNER TO postgres;

--
-- Name: mrs_study_scanner_rates_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_scanner_rates_hist (
    scanner_id numeric(3,0),
    study_id numeric(4,0),
    rate_amt numeric(8,2),
    label character varying(200),
    description character varying(4000),
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_study_scanner_rates_hist OWNER TO postgres;

--
-- Name: mrs_study_secondary_sites; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_study_secondary_sites (
    study_site_id integer NOT NULL,
    study_id integer NOT NULL,
    site_id character varying(3) NOT NULL
);


ALTER TABLE mrs_study_secondary_sites OWNER TO ni_developers;

--
-- Name: mrs_study_secondary_sites_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_study_secondary_sites_hist (
    study_site_id integer,
    study_id integer,
    site_id character varying(3),
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_study_secondary_sites_hist OWNER TO ni_developers;

--
-- Name: mrs_study_secondary_sites_study_site_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_study_secondary_sites_study_site_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_study_secondary_sites_study_site_id_seq OWNER TO ni_developers;

--
-- Name: mrs_study_secondary_sites_study_site_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_study_secondary_sites_study_site_id_seq OWNED BY mrs_study_secondary_sites.study_site_id;


--
-- Name: mrs_study_secondary_sites_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_study_secondary_sites_vw AS
 SELECT ss.study_site_id,
    ss.site_id,
    cs.label AS site_label,
    cs.description AS site_description,
    s.study_id,
    s.label AS study_label
   FROM ((casdba.cas_sites cs
     JOIN mrs_study_secondary_sites ss ON (((cs.site_id)::text = (ss.site_id)::text)))
     JOIN mrs_studies s ON ((s.study_id = (ss.study_id)::numeric)));


ALTER TABLE mrs_study_secondary_sites_vw OWNER TO ni_developers;

--
-- Name: mrs_study_statuses_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_study_statuses_vw AS
 SELECT mrs_study_status.status_id,
    mrs_study_status.label,
    mrs_study_status.description
   FROM mrs_study_status;


ALTER TABLE mrs_study_statuses_vw OWNER TO postgres;

--
-- Name: mrs_study_template_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_study_template_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_study_template_counter OWNER TO postgres;

--
-- Name: mrs_study_templates; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_templates (
    template_id numeric NOT NULL,
    template_name character varying NOT NULL,
    study_id numeric NOT NULL
);


ALTER TABLE mrs_study_templates OWNER TO postgres;

--
-- Name: mrs_study_templates_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_study_templates_hist (
    template_id numeric,
    template_name character varying,
    study_id numeric,
    mod_user character varying,
    mod_date date
);


ALTER TABLE mrs_study_templates_hist OWNER TO postgres;

--
-- Name: mrs_study_templates_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_study_templates_vw AS
 SELECT mrs_study_templates.template_id,
    mrs_study_templates.template_name,
    mrs_study_templates.study_id
   FROM mrs_study_templates;


ALTER TABLE mrs_study_templates_vw OWNER TO postgres;

--
-- Name: mrs_study_tracker_event_canned_responses; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_study_tracker_event_canned_responses (
    id integer NOT NULL,
    study_id integer NOT NULL,
    label character varying NOT NULL,
    default_response boolean,
    hidden boolean
);


ALTER TABLE mrs_study_tracker_event_canned_responses OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_event_canned_responses_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_study_tracker_event_canned_responses_hist (
    id integer,
    study_id integer,
    label character varying,
    default_response boolean,
    hidden boolean,
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_study_tracker_event_canned_responses_hist OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_event_canned_responses_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_study_tracker_event_canned_responses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_study_tracker_event_canned_responses_id_seq OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_event_canned_responses_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_study_tracker_event_canned_responses_id_seq OWNED BY mrs_study_tracker_event_canned_responses.id;


--
-- Name: mrs_study_tracker_event_canned_responses_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_study_tracker_event_canned_responses_vw AS
 SELECT r.id,
    r.study_id,
    r.label,
    r.default_response,
    r.hidden
   FROM mrs_study_tracker_event_canned_responses r;


ALTER TABLE mrs_study_tracker_event_canned_responses_vw OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_response_options_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_study_tracker_response_options_hist (
    id integer,
    tracker_id integer,
    label character varying,
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_study_tracker_response_options_hist OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_response_options_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_study_tracker_response_options_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_study_tracker_response_options_id_seq OWNER TO ni_developers;

--
-- Name: mrs_study_tracker_response_options_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_study_tracker_response_options_id_seq OWNED BY mrs_study_tracker_response_options.id;


--
-- Name: mrs_study_trackers_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_study_trackers_hist (
    id integer,
    study_id integer,
    label character varying,
    permit_custom_text_response boolean,
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_study_trackers_hist OWNER TO ni_developers;

--
-- Name: mrs_study_trackers_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_study_trackers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_study_trackers_id_seq OWNER TO ni_developers;

--
-- Name: mrs_study_trackers_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_study_trackers_id_seq OWNED BY mrs_study_trackers.id;


--
-- Name: mrs_subject_anon_ids_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subject_anon_ids_vw AS
 SELECT d.ursi,
    d.subject_type_id,
    d.anonymization_id,
    t.study_id
   FROM (mrs_subject_type_details d
     JOIN mrs_subject_types t ON ((t.subject_type_id = d.subject_type_id)));


ALTER TABLE mrs_subject_anon_ids_vw OWNER TO postgres;

--
-- Name: mrs_subject_assessments_queue_aqueue_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_subject_assessments_queue_aqueue_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_assessments_queue_aqueue_id_seq OWNER TO ni_developers;

--
-- Name: mrs_subject_assessments_queue_aqueue_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_subject_assessments_queue_aqueue_id_seq OWNED BY mrs_subject_assessments_queue.aqueue_id;


--
-- Name: mrs_subject_assessments_queue_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_assessments_queue_hist (
    aqueue_id_deprecated numeric,
    login_id numeric,
    instrument_id numeric,
    assessment_id numeric,
    segment_interval text,
    sort_order numeric,
    mod_user character varying,
    mod_date date,
    queue_type_id integer,
    aqueue_id integer,
    from_protocol_id numeric,
    auto_queue_generated boolean,
    start_date timestamp without time zone,
    end_date timestamp without time zone
);


ALTER TABLE mrs_subject_assessments_queue_hist OWNER TO postgres;

--
-- Name: mrs_subject_assessments_queue_instruments; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_assessments_queue_instruments (
    queue_instrument_id integer NOT NULL,
    aqueue_id integer NOT NULL,
    aqueue_id_deprecated integer,
    login_id numeric NOT NULL,
    instrument_id numeric NOT NULL,
    assessment_id numeric,
    segment_interval_deprecated text,
    segment_interval_id numeric,
    sort_order numeric,
    queue_type_id integer
);


ALTER TABLE mrs_subject_assessments_queue_instruments OWNER TO ni_developers;

--
-- Name: mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq OWNER TO ni_developers;

--
-- Name: mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq OWNED BY mrs_subject_assessments_queue_instruments.queue_instrument_id;


--
-- Name: mrs_subject_assessments_queue_instruments_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_assessments_queue_instruments_hist (
    queue_instrument_id integer,
    aqueue_id integer,
    aqueue_id_deprecated integer,
    login_id numeric,
    instrument_id numeric,
    assessment_id numeric,
    segment_interval_deprecated text,
    segment_interval_id numeric,
    sort_order numeric,
    queue_type_id integer,
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_subject_assessments_queue_instruments_hist OWNER TO ni_developers;

--
-- Name: mrs_subject_assessments_queue_types_queue_type_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_subject_assessments_queue_types_queue_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_assessments_queue_types_queue_type_id_seq OWNER TO postgres;

--
-- Name: mrs_subject_assessments_queue_types_queue_type_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: postgres
--

ALTER SEQUENCE mrs_subject_assessments_queue_types_queue_type_id_seq OWNED BY mrs_subject_assessments_queue_types.queue_type_id;


--
-- Name: mrs_subject_assessments_queue_types_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subject_assessments_queue_types_vw AS
 SELECT mrs_subject_assessments_queue_types.queue_type_id,
    mrs_subject_assessments_queue_types.label,
    mrs_subject_assessments_queue_types.sa_label,
    mrs_subject_assessments_queue_types.description,
    mrs_subject_assessments_queue_types.sa_description
   FROM mrs_subject_assessments_queue_types;


ALTER TABLE mrs_subject_assessments_queue_types_vw OWNER TO postgres;

--
-- Name: mrs_subject_assessments_queue_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_assessments_queue_vw AS
 SELECT mrs_subject_assessments_queue.aqueue_id,
    mrs_subject_assessments_queue.login_id,
    qi.queue_instrument_id,
    qi.instrument_id,
    qi.assessment_id,
    qi.segment_interval_id,
    qi.sort_order,
    qi.queue_type_id,
    mrs_subject_assessments_queue.from_protocol_id,
    mrs_subject_assessments_queue.start_date,
    mrs_subject_assessments_queue.end_date,
    mrs_subject_assessments_queue.auto_queue_generated,
    inst.label AS instrument_label,
    qt.sa_label AS queue_type_label,
    qt.sa_description AS queue_type_description,
    ct.queue_length
   FROM ((((mrs_subject_assessments_queue
     LEFT JOIN mrs_subject_assessments_queue_instruments qi ON ((mrs_subject_assessments_queue.aqueue_id = qi.aqueue_id)))
     LEFT JOIN mrs_inst_vw inst ON ((inst.instrument_id = qi.instrument_id)))
     LEFT JOIN mrs_subject_assessments_queue_types_vw qt ON ((qt.queue_type_id = qi.queue_type_id)))
     LEFT JOIN ( SELECT mrs_subject_assessments_queue_instruments.login_id,
            mrs_subject_assessments_queue_instruments.queue_type_id,
            count(*) AS queue_length
           FROM mrs_subject_assessments_queue_instruments
          GROUP BY mrs_subject_assessments_queue_instruments.login_id, mrs_subject_assessments_queue_instruments.queue_type_id) ct ON (((ct.login_id = qi.login_id) AND (ct.queue_type_id = qi.queue_type_id))))
  ORDER BY qi.queue_type_id, qi.sort_order;


ALTER TABLE mrs_subject_assessments_queue_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_class_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_class_details (
    usid character varying(9) NOT NULL,
    subject_class_id numeric NOT NULL,
    notes character varying(1000)
);


ALTER TABLE mrs_subject_class_details OWNER TO postgres;

--
-- Name: mrs_subject_class_details_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_class_details_hist (
    usid character varying(9) NOT NULL,
    subject_class_id numeric NOT NULL,
    notes character varying(1000),
    mod_user character varying(100),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_subject_class_details_hist OWNER TO postgres;

--
-- Name: mrs_subject_class_details_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subject_class_details_vw AS
 SELECT mrs_subject_class_details.usid,
    mrs_subject_class_details.subject_class_id,
    mrs_subject_class_details.notes
   FROM mrs_subject_class_details;


ALTER TABLE mrs_subject_class_details_vw OWNER TO postgres;

--
-- Name: mrs_subject_classes; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_classes (
    subject_class_id numeric NOT NULL,
    label character varying(120) NOT NULL,
    description character varying(1000)
);


ALTER TABLE mrs_subject_classes OWNER TO postgres;

--
-- Name: mrs_subject_classes_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subject_classes_vw AS
 SELECT mrs_subject_classes.subject_class_id,
    mrs_subject_classes.label,
    mrs_subject_classes.description
   FROM mrs_subject_classes;


ALTER TABLE mrs_subject_classes_vw OWNER TO postgres;

--
-- Name: mrs_subject_contacts; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_contacts (
    subject_contact_id integer NOT NULL,
    usid character varying(9),
    firstname character varying(50) NOT NULL,
    lastname character varying(50) NOT NULL
);


ALTER TABLE mrs_subject_contacts OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_addresses; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_contacts_addresses (
    subject_contact_address_id integer NOT NULL,
    subject_contact_id integer NOT NULL,
    line1 character varying(120),
    line2 character varying(120),
    city character varying(80),
    state character varying(2),
    postalcode character varying(10),
    country character varying(3),
    notes character varying(4000)
);


ALTER TABLE mrs_subject_contacts_addresses OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_addresses_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_contacts_addresses_hist (
    subject_contact_address_id integer NOT NULL,
    subject_contact_id integer,
    line1 character varying(120),
    line2 character varying(120),
    city character varying(80),
    state character varying(2),
    postalcode character varying(10),
    country character varying(3),
    notes character varying(4000),
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_subject_contacts_addresses_hist OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_addresses_h_subject_contact_address_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_subject_contacts_addresses_h_subject_contact_address_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_contacts_addresses_h_subject_contact_address_id_seq OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_addresses_h_subject_contact_address_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_subject_contacts_addresses_h_subject_contact_address_id_seq OWNED BY mrs_subject_contacts_addresses_hist.subject_contact_address_id;


--
-- Name: mrs_subject_contacts_addresses_subject_contact_address_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_subject_contacts_addresses_subject_contact_address_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_contacts_addresses_subject_contact_address_id_seq OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_addresses_subject_contact_address_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_subject_contacts_addresses_subject_contact_address_id_seq OWNED BY mrs_subject_contacts_addresses.subject_contact_address_id;


--
-- Name: mrs_subject_contacts_addresses_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_contacts_addresses_vw AS
 SELECT mrs_subject_contacts_addresses.subject_contact_address_id,
    mrs_subject_contacts_addresses.subject_contact_id,
    mrs_subject_contacts_addresses.line1,
    mrs_subject_contacts_addresses.line2,
    mrs_subject_contacts_addresses.city,
    mrs_subject_contacts_addresses.state,
    mrs_subject_contacts_addresses.postalcode,
    mrs_subject_contacts_addresses.country,
    mrs_subject_contacts_addresses.notes
   FROM mrs_subject_contacts_addresses;


ALTER TABLE mrs_subject_contacts_addresses_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_contacts_hist (
    subject_contact_id integer NOT NULL,
    usid character varying(9),
    firstname character varying(50),
    lastname character varying(50),
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_subject_contacts_hist OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_hist_subject_contact_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_subject_contacts_hist_subject_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_contacts_hist_subject_contact_id_seq OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_hist_subject_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_subject_contacts_hist_subject_contact_id_seq OWNED BY mrs_subject_contacts_hist.subject_contact_id;


--
-- Name: mrs_subject_contacts_phones; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_contacts_phones (
    subject_contact_phone_id integer NOT NULL,
    subject_contact_id integer NOT NULL,
    number bigint NOT NULL,
    extension integer,
    type character varying(10),
    notes character varying(4000)
);


ALTER TABLE mrs_subject_contacts_phones OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_phones_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_contacts_phones_hist (
    subject_contact_phone_id integer NOT NULL,
    subject_contact_id integer,
    number bigint,
    extension integer,
    type character varying(10),
    notes character varying(4000),
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_subject_contacts_phones_hist OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_phones_hist_subject_contact_phone_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_subject_contacts_phones_hist_subject_contact_phone_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_contacts_phones_hist_subject_contact_phone_id_seq OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_phones_hist_subject_contact_phone_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_subject_contacts_phones_hist_subject_contact_phone_id_seq OWNED BY mrs_subject_contacts_phones_hist.subject_contact_phone_id;


--
-- Name: mrs_subject_contacts_phones_subject_contact_phone_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_subject_contacts_phones_subject_contact_phone_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_contacts_phones_subject_contact_phone_id_seq OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_phones_subject_contact_phone_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_subject_contacts_phones_subject_contact_phone_id_seq OWNED BY mrs_subject_contacts_phones.subject_contact_phone_id;


--
-- Name: mrs_subject_contacts_phones_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_contacts_phones_vw AS
 SELECT mrs_subject_contacts_phones.subject_contact_phone_id,
    mrs_subject_contacts_phones.subject_contact_id,
    mrs_subject_contacts_phones.number,
    mrs_subject_contacts_phones.extension,
    mrs_subject_contacts_phones.notes,
    mrs_subject_contacts_phones.type
   FROM mrs_subject_contacts_phones;


ALTER TABLE mrs_subject_contacts_phones_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_subject_contact_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_subject_contacts_subject_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_contacts_subject_contact_id_seq OWNER TO ni_developers;

--
-- Name: mrs_subject_contacts_subject_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_subject_contacts_subject_contact_id_seq OWNED BY mrs_subject_contacts.subject_contact_id;


--
-- Name: mrs_subject_contacts_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_contacts_vw AS
 SELECT mrs_subject_contacts.subject_contact_id,
    mrs_subject_contacts.usid,
    mrs_subject_contacts.firstname,
    mrs_subject_contacts.lastname
   FROM mrs_subject_contacts;


ALTER TABLE mrs_subject_contacts_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_phone_details; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_phone_details (
    usid character varying(9) NOT NULL,
    phone_id numeric(8,0) NOT NULL
);


ALTER TABLE mrs_subject_phone_details OWNER TO postgres;

--
-- Name: mrs_subject_tag_details; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_tag_details (
    usid character varying(9) NOT NULL,
    subject_tag_id numeric(4,0) NOT NULL,
    value character varying(80) NOT NULL,
    study_id numeric,
    site_id character varying,
    subject_tag_details_id integer NOT NULL,
    CONSTRAINT mrssuexde_identifier_nn CHECK ((value IS NOT NULL))
);


ALTER TABLE mrs_subject_tag_details OWNER TO ni_developers;

--
-- Name: mrs_subjects_racial_categories; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subjects_racial_categories (
    racial_category_id numeric NOT NULL,
    usid character varying(9) NOT NULL,
    subject_type_detail_id integer NOT NULL
);


ALTER TABLE mrs_subjects_racial_categories OWNER TO postgres;

--
-- Name: mrs_subject_details2_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_details2_vw AS
 WITH usid_racial_cat AS (
         WITH tmp AS (
                 SELECT DISTINCT ON (mrs_subjects_racial_categories.usid, mrs_subjects_racial_categories.racial_category_id) mrs_subjects_racial_categories.usid,
                    mrs_subjects_racial_categories.racial_category_id
                   FROM mrs_subjects_racial_categories
                )
         SELECT tmp.usid,
            array_agg(tmp.racial_category_id) AS cat_ids
           FROM tmp
          GROUP BY tmp.usid
        )
 SELECT sub.usid,
    sub.first_name,
    sub.last_name,
    sub.middle_name,
    sub.site_id,
    sub.gender,
    sub.birth_date,
    sub.email_address,
    sub.suffix,
    addr.line1,
    addr.line2,
    addr.city,
    addr.state,
    addr.zip,
    addr.country,
    addr.notes AS general_notes,
    ph.area_code,
    ph.phone_num,
    ph.extension,
    ph.notes AS phone_notes,
    eth.ethnic_category,
    tags.subject_tag_id,
    tags.value,
    tags.subject_tag_details_id,
    cat.cat_ids,
    sub.first_name_at_birth,
    sub.middle_name_at_birth,
    sub.last_name_at_birth,
    sub.physical_sex_at_birth,
    sub.city_born_in
   FROM ((((((mrs_subjects sub
     JOIN mrs_addresses addr USING (usid))
     JOIN mrs_subject_phone_details phd USING (usid))
     JOIN mrs_phones ph USING (phone_id))
     LEFT JOIN ( SELECT DISTINCT ON (mrs_subject_type_details.usid) mrs_subject_type_details.usid,
            mrs_subject_type_details.ethnic_category
           FROM mrs_subject_type_details) eth USING (usid))
     LEFT JOIN ( SELECT DISTINCT ON (mrs_subject_tag_details.usid) mrs_subject_tag_details.subject_tag_details_id,
            mrs_subject_tag_details.usid,
            mrs_subject_tag_details.subject_tag_id,
            mrs_subject_tag_details.value
           FROM mrs_subject_tag_details) tags USING (usid))
     LEFT JOIN usid_racial_cat cat USING (usid));


ALTER TABLE mrs_subject_details2_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_details_active_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_details_active_vw AS
 SELECT mrs_subject_details_vw.ursi,
    mrs_subject_details_vw.anchor_date,
    mrs_subject_details_vw.site_id,
    mrs_subject_details_vw.age,
    mrs_subject_details_vw.birth_date,
    mrs_subject_details_vw.gender,
    mrs_subject_details_vw.ethnicity,
    mrs_subject_details_vw.entered_date,
    mrs_subject_details_vw.user_entered,
    mrs_subject_details_vw.subject_type_id,
    mrs_subject_details_vw.type_label,
    mrs_subject_details_vw.study_id,
    mrs_subject_details_vw.study_label,
    mrs_subject_details_vw.sa_review_emails,
    mrs_subject_details_vw.enrolled_date,
    mrs_subject_details_vw.consent_date,
    mrs_subject_details_vw.disenrolled_date,
    mrs_subject_details_vw.user_enrolled,
    mrs_subject_details_vw.notes,
    mrs_subject_details_vw.isphilinked,
    mrs_subject_details_vw.agreestosharedata,
    mrs_subject_details_vw.email_address,
    mrs_subject_details_vw.email_address_confirmed,
    mrs_subject_details_vw.email_address_confirmed_date,
    mrs_subject_details_vw.usid,
    mrs_subject_details_vw.dx_excluded,
    mrs_subject_details_vw.password,
    mrs_subject_details_vw.is_p2_active,
    mrs_subject_details_vw.first_name,
    mrs_subject_details_vw.last_name,
    mrs_subject_details_vw.first_name_at_birth,
    mrs_subject_details_vw.middle_name_at_birth,
    mrs_subject_details_vw.last_name_at_birth,
    mrs_subject_details_vw.physical_sex_at_birth,
    mrs_subject_details_vw.city_born_in
   FROM mrs_subject_details_vw
  WHERE (mrs_subject_details_vw.disenrolled_date IS NULL);


ALTER TABLE mrs_subject_details_active_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_login_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_subject_login_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_login_counter OWNER TO postgres;

--
-- Name: mrs_subject_logins_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_logins_hist (
    login_id numeric,
    usid character varying,
    study_id numeric,
    subject_id character varying,
    mod_user character varying,
    mod_date date,
    source_type numeric,
    nonstop_queue boolean
);


ALTER TABLE mrs_subject_logins_hist OWNER TO postgres;

--
-- Name: mrs_subject_logins_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subject_logins_vw AS
 SELECT mrs_subject_logins.login_id,
    mrs_subject_logins.usid,
    mrs_subject_logins.study_id,
    mrs_subject_logins.subject_id,
    mrs_subject_logins.source_type,
    mrs_subject_logins.nonstop_queue
   FROM mrs_subject_logins;


ALTER TABLE mrs_subject_logins_vw OWNER TO postgres;

--
-- Name: mrs_subject_match_tmp; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_match_tmp (
    session_id character varying(40),
    usid character varying(9),
    first_name character varying(50),
    last_name character varying(50),
    address_line1 character varying(120),
    transaction_date timestamp without time zone,
    birth_date timestamp without time zone,
    suffix character varying(40),
    area_code character varying(3),
    phone_num character varying(8)
);


ALTER TABLE mrs_subject_match_tmp OWNER TO postgres;

--
-- Name: mrs_subject_match_tmp_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subject_match_tmp_vw AS
 SELECT mrs_subject_match_tmp.address_line1,
    mrs_subject_match_tmp.first_name,
    mrs_subject_match_tmp.last_name,
    mrs_subject_match_tmp.usid,
    mrs_subject_match_tmp.session_id,
    mrs_subject_match_tmp.birth_date,
    mrs_subject_match_tmp.suffix
   FROM mrs_subject_match_tmp;


ALTER TABLE mrs_subject_match_tmp_vw OWNER TO postgres;

--
-- Name: mrs_subject_philink_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subject_philink_vw AS
 SELECT d.ursi,
    d.subject_type_id,
    t.study_id,
    s.label AS study_label,
    d.isphilinked,
    d.agreestosharedata,
    d.usid
   FROM mrs_studies s,
    mrs_subject_types t,
    mrs_subject_type_details d
  WHERE ((t.subject_type_id = d.subject_type_id) AND (t.study_id = s.study_id));


ALTER TABLE mrs_subject_philink_vw OWNER TO postgres;

--
-- Name: mrs_subject_phone_det_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subject_phone_det_vw AS
 SELECT DISTINCT s.ursi,
    p.phone_id,
    p.area_code,
    p.phone_num,
    p.extension,
    p.notes,
    d.usid
   FROM mrs_phones p,
    (mrs_subject_phone_details d
     LEFT JOIN mrs_subject_type_details s ON (((s.usid)::text = (d.usid)::text)))
  WHERE (d.phone_id = p.phone_id);


ALTER TABLE mrs_subject_phone_det_vw OWNER TO postgres;

--
-- Name: mrs_subject_phone_details_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_phone_details_hist (
    usid character varying(9),
    phone_id numeric(8,0),
    mod_user character varying(40),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_subject_phone_details_hist OWNER TO ni_developers;

--
-- Name: mrs_subject_tags; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_tags (
    subject_tag_id numeric(4,0) NOT NULL,
    organization character varying NOT NULL,
    label character varying(200) NOT NULL,
    description character varying(4000),
    is_phi boolean DEFAULT false NOT NULL,
    CONSTRAINT mrsextide_label_nn CHECK ((label IS NOT NULL)),
    CONSTRAINT mrsextide_organization_nn CHECK ((organization IS NOT NULL))
);


ALTER TABLE mrs_subject_tags OWNER TO ni_developers;

--
-- Name: mrs_subject_tags_exportable_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_tags_exportable_vw AS
 SELECT mrs_subject_tags.subject_tag_id,
    mrs_subject_tags.organization,
    mrs_subject_tags.label,
    mrs_subject_tags.description,
    mrs_subject_tags.is_phi
   FROM mrs_subject_tags
  WHERE (mrs_subject_tags.is_phi = false);


ALTER TABLE mrs_subject_tags_exportable_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_tag_details_exportable_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_tag_details_exportable_vw AS
 SELECT details.subject_tag_details_id,
    details.usid,
    details.value,
    details.study_id,
    details.site_id,
    tags.subject_tag_id,
    tags.organization,
    tags.label,
    tags.description,
    tags.is_phi
   FROM (mrs_subject_tags_exportable_vw tags
     JOIN mrs_subject_tag_details details USING (subject_tag_id));


ALTER TABLE mrs_subject_tag_details_exportable_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_tag_details_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_tag_details_hist (
    ursi character varying(9),
    subject_tag_id numeric(4,0),
    value character varying(80),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    usid character varying(9),
    study_id numeric,
    site_id character varying,
    subject_tag_details_id integer
);


ALTER TABLE mrs_subject_tag_details_hist OWNER TO ni_developers;

--
-- Name: mrs_subject_tag_details_subject_tag_details_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_subject_tag_details_subject_tag_details_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_tag_details_subject_tag_details_id_seq OWNER TO ni_developers;

--
-- Name: mrs_subject_tag_details_subject_tag_details_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_subject_tag_details_subject_tag_details_id_seq OWNED BY mrs_subject_tag_details.subject_tag_details_id;


--
-- Name: mrs_subject_tag_details_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_tag_details_vw AS
 SELECT details.subject_tag_details_id,
    details.usid,
    details.value,
    details.study_id,
    details.site_id,
    tags.subject_tag_id,
    tags.organization,
    tags.label,
    tags.description,
    tags.is_phi
   FROM (mrs_subject_tags tags
     JOIN mrs_subject_tag_details details USING (subject_tag_id));


ALTER TABLE mrs_subject_tag_details_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_tags_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_tags_hist (
    subject_tag_id numeric(4,0),
    organization character varying(25),
    label character varying(200),
    description character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    is_phi boolean
);


ALTER TABLE mrs_subject_tags_hist OWNER TO ni_developers;

--
-- Name: mrs_subject_tags_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_tags_vw AS
 SELECT mrs_subject_tags.subject_tag_id,
    mrs_subject_tags.organization,
    mrs_subject_tags.label,
    mrs_subject_tags.description,
    mrs_subject_tags.is_phi
   FROM mrs_subject_tags;


ALTER TABLE mrs_subject_tags_vw OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_events_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_tracker_events_hist (
    id integer,
    subject_type_detail_id integer,
    "timestamp" time without time zone,
    log character varying,
    tracking_diff character varying,
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_subject_tracker_events_hist OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_events_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_subject_tracker_events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_tracker_events_id_seq OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_events_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_subject_tracker_events_id_seq OWNED BY mrs_subject_tracker_events.id;


--
-- Name: mrs_subject_tracker_responses_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_subject_tracker_responses_hist (
    id integer,
    event_id integer,
    tracker_id integer,
    tracker_response_option_id integer,
    custom_text_response character varying,
    mod_user character varying(40),
    mod_date timestamp with time zone
);


ALTER TABLE mrs_subject_tracker_responses_hist OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_responses_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_subject_tracker_responses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_tracker_responses_id_seq OWNER TO ni_developers;

--
-- Name: mrs_subject_tracker_responses_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_subject_tracker_responses_id_seq OWNED BY mrs_subject_tracker_responses.id;


--
-- Name: mrs_subject_type_details_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_type_details_hist (
    ursi character varying(9),
    subject_type_id numeric(8,0),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    enrolled_date timestamp without time zone,
    disenrolled_date timestamp without time zone,
    notes character varying(4000),
    isphilinked character varying(1) DEFAULT 'Y'::character varying,
    agreestosharedata character varying(1),
    usid character varying(9),
    ethnic_category character varying(1),
    consent_date timestamp without time zone,
    user_enrolled character varying(40),
    anonymization_id character varying(20),
    subject_type_detail_id integer,
    dx_excluded boolean,
    anchor_date timestamp without time zone
);


ALTER TABLE mrs_subject_type_details_hist OWNER TO postgres;

--
-- Name: mrs_subject_type_details_subject_type_detail_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_subject_type_details_subject_type_detail_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_type_details_subject_type_detail_id_seq OWNER TO postgres;

--
-- Name: mrs_subject_type_details_subject_type_detail_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: postgres
--

ALTER SEQUENCE mrs_subject_type_details_subject_type_detail_id_seq OWNED BY mrs_subject_type_details.subject_type_detail_id;


--
-- Name: mrs_subject_type_group_counter; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_subject_type_group_counter
    START WITH 1
    INCREMENT BY 2
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_subject_type_group_counter OWNER TO postgres;

--
-- Name: mrs_subject_type_group_link; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_type_group_link (
    type_group_id numeric(10,0) NOT NULL,
    subject_type_id numeric(8,0) NOT NULL
);


ALTER TABLE mrs_subject_type_group_link OWNER TO postgres;

--
-- Name: mrs_subject_type_group_link_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subject_type_group_link_vw AS
 SELECT mrs_subject_type_group_link.type_group_id,
    mrs_subject_type_group_link.subject_type_id
   FROM mrs_subject_type_group_link;


ALTER TABLE mrs_subject_type_group_link_vw OWNER TO postgres;

--
-- Name: mrs_subject_type_groups; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_type_groups (
    type_group_id numeric(10,0) NOT NULL,
    label character varying(50),
    description character varying(100)
);


ALTER TABLE mrs_subject_type_groups OWNER TO postgres;

--
-- Name: mrs_subject_type_groups_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_type_groups_hist (
    type_group_id numeric(10,0),
    label character varying(50),
    description character varying(100),
    subject_type_ids character varying(200),
    date timestamp without time zone,
    mod_user character varying(100)
);


ALTER TABLE mrs_subject_type_groups_hist OWNER TO postgres;

--
-- Name: COLUMN mrs_subject_type_groups_hist.subject_type_ids; Type: COMMENT; Schema: mrsdba; Owner: postgres
--

COMMENT ON COLUMN mrs_subject_type_groups_hist.subject_type_ids IS 'this is a comma seperated subject_type_id string';


--
-- Name: mrs_subject_type_groups_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subject_type_groups_vw AS
 SELECT mrs_subject_type_groups.type_group_id,
    mrs_subject_type_groups.label,
    mrs_subject_type_groups.description
   FROM mrs_subject_type_groups;


ALTER TABLE mrs_subject_type_groups_vw OWNER TO postgres;

--
-- Name: mrs_subject_types_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subject_types_hist (
    subject_type_id numeric(8,0),
    study_id numeric(4,0),
    label character varying(200),
    description character varying(4000),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    dx_excluded boolean,
    qb_excluded boolean,
    hidden boolean,
    allow_p2_self_enrollment boolean
);


ALTER TABLE mrs_subject_types_hist OWNER TO postgres;

--
-- Name: mrs_subject_types_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subject_types_vw AS
 SELECT mrs_subject_types.subject_type_id,
    mrs_subject_types.study_id,
    mrs_subject_types.label,
    mrs_subject_types.description,
    mrs_subject_types.dx_excluded,
    mrs_subject_types.qb_excluded,
    mrs_subject_types.hidden,
    mrs_subject_types.allow_p2_self_enrollment
   FROM mrs_subject_types;


ALTER TABLE mrs_subject_types_vw OWNER TO ni_developers;

--
-- Name: mrs_subjects2_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subjects2_vw AS
 SELECT mrs_subjects.usid,
    mrs_subjects.first_name,
    mrs_subjects.middle_name,
    mrs_subjects.last_name,
    mrs_subjects.site_id,
    mrs_subjects.gender,
    mrs_subjects.birth_date,
    mrs_subjects.entered_date,
    mrs_subjects.user_entered,
    mrs_subjects.old_ursi,
    mrs_subjects.email_address,
    mrs_subjects.email_address_confirmed,
    mrs_subjects.email_address_confirmed_date,
    mrs_subjects.email_address_confirmed_method,
    mrs_subjects.suffix,
    mrs_subjects.password,
    mrs_subjects.is_p2_active,
    mrs_subjects.email_address_confirmation_code,
    mrs_subjects.agrees_to_future_studies,
    mrs_subjects.password_reset_key,
    mrs_subjects.first_name_at_birth,
    mrs_subjects.middle_name_at_birth,
    mrs_subjects.last_name_at_birth,
    mrs_subjects.physical_sex_at_birth,
    mrs_subjects.city_born_in
   FROM mrs_subjects;


ALTER TABLE mrs_subjects2_vw OWNER TO ni_developers;

--
-- Name: mrs_subjects_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subjects_hist (
    usid character varying(9),
    first_name character varying(50),
    middle_name character varying(50),
    last_name character varying(50),
    site_id character varying(4),
    gender character varying(1),
    birth_date timestamp without time zone,
    entered_date timestamp without time zone,
    user_entered character varying(40),
    mod_user character varying(40),
    mod_date timestamp without time zone,
    ethnic_category character varying(1) DEFAULT 0,
    email_address character varying(200),
    email_address_confirmed boolean,
    email_address_confirmed_date timestamp without time zone,
    email_address_confirmed_method character varying(500),
    suffix character varying(40),
    password character varying,
    is_p2_active boolean,
    email_address_confirmation_code character varying,
    agrees_to_future_studies boolean,
    password_reset_key character varying,
    old_ursi character varying,
    first_name_at_birth character varying(50),
    middle_name_at_birth character varying(50),
    last_name_at_birth character varying(50),
    physical_sex_at_birth character varying(1),
    city_born_in character varying(80)
);


ALTER TABLE mrs_subjects_hist OWNER TO postgres;

--
-- Name: mrs_subjects_race_cats_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subjects_race_cats_vw AS
 SELECT d.ursi,
    t.study_id,
    c.racial_category_id
   FROM (((mrs_subjects_racial_categories c
     JOIN mrs_racial_categories r ON ((r.racial_category_id = c.racial_category_id)))
     JOIN mrs_subject_type_details d ON ((c.subject_type_detail_id = d.subject_type_detail_id)))
     JOIN mrs_subject_types t ON ((d.subject_type_id = t.subject_type_id)));


ALTER TABLE mrs_subjects_race_cats_vw OWNER TO ni_developers;

--
-- Name: mrs_subjects_racial_categ_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subjects_racial_categ_hist (
    ursi character varying(9),
    racial_category_id numeric,
    mod_user character varying(40),
    mod_date timestamp without time zone,
    subject_type_id numeric(8,0),
    usid character varying(9),
    subject_type_detail_id integer
);


ALTER TABLE mrs_subjects_racial_categ_hist OWNER TO postgres;

--
-- Name: mrs_subjects_racial_cats_bak; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subjects_racial_cats_bak (
    ursi character varying(9),
    racial_category_id numeric,
    subject_type_id numeric(8,0),
    usid character varying(9)
);


ALTER TABLE mrs_subjects_racial_cats_bak OWNER TO postgres;

--
-- Name: mrs_subjects_reserved; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_subjects_reserved (
    ursi character varying(9) NOT NULL,
    date_reserved timestamp without time zone NOT NULL,
    user_reserved character varying(40) NOT NULL,
    pi_id character varying(40) NOT NULL,
    usid character varying(9)
);


ALTER TABLE mrs_subjects_reserved OWNER TO postgres;

--
-- Name: mrs_subjects_reserved_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_subjects_reserved_vw AS
 SELECT mrs_subjects_reserved.ursi,
    mrs_subjects_reserved.pi_id,
    mrs_subjects_reserved.date_reserved,
    mrs_subjects_reserved.user_reserved
   FROM mrs_subjects_reserved;


ALTER TABLE mrs_subjects_reserved_vw OWNER TO postgres;

--
-- Name: mrs_subjects_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_subjects_vw AS
 SELECT d.ursi,
    s.site_id,
    s.birth_date,
    s.gender,
    d.ethnic_category,
    s.entered_date,
    s.user_entered,
        CASE
            WHEN (s.first_name IS NULL) THEN 'Y'::text
            ELSE 'N'::text
        END AS ext,
    s.usid,
    s.email_address,
    s.email_address_confirmed,
    s.email_address_confirmed_method,
    s.suffix,
    s.password,
    s.is_p2_active,
    s.agrees_to_future_studies,
    s.password_reset_key,
    s.first_name_at_birth,
    s.middle_name_at_birth,
    s.last_name_at_birth,
    s.physical_sex_at_birth,
    s.city_born_in
   FROM (mrs_subjects s
     LEFT JOIN mrs_subject_type_details d ON (((s.usid)::text = (d.usid)::text)));


ALTER TABLE mrs_subjects_vw OWNER TO ni_developers;

--
-- Name: mrs_system_phi_log; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_system_phi_log (
    usid character varying(9) NOT NULL,
    view_time timestamp without time zone NOT NULL,
    view_source character varying(255),
    username character varying(160) NOT NULL
);


ALTER TABLE mrs_system_phi_log OWNER TO postgres;

--
-- Name: mrs_tabletquery_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_tabletquery_vw AS
 SELECT a.assessment_id,
    a.ursi,
    i.label,
    a.segment_interval,
    a.source_type,
    b.label AS alias_label,
    a.assessment_date,
    a.site_id,
    a.instrument_id,
    a.xml_source,
    a.entry_code
   FROM mrs_assessments a,
    mrs_person_alias b,
    mrs_instruments i
  WHERE (((a.instrument_id = i.instrument_id) AND (b.alias_id = a.rater1)) AND (a.is_deleted IS FALSE));


ALTER TABLE mrs_tabletquery_vw OWNER TO postgres;

--
-- Name: mrs_temp_clob; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_temp_clob (
    assessment_id numeric(8,0),
    xml_clob text
);


ALTER TABLE mrs_temp_clob OWNER TO postgres;

--
-- Name: mrs_template_instruments; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_template_instruments (
    template_id numeric NOT NULL,
    instrument_id numeric NOT NULL,
    sort_order numeric
);


ALTER TABLE mrs_template_instruments OWNER TO postgres;

--
-- Name: mrs_template_instruments_hist; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_template_instruments_hist (
    template_id numeric,
    instrument_id numeric,
    sort_order numeric,
    mod_user character varying,
    mod_date date
);


ALTER TABLE mrs_template_instruments_hist OWNER TO postgres;

--
-- Name: mrs_template_instruments_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_template_instruments_vw AS
 SELECT mrs_template_instruments.template_id,
    mrs_template_instruments.instrument_id,
    mrs_template_instruments.sort_order
   FROM mrs_template_instruments;


ALTER TABLE mrs_template_instruments_vw OWNER TO postgres;

--
-- Name: mrs_temporary_sequence; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrs_temporary_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_temporary_sequence OWNER TO postgres;

--
-- Name: mrs_trade_names_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_trade_names_vw AS
 SELECT mrs_trade_names.trade_id,
    mrs_trade_names.trade_name,
    mrs_trade_names.description,
    mrs_trade_names.notes,
    mrs_trade_names.entered_date,
    mrs_trade_names.user_entered
   FROM mrs_trade_names;


ALTER TABLE mrs_trade_names_vw OWNER TO postgres;

--
-- Name: mrs_trgt_enrllmnt_temp; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_trgt_enrllmnt_temp (
    dbuser character varying(40),
    study_id numeric(6,0),
    date timestamp without time zone,
    enrollment numeric(3,0)
);


ALTER TABLE mrs_trgt_enrllmnt_temp OWNER TO postgres;

--
-- Name: mrs_trgt_enrllmnt_temp_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_trgt_enrllmnt_temp_vw AS
 SELECT mrs_trgt_enrllmnt_temp.dbuser,
    mrs_trgt_enrllmnt_temp.study_id,
    mrs_trgt_enrllmnt_temp.date,
    mrs_trgt_enrllmnt_temp.enrollment
   FROM mrs_trgt_enrllmnt_temp;


ALTER TABLE mrs_trgt_enrllmnt_temp_vw OWNER TO postgres;

--
-- Name: mrs_unlinked_assessments; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_unlinked_assessments (
    assessment_id numeric(8,0),
    resolution_phase numeric(1,0)
);


ALTER TABLE mrs_unlinked_assessments OWNER TO postgres;

--
-- Name: mrs_ursi_dets_mv; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_ursi_dets_mv (
    ursi character varying(9),
    ursi_match character varying(9)
);


ALTER TABLE mrs_ursi_dets_mv OWNER TO postgres;

--
-- Name: mrs_user_app_options; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_user_app_options (
    id integer NOT NULL,
    username character varying(100) NOT NULL,
    option_id integer NOT NULL,
    option_name character varying(100) NOT NULL
);


ALTER TABLE mrs_user_app_options OWNER TO ni_developers;

--
-- Name: mrs_user_app_options_hist; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE mrs_user_app_options_hist (
    id integer,
    username character varying(100),
    option_id integer,
    option_name character varying(100),
    mod_user character varying(100),
    mod_date timestamp without time zone
);


ALTER TABLE mrs_user_app_options_hist OWNER TO ni_developers;

--
-- Name: mrs_user_app_options_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: ni_developers
--

CREATE SEQUENCE mrs_user_app_options_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mrs_user_app_options_id_seq OWNER TO ni_developers;

--
-- Name: mrs_user_app_options_id_seq; Type: SEQUENCE OWNED BY; Schema: mrsdba; Owner: ni_developers
--

ALTER SEQUENCE mrs_user_app_options_id_seq OWNED BY mrs_user_app_options.id;


--
-- Name: mrs_user_app_options_vw; Type: VIEW; Schema: mrsdba; Owner: ni_developers
--

CREATE VIEW mrs_user_app_options_vw AS
 SELECT mrs_user_app_options.id,
    mrs_user_app_options.username,
    mrs_user_app_options.option_id,
    mrs_user_app_options.option_name
   FROM mrs_user_app_options;


ALTER TABLE mrs_user_app_options_vw OWNER TO ni_developers;

--
-- Name: mrs_user_scan_export_options; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE mrs_user_scan_export_options (
    db_username character varying(40) NOT NULL,
    options_string text NOT NULL,
    last_updated timestamp without time zone NOT NULL
);


ALTER TABLE mrs_user_scan_export_options OWNER TO postgres;

--
-- Name: mrs_user_scan_export_options_vw; Type: VIEW; Schema: mrsdba; Owner: postgres
--

CREATE VIEW mrs_user_scan_export_options_vw AS
 SELECT mrs_user_scan_export_options.db_username,
    mrs_user_scan_export_options.options_string,
    mrs_user_scan_export_options.last_updated
   FROM mrs_user_scan_export_options;


ALTER TABLE mrs_user_scan_export_options_vw OWNER TO postgres;

--
-- Name: mrsaddres_addressid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsaddres_addressid_seq
    START WITH 16831
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsaddres_addressid_seq OWNER TO postgres;

--
-- Name: mrsanareg_anaregid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsanareg_anaregid_seq
    START WITH 41
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrsanareg_anaregid_seq OWNER TO postgres;

--
-- Name: mrsassess_assessmentid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsassess_assessmentid_seq
    START WITH 349672
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsassess_assessmentid_seq OWNER TO postgres;

--
-- Name: mrsdatadom_datadom_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsdatadom_datadom_id_seq
    START WITH 21
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 100000000
    CACHE 20;


ALTER TABLE mrsdatadom_datadom_id_seq OWNER TO postgres;

--
-- Name: mrsdattyp_dataentrytypeid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsdattyp_dataentrytypeid_seq
    START WITH 21
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsdattyp_dataentrytypeid_seq OWNER TO postgres;

--
-- Name: mrsdoccat_categoryid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsdoccat_categoryid_seq
    START WITH 681
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrsdoccat_categoryid_seq OWNER TO postgres;

--
-- Name: mrsdocume_fileid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsdocume_fileid_seq
    START WITH 2779
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsdocume_fileid_seq OWNER TO postgres;

--
-- Name: mrsdrgcat_cat_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsdrgcat_cat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrsdrgcat_cat_id_seq OWNER TO postgres;

--
-- Name: mrsdrugprop_property_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsdrugprop_property_id_seq
    START WITH 41
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsdrugprop_property_id_seq OWNER TO postgres;

--
-- Name: mrseeg_eegid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrseeg_eegid_seq
    START WITH 6220
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 999999999
    CACHE 20;


ALTER TABLE mrseeg_eegid_seq OWNER TO postgres;

--
-- Name: mrseegser_eegseriesid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrseegser_eegseriesid_seq
    START WITH 21
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrseegser_eegseriesid_seq OWNER TO postgres;

--
-- Name: mrseegserid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrseegserid_seq
    START WITH 7081
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrseegserid_seq OWNER TO postgres;

--
-- Name: mrseegsessid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrseegsessid_seq
    START WITH 2281
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrseegsessid_seq OWNER TO postgres;

--
-- Name: mrsextid_extid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsextid_extid_seq
    START WITH 181
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrsextid_extid_seq OWNER TO postgres;

--
-- Name: mrsimages_imageid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsimages_imageid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsimages_imageid_seq OWNER TO postgres;

--
-- Name: mrsinssec_sectionid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsinssec_sectionid_seq
    START WITH 5434
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsinssec_sectionid_seq OWNER TO postgres;

--
-- Name: mrsinstru_instrumentid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsinstru_instrumentid_seq
    START WITH 4282
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsinstru_instrumentid_seq OWNER TO postgres;

--
-- Name: mrsmodali_modalityid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsmodali_modalityid_seq
    START WITH 41
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrsmodali_modalityid_seq OWNER TO postgres;

--
-- Name: mrsmodpropid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsmodpropid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrsmodpropid_seq OWNER TO postgres;

--
-- Name: mrsperali_aliasid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsperali_aliasid_seq
    START WITH 2881
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999
    CACHE 20;


ALTER TABLE mrsperali_aliasid_seq OWNER TO postgres;

--
-- Name: mrsperode_prdid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsperode_prdid_seq
    START WITH 27650
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 20;


ALTER TABLE mrsperode_prdid_seq OWNER TO postgres;

--
-- Name: mrsphones_phoneid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsphones_phoneid_seq
    START WITH 15582
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsphones_phoneid_seq OWNER TO postgres;

--
-- Name: mrsraccat_raccatid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsraccat_raccatid_seq
    START WITH 21
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 20;


ALTER TABLE mrsraccat_raccatid_seq OWNER TO postgres;

--
-- Name: mrsrecscanexp_scanexpid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsrecscanexp_scanexpid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 20;


ALTER TABLE mrsrecscanexp_scanexpid_seq OWNER TO postgres;

--
-- Name: mrsroles_roleid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsroles_roleid_seq
    START WITH 41
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrsroles_roleid_seq OWNER TO postgres;

--
-- Name: mrsscanne_scannerid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsscanne_scannerid_seq
    START WITH 221
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 999
    CACHE 20;


ALTER TABLE mrsscanne_scannerid_seq OWNER TO postgres;

--
-- Name: mrsscanstage_scanid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsscanstage_scanid_seq
    START WITH 4247
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 100000000
    CACHE 20;


ALTER TABLE mrsscanstage_scanid_seq OWNER TO postgres;

--
-- Name: mrsscases_reviewinclude_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsscases_reviewinclude_seq
    START WITH 11
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsscases_reviewinclude_seq OWNER TO postgres;

--
-- Name: mrsscases_scanid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsscases_scanid_seq
    START WITH 28425
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsscases_scanid_seq OWNER TO postgres;

--
-- Name: mrsseries_seriesid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsseries_seriesid_seq
    START WITH 303513
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrsseries_seriesid_seq OWNER TO postgres;

--
-- Name: mrsshrrul_excid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsshrrul_excid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 999999
    CACHE 20;


ALTER TABLE mrsshrrul_excid_seq OWNER TO postgres;

--
-- Name: mrsshrrul_ruleid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsshrrul_ruleid_seq
    START WITH 14106
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 999999
    CACHE 20;


ALTER TABLE mrsshrrul_ruleid_seq OWNER TO postgres;

--
-- Name: mrssource_source_type_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrssource_source_type_seq
    START WITH 21
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrssource_source_type_seq OWNER TO postgres;

--
-- Name: mrsstdproj_project_id_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsstdproj_project_id_seq
    START WITH 83
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 100000000
    CACHE 20;


ALTER TABLE mrsstdproj_project_id_seq OWNER TO postgres;

--
-- Name: mrsstucod_codeid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsstucod_codeid_seq
    START WITH 41
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrsstucod_codeid_seq OWNER TO postgres;

--
-- Name: mrsstucon_conditionid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsstucon_conditionid_seq
    START WITH 123181
    INCREMENT BY 1
    MINVALUE 0
    MAXVALUE 9999999
    CACHE 20;


ALTER TABLE mrsstucon_conditionid_seq OWNER TO postgres;

--
-- Name: mrsstudie_studyid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsstudie_studyid_seq
    START WITH 2239
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrsstudie_studyid_seq OWNER TO postgres;

--
-- Name: mrsstures_studyresareid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsstures_studyresareid_seq
    START WITH 21
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrsstures_studyresareid_seq OWNER TO postgres;

--
-- Name: mrsstures_studyresaresid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsstures_studyresaresid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 999999
    CACHE 20;


ALTER TABLE mrsstures_studyresaresid_seq OWNER TO postgres;

--
-- Name: mrsstutas_eegtaskid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrsstutas_eegtaskid_seq
    START WITH 5921
    INCREMENT BY 1
    MINVALUE 0
    MAXVALUE 99999
    CACHE 20;


ALTER TABLE mrsstutas_eegtaskid_seq OWNER TO postgres;

--
-- Name: mrssubtyp_subjecttypeid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrssubtyp_subjecttypeid_seq
    START WITH 3020
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE mrssubtyp_subjecttypeid_seq OWNER TO postgres;

--
-- Name: mrstrdnm_tradeid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE mrstrdnm_tradeid_seq
    START WITH 721
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE mrstrdnm_tradeid_seq OWNER TO postgres;

--
-- Name: olin_scanid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE olin_scanid_seq
    START WITH 10788
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE olin_scanid_seq OWNER TO postgres;

--
-- Name: olin_seriesid_seq; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE olin_seriesid_seq
    START WITH 44706
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE olin_seriesid_seq OWNER TO postgres;

--
-- Name: rad_review_report_jody; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE rad_review_report_jody (
    ursi character varying(9),
    seq numeric
);


ALTER TABLE rad_review_report_jody OWNER TO postgres;

--
-- Name: rr2; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE rr2 (
    id numeric,
    ursi character varying(9),
    site_id character varying(3),
    session_scan_id numeric(8,0),
    studyname character varying(200),
    pi_first_name character varying(50),
    pi_last_name character varying(50),
    label character varying(200),
    gender character varying(1),
    birth_date timestamp without time zone,
    age_at_scan double precision,
    ethnic_category character varying(50),
    race_cats text,
    scan_date timestamp without time zone,
    age_in_scan_sessions numeric(4,1),
    radiologist_id character varying(40),
    recommendation_code character varying(2),
    recommendation_comments character varying(4000),
    usid character varying(9)
);


ALTER TABLE rr2 OWNER TO postgres;

--
-- Name: rr2good; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE rr2good (
    id numeric,
    ursi character varying(9),
    site_id character varying(3),
    session_scan_id numeric,
    studyname character varying(200),
    pi_first_name character varying(50),
    pi_last_name character varying(50),
    label character varying(200),
    gender character varying(1),
    birth_date timestamp without time zone,
    age_at_scan double precision,
    ethnic_category character varying(50),
    race_cats text,
    scan_date timestamp without time zone,
    age_in_scan_sessions numeric(4,1),
    radiologist_id character varying(40),
    recommendation_code text,
    recommendation_comments character varying(4000),
    usid character varying(9)
);


ALTER TABLE rr2good OWNER TO postgres;

--
-- Name: seq_charge_code_id; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE seq_charge_code_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seq_charge_code_id OWNER TO postgres;

--
-- Name: seq_site_charge_id; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE seq_site_charge_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seq_site_charge_id OWNER TO postgres;

--
-- Name: seq_site_modality_id; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE seq_site_modality_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seq_site_modality_id OWNER TO postgres;

--
-- Name: seq_study_charge_id; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE seq_study_charge_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seq_study_charge_id OWNER TO postgres;

--
-- Name: seq_study_modality_id; Type: SEQUENCE; Schema: mrsdba; Owner: postgres
--

CREATE SEQUENCE seq_study_modality_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seq_study_modality_id OWNER TO postgres;

--
-- Name: tmp_miscalc_values; Type: TABLE; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE TABLE tmp_miscalc_values (
    assessment_id numeric(8,0),
    question_id character varying(20),
    question_instance numeric(3,0),
    response_value character varying,
    response_value_description text
);


ALTER TABLE tmp_miscalc_values OWNER TO ni_developers;

--
-- Name: v_max_per_segment; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE v_max_per_segment (
    max_per_segment numeric(3,0)
);


ALTER TABLE v_max_per_segment OWNER TO postgres;

--
-- Name: v_site_id; Type: TABLE; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE TABLE v_site_id (
    site_id character varying(3)
);


ALTER TABLE v_site_id OWNER TO postgres;

SET search_path = mydba, pg_catalog;

--
-- Name: wc_eeg_archive_seq; Type: SEQUENCE; Schema: mydba; Owner: postgres
--

CREATE SEQUENCE wc_eeg_archive_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wc_eeg_archive_seq OWNER TO postgres;

--
-- Name: wc_eeg_drive_seq; Type: SEQUENCE; Schema: mydba; Owner: postgres
--

CREATE SEQUENCE wc_eeg_drive_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE wc_eeg_drive_seq OWNER TO postgres;

--
-- Name: weekly_updates; Type: TABLE; Schema: mydba; Owner: niternal; Tablespace: 
--

CREATE TABLE weekly_updates (
    id numeric(20,0) NOT NULL,
    date date,
    content text,
    owner character varying(50)
);


ALTER TABLE weekly_updates OWNER TO niternal;

--
-- Name: weekly_updates_counter; Type: SEQUENCE; Schema: mydba; Owner: niternal
--

CREATE SEQUENCE weekly_updates_counter
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999999
    CACHE 1;


ALTER TABLE weekly_updates_counter OWNER TO niternal;

--
-- Name: weekly_updates_vw; Type: VIEW; Schema: mydba; Owner: niternal
--

CREATE VIEW weekly_updates_vw AS
 SELECT weekly_updates.id,
    weekly_updates.date,
    weekly_updates.content,
    weekly_updates.owner
   FROM weekly_updates;


ALTER TABLE weekly_updates_vw OWNER TO niternal;

SET search_path = nifdba, pg_catalog;

--
-- Name: nif_assessments_vw; Type: VIEW; Schema: nifdba; Owner: postgres
--

CREATE VIEW nif_assessments_vw AS
 SELECT asmts.ursi,
    asmts.assessment_id,
    asmts.study_id,
    asmts.assessment_date,
    asmts.entry_start_date,
    asmts.entry_end_date,
    asmts.instrument_id,
    asmts.entry_code,
    asmts.site_id
   FROM mrsdba.mrs_assessments asmts
  WHERE ((asmts.dataentry_type_id = (1)::numeric) AND (asmts.is_deleted IS FALSE));


ALTER TABLE nif_assessments_vw OWNER TO postgres;

--
-- Name: nif_instrument_questions_vw; Type: VIEW; Schema: nifdba; Owner: postgres
--

CREATE VIEW nif_instrument_questions_vw AS
 SELECT mrs_instrument_questions.question_id,
    mrs_instrument_questions.label,
    mrs_instrument_questions.description,
    mrs_instrument_questions.example_description,
    mrs_instrument_questions.exclusion_description,
    mrs_instrument_questions.max_instances,
    mrs_instrument_questions.section_id,
    mrs_instrument_questions.sort_order,
    mrs_instrument_questions.dsm_question_type,
    mrs_instrument_questions.disp_label_first,
    mrs_instrument_questions.formula_question_type,
    mrs_instrument_questions.formula,
    mrs_instrument_questions.deletion_date,
    mrs_instrument_questions.is_required,
    mrs_instrument_questions.is_sa_hidden,
    mrs_instrument_questions.is_sa_radio_type,
    mrs_instrument_questions.sa_label,
    mrs_instrument_questions.is_auto_complete_type,
    mrs_instrument_questions.autopop_qid,
    mrs_instrument_questions.assumed_value,
    mrs_instrument_questions.response_format_id,
    mrs_instrument_questions.other_option_label,
    mrs_instrument_questions.specify_detail,
    mrs_instrument_questions.multiple_choice,
    mrs_instrument_questions.isvasquestion,
    mrs_instrument_questions.vas_minimum,
    mrs_instrument_questions.vas_maximum,
    mrs_instrument_questions.vas_display_extrema,
    mrs_instrument_questions.vas_display_cursor_value,
    mrs_instrument_questions.vas_display_center_mark,
    mrs_instrument_questions.istextquestion,
    mrs_instrument_questions.vas_interval,
    mrs_instrument_questions.vas_min_label,
    mrs_instrument_questions.vas_max_label
   FROM mrsdba.mrs_instrument_questions;


ALTER TABLE nif_instrument_questions_vw OWNER TO postgres;

--
-- Name: nif_instrument_section_details_vw; Type: VIEW; Schema: nifdba; Owner: postgres
--

CREATE VIEW nif_instrument_section_details_vw AS
 SELECT mrs_instrument_section_details.instrument_id,
    mrs_instrument_section_details.section_id,
    mrs_instrument_section_details.sort_order,
    mrs_instrument_section_details.deletion_date,
    mrs_instrument_section_details.sa_questions_per_page
   FROM mrsdba.mrs_instrument_section_details;


ALTER TABLE nif_instrument_section_details_vw OWNER TO postgres;

--
-- Name: nif_instrument_sections_vw; Type: VIEW; Schema: nifdba; Owner: postgres
--

CREATE VIEW nif_instrument_sections_vw AS
 SELECT mrs_instrument_sections.section_id,
    mrs_instrument_sections.label,
    mrs_instrument_sections.description,
    mrs_instrument_sections.parent_id,
    mrs_instrument_sections.multi_inst_grid
   FROM mrsdba.mrs_instrument_sections;


ALTER TABLE nif_instrument_sections_vw OWNER TO postgres;

--
-- Name: nif_instruments_vw; Type: VIEW; Schema: nifdba; Owner: postgres
--

CREATE VIEW nif_instruments_vw AS
 SELECT mrs_instruments.instrument_id,
    mrs_instruments.label,
    mrs_instruments.description,
    mrs_instruments.version,
    mrs_instruments.display_type,
    mrs_instruments.max_per_segment,
    mrs_instruments.salabel,
    mrs_instruments.copyright_notice
   FROM mrsdba.mrs_instruments;


ALTER TABLE nif_instruments_vw OWNER TO postgres;

--
-- Name: nif_scan_sessions_vw; Type: VIEW; Schema: nifdba; Owner: postgres
--

CREATE VIEW nif_scan_sessions_vw AS
 SELECT scan.ursi,
    scan.scan_id,
    scan.scan_date,
    scan.study_id
   FROM mrsdba.mrs_scan_sessions scan;


ALTER TABLE nif_scan_sessions_vw OWNER TO postgres;

--
-- Name: nif_series_vw; Type: VIEW; Schema: nifdba; Owner: postgres
--

CREATE VIEW nif_series_vw AS
 SELECT s.series_id,
    sl.label,
    s.modality_id,
    s.scan_id,
    s.base_path,
    s.label_id,
    s.study_code_id,
    s.usable,
    s.notes,
    s.sort_order
   FROM (mrsdba.mrs_series s
     JOIN mrsdba.mrs_series_labels sl ON ((s.label_id = sl.label_id)));


ALTER TABLE nif_series_vw OWNER TO postgres;

--
-- Name: nif_sites_vw; Type: VIEW; Schema: nifdba; Owner: postgres
--

CREATE VIEW nif_sites_vw AS
 SELECT cas_sites.site_id,
    cas_sites.label,
    cas_sites.description,
    cas_sites.ursi_prefix
   FROM casdba.cas_sites;


ALTER TABLE nif_sites_vw OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: calendar_months; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE calendar_months (
    month character varying(2),
    year character varying(4)
);


ALTER TABLE calendar_months OWNER TO postgres;

--
-- Name: casapps_appid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE casapps_appid_seq
    START WITH 321
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 9999
    CACHE 20;


ALTER TABLE casapps_appid_seq OWNER TO postgres;

--
-- Name: casroles_roleid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE casroles_roleid_seq
    START WITH 261
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 20;


ALTER TABLE casroles_roleid_seq OWNER TO postgres;

--
-- Name: v_next_segment_instance; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE v_next_segment_instance (
    "?column?" numeric
);


ALTER TABLE v_next_segment_instance OWNER TO postgres;

SET search_path = casdba, pg_catalog;

--
-- Name: ip_id; Type: DEFAULT; Schema: casdba; Owner: ni_developers
--

ALTER TABLE ONLY cas_ip_locations ALTER COLUMN ip_id SET DEFAULT nextval('cas_ip_locations_ip_id_seq'::regclass);


SET search_path = dxdba, pg_catalog;

--
-- Name: modification_id; Type: DEFAULT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_capsule_modification_queue ALTER COLUMN modification_id SET DEFAULT nextval('dx_data_capsule_modification_queue_modification_id_seq'::regclass);


--
-- Name: component_id; Type: DEFAULT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_source_components ALTER COLUMN component_id SET DEFAULT nextval('dx_data_request_source_components_component_id_seq'::regclass);


--
-- Name: component_id; Type: DEFAULT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_source_components_hist ALTER COLUMN component_id SET DEFAULT nextval('dx_data_request_source_components_hist_component_id_seq'::regclass);


--
-- Name: filter_id; Type: DEFAULT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_template_filters ALTER COLUMN filter_id SET DEFAULT nextval('dx_data_request_template_filters_filter_id_seq'::regclass);


--
-- Name: group_id; Type: DEFAULT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_template_groups ALTER COLUMN group_id SET DEFAULT nextval('dx_data_request_template_groups_group_id_seq'::regclass);


--
-- Name: approval_attribute_id; Type: DEFAULT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_preapproval_attributes ALTER COLUMN approval_attribute_id SET DEFAULT nextval('dx_preapproval_attributes_approval_attribute_id_seq'::regclass);


--
-- Name: approval_id; Type: DEFAULT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_preapprovals ALTER COLUMN approval_id SET DEFAULT nextval('dx_preapprovals_approval_id_seq'::regclass);


--
-- Name: file_path_id; Type: DEFAULT; Schema: dxdba; Owner: ni_developers
--

ALTER TABLE ONLY dx_series_anonymized_file_paths ALTER COLUMN file_path_id SET DEFAULT nextval('dx_series_anonymized_file_paths_file_path_id_seq'::regclass);


--
-- Name: zip_file_content_id; Type: DEFAULT; Schema: dxdba; Owner: ni_developers
--

ALTER TABLE ONLY dx_series_zip_file_contents ALTER COLUMN zip_file_content_id SET DEFAULT nextval('dx_series_zip_file_contents_zip_file_content_id_seq'::regclass);


--
-- Name: zip_file_id; Type: DEFAULT; Schema: dxdba; Owner: ni_developers
--

ALTER TABLE ONLY dx_series_zip_file_paths ALTER COLUMN zip_file_id SET DEFAULT nextval('dx_series_zip_file_paths_zip_file_id_seq'::regclass);


--
-- Name: usage_agreement_acceptance_id; Type: DEFAULT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_usage_agreement_acceptance ALTER COLUMN usage_agreement_acceptance_id SET DEFAULT nextval('dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq'::regclass);


--
-- Name: usage_agreement_id; Type: DEFAULT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_usage_agreements ALTER COLUMN usage_agreement_id SET DEFAULT nextval('dx_usage_agreements_usage_agreement_id_seq'::regclass);


SET search_path = mrsdba, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_app_options ALTER COLUMN id SET DEFAULT nextval('mrs_app_options_id_seq'::regclass);


--
-- Name: backup_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_client_assessment_backups ALTER COLUMN backup_id SET DEFAULT nextval('mrs_client_assessment_backups_backup_id_seq'::regclass);


--
-- Name: device_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_client_devices ALTER COLUMN device_id SET DEFAULT nextval('mrs_client_devices_device_id_seq'::regclass);


--
-- Name: device_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_client_devices_hist ALTER COLUMN device_id SET DEFAULT nextval('mrs_client_devices_hist_device_id_seq'::regclass);


--
-- Name: collection_technique_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_collection_techniques ALTER COLUMN collection_technique_id SET DEFAULT nextval('mrs_collection_techniques_collection_technique_id_seq'::regclass);


--
-- Name: constraint_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_data_qc_constraints ALTER COLUMN constraint_id SET DEFAULT nextval('mrs_data_qc_constraints_constraint_id_seq'::regclass);


--
-- Name: response_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instrument_code_responses ALTER COLUMN response_id SET DEFAULT nextval('mrs_instrument_code_responses_response_id_seq'::regclass);


--
-- Name: question_jump_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instrument_question_jumps ALTER COLUMN question_jump_id SET DEFAULT nextval('mrs_instrument_question_jumps_question_jump_id_seq'::regclass);


--
-- Name: question_media_id; Type: DEFAULT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_question_media ALTER COLUMN question_media_id SET DEFAULT nextval('mrs_instrument_question_media_question_media_id_seq'::regclass);


--
-- Name: media_type_id; Type: DEFAULT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_question_media_types ALTER COLUMN media_type_id SET DEFAULT nextval('mrs_instrument_question_media_types_media_type_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_questions ALTER COLUMN id SET DEFAULT nextval('mrs_instrument_questions_id_seq'::regclass);


--
-- Name: instrument_study_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instruments_studies ALTER COLUMN instrument_study_id SET DEFAULT nextval('mrs_instruments_studies_instrument_study_id_seq'::regclass);


--
-- Name: mail_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_mail ALTER COLUMN mail_id SET DEFAULT nextval('mrs_mail_mail_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_qb_asmt_data_sort_temp ALTER COLUMN id SET DEFAULT nextval('mrs_qb_asmt_data_sort_temp_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_qb_asmt_pivot_categories_temp ALTER COLUMN id SET DEFAULT nextval('mrs_qb_asmt_pivot_categories_temp_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_rdoc_coins_question_map ALTER COLUMN id SET DEFAULT nextval('mrs_rdoc_coins_question_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_saved_queries ALTER COLUMN id SET DEFAULT nextval('mrs_saved_queries_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_saved_user_queries ALTER COLUMN id SET DEFAULT nextval('mrs_saved_user_queries_id_seq'::regclass);


--
-- Name: definition_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_series_definitions ALTER COLUMN definition_id SET DEFAULT nextval('mrs_series_definitions_definition_id_seq'::regclass);


--
-- Name: label_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_series_labels ALTER COLUMN label_id SET DEFAULT nextval('mrs_series_labels_label_id_seq'::regclass);


--
-- Name: source_type_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_source_type ALTER COLUMN source_type_id SET DEFAULT nextval('mrs_source_type_source_type_id_seq'::regclass);


--
-- Name: segment_interval_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_intervals ALTER COLUMN segment_interval_id SET DEFAULT nextval('mrs_study_intervals_segment_interval_id_seq'::regclass);


--
-- Name: study_intervals_subject_schedules_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_intervals_subject_schedules ALTER COLUMN study_intervals_subject_schedules_id SET DEFAULT nextval('mrs_study_intervals_subject_s_study_intervals_subject_sched_seq'::regclass);


--
-- Name: study_site_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_secondary_sites ALTER COLUMN study_site_id SET DEFAULT nextval('mrs_study_secondary_sites_study_site_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_tracker_event_canned_responses ALTER COLUMN id SET DEFAULT nextval('mrs_study_tracker_event_canned_responses_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_tracker_response_options ALTER COLUMN id SET DEFAULT nextval('mrs_study_tracker_response_options_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_trackers ALTER COLUMN id SET DEFAULT nextval('mrs_study_trackers_id_seq'::regclass);


--
-- Name: aqueue_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_assessments_queue ALTER COLUMN aqueue_id SET DEFAULT nextval('mrs_subject_assessments_queue_aqueue_id_seq'::regclass);


--
-- Name: queue_instrument_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_assessments_queue_instruments ALTER COLUMN queue_instrument_id SET DEFAULT nextval('mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq'::regclass);


--
-- Name: queue_type_id; Type: DEFAULT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subject_assessments_queue_types ALTER COLUMN queue_type_id SET DEFAULT nextval('mrs_subject_assessments_queue_types_queue_type_id_seq'::regclass);


--
-- Name: subject_contact_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_contacts ALTER COLUMN subject_contact_id SET DEFAULT nextval('mrs_subject_contacts_subject_contact_id_seq'::regclass);


--
-- Name: subject_contact_address_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_contacts_addresses ALTER COLUMN subject_contact_address_id SET DEFAULT nextval('mrs_subject_contacts_addresses_subject_contact_address_id_seq'::regclass);


--
-- Name: subject_contact_address_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_contacts_addresses_hist ALTER COLUMN subject_contact_address_id SET DEFAULT nextval('mrs_subject_contacts_addresses_h_subject_contact_address_id_seq'::regclass);


--
-- Name: subject_contact_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_contacts_hist ALTER COLUMN subject_contact_id SET DEFAULT nextval('mrs_subject_contacts_hist_subject_contact_id_seq'::regclass);


--
-- Name: subject_contact_phone_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_contacts_phones ALTER COLUMN subject_contact_phone_id SET DEFAULT nextval('mrs_subject_contacts_phones_subject_contact_phone_id_seq'::regclass);


--
-- Name: subject_contact_phone_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_contacts_phones_hist ALTER COLUMN subject_contact_phone_id SET DEFAULT nextval('mrs_subject_contacts_phones_hist_subject_contact_phone_id_seq'::regclass);


--
-- Name: subject_tag_details_id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_tag_details ALTER COLUMN subject_tag_details_id SET DEFAULT nextval('mrs_subject_tag_details_subject_tag_details_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_tracker_events ALTER COLUMN id SET DEFAULT nextval('mrs_subject_tracker_events_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_tracker_responses ALTER COLUMN id SET DEFAULT nextval('mrs_subject_tracker_responses_id_seq'::regclass);


--
-- Name: subject_type_detail_id; Type: DEFAULT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subject_type_details ALTER COLUMN subject_type_detail_id SET DEFAULT nextval('mrs_subject_type_details_subject_type_detail_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_user_app_options ALTER COLUMN id SET DEFAULT nextval('mrs_user_app_options_id_seq'::regclass);


SET search_path = casdba, pg_catalog;

--
-- Name: cas_apps_label_key; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_apps
    ADD CONSTRAINT cas_apps_label_key UNIQUE (label);


--
-- Name: cas_ip_locations_ip_addr_key; Type: CONSTRAINT; Schema: casdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY cas_ip_locations
    ADD CONSTRAINT cas_ip_locations_ip_addr_key UNIQUE (ip_addr);


--
-- Name: cas_login_records_pkey; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_login_records
    ADD CONSTRAINT cas_login_records_pkey PRIMARY KEY (id);


--
-- Name: cas_portal_info_pkey; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_portal_info
    ADD CONSTRAINT cas_portal_info_pkey PRIMARY KEY (app_id, study_id);


--
-- Name: cas_user_field_values_pkey; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_user_field_values
    ADD CONSTRAINT cas_user_field_values_pkey PRIMARY KEY (user_field_value_id);


--
-- Name: cas_user_fields_pkey; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_user_fields
    ADD CONSTRAINT cas_user_fields_pkey PRIMARY KEY (user_field_id);


--
-- Name: casapps_appid_pk; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_apps
    ADD CONSTRAINT casapps_appid_pk PRIMARY KEY (app_id);


--
-- Name: casapusro_app_use_rol_pk; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_app_user_role_privs
    ADD CONSTRAINT casapusro_app_use_rol_pk PRIMARY KEY (app_id, username, role_id);


--
-- Name: casroles_roleid_pk; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_roles
    ADD CONSTRAINT casroles_roleid_pk PRIMARY KEY (role_id);


--
-- Name: cassites_siteid_pk; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_sites
    ADD CONSTRAINT cassites_siteid_pk PRIMARY KEY (site_id);


--
-- Name: cassites_ursi_prefix_uk; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_sites
    ADD CONSTRAINT cassites_ursi_prefix_uk UNIQUE (ursi_prefix);


--
-- Name: casusers_username_pk; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_users
    ADD CONSTRAINT casusers_username_pk PRIMARY KEY (username);


--
-- Name: pk_cas_ip_locations; Type: CONSTRAINT; Schema: casdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY cas_ip_locations
    ADD CONSTRAINT pk_cas_ip_locations PRIMARY KEY (ip_id);


--
-- Name: pk_cas_sites_config; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_sites_config
    ADD CONSTRAINT pk_cas_sites_config PRIMARY KEY (site_id);


--
-- Name: pk_databasechangelog; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: pk_databasechangeloglock; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: sys_c002292; Type: CONSTRAINT; Schema: casdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cas_study_user_role_privs
    ADD CONSTRAINT sys_c002292 PRIMARY KEY (username, study_id, role_id);


SET search_path = dxdba, pg_catalog;

--
-- Name: anonymized_file_path_uk; Type: CONSTRAINT; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY dx_series_anonymized_file_paths
    ADD CONSTRAINT anonymized_file_path_uk UNIQUE (anonymized_file_path);


--
-- Name: archive_file_path_uk; Type: CONSTRAINT; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY dx_series_anonymized_file_paths
    ADD CONSTRAINT archive_file_path_uk UNIQUE (archive_file_path);


--
-- Name: dx_capsule_processing_temp_pkey; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_capsule_processing_temp
    ADD CONSTRAINT dx_capsule_processing_temp_pkey PRIMARY KEY (source_id, file_id);


--
-- Name: dx_ex_situ_data_capsule_files_data_capsule_id_file_name_uk; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_ex_situ_data_capsule_files
    ADD CONSTRAINT dx_ex_situ_data_capsule_files_data_capsule_id_file_name_uk UNIQUE (data_capsule_id, file_name);


--
-- Name: dx_series_zip_file_paths_file_name_uk; Type: CONSTRAINT; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY dx_series_zip_file_paths
    ADD CONSTRAINT dx_series_zip_file_paths_file_name_uk UNIQUE (file_name);


--
-- Name: mrs_dx_capsule_downloads_file_id_key; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_capsule_downloads
    ADD CONSTRAINT mrs_dx_capsule_downloads_file_id_key UNIQUE (file_id, user_name, start_time);


--
-- Name: mrs_dx_capsule_downloads_pkey; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_capsule_downloads
    ADD CONSTRAINT mrs_dx_capsule_downloads_pkey PRIMARY KEY (download_id);


--
-- Name: mrs_dx_data_capsule_creation_queue_pkey; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_capsule_creation_queue
    ADD CONSTRAINT mrs_dx_data_capsule_creation_queue_pkey PRIMARY KEY (source_id);


--
-- Name: mrs_dx_data_source_capsule_link_pkey; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_source_capsule_link
    ADD CONSTRAINT mrs_dx_data_source_capsule_link_pkey PRIMARY KEY (source_id, data_capsule_id);


--
-- Name: mrs_dx_ex_situ_data_capsule_files_pkey; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_ex_situ_data_capsule_files
    ADD CONSTRAINT mrs_dx_ex_situ_data_capsule_files_pkey PRIMARY KEY (file_id);


--
-- Name: mrsdatar_datareq_pk; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_requests
    ADD CONSTRAINT mrsdatar_datareq_pk PRIMARY KEY (data_request_id);


--
-- Name: mrsdatar_requests_pk; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_requests_sources
    ADD CONSTRAINT mrsdatar_requests_pk PRIMARY KEY (data_requests_source_id);


--
-- Name: mrsdatar_target_pk; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_requests_target_studies
    ADD CONSTRAINT mrsdatar_target_pk PRIMARY KEY (data_requests_target_study_id);


--
-- Name: mrsdxexsitu_data_capsule_id; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_ex_situ_data_capsules
    ADD CONSTRAINT mrsdxexsitu_data_capsule_id PRIMARY KEY (data_capsule_id);


--
-- Name: pk_databasechangelog; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: pk_databasechangeloglock; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: pk_dx_asmt_sharing_rules; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_asmt_sharing_rules
    ADD CONSTRAINT pk_dx_asmt_sharing_rules PRIMARY KEY (id);


--
-- Name: pk_dx_data_upload_files; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_upload_files
    ADD CONSTRAINT pk_dx_data_upload_files PRIMARY KEY (upload_file_id);


--
-- Name: pk_dx_data_uploads; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_uploads
    ADD CONSTRAINT pk_dx_data_uploads PRIMARY KEY (upload_id);


--
-- Name: pk_dx_scan_sharing_rules; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_scan_sharing_rules
    ADD CONSTRAINT pk_dx_scan_sharing_rules PRIMARY KEY (id);


--
-- Name: pk_dx_series_anonymized_file_paths; Type: CONSTRAINT; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY dx_series_anonymized_file_paths
    ADD CONSTRAINT pk_dx_series_anonymized_file_paths PRIMARY KEY (file_path_id);


--
-- Name: pk_dx_series_zip_file_contents; Type: CONSTRAINT; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY dx_series_zip_file_contents
    ADD CONSTRAINT pk_dx_series_zip_file_contents PRIMARY KEY (zip_file_content_id);


--
-- Name: pk_dx_series_zip_file_paths; Type: CONSTRAINT; Schema: dxdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY dx_series_zip_file_paths
    ADD CONSTRAINT pk_dx_series_zip_file_paths PRIMARY KEY (zip_file_id);


--
-- Name: pk_dx_usage_agreement_acceptance; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_usage_agreement_acceptance
    ADD CONSTRAINT pk_dx_usage_agreement_acceptance PRIMARY KEY (usage_agreement_acceptance_id);


--
-- Name: pk_dx_usage_agreements; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_usage_agreements
    ADD CONSTRAINT pk_dx_usage_agreements PRIMARY KEY (usage_agreement_id);


--
-- Name: pk_mrs_dx_data_capsule_modification_queue; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_capsule_modification_queue
    ADD CONSTRAINT pk_mrs_dx_data_capsule_modification_queue PRIMARY KEY (modification_id);


--
-- Name: pk_mrs_dx_data_request_source_components; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_request_source_components
    ADD CONSTRAINT pk_mrs_dx_data_request_source_components PRIMARY KEY (component_id);


--
-- Name: pk_mrs_dx_data_request_sources; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_request_sources
    ADD CONSTRAINT pk_mrs_dx_data_request_sources PRIMARY KEY (source_id);


--
-- Name: pk_mrs_dx_data_request_template_filters; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_request_template_filters
    ADD CONSTRAINT pk_mrs_dx_data_request_template_filters PRIMARY KEY (filter_id);


--
-- Name: pk_mrs_dx_data_request_template_groups; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_data_request_template_groups
    ADD CONSTRAINT pk_mrs_dx_data_request_template_groups PRIMARY KEY (group_id);


--
-- Name: pk_mrs_dx_messages; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_messages
    ADD CONSTRAINT pk_mrs_dx_messages PRIMARY KEY (message_id);


--
-- Name: pk_mrs_dx_preapproval_attributes; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_preapproval_attributes
    ADD CONSTRAINT pk_mrs_dx_preapproval_attributes PRIMARY KEY (approval_attribute_id);


--
-- Name: pk_mrs_dx_preapprovals; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_preapprovals
    ADD CONSTRAINT pk_mrs_dx_preapprovals PRIMARY KEY (approval_id);


--
-- Name: pk_mrs_dx_source_attribute_values; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_source_attribute_values
    ADD CONSTRAINT pk_mrs_dx_source_attribute_values PRIMARY KEY (source_attribute_value_id);


--
-- Name: pk_mrs_dx_source_attributes; Type: CONSTRAINT; Schema: dxdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dx_source_attributes
    ADD CONSTRAINT pk_mrs_dx_source_attributes PRIMARY KEY (attribute_id);


SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_addresses_usid_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_addresses
    ADD CONSTRAINT mrs_addresses_usid_uk UNIQUE (usid);


--
-- Name: mrs_analysis_details_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_details
    ADD CONSTRAINT mrs_analysis_details_pkey PRIMARY KEY (series_id, analysis_id);


--
-- Name: mrs_analysis_dti_qa_values_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_dti_qa_values
    ADD CONSTRAINT mrs_analysis_dti_qa_values_pkey PRIMARY KEY (series_id);


--
-- Name: mrs_analysis_files_label_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_files
    ADD CONSTRAINT mrs_analysis_files_label_key UNIQUE (label, series_id);


--
-- Name: mrs_analysis_files_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_files
    ADD CONSTRAINT mrs_analysis_files_pkey PRIMARY KEY (file_id);


--
-- Name: mrs_analysis_job_monitor_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_job_monitor
    ADD CONSTRAINT mrs_analysis_job_monitor_pkey PRIMARY KEY (series_id);


--
-- Name: mrs_analysis_job_status_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_job_status
    ADD CONSTRAINT mrs_analysis_job_status_pkey PRIMARY KEY (id);


--
-- Name: mrs_analysis_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis
    ADD CONSTRAINT mrs_analysis_pkey PRIMARY KEY (analysis_id);


--
-- Name: mrs_analysis_queue_hist_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_queue_hist
    ADD CONSTRAINT mrs_analysis_queue_hist_pkey PRIMARY KEY (id);


--
-- Name: mrs_analysis_queue_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_queue
    ADD CONSTRAINT mrs_analysis_queue_pkey PRIMARY KEY (id);


--
-- Name: mrs_analysis_quicklook_statistic_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_quicklook_statistic
    ADD CONSTRAINT mrs_analysis_quicklook_statistic_pkey PRIMARY KEY (study_id, scan_under_pi);


--
-- Name: mrs_analysis_stats_files_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_stats_files
    ADD CONSTRAINT mrs_analysis_stats_files_pkey PRIMARY KEY (file_id);


--
-- Name: mrs_analysis_stats_files_scan_id_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_stats_files
    ADD CONSTRAINT mrs_analysis_stats_files_scan_id_key UNIQUE (scan_id, task_name, stats_folder_name, label);


--
-- Name: mrs_analysis_sub_study_pkey1; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_sub_study
    ADD CONSTRAINT mrs_analysis_sub_study_pkey1 PRIMARY KEY (id);


--
-- Name: mrs_analysis_substudy_permission_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_substudy_permission
    ADD CONSTRAINT mrs_analysis_substudy_permission_pkey PRIMARY KEY (study_id, sub_study_name);


--
-- Name: mrs_analysis_summary_by_scanner_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_summary_by_scanner
    ADD CONSTRAINT mrs_analysis_summary_by_scanner_pkey PRIMARY KEY (scanner);


--
-- Name: mrs_analysis_vbm_img_label_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_vbm_img
    ADD CONSTRAINT mrs_analysis_vbm_img_label_key UNIQUE (label, scan_id);


--
-- Name: mrs_analysis_vbm_img_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_vbm_img
    ADD CONSTRAINT mrs_analysis_vbm_img_pkey PRIMARY KEY (file_id);


--
-- Name: mrs_analysis_vbm_qa_values_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_analysis_vbm_qa_values
    ADD CONSTRAINT mrs_analysis_vbm_qa_values_pkey PRIMARY KEY (scan_id);


--
-- Name: mrs_appoption_uk1; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_app_options
    ADD CONSTRAINT mrs_appoption_uk1 UNIQUE (study_id, app_name, option_str);


--
-- Name: mrs_appoptions_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_app_options
    ADD CONSTRAINT mrs_appoptions_pk PRIMARY KEY (id);


--
-- Name: mrs_assessment_event_types_label_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_assessment_event_types
    ADD CONSTRAINT mrs_assessment_event_types_label_key UNIQUE (label);


--
-- Name: mrs_assessment_event_types_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_assessment_event_types
    ADD CONSTRAINT mrs_assessment_event_types_pkey PRIMARY KEY (event_type_id);


--
-- Name: mrs_assessment_events_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_assessment_events
    ADD CONSTRAINT mrs_assessment_events_pkey PRIMARY KEY (event_id);


--
-- Name: mrs_auto_messages_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_auto_messages
    ADD CONSTRAINT mrs_auto_messages_pkey PRIMARY KEY (message_id);


--
-- Name: mrs_behavior_uploads_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_behavioral_uploads
    ADD CONSTRAINT mrs_behavior_uploads_pkey PRIMARY KEY (upload_id);


--
-- Name: mrs_charge_codes_charge_code_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_charge_codes
    ADD CONSTRAINT mrs_charge_codes_charge_code_key UNIQUE (charge_code);


--
-- Name: mrs_chg_site_det_uniq; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_charge_code_site_details
    ADD CONSTRAINT mrs_chg_site_det_uniq UNIQUE (charge_code_id, site_id, funding_source);


--
-- Name: mrs_chg_stdy_det_uniq; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_charge_code_study_details
    ADD CONSTRAINT mrs_chg_stdy_det_uniq UNIQUE (charge_code_id, study_id, funding_source);


--
-- Name: mrs_client_assessment_backups_device_study_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_client_assessment_backups
    ADD CONSTRAINT mrs_client_assessment_backups_device_study_uk UNIQUE (device_id, study_id);


--
-- Name: mrs_dsm_codes_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_dsm_codes
    ADD CONSTRAINT mrs_dsm_codes_pk PRIMARY KEY (dsm_code_id);


--
-- Name: mrs_dsmgro_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_dsm_groups
    ADD CONSTRAINT mrs_dsmgro_uk UNIQUE (version, group_id);


--
-- Name: mrs_dsmspec_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_dsm_specifiers
    ADD CONSTRAINT mrs_dsmspec_uk PRIMARY KEY (specifier_id);


--
-- Name: mrs_inst_quest_uniq_order; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_question_jumps
    ADD CONSTRAINT mrs_inst_quest_uniq_order UNIQUE (question_id, sort_order);


--
-- Name: mrs_instrument_code_responses_question_id_sort_order_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_code_responses
    ADD CONSTRAINT mrs_instrument_code_responses_question_id_sort_order_uk UNIQUE (question_id, sort_order);


--
-- Name: mrs_instrument_code_responses_response_id_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_code_responses
    ADD CONSTRAINT mrs_instrument_code_responses_response_id_pk PRIMARY KEY (response_id);


--
-- Name: mrs_instrument_question_response_format_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_question_response_format
    ADD CONSTRAINT mrs_instrument_question_response_format_pkey PRIMARY KEY (format_id);


--
-- Name: mrs_instrument_question_score_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_question_score
    ADD CONSTRAINT mrs_instrument_question_score_pkey PRIMARY KEY (question_id, study_id);


--
-- Name: mrs_instruments_studies_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_instruments_studies
    ADD CONSTRAINT mrs_instruments_studies_pk PRIMARY KEY (instrument_study_id);


--
-- Name: mrs_instruments_studies_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_instruments_studies
    ADD CONSTRAINT mrs_instruments_studies_uk UNIQUE (study_id, instrument_id);


--
-- Name: mrs_message_types_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_message_types
    ADD CONSTRAINT mrs_message_types_pkey PRIMARY KEY (message_type_id);


--
-- Name: mrs_messages_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_messages
    ADD CONSTRAINT mrs_messages_pkey PRIMARY KEY (message_id);


--
-- Name: mrs_missing_assessment_reasons_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_missing_assessment_reasons
    ADD CONSTRAINT mrs_missing_assessment_reasons_pkey PRIMARY KEY (id);


--
-- Name: mrs_perode_prdid; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_person_role_details
    ADD CONSTRAINT mrs_perode_prdid UNIQUE (prd_id);


--
-- Name: mrs_qa_threshold_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_qa_threshold
    ADD CONSTRAINT mrs_qa_threshold_pkey PRIMARY KEY (id);


--
-- Name: mrs_rcq_map_unik; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_rdoc_coins_question_map
    ADD CONSTRAINT mrs_rcq_map_unik UNIQUE (coins_question_id, rdoc_question_short_tag);


--
-- Name: mrs_recruitment_criteria_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_recruitment_criteria
    ADD CONSTRAINT mrs_recruitment_criteria_pkey PRIMARY KEY (criteria_id);


--
-- Name: mrs_req_mod_cond_data_modality_id_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_req_mod_cond_data
    ADD CONSTRAINT mrs_req_mod_cond_data_modality_id_key UNIQUE (modality_id, scan_data_type_id);


--
-- Name: mrs_req_mod_cond_data_modality_id_key1; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_req_mod_cond_data
    ADD CONSTRAINT mrs_req_mod_cond_data_modality_id_key1 UNIQUE (modality_id, sort_order);


--
-- Name: mrs_scan_data_menu_values_scan_data_type_id_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scan_data_menu_values
    ADD CONSTRAINT mrs_scan_data_menu_values_scan_data_type_id_key UNIQUE (scan_data_type_id, label);


--
-- Name: mrs_scan_data_menu_values_scan_data_type_id_key1; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scan_data_menu_values
    ADD CONSTRAINT mrs_scan_data_menu_values_scan_data_type_id_key1 UNIQUE (scan_data_type_id, value);


--
-- Name: mrs_scan_data_types_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scan_data_types
    ADD CONSTRAINT mrs_scan_data_types_pkey PRIMARY KEY (scan_data_type_id);


--
-- Name: mrs_scan_sess_pk21131474655747; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scan_sessions_review
    ADD CONSTRAINT mrs_scan_sess_pk21131474655747 PRIMARY KEY (scan_id, person_id);


--
-- Name: mrs_scan_sessrevinc_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scan_sessions_review_include
    ADD CONSTRAINT mrs_scan_sessrevinc_pk PRIMARY KEY (scan_id);


--
-- Name: mrs_scan_slot_uses_scan_slot_use_id_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scan_slot_uses
    ADD CONSTRAINT mrs_scan_slot_uses_scan_slot_use_id_key UNIQUE (scan_slot_use_id);


--
-- Name: mrs_segment_interval_study_id_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_study_intervals
    ADD CONSTRAINT mrs_segment_interval_study_id_uk UNIQUE (segment_interval, study_id);


--
-- Name: mrs_series_analysis_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_series_analysis
    ADD CONSTRAINT mrs_series_analysis_pkey PRIMARY KEY (series_id, instance);


--
-- Name: mrs_series_data_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_series_data
    ADD CONSTRAINT mrs_series_data_pkey PRIMARY KEY (series_data_id);


--
-- Name: mrs_series_data_series_id_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_series_data
    ADD CONSTRAINT mrs_series_data_series_id_key UNIQUE (series_id, scan_data_type_id, series_data_type_instance);


--
-- Name: mrs_series_fmri_params_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_series_fmri_params
    ADD CONSTRAINT mrs_series_fmri_params_pkey PRIMARY KEY (series_id);


--
-- Name: mrs_series_labels_label_id_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_series_labels
    ADD CONSTRAINT mrs_series_labels_label_id_pk PRIMARY KEY (label_id);


--
-- Name: mrs_series_level2_analysis_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_series_level2_analysis
    ADD CONSTRAINT mrs_series_level2_analysis_pkey PRIMARY KEY (scan_id, module, instance);


--
-- Name: mrs_series_mismatch_label_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_series_from_archive
    ADD CONSTRAINT mrs_series_mismatch_label_key UNIQUE (label, scan_id, sort_order);


--
-- Name: mrs_series_mismatch_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_series_from_archive
    ADD CONSTRAINT mrs_series_mismatch_pkey PRIMARY KEY (series_id);


--
-- Name: mrs_series_mismatches_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_series_mismatches
    ADD CONSTRAINT mrs_series_mismatches_pkey PRIMARY KEY ("time", scanner);


--
-- Name: mrs_softwares_name_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_softwares
    ADD CONSTRAINT mrs_softwares_name_key UNIQUE (name, version);


--
-- Name: mrs_softwares_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_softwares
    ADD CONSTRAINT mrs_softwares_pkey PRIMARY KEY (software_id);


--
-- Name: mrs_source_type_id_uniq; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_source_type
    ADD CONSTRAINT mrs_source_type_id_uniq UNIQUE (source_type_id);


--
-- Name: mrs_study_interval_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_study_intervals
    ADD CONSTRAINT mrs_study_interval_pk PRIMARY KEY (segment_interval_id);


--
-- Name: mrs_study_intervals_subject_schedules_ursi_seg_int_id_uniq; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_study_intervals_subject_schedules
    ADD CONSTRAINT mrs_study_intervals_subject_schedules_ursi_seg_int_id_uniq UNIQUE (ursi, segment_interval_id);


--
-- Name: mrs_study_messages_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_study_messages
    ADD CONSTRAINT mrs_study_messages_pkey PRIMARY KEY (message_id, study_id, message_type_id);


--
-- Name: mrs_study_missing_assessment_reasons_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_study_missing_assessment_reasons
    ADD CONSTRAINT mrs_study_missing_assessment_reasons_pkey PRIMARY KEY (reason_id, study_id);


--
-- Name: mrs_study_recruitment_criteria_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_study_recruitment_criteria
    ADD CONSTRAINT mrs_study_recruitment_criteria_pkey PRIMARY KEY (study_id, criteria_id);


--
-- Name: mrs_study_templates_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_study_templates
    ADD CONSTRAINT mrs_study_templates_pkey PRIMARY KEY (template_id);


--
-- Name: mrs_subj_login_usid_studyid_sourcetype_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_logins
    ADD CONSTRAINT mrs_subj_login_usid_studyid_sourcetype_uk UNIQUE (usid, study_id, source_type);


--
-- Name: mrs_subject_assessments_queue_login_protocol_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_assessments_queue
    ADD CONSTRAINT mrs_subject_assessments_queue_login_protocol_uk UNIQUE (login_id, from_protocol_id);


--
-- Name: mrs_subject_assessments_queue_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_assessments_queue
    ADD CONSTRAINT mrs_subject_assessments_queue_pkey PRIMARY KEY (aqueue_id);


--
-- Name: mrs_subject_classes_subject_class_id_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_classes
    ADD CONSTRAINT mrs_subject_classes_subject_class_id_key UNIQUE (subject_class_id);


--
-- Name: mrs_subject_contatacts_unique_all_fields; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_contacts
    ADD CONSTRAINT mrs_subject_contatacts_unique_all_fields UNIQUE (usid, firstname, lastname);


--
-- Name: mrs_subject_logins_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_logins
    ADD CONSTRAINT mrs_subject_logins_pkey PRIMARY KEY (login_id);


--
-- Name: mrs_subject_logins_subject_id_key; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_logins
    ADD CONSTRAINT mrs_subject_logins_subject_id_key UNIQUE (subject_id);


--
-- Name: mrs_subject_tag_details_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_tag_details
    ADD CONSTRAINT mrs_subject_tag_details_pkey PRIMARY KEY (subject_tag_details_id);


--
-- Name: mrs_subject_tag_details_usid_subjtagid_siteid_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_tag_details
    ADD CONSTRAINT mrs_subject_tag_details_usid_subjtagid_siteid_uk UNIQUE (usid, subject_tag_id, site_id);


--
-- Name: mrs_subject_tag_details_usid_subjtagid_studyid_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_tag_details
    ADD CONSTRAINT mrs_subject_tag_details_usid_subjtagid_studyid_uk UNIQUE (usid, subject_tag_id, study_id);


--
-- Name: mrs_subject_type_details_subject_type_detail_id_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_type_details
    ADD CONSTRAINT mrs_subject_type_details_subject_type_detail_id_uk UNIQUE (subject_type_detail_id);


--
-- Name: mrs_subject_type_group_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_type_group_link
    ADD CONSTRAINT mrs_subject_type_group_pkey PRIMARY KEY (type_group_id, subject_type_id);


--
-- Name: mrs_subject_type_groups_pkey; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_type_groups
    ADD CONSTRAINT mrs_subject_type_groups_pkey PRIMARY KEY (type_group_id);


--
-- Name: mrs_subjects_racial_categories_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subjects_racial_categories
    ADD CONSTRAINT mrs_subjects_racial_categories_pk PRIMARY KEY (racial_category_id, subject_type_detail_id);


--
-- Name: mrs_svdqrs_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_saved_queries_orig
    ADD CONSTRAINT mrs_svdqrs_pk PRIMARY KEY (username, label);


--
-- Name: mrs_temp_inst_uniq; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_template_instruments
    ADD CONSTRAINT mrs_temp_inst_uniq UNIQUE (template_id, sort_order);


--
-- Name: mrs_unique_sub_class; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_class_details
    ADD CONSTRAINT mrs_unique_sub_class UNIQUE (usid, subject_class_id);


--
-- Name: mrs_userappoptions_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_user_app_options
    ADD CONSTRAINT mrs_userappoptions_pk PRIMARY KEY (id);


--
-- Name: mrs_userappoptions_uk1; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_user_app_options
    ADD CONSTRAINT mrs_userappoptions_uk1 UNIQUE (username, option_id);


--
-- Name: mrsaccoun_accountnumber_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_accounts
    ADD CONSTRAINT mrsaccoun_accountnumber_pk PRIMARY KEY (account_number);


--
-- Name: mrsaddres_addressid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_addresses
    ADD CONSTRAINT mrsaddres_addressid_pk PRIMARY KEY (address_id);


--
-- Name: mrsadtyp_address_type_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_personaddress_types
    ADD CONSTRAINT mrsadtyp_address_type_pk PRIMARY KEY (address_type_id);


--
-- Name: mrsanareg_anatomyregionid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_anatomy_regions
    ADD CONSTRAINT mrsanareg_anatomyregionid_pk PRIMARY KEY (anatomy_region_id);


--
-- Name: mrsassess_assessmentid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_assessments
    ADD CONSTRAINT mrsassess_assessmentid_pk PRIMARY KEY (assessment_id);


--
-- Name: mrsassess_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_assessments
    ADD CONSTRAINT mrsassess_uk UNIQUE (instrument_id, segment_interval, segment_instance, ursi, site_id, entry_code, dataentry_type_id, source_type, rater1, study_id, assessment_date);


--
-- Name: mrsassres_un; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_assessment_responses
    ADD CONSTRAINT mrsassres_un UNIQUE (assessment_id, question_id, question_instance, response_sort_order);


--
-- Name: mrsdatad_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_data_domains
    ADD CONSTRAINT mrsdatad_pk PRIMARY KEY (data_domain_id);


--
-- Name: mrsdattyp_typeid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_dataentry_types
    ADD CONSTRAINT mrsdattyp_typeid_pk PRIMARY KEY (dataentry_type_id);


--
-- Name: mrsdoc_fileid_projid_pk_1; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_doc_proj_details
    ADD CONSTRAINT mrsdoc_fileid_projid_pk_1 PRIMARY KEY (file_id, project_id);


--
-- Name: mrsdocade_fileid_catid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_doc_category_details
    ADD CONSTRAINT mrsdocade_fileid_catid_pk PRIMARY KEY (file_id, category_id);


--
-- Name: mrsdoccat_categoryid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_document_categories
    ADD CONSTRAINT mrsdoccat_categoryid_pk PRIMARY KEY (category_id);


--
-- Name: mrsdocume_fileid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_documents
    ADD CONSTRAINT mrsdocume_fileid_pk PRIMARY KEY (file_id);


--
-- Name: mrsdrgcat_catid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_drug_categories
    ADD CONSTRAINT mrsdrgcat_catid_pk PRIMARY KEY (category_id);


--
-- Name: mrsdrugprop_dcode_propid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_drug_prop_details
    ADD CONSTRAINT mrsdrugprop_dcode_propid_pk PRIMARY KEY (property_id);


--
-- Name: mrsdrugprop_dcodepid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_drug_properties
    ADD CONSTRAINT mrsdrugprop_dcodepid_pk PRIMARY KEY (drug_code, property_id);


--
-- Name: mrseeg_scannerid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_eeg_devices
    ADD CONSTRAINT mrseeg_scannerid_pk PRIMARY KEY (eeg_id);


--
-- Name: mrseegseries_id_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_eeg_series
    ADD CONSTRAINT mrseegseries_id_uk PRIMARY KEY (series_id);


--
-- Name: mrseegses_eegid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_eeg_sessions
    ADD CONSTRAINT mrseegses_eegid_pk PRIMARY KEY (eeg_session_id);


--
-- Name: mrsextide_extid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_tags
    ADD CONSTRAINT mrsextide_extid_pk PRIMARY KEY (subject_tag_id);


--
-- Name: mrsgcatdt_dccn_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_generic_category_details
    ADD CONSTRAINT mrsgcatdt_dccn_pk PRIMARY KEY (drug_code, category_id);


--
-- Name: mrsgdrugs_codenm_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_generic_drugs
    ADD CONSTRAINT mrsgdrugs_codenm_pk PRIMARY KEY (drug_code);


--
-- Name: mrsgentrd_dcti_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_generic_trade_details
    ADD CONSTRAINT mrsgentrd_dcti_pk PRIMARY KEY (drug_code, trade_id);


--
-- Name: mrsimages_imageid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_images
    ADD CONSTRAINT mrsimages_imageid_pk PRIMARY KEY (image_id);


--
-- Name: mrsinsede_inst_sect_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_section_details
    ADD CONSTRAINT mrsinsede_inst_sect_pk PRIMARY KEY (instrument_id, section_id);


--
-- Name: mrsinsque_questionid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_questions
    ADD CONSTRAINT mrsinsque_questionid_pk PRIMARY KEY (question_id);


--
-- Name: mrsinssec_sectionid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_sections
    ADD CONSTRAINT mrsinssec_sectionid_pk PRIMARY KEY (section_id);


--
-- Name: mrsinstqueslps_loopid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_question_loops
    ADD CONSTRAINT mrsinstqueslps_loopid_pk PRIMARY KEY (loop_id);


--
-- Name: mrsinstru_instrumentid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_instruments
    ADD CONSTRAINT mrsinstru_instrumentid_pk PRIMARY KEY (instrument_id);


--
-- Name: mrslegshrrul_ruleid; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_legacy_sharing_rules
    ADD CONSTRAINT mrslegshrrul_ruleid PRIMARY KEY (sharing_rule_id);


--
-- Name: mrslegshrrulasmt_legacy_ruleasmt_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_legacy_sharing_rules_asmts
    ADD CONSTRAINT mrslegshrrulasmt_legacy_ruleasmt_pk PRIMARY KEY (sharing_rule_id, assessment_id);


--
-- Name: mrslegshrrulstd_rulestdyid; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_legacy_sharing_rules_studies
    ADD CONSTRAINT mrslegshrrulstd_rulestdyid PRIMARY KEY (sharing_rule_id, study_id);


--
-- Name: mrsmodali_modalityid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_modalities
    ADD CONSTRAINT mrsmodali_modalityid_pk PRIMARY KEY (modality_id);


--
-- Name: mrsmodprops_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_modality_properties
    ADD CONSTRAINT mrsmodprops_pk PRIMARY KEY (prop_id);


--
-- Name: mrsperadd_address_id_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_personaddresses
    ADD CONSTRAINT mrsperadd_address_id_pk PRIMARY KEY (address_id);


--
-- Name: mrsperali_aliasid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_person_alias
    ADD CONSTRAINT mrsperali_aliasid_pk PRIMARY KEY (alias_id);


--
-- Name: mrsperali_label_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_person_alias
    ADD CONSTRAINT mrsperali_label_uk UNIQUE (label);


--
-- Name: mrsperode_person_role_study_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_person_role_details
    ADD CONSTRAINT mrsperode_person_role_study_pk PRIMARY KEY (person_id, role_id, study_id);


--
-- Name: mrsperodead_address_id_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_person_role_det_addresses
    ADD CONSTRAINT mrsperodead_address_id_pk PRIMARY KEY (prd_id, address_id);


--
-- Name: mrsperodeph_phone_id_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_person_role_det_phones
    ADD CONSTRAINT mrsperodeph_phone_id_pk PRIMARY KEY (prd_id, phone_id);


--
-- Name: mrsperph_phone_id_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_personphones
    ADD CONSTRAINT mrsperph_phone_id_pk PRIMARY KEY (phone_id);


--
-- Name: mrsperphode_person_phone_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_person_phone_details
    ADD CONSTRAINT mrsperphode_person_phone_pk PRIMARY KEY (person_id, phone_id);


--
-- Name: mrsperson_personid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_persons
    ADD CONSTRAINT mrsperson_personid_pk PRIMARY KEY (person_id);


--
-- Name: mrsphones_phoneid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_phones
    ADD CONSTRAINT mrsphones_phoneid_pk PRIMARY KEY (phone_id);


--
-- Name: mrsphtyp_phone_type_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_personphone_types
    ADD CONSTRAINT mrsphtyp_phone_type_pk PRIMARY KEY (phone_type_id);


--
-- Name: mrsppi_pk_1; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_proj_co_investigator
    ADD CONSTRAINT mrsppi_pk_1 PRIMARY KEY (project_id, person_id);


--
-- Name: mrsprojddd_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_proj_data_dom_details
    ADD CONSTRAINT mrsprojddd_pk PRIMARY KEY (data_domain_id, project_id);


--
-- Name: mrsprojstdd_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_proj_study_details
    ADD CONSTRAINT mrsprojstdd_pk PRIMARY KEY (study_id, project_id);


--
-- Name: mrsproreq_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_protocol_requirements
    ADD CONSTRAINT mrsproreq_pk PRIMARY KEY (protocol_req_id);


--
-- Name: mrsproto_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_protocols
    ADD CONSTRAINT mrsproto_pk PRIMARY KEY (protocol_id);


--
-- Name: mrsprotyp_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_protocol_types
    ADD CONSTRAINT mrsprotyp_pk PRIMARY KEY (protocol_type_id);


--
-- Name: mrsprotyp_unique; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_protocol_types
    ADD CONSTRAINT mrsprotyp_unique UNIQUE (protocol_type_id, label);


--
-- Name: mrspurreq_prid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_purchase_requests
    ADD CONSTRAINT mrspurreq_prid_pk PRIMARY KEY (purchase_request_id);


--
-- Name: mrsraccat_raccatid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_racial_categories
    ADD CONSTRAINT mrsraccat_raccatid_pk PRIMARY KEY (racial_category_id);


--
-- Name: mrsrecscanexp_id_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_recent_scan_exports
    ADD CONSTRAINT mrsrecscanexp_id_pk PRIMARY KEY (scan_export_id);


--
-- Name: mrsroles_roleid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_roles
    ADD CONSTRAINT mrsroles_roleid_pk PRIMARY KEY (role_id);


--
-- Name: mrsscanne_scannerid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scanners
    ADD CONSTRAINT mrsscanne_scannerid_pk PRIMARY KEY (scanner_id);


--
-- Name: mrsscansesextprop_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scan_sessions_ext_props
    ADD CONSTRAINT mrsscansesextprop_pk PRIMARY KEY (scan_id, prop_id);


--
-- Name: mrsscases_lab_seg_sca_urs_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scan_sessions
    ADD CONSTRAINT mrsscases_lab_seg_sca_urs_uk UNIQUE (label, segment_interval, scanner_id, study_id, ursi);


--
-- Name: mrsscases_misscanid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scan_sessions_from_archive
    ADD CONSTRAINT mrsscases_misscanid_pk PRIMARY KEY (scan_id);


--
-- Name: mrsscases_scanid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scan_sessions
    ADD CONSTRAINT mrsscases_scanid_pk PRIMARY KEY (scan_id);


--
-- Name: mrsscases_scanid_pk_1; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_scan_sessions_stage
    ADD CONSTRAINT mrsscases_scanid_pk_1 PRIMARY KEY (scan_id);


--
-- Name: mrsseries_scanid_label_uk_1; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_series_stage
    ADD CONSTRAINT mrsseries_scanid_label_uk_1 UNIQUE (scan_id, label);


--
-- Name: mrsseries_scanidlabelidsortorder_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_series
    ADD CONSTRAINT mrsseries_scanidlabelidsortorder_uk UNIQUE (scan_id, label_id, sort_order);


--
-- Name: mrsseries_seriesid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_series
    ADD CONSTRAINT mrsseries_seriesid_pk PRIMARY KEY (series_id);


--
-- Name: mrsserieslabels_labelstudyidmodalityid_uniqueconstraint; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_series_labels
    ADD CONSTRAINT mrsserieslabels_labelstudyidmodalityid_uniqueconstraint UNIQUE (label, study_id, modality_id);


--
-- Name: mrsshrrul_ruleid; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_sharing_rules
    ADD CONSTRAINT mrsshrrul_ruleid PRIMARY KEY (sharing_rule_id);


--
-- Name: mrsshrrulasmt_ruleasmt_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_sharing_rules_asmts
    ADD CONSTRAINT mrsshrrulasmt_ruleasmt_pk PRIMARY KEY (sharing_rule_id, assessment_id);


--
-- Name: mrsshrrulexc_exceptionid; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_sharing_rules_exceptions
    ADD CONSTRAINT mrsshrrulexc_exceptionid PRIMARY KEY (sharing_rules_exception_id);


--
-- Name: mrsshrrulstd_rulestdyid; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_sharing_rules_studies
    ADD CONSTRAINT mrsshrrulstd_rulestdyid PRIMARY KEY (sharing_rule_id, study_id);


--
-- Name: mrssource_type_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_source_type
    ADD CONSTRAINT mrssource_type_pk PRIMARY KEY (source_type);


--
-- Name: mrsstdproj_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_study_projects
    ADD CONSTRAINT mrsstdproj_pk PRIMARY KEY (project_id);


--
-- Name: mrsstucod_codeid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_study_codes
    ADD CONSTRAINT mrsstucod_codeid_pk PRIMARY KEY (code_id);


--
-- Name: mrsstudie_hrrc_num_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_studies
    ADD CONSTRAINT mrsstudie_hrrc_num_uk UNIQUE (hrrc_num);


--
-- Name: mrsstudie_studyid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_studies
    ADD CONSTRAINT mrsstudie_studyid_pk PRIMARY KEY (study_id);


--
-- Name: mrssturesa_lable_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_study_research_area
    ADD CONSTRAINT mrssturesa_lable_uk UNIQUE (label);


--
-- Name: mrssturesa_studreshareaid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_study_research_area
    ADD CONSTRAINT mrssturesa_studreshareaid_pk PRIMARY KEY (study_research_area_id);


--
-- Name: mrssturesa_studsresareasid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_studies_research_areas
    ADD CONSTRAINT mrssturesa_studsresareasid_pk PRIMARY KEY (studies_research_areas_id);


--
-- Name: mrsstustat_statusid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_study_status
    ADD CONSTRAINT mrsstustat_statusid_pk PRIMARY KEY (status_id);


--
-- Name: mrsstutas_eegtaskid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_eeg_study_tasks
    ADD CONSTRAINT mrsstutas_eegtaskid_pk PRIMARY KEY (eeg_study_task_id);


--
-- Name: mrssubjec_ursi_pk_1; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subjects_reserved
    ADD CONSTRAINT mrssubjec_ursi_pk_1 PRIMARY KEY (ursi);


--
-- Name: mrssubjec_usid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subjects
    ADD CONSTRAINT mrssubjec_usid_pk PRIMARY KEY (usid);


--
-- Name: mrssubpho_ursi_phoneid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_phone_details
    ADD CONSTRAINT mrssubpho_ursi_phoneid_pk PRIMARY KEY (usid, phone_id);


--
-- Name: mrssubtyp_subjecttypeid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_types
    ADD CONSTRAINT mrssubtyp_subjecttypeid_pk PRIMARY KEY (subject_type_id);


--
-- Name: mrssutyde_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_type_details
    ADD CONSTRAINT mrssutyde_pk PRIMARY KEY (ursi, subject_type_id);


--
-- Name: mrssutyde_subjecursi_uk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_type_details
    ADD CONSTRAINT mrssutyde_subjecursi_uk UNIQUE (subject_type_id, ursi);


--
-- Name: mrstrdnam_trdid_pk; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_trade_names
    ADD CONSTRAINT mrstrdnam_trdid_pk PRIMARY KEY (trade_id);


--
-- Name: pk_data_qc_constraint; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_data_qc_constraints
    ADD CONSTRAINT pk_data_qc_constraint PRIMARY KEY (constraint_id);


--
-- Name: pk_databasechangelog; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: pk_databasechangeloglock; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: pk_mrs_charge_code_site_details; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_charge_code_site_details
    ADD CONSTRAINT pk_mrs_charge_code_site_details PRIMARY KEY (site_charge_id);


--
-- Name: pk_mrs_charge_code_site_modalities; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_charge_code_site_modalities
    ADD CONSTRAINT pk_mrs_charge_code_site_modalities PRIMARY KEY (site_modality_id);


--
-- Name: pk_mrs_charge_code_study_details; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_charge_code_study_details
    ADD CONSTRAINT pk_mrs_charge_code_study_details PRIMARY KEY (study_charge_id);


--
-- Name: pk_mrs_charge_code_study_modalities; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_charge_code_study_modalities
    ADD CONSTRAINT pk_mrs_charge_code_study_modalities PRIMARY KEY (study_modality_id);


--
-- Name: pk_mrs_charge_codes; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_charge_codes
    ADD CONSTRAINT pk_mrs_charge_codes PRIMARY KEY (charge_code_id);


--
-- Name: pk_mrs_client_assessment_backups; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_client_assessment_backups
    ADD CONSTRAINT pk_mrs_client_assessment_backups PRIMARY KEY (backup_id);


--
-- Name: pk_mrs_client_devices; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_client_devices
    ADD CONSTRAINT pk_mrs_client_devices PRIMARY KEY (device_id);


--
-- Name: pk_mrs_collection_techniques; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_collection_techniques
    ADD CONSTRAINT pk_mrs_collection_techniques PRIMARY KEY (collection_technique_id);


--
-- Name: pk_mrs_instrument_question_jumps; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_question_jumps
    ADD CONSTRAINT pk_mrs_instrument_question_jumps PRIMARY KEY (question_jump_id);


--
-- Name: pk_mrs_instrument_question_media; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_question_media
    ADD CONSTRAINT pk_mrs_instrument_question_media PRIMARY KEY (question_media_id);


--
-- Name: pk_mrs_instrument_question_media_types; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_question_media_types
    ADD CONSTRAINT pk_mrs_instrument_question_media_types PRIMARY KEY (media_type_id);


--
-- Name: pk_mrs_instrument_table_cols; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_table_cols
    ADD CONSTRAINT pk_mrs_instrument_table_cols PRIMARY KEY (col_id);


--
-- Name: pk_mrs_instrument_table_rows; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_table_rows
    ADD CONSTRAINT pk_mrs_instrument_table_rows PRIMARY KEY (row_id);


--
-- Name: pk_mrs_instrument_tables; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_instrument_tables
    ADD CONSTRAINT pk_mrs_instrument_tables PRIMARY KEY (table_id);


--
-- Name: pk_mrs_mail; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_mail
    ADD CONSTRAINT pk_mrs_mail PRIMARY KEY (mail_id);


--
-- Name: pk_mrs_qb_asmt_data_sort_temp; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_qb_asmt_data_sort_temp
    ADD CONSTRAINT pk_mrs_qb_asmt_data_sort_temp PRIMARY KEY (id);


--
-- Name: pk_mrs_qb_asmt_pivot_categories_temp; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_qb_asmt_pivot_categories_temp
    ADD CONSTRAINT pk_mrs_qb_asmt_pivot_categories_temp PRIMARY KEY (id);


--
-- Name: pk_mrs_radiology_recommendation_codes; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_radiology_recommendation_codes
    ADD CONSTRAINT pk_mrs_radiology_recommendation_codes PRIMARY KEY (code);


--
-- Name: pk_mrs_rdoc_coins_question_map; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_rdoc_coins_question_map
    ADD CONSTRAINT pk_mrs_rdoc_coins_question_map PRIMARY KEY (id);


--
-- Name: pk_mrs_series_definitions; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_series_definitions
    ADD CONSTRAINT pk_mrs_series_definitions PRIMARY KEY (definition_id);


--
-- Name: pk_mrs_study_intervals_subject_schedules; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_study_intervals_subject_schedules
    ADD CONSTRAINT pk_mrs_study_intervals_subject_schedules PRIMARY KEY (study_intervals_subject_schedules_id);


--
-- Name: pk_mrs_study_secondary_sites; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_study_secondary_sites
    ADD CONSTRAINT pk_mrs_study_secondary_sites PRIMARY KEY (study_site_id);


--
-- Name: pk_mrs_study_tracker_event_canned_responses; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_study_tracker_event_canned_responses
    ADD CONSTRAINT pk_mrs_study_tracker_event_canned_responses PRIMARY KEY (id);


--
-- Name: pk_mrs_study_tracker_response_options; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_study_tracker_response_options
    ADD CONSTRAINT pk_mrs_study_tracker_response_options PRIMARY KEY (id);


--
-- Name: pk_mrs_study_trackers; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_study_trackers
    ADD CONSTRAINT pk_mrs_study_trackers PRIMARY KEY (id);


--
-- Name: pk_mrs_subject_assessments_queue_instruments; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_assessments_queue_instruments
    ADD CONSTRAINT pk_mrs_subject_assessments_queue_instruments PRIMARY KEY (queue_instrument_id);


--
-- Name: pk_mrs_subject_assessments_queue_types; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_assessments_queue_types
    ADD CONSTRAINT pk_mrs_subject_assessments_queue_types PRIMARY KEY (queue_type_id);


--
-- Name: pk_mrs_subject_contacts; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_contacts
    ADD CONSTRAINT pk_mrs_subject_contacts PRIMARY KEY (subject_contact_id);


--
-- Name: pk_mrs_subject_contacts_addresses; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_contacts_addresses
    ADD CONSTRAINT pk_mrs_subject_contacts_addresses PRIMARY KEY (subject_contact_address_id);


--
-- Name: pk_mrs_subject_contacts_phones; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_contacts_phones
    ADD CONSTRAINT pk_mrs_subject_contacts_phones PRIMARY KEY (subject_contact_phone_id);


--
-- Name: pk_mrs_subject_tracker_events; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_tracker_events
    ADD CONSTRAINT pk_mrs_subject_tracker_events PRIMARY KEY (id);


--
-- Name: pk_mrs_subject_tracker_responses; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_tracker_responses
    ADD CONSTRAINT pk_mrs_subject_tracker_responses PRIMARY KEY (id);


--
-- Name: pk_saved_queries; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_saved_queries
    ADD CONSTRAINT pk_saved_queries PRIMARY KEY (id);


--
-- Name: pk_saved_user_queries; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_saved_user_queries
    ADD CONSTRAINT pk_saved_user_queries PRIMARY KEY (id);


--
-- Name: sys_c002103; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY "java$class$md5$table"
    ADD CONSTRAINT sys_c002103 UNIQUE (name);


--
-- Name: sys_c002104; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY "create$java$lob$table"
    ADD CONSTRAINT sys_c002104 UNIQUE (name);


--
-- Name: sys_c002923; Type: CONSTRAINT; Schema: mrsdba; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mrs_radiologist_comments
    ADD CONSTRAINT sys_c002923 UNIQUE (comment_id);


--
-- Name: tracker_id_event_id_unique; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_subject_tracker_responses
    ADD CONSTRAINT tracker_id_event_id_unique UNIQUE (event_id, tracker_id);


--
-- Name: tracker_label_study_id_unique; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_study_trackers
    ADD CONSTRAINT tracker_label_study_id_unique UNIQUE (study_id, label);


--
-- Name: uniq_username_label; Type: CONSTRAINT; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

ALTER TABLE ONLY mrs_saved_user_queries
    ADD CONSTRAINT uniq_username_label UNIQUE (username, label);


SET search_path = mydba, pg_catalog;

--
-- Name: weekly_updates_date_key; Type: CONSTRAINT; Schema: mydba; Owner: niternal; Tablespace: 
--

ALTER TABLE ONLY weekly_updates
    ADD CONSTRAINT weekly_updates_date_key UNIQUE (date, owner);


--
-- Name: weekly_updates_pkey; Type: CONSTRAINT; Schema: mydba; Owner: niternal; Tablespace: 
--

ALTER TABLE ONLY weekly_updates
    ADD CONSTRAINT weekly_updates_pkey PRIMARY KEY (id);


SET search_path = casdba, pg_catalog;

--
-- Name: cas_user_study_privs_tmp_idx; Type: INDEX; Schema: casdba; Owner: ni_developers; Tablespace: 
--

CREATE INDEX cas_user_study_privs_tmp_idx ON cas_user_study_privs_tmp USING btree (session_id);


--
-- Name: casappuse_username_pk; Type: INDEX; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE INDEX casappuse_username_pk ON cas_app_user_role_privs USING btree (username);


--
-- Name: casuse_username_pk; Type: INDEX; Schema: casdba; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX casuse_username_pk ON cas_users USING btree (username);


SET search_path = dxdba, pg_catalog;

--
-- Name: dx_asmt_responses_mv_anonymization_id_index; Type: INDEX; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE INDEX dx_asmt_responses_mv_anonymization_id_index ON dx_asmt_responses_mv USING btree (anonymization_id);


--
-- Name: dx_asmts_mv_anonymization_id_index; Type: INDEX; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE INDEX dx_asmts_mv_anonymization_id_index ON dx_asmts_mv USING btree (anonymization_id);


--
-- Name: dx_series_mv_anonymization_id_index; Type: INDEX; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE INDEX dx_series_mv_anonymization_id_index ON dx_series_mv USING btree (anonymization_id);


--
-- Name: dx_studies_mv_anonymization_id_index; Type: INDEX; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE INDEX dx_studies_mv_anonymization_id_index ON dx_studies_mv USING btree (anonymization_id);


--
-- Name: dx_subjects_mv_anonymization_id_index; Type: INDEX; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE INDEX dx_subjects_mv_anonymization_id_index ON dx_subjects_mv USING btree (anonymization_id);


--
-- Name: mrsdxdatatareq_requester_ind; Type: INDEX; Schema: dxdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrsdxdatatareq_requester_ind ON dx_data_requests USING btree (requester_username);


SET search_path = mrsdba, pg_catalog;

--
-- Name: MRSASSEESS_ASSESSMENTID_PK; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX "MRSASSEESS_ASSESSMENTID_PK" ON mrs_assessments USING btree (assessment_id);


--
-- Name: MRSASSESS_ENTRYDATES; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX "MRSASSESS_ENTRYDATES" ON mrs_assessments USING btree (entry_start_date, entry_end_date);


--
-- Name: MRSASSESS_OLD_URSI_IND; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX "MRSASSESS_OLD_URSI_IND" ON mrs_subjects USING btree (old_ursi);


--
-- Name: MRSASSESS_STUDYID_IND; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX "MRSASSESS_STUDYID_IND" ON mrs_assessments USING btree (study_id);


--
-- Name: MRSASSESS_URSI_IND; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX "MRSASSESS_URSI_IND" ON mrs_assessments USING btree (ursi);


--
-- Name: MRSINSQUE_QUESTIONID_PK; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX "MRSINSQUE_QUESTIONID_PK" ON mrs_instrument_questions USING btree (question_id);


--
-- Name: configs; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX configs ON mrs_configs USING btree (group_label, config_label);


--
-- Name: dx_excluded_index; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX dx_excluded_index ON mrs_subject_types USING btree (dx_excluded) WHERE (dx_excluded = false);


--
-- Name: fki_mrsscanners_siteid_fk; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX fki_mrsscanners_siteid_fk ON mrs_scanners USING btree (site_id);


--
-- Name: fki_mrsscases_billto_studyid_fk; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX fki_mrsscases_billto_studyid_fk ON mrs_scan_sessions USING btree (billto_study_id);


--
-- Name: fki_mrsscases_consentedunde_st_fk; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX fki_mrsscases_consentedunde_st_fk ON mrs_scan_sessions USING btree (consented_under_study_id);


--
-- Name: fki_mrsscases_scannerid_fk; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX fki_mrsscases_scannerid_fk ON mrs_scan_sessions USING btree (scanner_id);


--
-- Name: fki_mrssubjects_siteid_fk; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX fki_mrssubjects_siteid_fk ON mrs_subjects USING btree (site_id);


--
-- Name: fki_mrssubtyp_studyid_fk; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX fki_mrssubtyp_studyid_fk ON mrs_subject_types USING btree (study_id);


--
-- Name: fki_mrssutyde_subjecttypeid_fk; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX fki_mrssutyde_subjecttypeid_fk ON mrs_subject_type_details USING btree (subject_type_id);


--
-- Name: fki_mrssutyde_usid_fk; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX fki_mrssutyde_usid_fk ON mrs_subject_type_details USING btree (usid);


--
-- Name: id_index; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX id_index ON mrs_instrument_questions USING btree (id);


--
-- Name: mrs_asmtcmplt_asmtid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_asmtcmplt_asmtid_in ON mrs_asmts_most_complete_mv USING btree (assessment_id);


--
-- Name: mrs_assessments_is_deleted_idx; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_assessments_is_deleted_idx ON mrs_assessments USING btree (is_deleted);


--
-- Name: mrs_client_error_log_error_timestamp_ndx; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_client_error_log_error_timestamp_ndx ON mrs_client_error_log USING btree (error_timestamp);

ALTER TABLE mrs_client_error_log CLUSTER ON mrs_client_error_log_error_timestamp_ndx;


--
-- Name: mrs_legshrrlasmt_asmtid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_legshrrlasmt_asmtid_in ON mrs_legacy_sharing_rules_asmts USING btree (assessment_id);


--
-- Name: mrs_legshrrlasmt_ruleid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_legshrrlasmt_ruleid_in ON mrs_legacy_sharing_rules_asmts USING btree (sharing_rule_id);


--
-- Name: mrs_legshrrls_ruleid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_legshrrls_ruleid_in ON mrs_legacy_sharing_rules USING btree (sharing_rule_id);


--
-- Name: mrs_legshrrls_studyid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_legshrrls_studyid_in ON mrs_legacy_sharing_rules USING btree (study_id);


--
-- Name: mrs_legshrrlstd_ruleid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_legshrrlstd_ruleid_in ON mrs_legacy_sharing_rules_studies USING btree (sharing_rule_id);


--
-- Name: mrs_legshrrlstd_studyid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_legshrrlstd_studyid_in ON mrs_legacy_sharing_rules_studies USING btree (study_id);


--
-- Name: mrs_qb_asmt_data_sort_temp_instrument_id_ndx; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE INDEX mrs_qb_asmt_data_sort_temp_instrument_id_ndx ON mrs_qb_asmt_data_sort_temp USING btree (instrument_id);


--
-- Name: mrs_qb_asmt_data_sort_temp_question_id_ndx; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE INDEX mrs_qb_asmt_data_sort_temp_question_id_ndx ON mrs_qb_asmt_data_sort_temp USING btree (question_id);


--
-- Name: mrs_qb_asmt_data_sort_temp_segment_interval_ndx; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE INDEX mrs_qb_asmt_data_sort_temp_segment_interval_ndx ON mrs_qb_asmt_data_sort_temp USING btree (segment_interval);


--
-- Name: mrs_qb_asmt_data_sort_temp_session_id_ndx; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE INDEX mrs_qb_asmt_data_sort_temp_session_id_ndx ON mrs_qb_asmt_data_sort_temp USING btree (session_id);

ALTER TABLE mrs_qb_asmt_data_sort_temp CLUSTER ON mrs_qb_asmt_data_sort_temp_session_id_ndx;


--
-- Name: mrs_qb_asmt_data_sort_temp_study_id_ndx; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE INDEX mrs_qb_asmt_data_sort_temp_study_id_ndx ON mrs_qb_asmt_data_sort_temp USING btree (study_id);


--
-- Name: mrs_qb_asmt_pivot_categories_temp_category_ndx; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE INDEX mrs_qb_asmt_pivot_categories_temp_category_ndx ON mrs_qb_asmt_pivot_categories_temp USING btree (category);


--
-- Name: mrs_qb_asmt_pivot_categories_temp_data_sort_order_ndx; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE INDEX mrs_qb_asmt_pivot_categories_temp_data_sort_order_ndx ON mrs_qb_asmt_pivot_categories_temp USING btree (data_sort_order);


--
-- Name: mrs_qb_asmt_pivot_categories_temp_instrument_id_ndx; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE INDEX mrs_qb_asmt_pivot_categories_temp_instrument_id_ndx ON mrs_qb_asmt_pivot_categories_temp USING btree (instrument_id);


--
-- Name: mrs_qb_asmt_pivot_categories_temp_session_id_ndx; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE INDEX mrs_qb_asmt_pivot_categories_temp_session_id_ndx ON mrs_qb_asmt_pivot_categories_temp USING btree (session_id);

ALTER TABLE mrs_qb_asmt_pivot_categories_temp CLUSTER ON mrs_qb_asmt_pivot_categories_temp_session_id_ndx;


--
-- Name: mrs_roles_label; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_roles_label ON mrs_roles USING btree (label);


--
-- Name: mrs_scasesrev_review_date_ndx; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_scasesrev_review_date_ndx ON mrs_scan_sessions_review USING btree (review_date NULLS FIRST);


--
-- Name: mrs_shrrlasmt_amstid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_shrrlasmt_amstid_in ON mrs_sharing_rules_asmts USING btree (assessment_id);


--
-- Name: mrs_shrrlasmt_ruleid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_shrrlasmt_ruleid_in ON mrs_sharing_rules_asmts USING btree (sharing_rule_id);


--
-- Name: mrs_shrrls_ruleid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_shrrls_ruleid_in ON mrs_sharing_rules USING btree (sharing_rule_id);


--
-- Name: mrs_shrrls_studyid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_shrrls_studyid_in ON mrs_sharing_rules USING btree (study_id);


--
-- Name: mrs_shrrlstd_ruleid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_shrrlstd_ruleid_in ON mrs_sharing_rules_studies USING btree (sharing_rule_id);


--
-- Name: mrs_shrrlstd_studyid_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_shrrlstd_studyid_in ON mrs_sharing_rules_studies USING btree (study_id);


--
-- Name: mrs_subject_tag_details_global_unique_uk; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE UNIQUE INDEX mrs_subject_tag_details_global_unique_uk ON mrs_subject_tag_details USING btree (usid, subject_tag_id) WHERE ((study_id IS NULL) AND (site_id IS NULL));


--
-- Name: mrs_subject_tag_details_site_unique_uk; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE UNIQUE INDEX mrs_subject_tag_details_site_unique_uk ON mrs_subject_tag_details USING btree (usid, subject_tag_id, site_id) WHERE ((study_id IS NULL) AND (site_id IS NOT NULL));


--
-- Name: mrs_subject_tag_details_study_unique_uk; Type: INDEX; Schema: mrsdba; Owner: ni_developers; Tablespace: 
--

CREATE UNIQUE INDEX mrs_subject_tag_details_study_unique_uk ON mrs_subject_tag_details USING btree (usid, subject_tag_id, study_id) WHERE ((study_id IS NOT NULL) AND (site_id IS NULL));


--
-- Name: mrs_subject_type_details_dx_excluded_true_ind; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_subject_type_details_dx_excluded_true_ind ON mrs_subject_type_details USING btree (dx_excluded);


--
-- Name: mrs_ursidets_ursi_in; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrs_ursidets_ursi_in ON mrs_ursi_dets_mv USING btree (ursi);


--
-- Name: mrsassessres_assessmentid; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrsassessres_assessmentid ON mrs_assessment_responses USING btree (assessment_id);


--
-- Name: mrseegser_sess_stu_ndx; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrseegser_sess_stu_ndx ON mrs_eeg_series USING btree (eeg_session_id, eeg_study_task_id);


--
-- Name: mrsperroldet_roleid; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrsperroldet_roleid ON mrs_person_role_details USING btree (role_id);


--
-- Name: mrsqryuser_indx; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrsqryuser_indx ON mrs_query_temp USING btree (dbuser);


--
-- Name: mrssca_label_ndx; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrssca_label_ndx ON mrs_scan_sessions USING btree (label);


--
-- Name: mrssca_scan_date_ndx; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrssca_scan_date_ndx ON mrs_scan_sessions USING btree (scan_date);


--
-- Name: mrsscanslots_pi_id; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrsscanslots_pi_id ON mrs_scan_slots USING btree (pi_id);


--
-- Name: mrsscanslotuses_scan_slot_id; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrsscanslotuses_scan_slot_id ON mrs_scan_slot_uses USING btree (scan_slot_id);


--
-- Name: mrsscases_studyid_ndx; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrsscases_studyid_ndx ON mrs_scan_sessions USING btree (study_id);


--
-- Name: mrsstudeco_dem_con_pk; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX mrsstudeco_dem_con_pk ON mrs_study_demo_config USING btree (study_id, demo_field_label);


--
-- Name: mrssubjec_pi_id_ndx; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrssubjec_pi_id_ndx ON mrs_subjects_reserved USING btree (pi_id);


--
-- Name: mrssubjec_ursi_ndx; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrssubjec_ursi_ndx ON mrs_subject_type_details USING btree (ursi);


--
-- Name: mrssubtyp_studyid; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX mrssubtyp_studyid ON mrs_subject_types USING btree (study_id);


--
-- Name: perrol_alias_ndx; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX perrol_alias_ndx ON mrs_person_role_details USING btree (alias_id);


--
-- Name: qb_excluded_index; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX qb_excluded_index ON mrs_subject_types USING btree (qb_excluded) WHERE (qb_excluded = false);


--
-- Name: tempassesresprv; Type: INDEX; Schema: mrsdba; Owner: postgres; Tablespace: 
--

CREATE INDEX tempassesresprv ON mrs_assessment_responses USING btree (question_id, response_value);


SET search_path = casdba, pg_catalog;

--
-- Name: cas_user_study_privs_tmp_trg; Type: TRIGGER; Schema: casdba; Owner: ni_developers
--

CREATE TRIGGER cas_user_study_privs_tmp_trg AFTER INSERT ON cas_user_study_privs_tmp FOR EACH STATEMENT EXECUTE PROCEDURE mrsdba.cas_clean_cas_user_study_privs_tmp_f();


--
-- Name: cas_portal_info_app_id_fkey; Type: FK CONSTRAINT; Schema: casdba; Owner: postgres
--

ALTER TABLE ONLY cas_portal_info
    ADD CONSTRAINT cas_portal_info_app_id_fkey FOREIGN KEY (app_id) REFERENCES cas_apps(app_id);


--
-- Name: cas_study_use_fk41170878706082; Type: FK CONSTRAINT; Schema: casdba; Owner: postgres
--

ALTER TABLE ONLY cas_study_user_role_privs
    ADD CONSTRAINT cas_study_use_fk41170878706082 FOREIGN KEY (study_id) REFERENCES mrsdba.mrs_studies(study_id) DEFERRABLE;


--
-- Name: cas_user_field_values_user_field_id_fkey; Type: FK CONSTRAINT; Schema: casdba; Owner: postgres
--

ALTER TABLE ONLY cas_user_field_values
    ADD CONSTRAINT cas_user_field_values_user_field_id_fkey FOREIGN KEY (user_field_id) REFERENCES cas_user_fields(user_field_id);


--
-- Name: cas_user_field_values_username_fkey; Type: FK CONSTRAINT; Schema: casdba; Owner: postgres
--

ALTER TABLE ONLY cas_user_field_values
    ADD CONSTRAINT cas_user_field_values_username_fkey FOREIGN KEY (username) REFERENCES cas_users(username);


--
-- Name: cas_user_fields_site_id_fkey; Type: FK CONSTRAINT; Schema: casdba; Owner: postgres
--

ALTER TABLE ONLY cas_user_fields
    ADD CONSTRAINT cas_user_fields_site_id_fkey FOREIGN KEY (site_id) REFERENCES cas_sites(site_id);


--
-- Name: casapusro_appid_fk; Type: FK CONSTRAINT; Schema: casdba; Owner: postgres
--

ALTER TABLE ONLY cas_app_user_role_privs
    ADD CONSTRAINT casapusro_appid_fk FOREIGN KEY (app_id) REFERENCES cas_apps(app_id) DEFERRABLE;


--
-- Name: casapusro_roleid_fk; Type: FK CONSTRAINT; Schema: casdba; Owner: postgres
--

ALTER TABLE ONLY cas_app_user_role_privs
    ADD CONSTRAINT casapusro_roleid_fk FOREIGN KEY (role_id) REFERENCES cas_roles(role_id) DEFERRABLE;


--
-- Name: casusers_siteid_fk; Type: FK CONSTRAINT; Schema: casdba; Owner: postgres
--

ALTER TABLE ONLY cas_users
    ADD CONSTRAINT casusers_siteid_fk FOREIGN KEY (site_id) REFERENCES cas_sites(site_id) DEFERRABLE;


--
-- Name: sys_c002294; Type: FK CONSTRAINT; Schema: casdba; Owner: postgres
--

ALTER TABLE ONLY cas_study_user_role_privs
    ADD CONSTRAINT sys_c002294 FOREIGN KEY (role_id) REFERENCES cas_roles(role_id) DEFERRABLE;


SET search_path = dxdba, pg_catalog;

--
-- Name: dx_data_request_sources_request_id_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_sources
    ADD CONSTRAINT dx_data_request_sources_request_id_fk FOREIGN KEY (data_request_id) REFERENCES dx_data_requests(data_request_id);


--
-- Name: dx_data_request_sources_study_id_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_sources
    ADD CONSTRAINT dx_data_request_sources_study_id_fk FOREIGN KEY (study_id) REFERENCES mrsdba.mrs_studies(study_id);


--
-- Name: dx_file_upload_up_id_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_upload_files
    ADD CONSTRAINT dx_file_upload_up_id_fk FOREIGN KEY (upload_id) REFERENCES dx_data_uploads(upload_id);


--
-- Name: dx_share_asmt_asmtid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_asmt_sharing_rules
    ADD CONSTRAINT dx_share_asmt_asmtid_fk FOREIGN KEY (assessment_id) REFERENCES mrsdba.mrs_assessments(assessment_id);


--
-- Name: dx_share_asmt_destid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_asmt_sharing_rules
    ADD CONSTRAINT dx_share_asmt_destid_fk FOREIGN KEY (dest_study_id) REFERENCES mrsdba.mrs_studies(study_id);


--
-- Name: dx_share_scan_destid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_scan_sharing_rules
    ADD CONSTRAINT dx_share_scan_destid_fk FOREIGN KEY (dest_study_id) REFERENCES mrsdba.mrs_studies(study_id);


--
-- Name: dx_share_scan_seriesid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_scan_sharing_rules
    ADD CONSTRAINT dx_share_scan_seriesid_fk FOREIGN KEY (series_id) REFERENCES mrsdba.mrs_series(series_id);


--
-- Name: dx_source_component_modality_id_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_source_components
    ADD CONSTRAINT dx_source_component_modality_id_fk FOREIGN KEY (modality_id) REFERENCES mrsdba.mrs_modalities(modality_id);


--
-- Name: dx_source_component_source_id_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_source_components
    ADD CONSTRAINT dx_source_component_source_id_fk FOREIGN KEY (source_id) REFERENCES dx_data_request_sources(source_id);


--
-- Name: dx_uploads_scanner_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_uploads
    ADD CONSTRAINT dx_uploads_scanner_fk FOREIGN KEY (scanner_id) REFERENCES mrsdba.mrs_scanners(scanner_id);


--
-- Name: dx_uploads_site_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_uploads
    ADD CONSTRAINT dx_uploads_site_fk FOREIGN KEY (site_id) REFERENCES casdba.cas_sites(site_id);


--
-- Name: dx_uploads_study_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_uploads
    ADD CONSTRAINT dx_uploads_study_fk FOREIGN KEY (study_id) REFERENCES mrsdba.mrs_studies(study_id);


--
-- Name: dxusageagreementacceptance_requestid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_usage_agreement_acceptance
    ADD CONSTRAINT dxusageagreementacceptance_requestid_fk FOREIGN KEY (data_request_id) REFERENCES dx_data_requests(data_request_id) DEFERRABLE;


--
-- Name: dxusageagreementacceptance_usageagreementsid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_usage_agreement_acceptance
    ADD CONSTRAINT dxusageagreementacceptance_usageagreementsid_fk FOREIGN KEY (usage_agreement_id) REFERENCES dx_usage_agreements(usage_agreement_id) DEFERRABLE;


--
-- Name: dxusageagreements_studyid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_usage_agreements
    ADD CONSTRAINT dxusageagreements_studyid_fk FOREIGN KEY (study_id) REFERENCES mrsdba.mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrs_dx_capsule_downloads_file_id_fkey; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_capsule_downloads
    ADD CONSTRAINT mrs_dx_capsule_downloads_file_id_fkey FOREIGN KEY (file_id) REFERENCES dx_ex_situ_data_capsule_files(file_id);


--
-- Name: mrs_dx_data_capsule_creation_queue_data_requests_source_id_fkey; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_capsule_creation_queue
    ADD CONSTRAINT mrs_dx_data_capsule_creation_queue_data_requests_source_id_fkey FOREIGN KEY (source_id) REFERENCES dx_data_request_sources(source_id);


--
-- Name: mrs_dx_data_capsule_modification_queue_modality_id_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_capsule_modification_queue
    ADD CONSTRAINT mrs_dx_data_capsule_modification_queue_modality_id_fk FOREIGN KEY (modality_id) REFERENCES mrsdba.mrs_modalities(modality_id);


--
-- Name: mrs_dx_data_reqtemplategroups_groupid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_template_filters
    ADD CONSTRAINT mrs_dx_data_reqtemplategroups_groupid_fk FOREIGN KEY (group_id) REFERENCES dx_data_request_template_groups(group_id);


--
-- Name: mrs_dx_data_request_template_groups_parent_group_id; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_template_groups
    ADD CONSTRAINT mrs_dx_data_request_template_groups_parent_group_id FOREIGN KEY (parent_group_id) REFERENCES dx_data_request_template_groups(group_id);


--
-- Name: mrs_dx_data_request_template_groups_request_id_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_template_groups
    ADD CONSTRAINT mrs_dx_data_request_template_groups_request_id_fk FOREIGN KEY (data_request_id) REFERENCES dx_data_requests(data_request_id);


--
-- Name: mrs_dx_data_source_capsule_link_data_capsule_id_fkey; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_source_capsule_link
    ADD CONSTRAINT mrs_dx_data_source_capsule_link_data_capsule_id_fkey FOREIGN KEY (data_capsule_id) REFERENCES dx_ex_situ_data_capsules(data_capsule_id);


--
-- Name: mrs_dx_data_source_capsule_link_data_requests_source_id_fkey; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_source_capsule_link
    ADD CONSTRAINT mrs_dx_data_source_capsule_link_data_requests_source_id_fkey FOREIGN KEY (source_id) REFERENCES dx_data_request_sources(source_id);


--
-- Name: mrs_dx_ex_situ_data_capsule_files_data_capsule_id_fkey; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_ex_situ_data_capsule_files
    ADD CONSTRAINT mrs_dx_ex_situ_data_capsule_files_data_capsule_id_fkey FOREIGN KEY (data_capsule_id) REFERENCES dx_ex_situ_data_capsules(data_capsule_id);


--
-- Name: mrs_dx_msg_req_src_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_messages
    ADD CONSTRAINT mrs_dx_msg_req_src_fk FOREIGN KEY (source_id) REFERENCES dx_data_request_sources(source_id);


--
-- Name: mrs_dx_preapp_att_appid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_preapproval_attributes
    ADD CONSTRAINT mrs_dx_preapp_att_appid_fk FOREIGN KEY (approval_id) REFERENCES dx_preapprovals(approval_id);


--
-- Name: mrs_dx_preapp_att_attid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_preapproval_attributes
    ADD CONSTRAINT mrs_dx_preapp_att_attid_fk FOREIGN KEY (attribute_id) REFERENCES dx_source_attributes(attribute_id);


--
-- Name: mrs_dx_preapp_studyid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_preapprovals
    ADD CONSTRAINT mrs_dx_preapp_studyid_fk FOREIGN KEY (study_id) REFERENCES mrsdba.mrs_studies(study_id);


--
-- Name: mrs_dx_source_attribute_values_attr_id_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_source_attribute_values
    ADD CONSTRAINT mrs_dx_source_attribute_values_attr_id_fk FOREIGN KEY (attribute_id) REFERENCES dx_source_attributes(attribute_id);


--
-- Name: mrs_dx_source_attribute_values_src_id_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_source_attribute_values
    ADD CONSTRAINT mrs_dx_source_attribute_values_src_id_fk FOREIGN KEY (data_requests_source_id) REFERENCES dx_data_requests_sources(data_requests_source_id);


--
-- Name: mrs_dx_sourceattributes_attributeid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_request_template_filters
    ADD CONSTRAINT mrs_dx_sourceattributes_attributeid_fk FOREIGN KEY (attribute_id) REFERENCES dx_source_attributes(attribute_id);


--
-- Name: mrs_srcattr_modid_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_source_attributes
    ADD CONSTRAINT mrs_srcattr_modid_fk FOREIGN KEY (modality_id) REFERENCES mrsdba.mrs_modalities(modality_id);


--
-- Name: mrsdatar_datare_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_requests_sources
    ADD CONSTRAINT mrsdatar_datare_fk FOREIGN KEY (data_request_id) REFERENCES dx_data_requests(data_request_id);


--
-- Name: mrsdatar_datare_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_requests_target_studies
    ADD CONSTRAINT mrsdatar_datare_fk FOREIGN KEY (data_request_id) REFERENCES dx_data_requests(data_request_id);


--
-- Name: mrsdatar_studyi_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_requests_sources
    ADD CONSTRAINT mrsdatar_studyi_fk FOREIGN KEY (study_id) REFERENCES mrsdba.mrs_studies(study_id);


--
-- Name: mrsdatar_studyi_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: postgres
--

ALTER TABLE ONLY dx_data_requests_target_studies
    ADD CONSTRAINT mrsdatar_studyi_fk FOREIGN KEY (study_id) REFERENCES mrsdba.mrs_studies(study_id);


--
-- Name: series_zip_file_path_zip_file_id_fk; Type: FK CONSTRAINT; Schema: dxdba; Owner: ni_developers
--

ALTER TABLE ONLY dx_series_zip_file_contents
    ADD CONSTRAINT series_zip_file_path_zip_file_id_fk FOREIGN KEY (zip_file_id) REFERENCES dx_series_zip_file_paths(zip_file_id) DEFERRABLE INITIALLY DEFERRED;


SET search_path = mrsdba, pg_catalog;

--
-- Name: cas_site_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_secondary_sites
    ADD CONSTRAINT cas_site_id_fk FOREIGN KEY (site_id) REFERENCES casdba.cas_sites(site_id);


--
-- Name: fk_mrs_ins_tab_section_id; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instrument_tables
    ADD CONSTRAINT fk_mrs_ins_tab_section_id FOREIGN KEY (section_id) REFERENCES mrs_instrument_sections(section_id) ON DELETE CASCADE;


--
-- Name: fk_mrs_inst_table_cols_tid; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instrument_table_cols
    ADD CONSTRAINT fk_mrs_inst_table_cols_tid FOREIGN KEY (table_id) REFERENCES mrs_instrument_tables(table_id) ON DELETE CASCADE;


--
-- Name: fk_mrs_inst_table_rows_tid; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instrument_table_rows
    ADD CONSTRAINT fk_mrs_inst_table_rows_tid FOREIGN KEY (table_id) REFERENCES mrs_instrument_tables(table_id) ON DELETE CASCADE;


--
-- Name: fk_mrsinstques_colid; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_questions
    ADD CONSTRAINT fk_mrsinstques_colid FOREIGN KEY (table_col_id) REFERENCES mrs_instrument_table_cols(col_id) ON DELETE CASCADE;


--
-- Name: fk_mrsinstques_rowid; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_questions
    ADD CONSTRAINT fk_mrsinstques_rowid FOREIGN KEY (table_row_id) REFERENCES mrs_instrument_table_rows(row_id) ON DELETE CASCADE;


--
-- Name: fk_qc_con_data_type; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_data_qc_constraints
    ADD CONSTRAINT fk_qc_con_data_type FOREIGN KEY (event_parameter_id) REFERENCES mrs_scan_data_types(scan_data_type_id);


--
-- Name: fk_qc_con_scanner; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_data_qc_constraints
    ADD CONSTRAINT fk_qc_con_scanner FOREIGN KEY (device_id) REFERENCES mrs_scanners(scanner_id);


--
-- Name: fk_qc_con_ser_label; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_data_qc_constraints
    ADD CONSTRAINT fk_qc_con_ser_label FOREIGN KEY (daq_event_type_id) REFERENCES mrs_series_labels(label_id);


--
-- Name: fk_saved_user_queries_id; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_saved_user_queries
    ADD CONSTRAINT fk_saved_user_queries_id FOREIGN KEY (query_id) REFERENCES mrs_saved_queries(id);


--
-- Name: modality_id_constr; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_modalities
    ADD CONSTRAINT modality_id_constr FOREIGN KEY (parent_modality_id) REFERENCES mrs_modalities(modality_id) DEFERRABLE;


--
-- Name: modalityprops_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_modality_properties
    ADD CONSTRAINT modalityprops_fk FOREIGN KEY (modality_id) REFERENCES mrs_modalities(modality_id) DEFERRABLE;


--
-- Name: mrs_analysis_details_analysis_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_analysis_details
    ADD CONSTRAINT mrs_analysis_details_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES mrs_analysis(analysis_id);


--
-- Name: mrs_analysis_details_series_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_analysis_details
    ADD CONSTRAINT mrs_analysis_details_series_id_fkey FOREIGN KEY (series_id) REFERENCES mrs_series(series_id);


--
-- Name: mrs_analysis_dti_qa_values_series_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_analysis_dti_qa_values
    ADD CONSTRAINT mrs_analysis_dti_qa_values_series_id_fkey FOREIGN KEY (series_id) REFERENCES mrs_series(series_id);


--
-- Name: mrs_analysis_files_series_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_analysis_files
    ADD CONSTRAINT mrs_analysis_files_series_id_fkey FOREIGN KEY (series_id) REFERENCES mrs_series(series_id);


--
-- Name: mrs_analysis_job_monitor_series_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_analysis_job_monitor
    ADD CONSTRAINT mrs_analysis_job_monitor_series_id_fkey FOREIGN KEY (series_id) REFERENCES mrs_series(series_id);


--
-- Name: mrs_analysis_quicklook_statistic_study_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_analysis_quicklook_statistic
    ADD CONSTRAINT mrs_analysis_quicklook_statistic_study_id_fkey FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_analysis_stats_files_scan_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_analysis_stats_files
    ADD CONSTRAINT mrs_analysis_stats_files_scan_id_fkey FOREIGN KEY (scan_id) REFERENCES mrs_scan_sessions(scan_id);


--
-- Name: mrs_analysis_sub_study_scan_id_fkey1; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_analysis_sub_study
    ADD CONSTRAINT mrs_analysis_sub_study_scan_id_fkey1 FOREIGN KEY (scan_id) REFERENCES mrs_scan_sessions(scan_id);


--
-- Name: mrs_analysis_sub_study_study_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_analysis_sub_study
    ADD CONSTRAINT mrs_analysis_sub_study_study_id_fkey FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_analysis_substudy_permission_study_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_analysis_substudy_permission
    ADD CONSTRAINT mrs_analysis_substudy_permission_study_id_fkey FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_analysis_vbm_img_scan_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_analysis_vbm_img
    ADD CONSTRAINT mrs_analysis_vbm_img_scan_id_fkey FOREIGN KEY (scan_id) REFERENCES mrs_scan_sessions(scan_id);


--
-- Name: mrs_assess_sourcetype_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_assessments
    ADD CONSTRAINT mrs_assess_sourcetype_fk FOREIGN KEY (source_type) REFERENCES mrs_source_type(source_type) DEFERRABLE;


--
-- Name: mrs_assessment_events_assessment_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_assessment_events
    ADD CONSTRAINT mrs_assessment_events_assessment_id_fkey FOREIGN KEY (assessment_id) REFERENCES mrs_assessments(assessment_id);


--
-- Name: mrs_assessment_events_event_type_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_assessment_events
    ADD CONSTRAINT mrs_assessment_events_event_type_id_fkey FOREIGN KEY (event_type_id) REFERENCES mrs_assessment_event_types(event_type_id);


--
-- Name: mrs_assessment_events_question_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_assessment_events
    ADD CONSTRAINT mrs_assessment_events_question_id_fkey FOREIGN KEY (question_id) REFERENCES mrs_instrument_questions(question_id);


--
-- Name: mrs_assessments_assessment_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_assessments_queue_instruments
    ADD CONSTRAINT mrs_assessments_assessment_id_fk FOREIGN KEY (assessment_id) REFERENCES mrs_assessments(assessment_id);


--
-- Name: mrs_assessments_device_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_assessments
    ADD CONSTRAINT mrs_assessments_device_id_fk FOREIGN KEY (client_device_id) REFERENCES mrs_client_devices(device_id);


--
-- Name: mrs_auto_messages_message_type_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_auto_messages
    ADD CONSTRAINT mrs_auto_messages_message_type_id_fkey FOREIGN KEY (message_type_id) REFERENCES mrs_message_types(message_type_id);


--
-- Name: mrs_auto_messages_study_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_auto_messages
    ADD CONSTRAINT mrs_auto_messages_study_id_fkey FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_autopop_qid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_questions
    ADD CONSTRAINT mrs_autopop_qid_fk FOREIGN KEY (autopop_qid) REFERENCES mrs_instrument_questions(question_id);


--
-- Name: mrs_charge_code_details_study_charge_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_charge_code_study_modalities
    ADD CONSTRAINT mrs_charge_code_details_study_charge_id_fk FOREIGN KEY (study_charge_id) REFERENCES mrs_charge_code_study_details(study_charge_id);


--
-- Name: mrs_charge_code_site_details_site_charge_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_charge_code_site_modalities
    ADD CONSTRAINT mrs_charge_code_site_details_site_charge_id_fk FOREIGN KEY (site_charge_id) REFERENCES mrs_charge_code_site_details(site_charge_id);


--
-- Name: mrs_charge_codes_charge_code_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_charge_code_study_details
    ADD CONSTRAINT mrs_charge_codes_charge_code_fk FOREIGN KEY (charge_code_id) REFERENCES mrs_charge_codes(charge_code_id);


--
-- Name: mrs_charge_codes_charge_code_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_charge_code_site_details
    ADD CONSTRAINT mrs_charge_codes_charge_code_fk FOREIGN KEY (charge_code_id) REFERENCES mrs_charge_codes(charge_code_id);


--
-- Name: mrs_charge_codes_charge_code_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_sessions
    ADD CONSTRAINT mrs_charge_codes_charge_code_id_fk FOREIGN KEY (charge_code_id) REFERENCES mrs_charge_codes(charge_code_id);


--
-- Name: mrs_client_assessment_backups_device_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_client_assessment_backups
    ADD CONSTRAINT mrs_client_assessment_backups_device_id_fk FOREIGN KEY (device_id) REFERENCES mrs_client_devices(device_id);


--
-- Name: mrs_inst_quest_jump_qid; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instrument_question_jumps
    ADD CONSTRAINT mrs_inst_quest_jump_qid FOREIGN KEY (question_id) REFERENCES mrs_instrument_questions(question_id);


--
-- Name: mrs_inst_quest_jump_target_qid; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instrument_question_jumps
    ADD CONSTRAINT mrs_inst_quest_jump_target_qid FOREIGN KEY (target_qid) REFERENCES mrs_instrument_questions(question_id);


--
-- Name: mrs_inst_resp_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instrument_code_responses
    ADD CONSTRAINT mrs_inst_resp_fk FOREIGN KEY (target_qid) REFERENCES mrs_instrument_questions(question_id);


--
-- Name: mrs_instrument_question_media_media_type_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_question_media
    ADD CONSTRAINT mrs_instrument_question_media_media_type_id_fk FOREIGN KEY (media_type_id) REFERENCES mrs_instrument_question_media_types(media_type_id);


--
-- Name: mrs_instrument_question_media_question_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_question_media
    ADD CONSTRAINT mrs_instrument_question_media_question_id_fk FOREIGN KEY (question_id) REFERENCES mrs_instrument_questions(question_id);


--
-- Name: mrs_instrument_question_score_question_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_question_score
    ADD CONSTRAINT mrs_instrument_question_score_question_id_fkey FOREIGN KEY (question_id) REFERENCES mrs_instrument_questions(question_id);


--
-- Name: mrs_instrument_question_score_study_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_question_score
    ADD CONSTRAINT mrs_instrument_question_score_study_id_fkey FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_instrument_questions_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_rdoc_coins_question_map
    ADD CONSTRAINT mrs_instrument_questions_id_fk FOREIGN KEY (coins_question_id) REFERENCES mrs_instrument_questions(id);


--
-- Name: mrs_instrument_questions_response_format_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_questions
    ADD CONSTRAINT mrs_instrument_questions_response_format_id_fkey FOREIGN KEY (response_format_id) REFERENCES mrs_instrument_question_response_format(format_id);


--
-- Name: mrs_intruments_instrument_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_assessments_queue_instruments
    ADD CONSTRAINT mrs_intruments_instrument_id_fk FOREIGN KEY (instrument_id) REFERENCES mrs_instruments(instrument_id);


--
-- Name: mrs_modalities_modality_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_charge_code_study_modalities
    ADD CONSTRAINT mrs_modalities_modality_id_fk FOREIGN KEY (modality_id) REFERENCES mrs_modalities(modality_id);


--
-- Name: mrs_modalities_modality_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_charge_code_site_modalities
    ADD CONSTRAINT mrs_modalities_modality_id_fk FOREIGN KEY (modality_id) REFERENCES mrs_modalities(modality_id);


--
-- Name: mrs_nrslot_use_mod_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_nonrev_slot_uses
    ADD CONSTRAINT mrs_nrslot_use_mod_fk FOREIGN KEY (modality_id) REFERENCES mrs_modalities(modality_id);


--
-- Name: mrs_protocols_protocol_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_assessments_queue
    ADD CONSTRAINT mrs_protocols_protocol_id_fk FOREIGN KEY (from_protocol_id) REFERENCES mrs_protocols(protocol_id);


--
-- Name: mrs_qb_asmt_data_sort_temp_instrument_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_qb_asmt_data_sort_temp
    ADD CONSTRAINT mrs_qb_asmt_data_sort_temp_instrument_id_fk FOREIGN KEY (instrument_id) REFERENCES mrs_instruments(instrument_id);


--
-- Name: mrs_qb_asmt_data_sort_temp_question_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_qb_asmt_data_sort_temp
    ADD CONSTRAINT mrs_qb_asmt_data_sort_temp_question_id_fk FOREIGN KEY (question_id) REFERENCES mrs_instrument_questions(question_id);


--
-- Name: mrs_qb_asmt_data_sort_temp_study_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_qb_asmt_data_sort_temp
    ADD CONSTRAINT mrs_qb_asmt_data_sort_temp_study_id_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_qb_asmt_pivot_categories_temp_instrument_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_qb_asmt_pivot_categories_temp
    ADD CONSTRAINT mrs_qb_asmt_pivot_categories_temp_instrument_id_fk FOREIGN KEY (instrument_id) REFERENCES mrs_instruments(instrument_id);


--
-- Name: mrs_reasonid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_assessments
    ADD CONSTRAINT mrs_reasonid_fk FOREIGN KEY (missing_reason_id) REFERENCES mrs_missing_assessment_reasons(id);


--
-- Name: mrs_req_mod_cond_data_modality_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_req_mod_cond_data
    ADD CONSTRAINT mrs_req_mod_cond_data_modality_id_fkey FOREIGN KEY (modality_id) REFERENCES mrs_modalities(modality_id);


--
-- Name: mrs_req_mod_cond_data_scan_data_type_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_req_mod_cond_data
    ADD CONSTRAINT mrs_req_mod_cond_data_scan_data_type_id_fkey FOREIGN KEY (scan_data_type_id) REFERENCES mrs_scan_data_types(scan_data_type_id);


--
-- Name: mrs_scan_data_menu_values_scan_data_type_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_data_menu_values
    ADD CONSTRAINT mrs_scan_data_menu_values_scan_data_type_id_fkey FOREIGN KEY (scan_data_type_id) REFERENCES mrs_scan_data_types(scan_data_type_id);


--
-- Name: mrs_scan_sess_fk51131474701977; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_sessions_review
    ADD CONSTRAINT mrs_scan_sess_fk51131474701977 FOREIGN KEY (scan_id) REFERENCES mrs_scan_sessions(scan_id) DEFERRABLE;


--
-- Name: mrs_scan_sessions_from_archive_study_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_sessions_from_archive
    ADD CONSTRAINT mrs_scan_sessions_from_archive_study_id_fkey FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_scan_slot_charge_code_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_slots
    ADD CONSTRAINT mrs_scan_slot_charge_code_fk FOREIGN KEY (default_charge_code_id) REFERENCES mrs_charge_codes(charge_code_id);


--
-- Name: mrs_segment_intervals_segment_interval_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_protocols
    ADD CONSTRAINT mrs_segment_intervals_segment_interval_id_fk FOREIGN KEY (segment_interval_id) REFERENCES mrs_study_intervals(segment_interval_id) DEFERRABLE;


--
-- Name: mrs_series_analysis_series_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series_analysis
    ADD CONSTRAINT mrs_series_analysis_series_id_fkey FOREIGN KEY (series_id) REFERENCES mrs_series(series_id);


--
-- Name: mrs_series_data_scan_data_type_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series_data
    ADD CONSTRAINT mrs_series_data_scan_data_type_id_fkey FOREIGN KEY (scan_data_type_id) REFERENCES mrs_scan_data_types(scan_data_type_id);


--
-- Name: mrs_series_data_series_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series_data
    ADD CONSTRAINT mrs_series_data_series_id_fkey FOREIGN KEY (series_id) REFERENCES mrs_series(series_id);


--
-- Name: mrs_series_definitions_collection_technique_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_series_definitions
    ADD CONSTRAINT mrs_series_definitions_collection_technique_id_fk FOREIGN KEY (collection_technique_id) REFERENCES mrs_collection_techniques(collection_technique_id);


--
-- Name: mrs_series_fmri_params_series_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series_fmri_params
    ADD CONSTRAINT mrs_series_fmri_params_series_id_fkey FOREIGN KEY (series_id) REFERENCES mrs_series(series_id);


--
-- Name: mrs_series_from_archive_modality_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series_from_archive
    ADD CONSTRAINT mrs_series_from_archive_modality_id_fkey FOREIGN KEY (modality_id) REFERENCES mrs_modalities(modality_id);


--
-- Name: mrs_series_label_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series
    ADD CONSTRAINT mrs_series_label_id_fk FOREIGN KEY (label_id) REFERENCES mrs_series_labels(label_id);


--
-- Name: mrs_series_labels_definition_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_series_labels
    ADD CONSTRAINT mrs_series_labels_definition_id_fk FOREIGN KEY (definition_id) REFERENCES mrs_series_definitions(definition_id);


--
-- Name: mrs_series_level2_analysis_scan_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series_level2_analysis
    ADD CONSTRAINT mrs_series_level2_analysis_scan_id_fkey FOREIGN KEY (scan_id) REFERENCES mrs_scan_sessions(scan_id);


--
-- Name: mrs_source_type_source_type_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_protocols
    ADD CONSTRAINT mrs_source_type_source_type_id_fk FOREIGN KEY (source_type_id) REFERENCES mrs_source_type(source_type_id);


--
-- Name: mrs_studies_study_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_charge_code_study_details
    ADD CONSTRAINT mrs_studies_study_id_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_studies_study_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_trackers
    ADD CONSTRAINT mrs_studies_study_id_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_studies_study_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_tracker_event_canned_responses
    ADD CONSTRAINT mrs_studies_study_id_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_study_asmt_inst_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_asmt_prot
    ADD CONSTRAINT mrs_study_asmt_inst_fk FOREIGN KEY (instrument_id) REFERENCES mrs_instruments(instrument_id) DEFERRABLE;


--
-- Name: mrs_study_asmt_int_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_asmt_prot
    ADD CONSTRAINT mrs_study_asmt_int_fk FOREIGN KEY (study_id, segment_interval) REFERENCES mrs_study_intervals(study_id, segment_interval) DEFERRABLE;


--
-- Name: mrs_study_asmt_subtype_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_asmt_prot
    ADD CONSTRAINT mrs_study_asmt_subtype_fk FOREIGN KEY (subject_type_id) REFERENCES mrs_subject_types(subject_type_id) DEFERRABLE;


--
-- Name: mrs_study_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_mail
    ADD CONSTRAINT mrs_study_id_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_study_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_secondary_sites
    ADD CONSTRAINT mrs_study_id_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_study_interval_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_intervals
    ADD CONSTRAINT mrs_study_interval_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrs_study_messages_message_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_messages
    ADD CONSTRAINT mrs_study_messages_message_id_fkey FOREIGN KEY (message_id) REFERENCES mrs_messages(message_id);


--
-- Name: mrs_study_messages_message_type_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_messages
    ADD CONSTRAINT mrs_study_messages_message_type_id_fkey FOREIGN KEY (message_type_id) REFERENCES mrs_message_types(message_type_id);


--
-- Name: mrs_study_messages_study_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_messages
    ADD CONSTRAINT mrs_study_messages_study_id_fkey FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_study_missing_assessment_reasons_reason_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_missing_assessment_reasons
    ADD CONSTRAINT mrs_study_missing_assessment_reasons_reason_id_fkey FOREIGN KEY (reason_id) REFERENCES mrs_missing_assessment_reasons(id);


--
-- Name: mrs_study_missing_assessment_reasons_study_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_missing_assessment_reasons
    ADD CONSTRAINT mrs_study_missing_assessment_reasons_study_id_fkey FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_study_recruitment_criteria_criteria_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_recruitment_criteria
    ADD CONSTRAINT mrs_study_recruitment_criteria_criteria_id_fkey FOREIGN KEY (criteria_id) REFERENCES mrs_recruitment_criteria(criteria_id);


--
-- Name: mrs_study_recruitment_criteria_study_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_recruitment_criteria
    ADD CONSTRAINT mrs_study_recruitment_criteria_study_id_fkey FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_study_templates_study_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_templates
    ADD CONSTRAINT mrs_study_templates_study_id_fkey FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_study_tracker_response_options_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_tracker_responses
    ADD CONSTRAINT mrs_study_tracker_response_options_fk FOREIGN KEY (tracker_response_option_id) REFERENCES mrs_study_tracker_response_options(id);


--
-- Name: mrs_study_trackers_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_study_tracker_response_options
    ADD CONSTRAINT mrs_study_trackers_id_fk FOREIGN KEY (tracker_id) REFERENCES mrs_study_trackers(id);


--
-- Name: mrs_study_trackers_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_tracker_responses
    ADD CONSTRAINT mrs_study_trackers_id_fk FOREIGN KEY (tracker_id) REFERENCES mrs_study_trackers(id);


--
-- Name: mrs_subject_assessments_queue_login_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_assessments_queue
    ADD CONSTRAINT mrs_subject_assessments_queue_login_id_fkey FOREIGN KEY (login_id) REFERENCES mrs_subject_logins(login_id);


--
-- Name: mrs_subject_assessments_queue_types_queue_type_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_assessments_queue_instruments
    ADD CONSTRAINT mrs_subject_assessments_queue_types_queue_type_id_fk FOREIGN KEY (queue_type_id) REFERENCES mrs_subject_assessments_queue_types(queue_type_id);


--
-- Name: mrs_subject_assessments_queue_types_queue_type_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_protocols
    ADD CONSTRAINT mrs_subject_assessments_queue_types_queue_type_id_fk FOREIGN KEY (queue_type_id) REFERENCES mrs_subject_assessments_queue_types(queue_type_id);


--
-- Name: mrs_subject_contact_address_contact_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_contacts_addresses
    ADD CONSTRAINT mrs_subject_contact_address_contact_id_fk FOREIGN KEY (subject_contact_id) REFERENCES mrs_subject_contacts(subject_contact_id) ON DELETE CASCADE;


--
-- Name: mrs_subject_logins_login_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_assessments_queue_instruments
    ADD CONSTRAINT mrs_subject_logins_login_id_fk FOREIGN KEY (login_id) REFERENCES mrs_subject_logins(login_id);


--
-- Name: mrs_subject_logins_source_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subject_logins
    ADD CONSTRAINT mrs_subject_logins_source_fk FOREIGN KEY (source_type) REFERENCES mrs_source_type(source_type);


--
-- Name: mrs_subject_logins_study_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subject_logins
    ADD CONSTRAINT mrs_subject_logins_study_id_fkey FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_subject_logins_usid_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subject_logins
    ADD CONSTRAINT mrs_subject_logins_usid_fkey FOREIGN KEY (usid) REFERENCES mrs_subjects(usid);


--
-- Name: mrs_subject_tag_details_site_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_tag_details
    ADD CONSTRAINT mrs_subject_tag_details_site_id_fk FOREIGN KEY (site_id) REFERENCES casdba.cas_sites(site_id) DEFERRABLE;


--
-- Name: mrs_subject_tag_details_study_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_tag_details
    ADD CONSTRAINT mrs_subject_tag_details_study_id_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_subject_tag_details_subject_tag_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_tag_details
    ADD CONSTRAINT mrs_subject_tag_details_subject_tag_id_fk FOREIGN KEY (subject_tag_id) REFERENCES mrs_subject_tags(subject_tag_id) DEFERRABLE;


--
-- Name: mrs_subject_tracker_events_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_tracker_responses
    ADD CONSTRAINT mrs_subject_tracker_events_id_fk FOREIGN KEY (event_id) REFERENCES mrs_subject_tracker_events(id);


--
-- Name: mrs_subject_type_details_subject_type_detail_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_tracker_events
    ADD CONSTRAINT mrs_subject_type_details_subject_type_detail_id_fk FOREIGN KEY (subject_type_detail_id) REFERENCES mrs_subject_type_details(subject_type_detail_id);


--
-- Name: mrs_subject_type_group_link_type_group_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subject_type_group_link
    ADD CONSTRAINT mrs_subject_type_group_link_type_group_id_fkey FOREIGN KEY (type_group_id) REFERENCES mrs_subject_type_groups(type_group_id);


--
-- Name: mrs_subject_type_group_subject_type_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subject_type_group_link
    ADD CONSTRAINT mrs_subject_type_group_subject_type_id_fkey FOREIGN KEY (subject_type_id) REFERENCES mrs_subject_types(subject_type_id);


--
-- Name: mrs_subjects_contacts_contact_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_contacts_phones
    ADD CONSTRAINT mrs_subjects_contacts_contact_id_fk FOREIGN KEY (subject_contact_id) REFERENCES mrs_subject_contacts(subject_contact_id) ON DELETE CASCADE;


--
-- Name: mrs_subjects_contacts_usid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_contacts
    ADD CONSTRAINT mrs_subjects_contacts_usid_fk FOREIGN KEY (usid) REFERENCES mrs_subjects(usid);


--
-- Name: mrs_subjects_racial_categories_subject_type_detial_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subjects_racial_categories
    ADD CONSTRAINT mrs_subjects_racial_categories_subject_type_detial_id_fk FOREIGN KEY (subject_type_detail_id) REFERENCES mrs_subject_type_details(subject_type_detail_id);


--
-- Name: mrs_template_instruments_instrument_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_template_instruments
    ADD CONSTRAINT mrs_template_instruments_instrument_id_fkey FOREIGN KEY (instrument_id) REFERENCES mrs_instruments(instrument_id);


--
-- Name: mrs_template_instruments_template_id_fkey; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_template_instruments
    ADD CONSTRAINT mrs_template_instruments_template_id_fkey FOREIGN KEY (template_id) REFERENCES mrs_study_templates(template_id);


--
-- Name: mrs_userappoptions_optionid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_user_app_options
    ADD CONSTRAINT mrs_userappoptions_optionid_fk FOREIGN KEY (option_id) REFERENCES mrs_app_options(id);


--
-- Name: mrs_userappoptions_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_app_options
    ADD CONSTRAINT mrs_userappoptions_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id);


--
-- Name: mrs_userappoptions_username_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_user_app_options
    ADD CONSTRAINT mrs_userappoptions_username_fk FOREIGN KEY (username) REFERENCES casdba.cas_users(username);


--
-- Name: mrsaccoun_prid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_accounts
    ADD CONSTRAINT mrsaccoun_prid_fk FOREIGN KEY (purchase_request_id) REFERENCES mrs_purchase_requests(purchase_request_id) DEFERRABLE;


--
-- Name: mrsaddres_usid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_addresses
    ADD CONSTRAINT mrsaddres_usid_fk FOREIGN KEY (usid) REFERENCES mrs_subjects(usid) DEFERRABLE;


--
-- Name: mrsassess_dataentryid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_assessments
    ADD CONSTRAINT mrsassess_dataentryid_fk FOREIGN KEY (dataentry_type_id) REFERENCES mrs_dataentry_types(dataentry_type_id) DEFERRABLE;


--
-- Name: mrsassess_instrumentid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_assessments
    ADD CONSTRAINT mrsassess_instrumentid_fk FOREIGN KEY (instrument_id) REFERENCES mrs_instruments(instrument_id) DEFERRABLE;


--
-- Name: mrsassess_rater1_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_assessments
    ADD CONSTRAINT mrsassess_rater1_fk FOREIGN KEY (rater1) REFERENCES mrs_person_alias(alias_id) DEFERRABLE;


--
-- Name: mrsassess_rater2_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_assessments
    ADD CONSTRAINT mrsassess_rater2_fk FOREIGN KEY (rater2) REFERENCES mrs_person_alias(alias_id) DEFERRABLE;


--
-- Name: mrsassres_assessmentid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_assessment_responses
    ADD CONSTRAINT mrsassres_assessmentid_fk FOREIGN KEY (assessment_id) REFERENCES mrs_assessments(assessment_id) DEFERRABLE;


--
-- Name: mrsdatad_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_data_domains
    ADD CONSTRAINT mrsdatad_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrsdcgc_ctid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_generic_category_details
    ADD CONSTRAINT mrsdcgc_ctid_fk FOREIGN KEY (category_id) REFERENCES mrs_drug_categories(category_id) DEFERRABLE;


--
-- Name: mrsdoc_fileid_fk_1; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_doc_proj_details
    ADD CONSTRAINT mrsdoc_fileid_fk_1 FOREIGN KEY (file_id) REFERENCES mrs_documents(file_id) DEFERRABLE;


--
-- Name: mrsdoc_studyprojid_fk_1; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_doc_proj_details
    ADD CONSTRAINT mrsdoc_studyprojid_fk_1 FOREIGN KEY (project_id) REFERENCES mrs_study_projects(project_id) DEFERRABLE;


--
-- Name: mrsdocade_categoryid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_doc_category_details
    ADD CONSTRAINT mrsdocade_categoryid_fk FOREIGN KEY (category_id) REFERENCES mrs_document_categories(category_id) DEFERRABLE;


--
-- Name: mrsdocade_fileid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_doc_category_details
    ADD CONSTRAINT mrsdocade_fileid_fk FOREIGN KEY (file_id) REFERENCES mrs_documents(file_id) DEFERRABLE;


--
-- Name: mrsdoccat_parentid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_document_categories
    ADD CONSTRAINT mrsdoccat_parentid_fk FOREIGN KEY (parent_id) REFERENCES mrs_document_categories(category_id) DEFERRABLE;


--
-- Name: mrsdoccat_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_document_categories
    ADD CONSTRAINT mrsdoccat_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrsdrugprop_drugcode_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_drug_properties
    ADD CONSTRAINT mrsdrugprop_drugcode_fk FOREIGN KEY (drug_code) REFERENCES mrs_generic_drugs(drug_code) DEFERRABLE;


--
-- Name: mrsdrugprop_propertyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_drug_properties
    ADD CONSTRAINT mrsdrugprop_propertyid_fk FOREIGN KEY (property_id) REFERENCES mrs_drug_prop_details(property_id) DEFERRABLE;


--
-- Name: mrsdsmcod_vergro_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_dsm_codes
    ADD CONSTRAINT mrsdsmcod_vergro_fk FOREIGN KEY (version, group_id) REFERENCES mrs_dsm_groups(version, group_id) DEFERRABLE;


--
-- Name: mrsdsmspec_dsm_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_dsm_specifiers
    ADD CONSTRAINT mrsdsmspec_dsm_fk FOREIGN KEY (dsm_code_id) REFERENCES mrs_dsm_codes(dsm_code_id) DEFERRABLE;


--
-- Name: mrseeg_operatorid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_eeg_sessions
    ADD CONSTRAINT mrseeg_operatorid_fk FOREIGN KEY (operator_id) REFERENCES mrs_persons(person_id) DEFERRABLE;


--
-- Name: mrseegseries_eegstudytask_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_eeg_series
    ADD CONSTRAINT mrseegseries_eegstudytask_fk FOREIGN KEY (eeg_study_task_id) REFERENCES mrs_eeg_study_tasks(eeg_study_task_id) DEFERRABLE;


--
-- Name: mrseegses_eegid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_eeg_sessions
    ADD CONSTRAINT mrseegses_eegid_fk FOREIGN KEY (eeg_id) REFERENCES mrs_eeg_devices(eeg_id) DEFERRABLE;


--
-- Name: mrseegses_segstu_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_eeg_sessions
    ADD CONSTRAINT mrseegses_segstu_fk FOREIGN KEY (study_id, segment_interval) REFERENCES mrs_study_intervals(study_id, segment_interval) DEFERRABLE;


--
-- Name: mrseegsess_eegsess_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_eeg_series
    ADD CONSTRAINT mrseegsess_eegsess_fk FOREIGN KEY (eeg_session_id) REFERENCES mrs_eeg_sessions(eeg_session_id) DEFERRABLE;


--
-- Name: mrsessprop_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_sessions_ext_props
    ADD CONSTRAINT mrsessprop_fk FOREIGN KEY (scan_id) REFERENCES mrs_scan_sessions(scan_id) DEFERRABLE;


--
-- Name: mrsgdgc_drgcd_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_generic_category_details
    ADD CONSTRAINT mrsgdgc_drgcd_fk FOREIGN KEY (drug_code) REFERENCES mrs_generic_drugs(drug_code) DEFERRABLE;


--
-- Name: mrsgdgt_drgcd_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_generic_trade_details
    ADD CONSTRAINT mrsgdgt_drgcd_fk FOREIGN KEY (drug_code) REFERENCES mrs_generic_drugs(drug_code) DEFERRABLE;


--
-- Name: mrsgdgt_trdid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_generic_trade_details
    ADD CONSTRAINT mrsgdgt_trdid_fk FOREIGN KEY (trade_id) REFERENCES mrs_trade_names(trade_id) DEFERRABLE;


--
-- Name: mrsimages_seriesid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_images
    ADD CONSTRAINT mrsimages_seriesid_fk FOREIGN KEY (series_id) REFERENCES mrs_series(series_id) DEFERRABLE;


--
-- Name: mrsimahea_scanid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_image_headers
    ADD CONSTRAINT mrsimahea_scanid_fk FOREIGN KEY (scan_id) REFERENCES mrs_scan_sessions(scan_id) DEFERRABLE;


--
-- Name: mrsincore_questionid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instrument_code_responses
    ADD CONSTRAINT mrsincore_questionid_fk FOREIGN KEY (question_id) REFERENCES mrs_instrument_questions(question_id) DEFERRABLE;


--
-- Name: mrsinsede_instrumentid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_section_details
    ADD CONSTRAINT mrsinsede_instrumentid_fk FOREIGN KEY (instrument_id) REFERENCES mrs_instruments(instrument_id) DEFERRABLE;


--
-- Name: mrsinsede_sectionid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_section_details
    ADD CONSTRAINT mrsinsede_sectionid_fk FOREIGN KEY (section_id) REFERENCES mrs_instrument_sections(section_id) DEFERRABLE;


--
-- Name: mrsinsque_sectionid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_questions
    ADD CONSTRAINT mrsinsque_sectionid_fk FOREIGN KEY (section_id) REFERENCES mrs_instrument_sections(section_id) DEFERRABLE;


--
-- Name: mrsinstquestlps_quesid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_instrument_question_loops
    ADD CONSTRAINT mrsinstquestlps_quesid_fk FOREIGN KEY (target_qid) REFERENCES mrs_instrument_questions(question_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: mrsinststud_instid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instruments_studies
    ADD CONSTRAINT mrsinststud_instid_fk FOREIGN KEY (instrument_id) REFERENCES mrs_instruments(instrument_id) DEFERRABLE;


--
-- Name: mrsinststud_studid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_instruments_studies
    ADD CONSTRAINT mrsinststud_studid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrslegshrrul_assessmentid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_legacy_sharing_rules
    ADD CONSTRAINT mrslegshrrul_assessmentid_fk FOREIGN KEY (assessment_id) REFERENCES mrs_assessments(assessment_id) DEFERRABLE;


--
-- Name: mrslegshrrul_dataentryid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_legacy_sharing_rules
    ADD CONSTRAINT mrslegshrrul_dataentryid_fk FOREIGN KEY (dataentry_type_id) REFERENCES mrs_dataentry_types(dataentry_type_id) DEFERRABLE;


--
-- Name: mrslegshrrul_instrumentid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_legacy_sharing_rules
    ADD CONSTRAINT mrslegshrrul_instrumentid_fk FOREIGN KEY (instrument_id) REFERENCES mrs_instruments(instrument_id) DEFERRABLE;


--
-- Name: mrslegshrrul_raterid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_legacy_sharing_rules
    ADD CONSTRAINT mrslegshrrul_raterid_fk FOREIGN KEY (rater_id) REFERENCES mrs_person_alias(alias_id) DEFERRABLE;


--
-- Name: mrslegshrrul_segint_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_legacy_sharing_rules
    ADD CONSTRAINT mrslegshrrul_segint_fk FOREIGN KEY (study_id, segment_interval) REFERENCES mrs_study_intervals(study_id, segment_interval) ON UPDATE CASCADE DEFERRABLE;


--
-- Name: mrslegshrrul_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_legacy_sharing_rules
    ADD CONSTRAINT mrslegshrrul_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrslegshrrulasmt_legacy_asmtid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_legacy_sharing_rules_asmts
    ADD CONSTRAINT mrslegshrrulasmt_legacy_asmtid_fk FOREIGN KEY (assessment_id) REFERENCES mrs_assessments(assessment_id) ON DELETE CASCADE DEFERRABLE;


--
-- Name: mrslegshrrulasmt_legacy_ruleid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_legacy_sharing_rules_asmts
    ADD CONSTRAINT mrslegshrrulasmt_legacy_ruleid_fk FOREIGN KEY (sharing_rule_id) REFERENCES mrs_legacy_sharing_rules(sharing_rule_id) ON DELETE CASCADE DEFERRABLE;


--
-- Name: mrslegshrrulstd_ruleid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_legacy_sharing_rules_studies
    ADD CONSTRAINT mrslegshrrulstd_ruleid_fk FOREIGN KEY (sharing_rule_id) REFERENCES mrs_legacy_sharing_rules(sharing_rule_id) DEFERRABLE;


--
-- Name: mrsperadd_addr_type_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_personaddresses
    ADD CONSTRAINT mrsperadd_addr_type_id_fk FOREIGN KEY (address_type_id) REFERENCES mrs_personaddress_types(address_type_id) DEFERRABLE;


--
-- Name: mrsperode_aliasid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_person_role_details
    ADD CONSTRAINT mrsperode_aliasid_fk FOREIGN KEY (alias_id) REFERENCES mrs_person_alias(alias_id) DEFERRABLE;


--
-- Name: mrsperode_personid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_person_role_details
    ADD CONSTRAINT mrsperode_personid_fk FOREIGN KEY (person_id) REFERENCES mrs_persons(person_id) DEFERRABLE;


--
-- Name: mrsperode_roleid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_person_role_details
    ADD CONSTRAINT mrsperode_roleid_fk FOREIGN KEY (role_id) REFERENCES mrs_roles(role_id) DEFERRABLE;


--
-- Name: mrsperodead_address_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_person_role_det_addresses
    ADD CONSTRAINT mrsperodead_address_id_fk FOREIGN KEY (address_id) REFERENCES mrs_personaddresses(address_id) DEFERRABLE;


--
-- Name: mrsperodeph_phone_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_person_role_det_phones
    ADD CONSTRAINT mrsperodeph_phone_id_fk FOREIGN KEY (phone_id) REFERENCES mrs_personphones(phone_id) DEFERRABLE;


--
-- Name: mrsperph_ph_type_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_personphones
    ADD CONSTRAINT mrsperph_ph_type_id_fk FOREIGN KEY (phone_type_id) REFERENCES mrs_personphone_types(phone_type_id) DEFERRABLE;


--
-- Name: mrsperpho_personid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_person_phone_details
    ADD CONSTRAINT mrsperpho_personid_fk FOREIGN KEY (person_id) REFERENCES mrs_persons(person_id) DEFERRABLE;


--
-- Name: mrsppi_persid_fk_1; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_proj_co_investigator
    ADD CONSTRAINT mrsppi_persid_fk_1 FOREIGN KEY (person_id) REFERENCES mrs_persons(person_id) DEFERRABLE;


--
-- Name: mrsppi_projid_fk_1; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_proj_co_investigator
    ADD CONSTRAINT mrsppi_projid_fk_1 FOREIGN KEY (project_id) REFERENCES mrs_study_projects(project_id) DEFERRABLE;


--
-- Name: mrsprojddd_projid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_proj_data_dom_details
    ADD CONSTRAINT mrsprojddd_projid_fk FOREIGN KEY (project_id) REFERENCES mrs_study_projects(project_id) DEFERRABLE;


--
-- Name: mrsprojstdd_projid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_proj_study_details
    ADD CONSTRAINT mrsprojstdd_projid_fk FOREIGN KEY (project_id) REFERENCES mrs_study_projects(project_id) DEFERRABLE;


--
-- Name: mrsprojstdd_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_proj_study_details
    ADD CONSTRAINT mrsprojstdd_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrsproreq_proto_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_protocol_requirements
    ADD CONSTRAINT mrsproreq_proto_fk FOREIGN KEY (protocol_id) REFERENCES mrs_protocols(protocol_id) DEFERRABLE;


--
-- Name: mrsproto_protyp_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_protocols
    ADD CONSTRAINT mrsproto_protyp_fk FOREIGN KEY (protocol_type_id) REFERENCES mrs_protocol_types(protocol_type_id) DEFERRABLE;


--
-- Name: mrsproto_subtyp_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_protocols
    ADD CONSTRAINT mrsproto_subtyp_fk FOREIGN KEY (subject_type_id) REFERENCES mrs_subject_types(subject_type_id) DEFERRABLE;


--
-- Name: mrspurreq_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_purchase_requests
    ADD CONSTRAINT mrspurreq_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrsscases_billto_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_sessions
    ADD CONSTRAINT mrsscases_billto_studyid_fk FOREIGN KEY (billto_study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrsscases_consentedunde_st_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_sessions
    ADD CONSTRAINT mrsscases_consentedunde_st_fk FOREIGN KEY (consented_under_study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrsscases_scannerid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_sessions
    ADD CONSTRAINT mrsscases_scannerid_fk FOREIGN KEY (scanner_id) REFERENCES mrs_scanners(scanner_id) DEFERRABLE;


--
-- Name: mrsscases_scannerid_fk_1; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_sessions_stage
    ADD CONSTRAINT mrsscases_scannerid_fk_1 FOREIGN KEY (scanner_id) REFERENCES mrs_scanners(scanner_id) DEFERRABLE;


--
-- Name: mrsscases_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_sessions
    ADD CONSTRAINT mrsscases_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrsseries_modalityid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series
    ADD CONSTRAINT mrsseries_modalityid_fk FOREIGN KEY (modality_id) REFERENCES mrs_modalities(modality_id) DEFERRABLE;


--
-- Name: mrsseries_scanid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series
    ADD CONSTRAINT mrsseries_scanid_fk FOREIGN KEY (scan_id) REFERENCES mrs_scan_sessions(scan_id) DEFERRABLE;


--
-- Name: mrsseries_scanid_fk_1; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series_stage
    ADD CONSTRAINT mrsseries_scanid_fk_1 FOREIGN KEY (scan_id) REFERENCES mrs_scan_sessions_stage(scan_id) DEFERRABLE;


--
-- Name: mrsseries_studycodeid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series
    ADD CONSTRAINT mrsseries_studycodeid_fk FOREIGN KEY (study_code_id) REFERENCES mrs_study_codes(code_id) DEFERRABLE;


--
-- Name: mrsseries_studycodeid_fk_1; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_series_stage
    ADD CONSTRAINT mrsseries_studycodeid_fk_1 FOREIGN KEY (study_code_id) REFERENCES mrs_study_codes(code_id) DEFERRABLE;


--
-- Name: mrsserieslabels_modalityid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_series_labels
    ADD CONSTRAINT mrsserieslabels_modalityid_fk FOREIGN KEY (modality_id) REFERENCES mrs_modalities(modality_id);


--
-- Name: mrsserieslabels_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_series_labels
    ADD CONSTRAINT mrsserieslabels_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrssespropsprop_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_scan_sessions_ext_props
    ADD CONSTRAINT mrssespropsprop_fk FOREIGN KEY (prop_id) REFERENCES mrs_modality_properties(prop_id) DEFERRABLE;


--
-- Name: mrsshrrul_assessmentid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules
    ADD CONSTRAINT mrsshrrul_assessmentid_fk FOREIGN KEY (assessment_id) REFERENCES mrs_assessments(assessment_id) DEFERRABLE;


--
-- Name: mrsshrrul_dataentryid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules
    ADD CONSTRAINT mrsshrrul_dataentryid_fk FOREIGN KEY (dataentry_type_id) REFERENCES mrs_dataentry_types(dataentry_type_id) DEFERRABLE;


--
-- Name: mrsshrrul_instrumentid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules
    ADD CONSTRAINT mrsshrrul_instrumentid_fk FOREIGN KEY (instrument_id) REFERENCES mrs_instruments(instrument_id) DEFERRABLE;


--
-- Name: mrsshrrul_raterid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules
    ADD CONSTRAINT mrsshrrul_raterid_fk FOREIGN KEY (rater_id) REFERENCES mrs_person_alias(alias_id) DEFERRABLE;


--
-- Name: mrsshrrul_segint_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules
    ADD CONSTRAINT mrsshrrul_segint_fk FOREIGN KEY (study_id, segment_interval) REFERENCES mrs_study_intervals(study_id, segment_interval) ON UPDATE CASCADE DEFERRABLE;


--
-- Name: mrsshrrul_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules
    ADD CONSTRAINT mrsshrrul_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrsshrrulasmt_asmtid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_asmts
    ADD CONSTRAINT mrsshrrulasmt_asmtid_fk FOREIGN KEY (assessment_id) REFERENCES mrs_assessments(assessment_id) ON DELETE CASCADE DEFERRABLE;


--
-- Name: mrsshrrulasmt_exceptionid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_asmts
    ADD CONSTRAINT mrsshrrulasmt_exceptionid_fk FOREIGN KEY (sharing_rule_exception_id) REFERENCES mrs_sharing_rules_exceptions(sharing_rules_exception_id) ON DELETE CASCADE DEFERRABLE;


--
-- Name: mrsshrrulasmt_ruleid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_asmts
    ADD CONSTRAINT mrsshrrulasmt_ruleid_fk FOREIGN KEY (sharing_rule_id) REFERENCES mrs_sharing_rules(sharing_rule_id) ON DELETE CASCADE DEFERRABLE;


--
-- Name: mrsshrrulexc_aprvdby_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_exceptions
    ADD CONSTRAINT mrsshrrulexc_aprvdby_fk FOREIGN KEY (approved_by) REFERENCES mrs_persons(person_id) DEFERRABLE;


--
-- Name: mrsshrrulexc_assessmentid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_exceptions
    ADD CONSTRAINT mrsshrrulexc_assessmentid_fk FOREIGN KEY (assessment_id) REFERENCES mrs_assessments(assessment_id) DEFERRABLE;


--
-- Name: mrsshrrulexc_dataentryid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_exceptions
    ADD CONSTRAINT mrsshrrulexc_dataentryid_fk FOREIGN KEY (dataentry_type_id) REFERENCES mrs_dataentry_types(dataentry_type_id) DEFERRABLE;


--
-- Name: mrsshrrulexc_dltdby_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_exceptions
    ADD CONSTRAINT mrsshrrulexc_dltdby_fk FOREIGN KEY (deleted_by) REFERENCES mrs_persons(person_id) DEFERRABLE;


--
-- Name: mrsshrrulexc_instrumentid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_exceptions
    ADD CONSTRAINT mrsshrrulexc_instrumentid_fk FOREIGN KEY (instrument_id) REFERENCES mrs_instruments(instrument_id) DEFERRABLE;


--
-- Name: mrsshrrulexc_raterid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_exceptions
    ADD CONSTRAINT mrsshrrulexc_raterid_fk FOREIGN KEY (rater_id) REFERENCES mrs_person_alias(alias_id) DEFERRABLE;


--
-- Name: mrsshrrulexc_ruleid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_exceptions
    ADD CONSTRAINT mrsshrrulexc_ruleid_fk FOREIGN KEY (sharing_rule_id) REFERENCES mrs_sharing_rules(sharing_rule_id) DEFERRABLE;


--
-- Name: mrsshrrulstd_aprvdbyd_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_studies
    ADD CONSTRAINT mrsshrrulstd_aprvdbyd_fk FOREIGN KEY (donor_approved_by) REFERENCES mrs_persons(person_id) DEFERRABLE;


--
-- Name: mrsshrrulstd_aprvdbyr_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_studies
    ADD CONSTRAINT mrsshrrulstd_aprvdbyr_fk FOREIGN KEY (recipient_approved_by) REFERENCES mrs_persons(person_id) DEFERRABLE;


--
-- Name: mrsshrrulstd_dltdbyd_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_studies
    ADD CONSTRAINT mrsshrrulstd_dltdbyd_fk FOREIGN KEY (deleted_by) REFERENCES mrs_persons(person_id) DEFERRABLE;


--
-- Name: mrsshrrulstd_ruleid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_sharing_rules_studies
    ADD CONSTRAINT mrsshrrulstd_ruleid_fk FOREIGN KEY (sharing_rule_id) REFERENCES mrs_sharing_rules(sharing_rule_id) DEFERRABLE;


--
-- Name: mrsstdproj_pipid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_projects
    ADD CONSTRAINT mrsstdproj_pipid_fk FOREIGN KEY (pr_inv_person_id) REFERENCES mrs_persons(person_id) DEFERRABLE;


--
-- Name: mrsstdproj_ppid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_projects
    ADD CONSTRAINT mrsstdproj_ppid_fk FOREIGN KEY (parent_project_id) REFERENCES mrs_study_projects(project_id) DEFERRABLE;


--
-- Name: mrsstscra_scannerid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_scanner_rates
    ADD CONSTRAINT mrsstscra_scannerid_fk FOREIGN KEY (scanner_id) REFERENCES mrs_scanners(scanner_id) DEFERRABLE;


--
-- Name: mrsstscra_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_scanner_rates
    ADD CONSTRAINT mrsstscra_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrsstucod_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_study_codes
    ADD CONSTRAINT mrsstucod_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrsstudies_defaultradiologist_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_studies
    ADD CONSTRAINT mrsstudies_defaultradiologist_fk FOREIGN KEY (default_radiologist) REFERENCES mrs_persons(person_id);


--
-- Name: mrsstudies_parentstudyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_studies
    ADD CONSTRAINT mrsstudies_parentstudyid_fk FOREIGN KEY (parent_study_id) REFERENCES mrs_studies(study_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: mrssturesa_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_studies_research_areas
    ADD CONSTRAINT mrssturesa_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrsstustat_statusid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_studies
    ADD CONSTRAINT mrsstustat_statusid_fk FOREIGN KEY (status_id) REFERENCES mrs_study_status(status_id) DEFERRABLE;


--
-- Name: mrsstutas_study_id_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_eeg_study_tasks
    ADD CONSTRAINT mrsstutas_study_id_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrssubjasmtsqueueinst_aqueueid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_assessments_queue_instruments
    ADD CONSTRAINT mrssubjasmtsqueueinst_aqueueid_fk FOREIGN KEY (aqueue_id) REFERENCES mrs_subject_assessments_queue(aqueue_id) DEFERRABLE;


--
-- Name: mrssubpho_usid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subject_phone_details
    ADD CONSTRAINT mrssubpho_usid_fk FOREIGN KEY (usid) REFERENCES mrs_subjects(usid) DEFERRABLE;


--
-- Name: mrssubrac_raccatid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subjects_racial_categories
    ADD CONSTRAINT mrssubrac_raccatid_fk FOREIGN KEY (racial_category_id) REFERENCES mrs_racial_categories(racial_category_id) DEFERRABLE;


--
-- Name: mrssubrac_usid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subjects_racial_categories
    ADD CONSTRAINT mrssubrac_usid_fk FOREIGN KEY (usid) REFERENCES mrs_subjects(usid);


--
-- Name: mrssubtyp_studyid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subject_types
    ADD CONSTRAINT mrssubtyp_studyid_fk FOREIGN KEY (study_id) REFERENCES mrs_studies(study_id) DEFERRABLE;


--
-- Name: mrssuexde_usid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: ni_developers
--

ALTER TABLE ONLY mrs_subject_tag_details
    ADD CONSTRAINT mrssuexde_usid_fk FOREIGN KEY (usid) REFERENCES mrs_subjects(usid) DEFERRABLE;


--
-- Name: mrssutyde_subjecttypeid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subject_type_details
    ADD CONSTRAINT mrssutyde_subjecttypeid_fk FOREIGN KEY (subject_type_id) REFERENCES mrs_subject_types(subject_type_id) DEFERRABLE;


--
-- Name: mrssutyde_usid_fk; Type: FK CONSTRAINT; Schema: mrsdba; Owner: postgres
--

ALTER TABLE ONLY mrs_subject_type_details
    ADD CONSTRAINT mrssutyde_usid_fk FOREIGN KEY (usid) REFERENCES mrs_subjects(usid);


SET search_path = mydba, pg_catalog;

--
-- Name: weekly_updates_owner_fkey; Type: FK CONSTRAINT; Schema: mydba; Owner: niternal
--

ALTER TABLE ONLY weekly_updates
    ADD CONSTRAINT weekly_updates_owner_fkey FOREIGN KEY (owner) REFERENCES casdba.cas_users(username);


--
-- Name: casdba; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA casdba FROM PUBLIC;
REVOKE ALL ON SCHEMA casdba FROM postgres;
GRANT ALL ON SCHEMA casdba TO postgres;
GRANT USAGE ON SCHEMA casdba TO cas_app;
GRANT USAGE ON SCHEMA casdba TO micis_app;
GRANT USAGE ON SCHEMA casdba TO portal_app;
GRANT USAGE ON SCHEMA casdba TO niternal;
GRANT USAGE ON SCHEMA casdba TO batch_app;
GRANT USAGE ON SCHEMA casdba TO transfer_app;
GRANT USAGE ON SCHEMA casdba TO login_app;
GRANT USAGE ON SCHEMA casdba TO coinspr_app;
GRANT USAGE ON SCHEMA casdba TO node_api;


--
-- Name: dtdba; Type: ACL; Schema: -; Owner: ni_developers
--

REVOKE ALL ON SCHEMA dtdba FROM PUBLIC;
REVOKE ALL ON SCHEMA dtdba FROM ni_developers;
GRANT ALL ON SCHEMA dtdba TO ni_developers;
GRANT USAGE ON SCHEMA dtdba TO micis_app;
GRANT USAGE ON SCHEMA dtdba TO p2_app;
GRANT USAGE ON SCHEMA dtdba TO portal_app;


--
-- Name: dxdba; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA dxdba FROM PUBLIC;
REVOKE ALL ON SCHEMA dxdba FROM postgres;
GRANT ALL ON SCHEMA dxdba TO postgres;
GRANT USAGE ON SCHEMA dxdba TO micis_app;
GRANT USAGE ON SCHEMA dxdba TO portal_app;
GRANT USAGE ON SCHEMA dxdba TO batch_app;
GRANT USAGE ON SCHEMA dxdba TO coinspr_app;
GRANT USAGE ON SCHEMA dxdba TO node_api;


--
-- Name: mrsdba; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA mrsdba FROM PUBLIC;
REVOKE ALL ON SCHEMA mrsdba FROM postgres;
GRANT ALL ON SCHEMA mrsdba TO postgres;
GRANT ALL ON SCHEMA mrsdba TO p2_app;
GRANT ALL ON SCHEMA mrsdba TO login_app;
GRANT USAGE ON SCHEMA mrsdba TO micis_app;
GRANT USAGE ON SCHEMA mrsdba TO cas_app;
GRANT USAGE ON SCHEMA mrsdba TO portal_app;
GRANT USAGE ON SCHEMA mrsdba TO transfer_app;
GRANT USAGE ON SCHEMA mrsdba TO batch_app;
GRANT USAGE ON SCHEMA mrsdba TO coinspr_app;
GRANT USAGE ON SCHEMA mrsdba TO node_api;


--
-- Name: mydba; Type: ACL; Schema: -; Owner: niternal
--

REVOKE ALL ON SCHEMA mydba FROM PUBLIC;
REVOKE ALL ON SCHEMA mydba FROM niternal;
GRANT ALL ON SCHEMA mydba TO niternal;


--
-- Name: nifdba; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA nifdba FROM PUBLIC;
REVOKE ALL ON SCHEMA nifdba FROM postgres;
GRANT ALL ON SCHEMA nifdba TO postgres;
GRANT USAGE ON SCHEMA nifdba TO nif_user;


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO cas_app;
GRANT USAGE ON SCHEMA public TO micis_app;
GRANT USAGE ON SCHEMA public TO portal_app;
GRANT USAGE ON SCHEMA public TO transfer_app;


SET search_path = casdba, pg_catalog;

--
-- Name: CAS_REVOKE_STUDY_ROLE_F(character varying, numeric, character varying, numeric); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION "CAS_REVOKE_STUDY_ROLE_F"(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION "CAS_REVOKE_STUDY_ROLE_F"(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) FROM postgres;
GRANT ALL ON FUNCTION "CAS_REVOKE_STUDY_ROLE_F"(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) TO postgres;
GRANT ALL ON FUNCTION "CAS_REVOKE_STUDY_ROLE_F"(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) TO cas_app;


--
-- Name: cas_activate_user_f(character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_activate_user_f(p_dbtrans_username_pt character varying, p_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_activate_user_f(p_dbtrans_username_pt character varying, p_username character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_activate_user_f(p_dbtrans_username_pt character varying, p_username character varying) TO postgres;
GRANT ALL ON FUNCTION cas_activate_user_f(p_dbtrans_username_pt character varying, p_username character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_activate_user_f(p_dbtrans_username_pt character varying, p_username character varying) TO micis_app;


--
-- Name: cas_add_app_f(character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_add_app_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_add_app_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_add_app_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) TO postgres;
GRANT ALL ON FUNCTION cas_add_app_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_add_app_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) TO portal_app;
GRANT ALL ON FUNCTION cas_add_app_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) TO micis_app;


--
-- Name: cas_add_ip_location_f(character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying); Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION cas_add_ip_location_f(p_ip_addr character varying, p_country_code character varying, p_country character varying, p_region_code character varying, p_region character varying, p_city character varying, p_latitude numeric, p_longitude numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_add_ip_location_f(p_ip_addr character varying, p_country_code character varying, p_country character varying, p_region_code character varying, p_region character varying, p_city character varying, p_latitude numeric, p_longitude numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION cas_add_ip_location_f(p_ip_addr character varying, p_country_code character varying, p_country character varying, p_region_code character varying, p_region character varying, p_city character varying, p_latitude numeric, p_longitude numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION cas_add_ip_location_f(p_ip_addr character varying, p_country_code character varying, p_country character varying, p_region_code character varying, p_region character varying, p_city character varying, p_latitude numeric, p_longitude numeric, p_mod_user character varying) TO coinspr_app;


--
-- Name: cas_add_login_records_f(character varying, timestamp without time zone, character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_add_login_records_f(username_f character varying, login_time_f timestamp without time zone, ip_addr_f character varying, error_code_f character varying, success_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_add_login_records_f(username_f character varying, login_time_f timestamp without time zone, ip_addr_f character varying, error_code_f character varying, success_f character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_add_login_records_f(username_f character varying, login_time_f timestamp without time zone, ip_addr_f character varying, error_code_f character varying, success_f character varying) TO postgres;
GRANT ALL ON FUNCTION cas_add_login_records_f(username_f character varying, login_time_f timestamp without time zone, ip_addr_f character varying, error_code_f character varying, success_f character varying) TO login_app;
GRANT ALL ON FUNCTION cas_add_login_records_f(username_f character varying, login_time_f timestamp without time zone, ip_addr_f character varying, error_code_f character varying, success_f character varying) TO cas_app;


--
-- Name: cas_add_portal_info_f(numeric, numeric); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_add_portal_info_f(app_id_f numeric, study_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_add_portal_info_f(app_id_f numeric, study_id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION cas_add_portal_info_f(app_id_f numeric, study_id_f numeric) TO postgres;
GRANT ALL ON FUNCTION cas_add_portal_info_f(app_id_f numeric, study_id_f numeric) TO cas_app;
GRANT ALL ON FUNCTION cas_add_portal_info_f(app_id_f numeric, study_id_f numeric) TO portal_app;
GRANT ALL ON FUNCTION cas_add_portal_info_f(app_id_f numeric, study_id_f numeric) TO micis_app;


--
-- Name: cas_add_role_f(character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_add_role_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_add_role_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_add_role_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) TO postgres;
GRANT ALL ON FUNCTION cas_add_role_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_add_role_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) TO micis_app;


--
-- Name: cas_add_site_f(character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) FROM ni_developers;
GRANT ALL ON FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) TO ni_developers;
GRANT ALL ON FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) TO PUBLIC;
GRANT ALL ON FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_label character varying, p_description character varying) TO micis_app;


--
-- Name: cas_add_site_f(character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) FROM ni_developers;
GRANT ALL ON FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) TO ni_developers;
GRANT ALL ON FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_add_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) TO micis_app;


--
-- Name: cas_add_user_f(character varying, character varying, character varying, character varying, timestamp without time zone, timestamp without time zone, character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_add_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_password_hash character varying, p_label character varying, p_acct_exp_date timestamp without time zone, p_pwd_exp_date timestamp without time zone, p_site_id character varying, p_is_site_admin character varying, p_email character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_add_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_password_hash character varying, p_label character varying, p_acct_exp_date timestamp without time zone, p_pwd_exp_date timestamp without time zone, p_site_id character varying, p_is_site_admin character varying, p_email character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_add_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_password_hash character varying, p_label character varying, p_acct_exp_date timestamp without time zone, p_pwd_exp_date timestamp without time zone, p_site_id character varying, p_is_site_admin character varying, p_email character varying) TO postgres;
GRANT ALL ON FUNCTION cas_add_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_password_hash character varying, p_label character varying, p_acct_exp_date timestamp without time zone, p_pwd_exp_date timestamp without time zone, p_site_id character varying, p_is_site_admin character varying, p_email character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_add_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_password_hash character varying, p_label character varying, p_acct_exp_date timestamp without time zone, p_pwd_exp_date timestamp without time zone, p_site_id character varying, p_is_site_admin character varying, p_email character varying) TO login_app;
GRANT ALL ON FUNCTION cas_add_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_password_hash character varying, p_label character varying, p_acct_exp_date timestamp without time zone, p_pwd_exp_date timestamp without time zone, p_site_id character varying, p_is_site_admin character varying, p_email character varying) TO micis_app;


--
-- Name: cas_add_user_field_f(character varying, character varying, boolean, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_add_user_field_f(p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_add_user_field_f(p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_add_user_field_f(p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION cas_add_user_field_f(p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) TO login_app;
GRANT ALL ON FUNCTION cas_add_user_field_f(p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_add_user_field_f(p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) TO micis_app;


--
-- Name: cas_add_user_field_value_f(numeric, character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_add_user_field_value_f(p_user_field_id numeric, p_username character varying, p_value character varying, dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_add_user_field_value_f(p_user_field_id numeric, p_username character varying, p_value character varying, dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_add_user_field_value_f(p_user_field_id numeric, p_username character varying, p_value character varying, dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION cas_add_user_field_value_f(p_user_field_id numeric, p_username character varying, p_value character varying, dbtrans_username_pt character varying) TO login_app;
GRANT ALL ON FUNCTION cas_add_user_field_value_f(p_user_field_id numeric, p_username character varying, p_value character varying, dbtrans_username_pt character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_add_user_field_value_f(p_user_field_id numeric, p_username character varying, p_value character varying, dbtrans_username_pt character varying) TO micis_app;


--
-- Name: cas_auth_user_f(character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_auth_user_f(p_username character varying, p_password character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_auth_user_f(p_username character varying, p_password character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_auth_user_f(p_username character varying, p_password character varying) TO postgres;
GRANT ALL ON FUNCTION cas_auth_user_f(p_username character varying, p_password character varying) TO login_app;
GRANT ALL ON FUNCTION cas_auth_user_f(p_username character varying, p_password character varying) TO cas_app;


--
-- Name: cas_copy_user_privs_f(character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_copy_user_privs_f(p_from character varying, p_to character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_copy_user_privs_f(p_from character varying, p_to character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_copy_user_privs_f(p_from character varying, p_to character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION cas_copy_user_privs_f(p_from character varying, p_to character varying, p_dbtrans_username_pt character varying) TO cas_app;


--
-- Name: cas_deactivate_user_f(character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_deactivate_user_f(p_dbtrans_username_pt character varying, p_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_deactivate_user_f(p_dbtrans_username_pt character varying, p_username character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_deactivate_user_f(p_dbtrans_username_pt character varying, p_username character varying) TO postgres;
GRANT ALL ON FUNCTION cas_deactivate_user_f(p_dbtrans_username_pt character varying, p_username character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_deactivate_user_f(p_dbtrans_username_pt character varying, p_username character varying) TO micis_app;


--
-- Name: cas_get_siteid_f(character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_get_siteid_f(p_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_get_siteid_f(p_username character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_get_siteid_f(p_username character varying) TO postgres;
GRANT ALL ON FUNCTION cas_get_siteid_f(p_username character varying) TO cas_app;


--
-- Name: cas_grant_app_role_f(character varying, numeric, character varying, numeric); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_grant_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_grant_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) FROM postgres;
GRANT ALL ON FUNCTION cas_grant_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) TO postgres;
GRANT ALL ON FUNCTION cas_grant_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) TO cas_app;
GRANT ALL ON FUNCTION cas_grant_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) TO portal_app;
GRANT ALL ON FUNCTION cas_grant_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) TO micis_app;


--
-- Name: cas_grant_study_role_f(character varying, numeric, character varying, numeric); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_grant_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_grant_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) FROM postgres;
GRANT ALL ON FUNCTION cas_grant_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) TO postgres;
GRANT ALL ON FUNCTION cas_grant_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) TO cas_app;
GRANT ALL ON FUNCTION cas_grant_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) TO micis_app;


--
-- Name: cas_olin_replicate_raters_f(); Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION cas_olin_replicate_raters_f() FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_olin_replicate_raters_f() FROM ni_developers;
GRANT ALL ON FUNCTION cas_olin_replicate_raters_f() TO ni_developers;
GRANT ALL ON FUNCTION cas_olin_replicate_raters_f() TO cas_app;
GRANT ALL ON FUNCTION cas_olin_replicate_raters_f() TO micis_app;


--
-- Name: cas_olin_study_privs_f(); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_olin_study_privs_f() FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_olin_study_privs_f() FROM postgres;
GRANT ALL ON FUNCTION cas_olin_study_privs_f() TO postgres;
GRANT ALL ON FUNCTION cas_olin_study_privs_f() TO cas_app;


--
-- Name: cas_reset_acct_exp_date_f(character varying, character varying, timestamp with time zone); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_reset_acct_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_acct_exp_date timestamp with time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_reset_acct_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_acct_exp_date timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION cas_reset_acct_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_acct_exp_date timestamp with time zone) TO postgres;
GRANT ALL ON FUNCTION cas_reset_acct_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_acct_exp_date timestamp with time zone) TO cas_app;
GRANT ALL ON FUNCTION cas_reset_acct_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_acct_exp_date timestamp with time zone) TO micis_app;


--
-- Name: cas_reset_password_f(character varying, character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION cas_reset_password_f(p_username character varying, p_password_hash character varying, p_password_reset_key character varying, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_reset_password_f(p_username character varying, p_password_hash character varying, p_password_reset_key character varying, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION cas_reset_password_f(p_username character varying, p_password_hash character varying, p_password_reset_key character varying, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION cas_reset_password_f(p_username character varying, p_password_hash character varying, p_password_reset_key character varying, p_user_entered character varying) TO login_app;


--
-- Name: cas_reset_pwd_exp_date_f(character varying, character varying, timestamp without time zone); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_reset_pwd_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_pwd_exp_date timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_reset_pwd_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_pwd_exp_date timestamp without time zone) FROM postgres;
GRANT ALL ON FUNCTION cas_reset_pwd_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_pwd_exp_date timestamp without time zone) TO postgres;
GRANT ALL ON FUNCTION cas_reset_pwd_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_pwd_exp_date timestamp without time zone) TO cas_app;
GRANT ALL ON FUNCTION cas_reset_pwd_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_pwd_exp_date timestamp without time zone) TO micis_app;
GRANT ALL ON FUNCTION cas_reset_pwd_exp_date_f(p_dbtrans_username_pt character varying, p_username character varying, p_pwd_exp_date timestamp without time zone) TO login_app;


--
-- Name: cas_revoke_app_role_f(character varying, numeric, character varying, numeric); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_revoke_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_revoke_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) FROM postgres;
GRANT ALL ON FUNCTION cas_revoke_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) TO postgres;
GRANT ALL ON FUNCTION cas_revoke_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) TO cas_app;
GRANT ALL ON FUNCTION cas_revoke_app_role_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_username character varying, p_role_id numeric) TO micis_app;


--
-- Name: cas_revoke_study_role_f(character varying, numeric, character varying, numeric); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_revoke_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_revoke_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) FROM postgres;
GRANT ALL ON FUNCTION cas_revoke_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) TO postgres;
GRANT ALL ON FUNCTION cas_revoke_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) TO cas_app;
GRANT ALL ON FUNCTION cas_revoke_study_role_f(p_dbtrans_username_pt character varying, p_study_id numeric, p_username character varying, p_role_id numeric) TO micis_app;


--
-- Name: cas_set_password_hash_f(character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION cas_set_password_hash_f(p_username character varying, p_password_hash character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_set_password_hash_f(p_username character varying, p_password_hash character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION cas_set_password_hash_f(p_username character varying, p_password_hash character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION cas_set_password_hash_f(p_username character varying, p_password_hash character varying, p_mod_user character varying) TO login_app;
GRANT ALL ON FUNCTION cas_set_password_hash_f(p_username character varying, p_password_hash character varying, p_mod_user character varying) TO micis_app;


--
-- Name: cas_set_password_reset_key_f(character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION cas_set_password_reset_key_f(p_username character varying, p_password_reset_key character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_set_password_reset_key_f(p_username character varying, p_password_reset_key character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION cas_set_password_reset_key_f(p_username character varying, p_password_reset_key character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION cas_set_password_reset_key_f(p_username character varying, p_password_reset_key character varying, p_mod_user character varying) TO login_app;


--
-- Name: cas_update_app_f(character varying, numeric, character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_update_app_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_label character varying, p_description character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_update_app_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_label character varying, p_description character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_update_app_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_label character varying, p_description character varying) TO postgres;
GRANT ALL ON FUNCTION cas_update_app_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_label character varying, p_description character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_update_app_f(p_dbtrans_username_pt character varying, p_app_id numeric, p_label character varying, p_description character varying) TO micis_app;


--
-- Name: cas_update_coins_metrics_table_f(); Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION cas_update_coins_metrics_table_f() FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_update_coins_metrics_table_f() FROM ni_developers;
GRANT ALL ON FUNCTION cas_update_coins_metrics_table_f() TO ni_developers;


--
-- Name: cas_update_role_f(character varying, numeric, character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_update_role_f(p_dbtrans_username_pt character varying, p_role_id numeric, p_label character varying, p_description character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_update_role_f(p_dbtrans_username_pt character varying, p_role_id numeric, p_label character varying, p_description character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_update_role_f(p_dbtrans_username_pt character varying, p_role_id numeric, p_label character varying, p_description character varying) TO postgres;
GRANT ALL ON FUNCTION cas_update_role_f(p_dbtrans_username_pt character varying, p_role_id numeric, p_label character varying, p_description character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_update_role_f(p_dbtrans_username_pt character varying, p_role_id numeric, p_label character varying, p_description character varying) TO micis_app;


--
-- Name: cas_update_site_config_f(character varying, boolean, boolean, character varying, character varying, character varying, character varying, character varying, character varying, character varying, boolean, text, text, character varying, boolean, boolean, boolean, boolean, boolean, boolean, character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION cas_update_site_config_f(p_site_id character varying, p_enable_radiology_reviews boolean, p_enable_billing boolean, p_default_area_code character varying, p_default_city character varying, p_default_state character varying, p_imaging_storage_mount_point character varying, p_imaging_lost_and_found_directory character varying, p_directory_name_convention character varying, p_administrator_contact character varying, p_send_expiration_emails boolean, p_expiration_email_message text, p_new_user_welcome_msg text, p_expiration_summary_recipients character varying, p_send_inst_notifications boolean, p_enable_pi_unlock_inst boolean, p_share_miss_asmt_reason boolean, p_enable_study_change_reason boolean, p_enable_auto_backfill boolean, p_enable_subject_autocomplete boolean, p_site_logo character varying, p_site_css_url character varying, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_update_site_config_f(p_site_id character varying, p_enable_radiology_reviews boolean, p_enable_billing boolean, p_default_area_code character varying, p_default_city character varying, p_default_state character varying, p_imaging_storage_mount_point character varying, p_imaging_lost_and_found_directory character varying, p_directory_name_convention character varying, p_administrator_contact character varying, p_send_expiration_emails boolean, p_expiration_email_message text, p_new_user_welcome_msg text, p_expiration_summary_recipients character varying, p_send_inst_notifications boolean, p_enable_pi_unlock_inst boolean, p_share_miss_asmt_reason boolean, p_enable_study_change_reason boolean, p_enable_auto_backfill boolean, p_enable_subject_autocomplete boolean, p_site_logo character varying, p_site_css_url character varying, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION cas_update_site_config_f(p_site_id character varying, p_enable_radiology_reviews boolean, p_enable_billing boolean, p_default_area_code character varying, p_default_city character varying, p_default_state character varying, p_imaging_storage_mount_point character varying, p_imaging_lost_and_found_directory character varying, p_directory_name_convention character varying, p_administrator_contact character varying, p_send_expiration_emails boolean, p_expiration_email_message text, p_new_user_welcome_msg text, p_expiration_summary_recipients character varying, p_send_inst_notifications boolean, p_enable_pi_unlock_inst boolean, p_share_miss_asmt_reason boolean, p_enable_study_change_reason boolean, p_enable_auto_backfill boolean, p_enable_subject_autocomplete boolean, p_site_logo character varying, p_site_css_url character varying, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION cas_update_site_config_f(p_site_id character varying, p_enable_radiology_reviews boolean, p_enable_billing boolean, p_default_area_code character varying, p_default_city character varying, p_default_state character varying, p_imaging_storage_mount_point character varying, p_imaging_lost_and_found_directory character varying, p_directory_name_convention character varying, p_administrator_contact character varying, p_send_expiration_emails boolean, p_expiration_email_message text, p_new_user_welcome_msg text, p_expiration_summary_recipients character varying, p_send_inst_notifications boolean, p_enable_pi_unlock_inst boolean, p_share_miss_asmt_reason boolean, p_enable_study_change_reason boolean, p_enable_auto_backfill boolean, p_enable_subject_autocomplete boolean, p_site_logo character varying, p_site_css_url character varying, p_dbtrans_username character varying) TO PUBLIC;
GRANT ALL ON FUNCTION cas_update_site_config_f(p_site_id character varying, p_enable_radiology_reviews boolean, p_enable_billing boolean, p_default_area_code character varying, p_default_city character varying, p_default_state character varying, p_imaging_storage_mount_point character varying, p_imaging_lost_and_found_directory character varying, p_directory_name_convention character varying, p_administrator_contact character varying, p_send_expiration_emails boolean, p_expiration_email_message text, p_new_user_welcome_msg text, p_expiration_summary_recipients character varying, p_send_inst_notifications boolean, p_enable_pi_unlock_inst boolean, p_share_miss_asmt_reason boolean, p_enable_study_change_reason boolean, p_enable_auto_backfill boolean, p_enable_subject_autocomplete boolean, p_site_logo character varying, p_site_css_url character varying, p_dbtrans_username character varying) TO micis_app;


--
-- Name: cas_update_site_f(character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_update_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_update_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_update_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) TO postgres;
GRANT ALL ON FUNCTION cas_update_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_update_site_f(p_dbtrans_username_pt character varying, p_site_id character varying, p_label character varying, p_description character varying, p_ursi_prefix character varying) TO micis_app;


--
-- Name: cas_update_user_email_f(character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_update_user_email_f(username_f character varying, email_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_update_user_email_f(username_f character varying, email_f character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_update_user_email_f(username_f character varying, email_f character varying) TO postgres;
GRANT ALL ON FUNCTION cas_update_user_email_f(username_f character varying, email_f character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_update_user_email_f(username_f character varying, email_f character varying) TO login_app;
GRANT ALL ON FUNCTION cas_update_user_email_f(username_f character varying, email_f character varying) TO micis_app;


--
-- Name: cas_update_user_f(character varying, character varying, character varying, character varying, character varying, character varying, boolean); Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION cas_update_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_label character varying, p_site_id character varying, p_is_site_admin character varying, p_email character varying, p_email_unsubscribed boolean) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_update_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_label character varying, p_site_id character varying, p_is_site_admin character varying, p_email character varying, p_email_unsubscribed boolean) FROM ni_developers;
GRANT ALL ON FUNCTION cas_update_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_label character varying, p_site_id character varying, p_is_site_admin character varying, p_email character varying, p_email_unsubscribed boolean) TO ni_developers;
GRANT ALL ON FUNCTION cas_update_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_label character varying, p_site_id character varying, p_is_site_admin character varying, p_email character varying, p_email_unsubscribed boolean) TO cas_app;
GRANT ALL ON FUNCTION cas_update_user_f(p_dbtrans_username_pt character varying, p_username character varying, p_label character varying, p_site_id character varying, p_is_site_admin character varying, p_email character varying, p_email_unsubscribed boolean) TO micis_app;


--
-- Name: cas_update_user_field_f(numeric, character varying, character varying, boolean, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_update_user_field_f(p_user_field_id numeric, p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_update_user_field_f(p_user_field_id numeric, p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_update_user_field_f(p_user_field_id numeric, p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION cas_update_user_field_f(p_user_field_id numeric, p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_update_user_field_f(p_user_field_id numeric, p_site_id character varying, p_label character varying, p_is_expiration_date boolean, dbtrans_username_pt character varying) TO micis_app;


--
-- Name: cas_update_user_field_value_f(numeric, character varying, character varying); Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON FUNCTION cas_update_user_field_value_f(p_user_field_value_id numeric, p_value character varying, dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cas_update_user_field_value_f(p_user_field_value_id numeric, p_value character varying, dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION cas_update_user_field_value_f(p_user_field_value_id numeric, p_value character varying, dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION cas_update_user_field_value_f(p_user_field_value_id numeric, p_value character varying, dbtrans_username_pt character varying) TO cas_app;
GRANT ALL ON FUNCTION cas_update_user_field_value_f(p_user_field_value_id numeric, p_value character varying, dbtrans_username_pt character varying) TO micis_app;


SET search_path = dxdba, pg_catalog;

--
-- Name: dx_add_capsule_processing_temp_f(character varying, character varying, numeric, numeric, numeric); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_capsule_processing_temp_f(p_file_path character varying, p_session_order character varying, p_source_id numeric, p_file_id numeric, p_series_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_capsule_processing_temp_f(p_file_path character varying, p_session_order character varying, p_source_id numeric, p_file_id numeric, p_series_id numeric) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_capsule_processing_temp_f(p_file_path character varying, p_session_order character varying, p_source_id numeric, p_file_id numeric, p_series_id numeric) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_capsule_processing_temp_f(p_file_path character varying, p_session_order character varying, p_source_id numeric, p_file_id numeric, p_series_id numeric) TO micis_app;


--
-- Name: dx_add_data_capsule_downloads_f(numeric, character varying, timestamp without time zone, timestamp without time zone); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_capsule_downloads_f(file_id_f numeric, user_name_f character varying, start_time_f timestamp without time zone, expected_finish_time_f timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_capsule_downloads_f(file_id_f numeric, user_name_f character varying, start_time_f timestamp without time zone, expected_finish_time_f timestamp without time zone) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_downloads_f(file_id_f numeric, user_name_f character varying, start_time_f timestamp without time zone, expected_finish_time_f timestamp without time zone) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_downloads_f(file_id_f numeric, user_name_f character varying, start_time_f timestamp without time zone, expected_finish_time_f timestamp without time zone) TO micis_app;


--
-- Name: dx_add_data_capsule_f(numeric, character varying, timestamp without time zone); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_capsule_f(p_source_id numeric, p_path character varying, p_created_time timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_capsule_f(p_source_id numeric, p_path character varying, p_created_time timestamp without time zone) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_f(p_source_id numeric, p_path character varying, p_created_time timestamp without time zone) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_f(p_source_id numeric, p_path character varying, p_created_time timestamp without time zone) TO micis_app;


--
-- Name: dx_add_data_capsule_file_f(numeric, character varying, numeric, timestamp without time zone, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_capsule_file_f(p_data_capsule_id numeric, p_file_name_f character varying, p_file_size_mb numeric, p_created_time timestamp without time zone, p_random_code character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_capsule_file_f(p_data_capsule_id numeric, p_file_name_f character varying, p_file_size_mb numeric, p_created_time timestamp without time zone, p_random_code character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_file_f(p_data_capsule_id numeric, p_file_name_f character varying, p_file_size_mb numeric, p_created_time timestamp without time zone, p_random_code character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_file_f(p_data_capsule_id numeric, p_file_name_f character varying, p_file_size_mb numeric, p_created_time timestamp without time zone, p_random_code character varying) TO micis_app;


--
-- Name: dx_add_data_capsule_link_f(numeric, numeric, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_capsule_link_f(p_source_id numeric, p_data_capsule_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_capsule_link_f(p_source_id numeric, p_data_capsule_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_link_f(p_source_id numeric, p_data_capsule_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_link_f(p_source_id numeric, p_data_capsule_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: dx_add_data_capsule_modification_f(text, character varying, text, numeric, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_capsule_modification_f(p_affected_ids text, p_action_type character varying, p_message text, p_modality_id numeric, p_transaction_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_capsule_modification_f(p_affected_ids text, p_action_type character varying, p_message text, p_modality_id numeric, p_transaction_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_modification_f(p_affected_ids text, p_action_type character varying, p_message text, p_modality_id numeric, p_transaction_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_modification_f(p_affected_ids text, p_action_type character varying, p_message text, p_modality_id numeric, p_transaction_username character varying) TO micis_app;


--
-- Name: dx_add_data_capsule_request_to_queue_f(numeric, timestamp without time zone); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_capsule_request_to_queue_f(source_id_f numeric, data_capsule_request_time_f timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_capsule_request_to_queue_f(source_id_f numeric, data_capsule_request_time_f timestamp without time zone) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_request_to_queue_f(source_id_f numeric, data_capsule_request_time_f timestamp without time zone) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_capsule_request_to_queue_f(source_id_f numeric, data_capsule_request_time_f timestamp without time zone) TO micis_app;


--
-- Name: dx_add_data_request_f(text, numeric, text, numeric); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_request_f(p_username text, p_delivery_venue numeric, p_label text, p_cloned_from_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_request_f(p_username text, p_delivery_venue numeric, p_label text, p_cloned_from_id numeric) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_request_f(p_username text, p_delivery_venue numeric, p_label text, p_cloned_from_id numeric) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_request_f(p_username text, p_delivery_venue numeric, p_label text, p_cloned_from_id numeric) TO micis_app;


--
-- Name: dx_add_data_request_source_components_f(numeric, numeric, character varying, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_request_source_components_f(p_source_id numeric, p_modality_id numeric, p_anonymization_id character varying, p_id_column_value character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_request_source_components_f(p_source_id numeric, p_modality_id numeric, p_anonymization_id character varying, p_id_column_value character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_request_source_components_f(p_source_id numeric, p_modality_id numeric, p_anonymization_id character varying, p_id_column_value character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_request_source_components_f(p_source_id numeric, p_modality_id numeric, p_anonymization_id character varying, p_id_column_value character varying, p_mod_user character varying) TO micis_app;


--
-- Name: dx_add_data_request_source_f(numeric, numeric, text); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_request_source_f(p_data_request_id numeric, p_study_id numeric, p_dbtrans_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_request_source_f(p_data_request_id numeric, p_study_id numeric, p_dbtrans_username text) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_request_source_f(p_data_request_id numeric, p_study_id numeric, p_dbtrans_username text) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_request_source_f(p_data_request_id numeric, p_study_id numeric, p_dbtrans_username text) TO micis_app;


--
-- Name: dx_add_data_request_template_filter_f(integer, numeric, text, text, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_request_template_filter_f(p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_request_template_filter_f(p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_request_template_filter_f(p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_request_template_filter_f(p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) TO micis_app;


--
-- Name: dx_add_data_request_template_group_f(numeric, integer, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_request_template_group_f(p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_request_template_group_f(p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_request_template_group_f(p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_request_template_group_f(p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) TO micis_app;


--
-- Name: dx_add_data_source_capsule_link_f(numeric, numeric); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_data_source_capsule_link_f(source_id_f numeric, data_capsule_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_data_source_capsule_link_f(source_id_f numeric, data_capsule_id_f numeric) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_data_source_capsule_link_f(source_id_f numeric, data_capsule_id_f numeric) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_data_source_capsule_link_f(source_id_f numeric, data_capsule_id_f numeric) TO micis_app;


--
-- Name: dx_add_msg_f(numeric, text, text, boolean); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_msg_f(p_source_id numeric, p_username text, p_content text, p_send_email boolean) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_msg_f(p_source_id numeric, p_username text, p_content text, p_send_email boolean) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_msg_f(p_source_id numeric, p_username text, p_content text, p_send_email boolean) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_msg_f(p_source_id numeric, p_username text, p_content text, p_send_email boolean) TO micis_app;


--
-- Name: dx_add_or_update_series_anonymized_file_path_f(numeric, character varying, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_or_update_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_or_update_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_or_update_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_or_update_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) TO micis_app;


--
-- Name: dx_add_preapproval_f(numeric, text, text, text); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_preapproval_f(p_study_id numeric, p_message text, p_approved_user text, p_db_transaction_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_preapproval_f(p_study_id numeric, p_message text, p_approved_user text, p_db_transaction_username text) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_preapproval_f(p_study_id numeric, p_message text, p_approved_user text, p_db_transaction_username text) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_preapproval_f(p_study_id numeric, p_message text, p_approved_user text, p_db_transaction_username text) TO micis_app;


--
-- Name: dx_add_series_anonymized_file_path_f(numeric, character varying, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_series_anonymized_file_path_f(p_series_id numeric, p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) TO micis_app;


--
-- Name: dx_add_series_zip_file_path_and_contents_f(character varying, character varying, numeric, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_series_zip_file_path_and_contents_f(p_path character varying, p_file_name character varying, p_series_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_series_zip_file_path_and_contents_f(p_path character varying, p_file_name character varying, p_series_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_series_zip_file_path_and_contents_f(p_path character varying, p_file_name character varying, p_series_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_series_zip_file_path_and_contents_f(p_path character varying, p_file_name character varying, p_series_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: dx_add_source_attribute_f(numeric, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_source_attribute_f(p_modality_id numeric, p_label character varying, p_attribute_column_name character varying, p_attribute_desc_column character varying, p_operator character varying, p_column_type character varying, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_source_attribute_f(p_modality_id numeric, p_label character varying, p_attribute_column_name character varying, p_attribute_desc_column character varying, p_operator character varying, p_column_type character varying, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_source_attribute_f(p_modality_id numeric, p_label character varying, p_attribute_column_name character varying, p_attribute_desc_column character varying, p_operator character varying, p_column_type character varying, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_source_attribute_f(p_modality_id numeric, p_label character varying, p_attribute_column_name character varying, p_attribute_desc_column character varying, p_operator character varying, p_column_type character varying, p_dbtrans_username character varying) TO micis_app;


--
-- Name: dx_add_source_attribute_value_f(numeric, numeric, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_source_attribute_value_f(p_attribute_id numeric, p_data_requests_source_id numeric, p_value character varying, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_source_attribute_value_f(p_attribute_id numeric, p_data_requests_source_id numeric, p_value character varying, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_source_attribute_value_f(p_attribute_id numeric, p_data_requests_source_id numeric, p_value character varying, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_source_attribute_value_f(p_attribute_id numeric, p_data_requests_source_id numeric, p_value character varying, p_dbtrans_username character varying) TO micis_app;


--
-- Name: dx_add_upload_f(text, numeric, numeric, text, text); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_upload_f(p_site_id text, p_scanner_id numeric, p_study_id numeric, p_username text, p_dbtrans_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_upload_f(p_site_id text, p_scanner_id numeric, p_study_id numeric, p_username text, p_dbtrans_username text) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_upload_f(p_site_id text, p_scanner_id numeric, p_study_id numeric, p_username text, p_dbtrans_username text) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_upload_f(p_site_id text, p_scanner_id numeric, p_study_id numeric, p_username text, p_dbtrans_username text) TO PUBLIC;
GRANT ALL ON FUNCTION dx_add_upload_f(p_site_id text, p_scanner_id numeric, p_study_id numeric, p_username text, p_dbtrans_username text) TO micis_app;


--
-- Name: dx_add_upload_file_f(numeric, text, text, text); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_add_upload_file_f(p_upload_id numeric, p_filename text, p_status text, p_dbtrans_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_add_upload_file_f(p_upload_id numeric, p_filename text, p_status text, p_dbtrans_username text) FROM ni_developers;
GRANT ALL ON FUNCTION dx_add_upload_file_f(p_upload_id numeric, p_filename text, p_status text, p_dbtrans_username text) TO ni_developers;
GRANT ALL ON FUNCTION dx_add_upload_file_f(p_upload_id numeric, p_filename text, p_status text, p_dbtrans_username text) TO PUBLIC;
GRANT ALL ON FUNCTION dx_add_upload_file_f(p_upload_id numeric, p_filename text, p_status text, p_dbtrans_username text) TO micis_app;


--
-- Name: dx_agree_to_usage_agreement_f(numeric, integer, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_agree_to_usage_agreement_f(p_data_request_id numeric, p_usage_agreement_id integer, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_agree_to_usage_agreement_f(p_data_request_id numeric, p_usage_agreement_id integer, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_agree_to_usage_agreement_f(p_data_request_id numeric, p_usage_agreement_id integer, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_agree_to_usage_agreement_f(p_data_request_id numeric, p_usage_agreement_id integer, p_dbtrans_username character varying) TO micis_app;


--
-- Name: dx_approve_data_source_f(numeric, text); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_approve_data_source_f(p_source_id numeric, p_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_approve_data_source_f(p_source_id numeric, p_username text) FROM ni_developers;
GRANT ALL ON FUNCTION dx_approve_data_source_f(p_source_id numeric, p_username text) TO ni_developers;
GRANT ALL ON FUNCTION dx_approve_data_source_f(p_source_id numeric, p_username text) TO micis_app;


--
-- Name: dx_complete_data_capsule_modification_f(integer, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_complete_data_capsule_modification_f(p_modification_id integer, p_transaction_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_complete_data_capsule_modification_f(p_modification_id integer, p_transaction_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_complete_data_capsule_modification_f(p_modification_id integer, p_transaction_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_complete_data_capsule_modification_f(p_modification_id integer, p_transaction_username character varying) TO micis_app;


--
-- Name: dx_delete_capsule_processing_temp_f(numeric, numeric); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_delete_capsule_processing_temp_f(p_source_id numeric, p_file_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_delete_capsule_processing_temp_f(p_source_id numeric, p_file_id numeric) FROM ni_developers;
GRANT ALL ON FUNCTION dx_delete_capsule_processing_temp_f(p_source_id numeric, p_file_id numeric) TO ni_developers;
GRANT ALL ON FUNCTION dx_delete_capsule_processing_temp_f(p_source_id numeric, p_file_id numeric) TO micis_app;


--
-- Name: dx_delete_data_capsule_downloads_f(numeric, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_delete_data_capsule_downloads_f(p_file_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_delete_data_capsule_downloads_f(p_file_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_capsule_downloads_f(p_file_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_capsule_downloads_f(p_file_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: dx_delete_data_capsule_modification_queue_f(integer, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_delete_data_capsule_modification_queue_f(p_modification_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_delete_data_capsule_modification_queue_f(p_modification_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_capsule_modification_queue_f(p_modification_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_capsule_modification_queue_f(p_modification_id integer, p_mod_user character varying) TO micis_app;


--
-- Name: dx_delete_data_capsule_request_from_queue_f(numeric); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_delete_data_capsule_request_from_queue_f(data_requests_source_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_delete_data_capsule_request_from_queue_f(data_requests_source_id_f numeric) FROM ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_capsule_request_from_queue_f(data_requests_source_id_f numeric) TO ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_capsule_request_from_queue_f(data_requests_source_id_f numeric) TO micis_app;


--
-- Name: dx_delete_data_request_template_filter_f(integer, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_delete_data_request_template_filter_f(p_filter_id integer, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_delete_data_request_template_filter_f(p_filter_id integer, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_request_template_filter_f(p_filter_id integer, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_request_template_filter_f(p_filter_id integer, p_dbtrans_username character varying) TO micis_app;


--
-- Name: dx_delete_data_request_template_group_f(integer, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_delete_data_request_template_group_f(p_group_id integer, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_delete_data_request_template_group_f(p_group_id integer, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_request_template_group_f(p_group_id integer, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_request_template_group_f(p_group_id integer, p_dbtrans_username character varying) TO micis_app;


--
-- Name: dx_delete_data_source_capsule_link_f(numeric, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_delete_data_source_capsule_link_f(p_data_capsule_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_delete_data_source_capsule_link_f(p_data_capsule_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_source_capsule_link_f(p_data_capsule_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_delete_data_source_capsule_link_f(p_data_capsule_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: dx_delete_ex_situ_data_capsule_files_f(numeric, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_delete_ex_situ_data_capsule_files_f(p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_delete_ex_situ_data_capsule_files_f(p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_delete_ex_situ_data_capsule_files_f(p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_delete_ex_situ_data_capsule_files_f(p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) TO micis_app;


--
-- Name: dx_delete_ex_situ_data_capsules_f(numeric, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_delete_ex_situ_data_capsules_f(p_data_capsule_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_delete_ex_situ_data_capsules_f(p_data_capsule_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_delete_ex_situ_data_capsules_f(p_data_capsule_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_delete_ex_situ_data_capsules_f(p_data_capsule_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: dx_delete_series_anonymized_file_path_f(character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_delete_series_anonymized_file_path_f(p_archive_file_path character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_delete_series_anonymized_file_path_f(p_archive_file_path character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_delete_series_anonymized_file_path_f(p_archive_file_path character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_delete_series_anonymized_file_path_f(p_archive_file_path character varying, p_mod_user character varying) TO micis_app;


--
-- Name: dx_deny_data_source_f(numeric, text); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_deny_data_source_f(p_source_id numeric, p_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_deny_data_source_f(p_source_id numeric, p_username text) FROM ni_developers;
GRANT ALL ON FUNCTION dx_deny_data_source_f(p_source_id numeric, p_username text) TO ni_developers;
GRANT ALL ON FUNCTION dx_deny_data_source_f(p_source_id numeric, p_username text) TO micis_app;


--
-- Name: dx_email_msg_f(numeric); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_email_msg_f(p_message_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_email_msg_f(p_message_id numeric) FROM ni_developers;
GRANT ALL ON FUNCTION dx_email_msg_f(p_message_id numeric) TO ni_developers;
GRANT ALL ON FUNCTION dx_email_msg_f(p_message_id numeric) TO micis_app;


--
-- Name: dx_find_and_serve_preexisting_zip_files_f(integer[], integer); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_find_and_serve_preexisting_zip_files_f(p_series_id integer[], p_source_id integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_find_and_serve_preexisting_zip_files_f(p_series_id integer[], p_source_id integer) FROM ni_developers;
GRANT ALL ON FUNCTION dx_find_and_serve_preexisting_zip_files_f(p_series_id integer[], p_source_id integer) TO ni_developers;
GRANT ALL ON FUNCTION dx_find_and_serve_preexisting_zip_files_f(p_series_id integer[], p_source_id integer) TO micis_app;


--
-- Name: dx_generate_source_object_f(integer); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_generate_source_object_f(p_request_id integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_generate_source_object_f(p_request_id integer) FROM ni_developers;
GRANT ALL ON FUNCTION dx_generate_source_object_f(p_request_id integer) TO ni_developers;
GRANT ALL ON FUNCTION dx_generate_source_object_f(p_request_id integer) TO micis_app;


--
-- Name: dx_get_statistics_f(integer); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_get_statistics_f(p_request_id integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_get_statistics_f(p_request_id integer) FROM ni_developers;
GRANT ALL ON FUNCTION dx_get_statistics_f(p_request_id integer) TO ni_developers;
GRANT ALL ON FUNCTION dx_get_statistics_f(p_request_id integer) TO micis_app;


--
-- Name: dx_include_exclude_all_f(numeric, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_include_exclude_all_f(p_study_id numeric, p_new_dx_excluded character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_include_exclude_all_f(p_study_id numeric, p_new_dx_excluded character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_include_exclude_all_f(p_study_id numeric, p_new_dx_excluded character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_include_exclude_all_f(p_study_id numeric, p_new_dx_excluded character varying, p_mod_user character varying) TO micis_app;


--
-- Name: dx_include_exclude_all_ursi_f(numeric, character varying, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_include_exclude_all_ursi_f(p_study_id numeric, p_ursi character varying, p_new_dx_excluded character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_include_exclude_all_ursi_f(p_study_id numeric, p_ursi character varying, p_new_dx_excluded character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_include_exclude_all_ursi_f(p_study_id numeric, p_ursi character varying, p_new_dx_excluded character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_include_exclude_all_ursi_f(p_study_id numeric, p_ursi character varying, p_new_dx_excluded character varying, p_mod_user character varying) TO micis_app;


--
-- Name: dx_increment_ex_situ_data_capsule_files_downloads_f(numeric, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_increment_ex_situ_data_capsule_files_downloads_f(p_file_id numeric, p_download_user character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_increment_ex_situ_data_capsule_files_downloads_f(p_file_id numeric, p_download_user character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_increment_ex_situ_data_capsule_files_downloads_f(p_file_id numeric, p_download_user character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_increment_ex_situ_data_capsule_files_downloads_f(p_file_id numeric, p_download_user character varying, p_mod_user character varying) TO micis_app;


--
-- Name: dx_message_affected_requests_f(text, numeric, character varying, character varying, text, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_message_affected_requests_f(p_affected_ids text, p_modality_id numeric, p_action_type character varying, p_component_status character varying, p_message text, p_transaction_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_message_affected_requests_f(p_affected_ids text, p_modality_id numeric, p_action_type character varying, p_component_status character varying, p_message text, p_transaction_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_message_affected_requests_f(p_affected_ids text, p_modality_id numeric, p_action_type character varying, p_component_status character varying, p_message text, p_transaction_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_message_affected_requests_f(p_affected_ids text, p_modality_id numeric, p_action_type character varying, p_component_status character varying, p_message text, p_transaction_username character varying) TO micis_app;


--
-- Name: dx_return_group_components_f(integer); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_return_group_components_f(p_group_id integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_return_group_components_f(p_group_id integer) FROM ni_developers;
GRANT ALL ON FUNCTION dx_return_group_components_f(p_group_id integer) TO ni_developers;
GRANT ALL ON FUNCTION dx_return_group_components_f(p_group_id integer) TO micis_app;


--
-- Name: dx_set_data_capsule_creation_starttime_f(numeric); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_set_data_capsule_creation_starttime_f(data_requests_source_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_set_data_capsule_creation_starttime_f(data_requests_source_id_f numeric) FROM ni_developers;
GRANT ALL ON FUNCTION dx_set_data_capsule_creation_starttime_f(data_requests_source_id_f numeric) TO ni_developers;
GRANT ALL ON FUNCTION dx_set_data_capsule_creation_starttime_f(data_requests_source_id_f numeric) TO micis_app;


--
-- Name: dx_submit_source_object_f(integer, text); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_submit_source_object_f(p_request_id integer, p_dbtrans_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_submit_source_object_f(p_request_id integer, p_dbtrans_username text) FROM ni_developers;
GRANT ALL ON FUNCTION dx_submit_source_object_f(p_request_id integer, p_dbtrans_username text) TO ni_developers;
GRANT ALL ON FUNCTION dx_submit_source_object_f(p_request_id integer, p_dbtrans_username text) TO micis_app;


--
-- Name: dx_switch_data_request_template_group_f(integer, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_switch_data_request_template_group_f(p_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_switch_data_request_template_group_f(p_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_switch_data_request_template_group_f(p_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_switch_data_request_template_group_f(p_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) TO micis_app;


--
-- Name: dx_update_capsule_processing_temp_copied_f(boolean, numeric, numeric); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_update_capsule_processing_temp_copied_f(p_copied boolean, p_source_id numeric, p_file_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_update_capsule_processing_temp_copied_f(p_copied boolean, p_source_id numeric, p_file_id numeric) FROM ni_developers;
GRANT ALL ON FUNCTION dx_update_capsule_processing_temp_copied_f(p_copied boolean, p_source_id numeric, p_file_id numeric) TO ni_developers;
GRANT ALL ON FUNCTION dx_update_capsule_processing_temp_copied_f(p_copied boolean, p_source_id numeric, p_file_id numeric) TO micis_app;


--
-- Name: dx_update_capsule_processing_temp_f(character varying, boolean, numeric, numeric); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_update_capsule_processing_temp_f(p_file_path character varying, p_anonymized boolean, p_source_id numeric, p_file_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_update_capsule_processing_temp_f(p_file_path character varying, p_anonymized boolean, p_source_id numeric, p_file_id numeric) FROM ni_developers;
GRANT ALL ON FUNCTION dx_update_capsule_processing_temp_f(p_file_path character varying, p_anonymized boolean, p_source_id numeric, p_file_id numeric) TO ni_developers;
GRANT ALL ON FUNCTION dx_update_capsule_processing_temp_f(p_file_path character varying, p_anonymized boolean, p_source_id numeric, p_file_id numeric) TO micis_app;


--
-- Name: dx_update_data_request_f(numeric, text, numeric, text, boolean); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_update_data_request_f(p_data_request_id numeric, p_username text, p_delivery_venue numeric, p_label text, p_submitted boolean) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_update_data_request_f(p_data_request_id numeric, p_username text, p_delivery_venue numeric, p_label text, p_submitted boolean) FROM ni_developers;
GRANT ALL ON FUNCTION dx_update_data_request_f(p_data_request_id numeric, p_username text, p_delivery_venue numeric, p_label text, p_submitted boolean) TO ni_developers;
GRANT ALL ON FUNCTION dx_update_data_request_f(p_data_request_id numeric, p_username text, p_delivery_venue numeric, p_label text, p_submitted boolean) TO micis_app;


--
-- Name: dx_update_data_request_template_filter_f(integer, integer, numeric, text, text, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_update_data_request_template_filter_f(p_filter_id integer, p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_update_data_request_template_filter_f(p_filter_id integer, p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_update_data_request_template_filter_f(p_filter_id integer, p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_update_data_request_template_filter_f(p_filter_id integer, p_group_id integer, p_attribute_id numeric, p_attribute_value text, p_attribute_value_label text, p_dbtrans_username character varying) TO micis_app;


--
-- Name: dx_update_data_request_template_group_f(integer, numeric, integer, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_update_data_request_template_group_f(p_group_id integer, p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_update_data_request_template_group_f(p_group_id integer, p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_update_data_request_template_group_f(p_group_id integer, p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_update_data_request_template_group_f(p_group_id integer, p_data_request_id numeric, p_parent_group_id integer, p_conjunction_type character varying, p_dbtrans_username character varying) TO micis_app;


--
-- Name: dx_update_ex_situ_data_capsule_files_f(numeric, numeric, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_update_ex_situ_data_capsule_files_f(p_file_size_mb numeric, p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_update_ex_situ_data_capsule_files_f(p_file_size_mb numeric, p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_update_ex_situ_data_capsule_files_f(p_file_size_mb numeric, p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_update_ex_situ_data_capsule_files_f(p_file_size_mb numeric, p_data_capsule_id numeric, p_file_name character varying, p_mod_user character varying) TO micis_app;


--
-- Name: dx_update_options_f(); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_update_options_f() FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_update_options_f() FROM ni_developers;
GRANT ALL ON FUNCTION dx_update_options_f() TO ni_developers;


--
-- Name: dx_update_series_anonymized_file_path_f(character varying, character varying, character varying); Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION dx_update_series_anonymized_file_path_f(p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION dx_update_series_anonymized_file_path_f(p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION dx_update_series_anonymized_file_path_f(p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION dx_update_series_anonymized_file_path_f(p_archive_file_path character varying, p_anonymized_file_path character varying, p_mod_user character varying) TO micis_app;


SET search_path = mrsdba, pg_catalog;

--
-- Name: cast_by_string_f(anyelement, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION cast_by_string_f(p_input anyelement, p_cast_string character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION cast_by_string_f(p_input anyelement, p_cast_string character varying) FROM ni_developers;
GRANT ALL ON FUNCTION cast_by_string_f(p_input anyelement, p_cast_string character varying) TO ni_developers;
GRANT ALL ON FUNCTION cast_by_string_f(p_input anyelement, p_cast_string character varying) TO micis_app;


--
-- Name: instr(text, unknown); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION instr(text, unknown) FROM PUBLIC;
REVOKE ALL ON FUNCTION instr(text, unknown) FROM postgres;
GRANT ALL ON FUNCTION instr(text, unknown) TO postgres;
GRANT ALL ON FUNCTION instr(text, unknown) TO micis_app;
GRANT ALL ON FUNCTION instr(text, unknown) TO transfer_app;


--
-- Name: instr(unknown, unknown); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION instr(unknown, unknown) FROM PUBLIC;
REVOKE ALL ON FUNCTION instr(unknown, unknown) FROM postgres;
GRANT ALL ON FUNCTION instr(unknown, unknown) TO postgres;
GRANT ALL ON FUNCTION instr(unknown, unknown) TO micis_app;


--
-- Name: mrs_add_account_f(character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_account_f(p_account_number character varying, p_label character varying, p_description character varying, p_pr_number character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_account_f(p_account_number character varying, p_label character varying, p_description character varying, p_pr_number character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_account_f(p_account_number character varying, p_label character varying, p_description character varying, p_pr_number character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_account_f(p_account_number character varying, p_label character varying, p_description character varying, p_pr_number character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_address_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_analysis_details_f(character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_analysis_details_f(series_id_f character varying, analysis_id_f numeric, non_default_output_path_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_analysis_details_f(series_id_f character varying, analysis_id_f numeric, non_default_output_path_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_details_f(series_id_f character varying, analysis_id_f numeric, non_default_output_path_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_details_f(series_id_f character varying, analysis_id_f numeric, non_default_output_path_f character varying) TO portal_app;


--
-- Name: mrs_add_analysis_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_analysis_f(label_f character varying, desc_f character varying, user_submit_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_analysis_f(label_f character varying, desc_f character varying, user_submit_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_f(label_f character varying, desc_f character varying, user_submit_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_f(label_f character varying, desc_f character varying, user_submit_f character varying) TO portal_app;


--
-- Name: mrs_add_analysis_files_f(character varying, character varying, timestamp without time zone, bigint, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_analysis_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_series_id character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_analysis_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_series_id character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_series_id character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_series_id character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_analysis_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_series_id character varying) TO portal_app;


--
-- Name: mrs_add_analysis_job_f(character varying, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_analysis_job_f(f_portal_name character varying, f_pi_id character varying, f_study_name character varying, f_ursi character varying, f_session character varying, f_task character varying, f_submission_datetime timestamp without time zone, f_status character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_analysis_job_f(f_portal_name character varying, f_pi_id character varying, f_study_name character varying, f_ursi character varying, f_session character varying, f_task character varying, f_submission_datetime timestamp without time zone, f_status character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_job_f(f_portal_name character varying, f_pi_id character varying, f_study_name character varying, f_ursi character varying, f_session character varying, f_task character varying, f_submission_datetime timestamp without time zone, f_status character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_job_f(f_portal_name character varying, f_pi_id character varying, f_study_name character varying, f_ursi character varying, f_session character varying, f_task character varying, f_submission_datetime timestamp without time zone, f_status character varying) TO micis_app;


--
-- Name: mrs_add_analysis_queue_f(numeric, timestamp without time zone); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_analysis_queue_f(scan_id_f numeric, analysis_submit_f timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_analysis_queue_f(scan_id_f numeric, analysis_submit_f timestamp without time zone) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_queue_f(scan_id_f numeric, analysis_submit_f timestamp without time zone) TO postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_queue_f(scan_id_f numeric, analysis_submit_f timestamp without time zone) TO portal_app;


--
-- Name: mrs_add_analysis_stats_files_f(character varying, character varying, timestamp without time zone, bigint, character varying, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_analysis_stats_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_scan_id numeric, f_task_name character varying, f_stats_folder_name character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_analysis_stats_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_scan_id numeric, f_task_name character varying, f_stats_folder_name character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_stats_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_scan_id numeric, f_task_name character varying, f_stats_folder_name character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_analysis_stats_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_scan_id numeric, f_task_name character varying, f_stats_folder_name character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_analysis_stats_files_f(f_label character varying, f_type character varying, f_date timestamp without time zone, f_size_kb bigint, f_desc character varying, f_scan_id numeric, f_task_name character varying, f_stats_folder_name character varying) TO portal_app;


--
-- Name: mrs_add_anatomy_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_anatomy_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_anatomy_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_anatomy_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_anatomy_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_anonymous_subject_f(text, timestamp without time zone, text, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_anonymous_subject_f(p_site_id text, p_birthdate timestamp without time zone, p_gender text, p_dbtrans_username_pt text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_anonymous_subject_f(p_site_id text, p_birthdate timestamp without time zone, p_gender text, p_dbtrans_username_pt text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_anonymous_subject_f(p_site_id text, p_birthdate timestamp without time zone, p_gender text, p_dbtrans_username_pt text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_anonymous_subject_f(p_site_id text, p_birthdate timestamp without time zone, p_gender text, p_dbtrans_username_pt text) TO micis_app;


--
-- Name: mrs_add_app_option_f(integer, character varying, text, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_app_option_f(p_study_id integer, p_app_name character varying, p_option_str text, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_app_option_f(p_study_id integer, p_app_name character varying, p_option_str text, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_app_option_f(p_study_id integer, p_app_name character varying, p_option_str text, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_app_option_f(p_study_id integer, p_app_name character varying, p_option_str text, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_app_option_f(p_study_id integer, p_app_name character varying, p_option_str text, p_mod_user character varying) TO portal_app;


--
-- Name: mrs_add_assessment_events_f(numeric, character varying, numeric, numeric, numeric, numeric, numeric, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_assessment_events_f(assessment_id_f numeric, question_id_f character varying, question_instance_f numeric, page_id_f numeric, page_instance_f numeric, timestamp_f numeric, timezone_offset_f numeric, event_type_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_assessment_events_f(assessment_id_f numeric, question_id_f character varying, question_instance_f numeric, page_id_f numeric, page_instance_f numeric, timestamp_f numeric, timezone_offset_f numeric, event_type_id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_assessment_events_f(assessment_id_f numeric, question_id_f character varying, question_instance_f numeric, page_id_f numeric, page_instance_f numeric, timestamp_f numeric, timezone_offset_f numeric, event_type_id_f numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_add_assessment_events_f(assessment_id_f numeric, question_id_f character varying, question_instance_f numeric, page_id_f numeric, page_instance_f numeric, timestamp_f numeric, timezone_offset_f numeric, event_type_id_f numeric) TO micis_app;


--
-- Name: mrs_add_auto_message_f(numeric, numeric, timestamp without time zone, text, text, text, text, text, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_auto_message_f(study_id_f numeric, message_type_id_f numeric, sent_time_f timestamp without time zone, message_subject_f text, message_body_f text, message_to_f text, message_from_f text, message_cc_f text, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_auto_message_f(study_id_f numeric, message_type_id_f numeric, sent_time_f timestamp without time zone, message_subject_f text, message_body_f text, message_to_f text, message_from_f text, message_cc_f text, mod_user_f character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_auto_message_f(study_id_f numeric, message_type_id_f numeric, sent_time_f timestamp without time zone, message_subject_f text, message_body_f text, message_to_f text, message_from_f text, message_cc_f text, mod_user_f character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_auto_message_f(study_id_f numeric, message_type_id_f numeric, sent_time_f timestamp without time zone, message_subject_f text, message_body_f text, message_to_f text, message_from_f text, message_cc_f text, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_auto_message_f(study_id_f numeric, message_type_id_f numeric, sent_time_f timestamp without time zone, message_subject_f text, message_body_f text, message_to_f text, message_from_f text, message_cc_f text, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_add_behavioral_upload_f(character varying, numeric, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_behavioral_upload_f(file_name_f character varying, file_size_k_f numeric, dest_session_id_f numeric, dest_series_id_f character varying, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_behavioral_upload_f(file_name_f character varying, file_size_k_f numeric, dest_session_id_f numeric, dest_series_id_f character varying, mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_behavioral_upload_f(file_name_f character varying, file_size_k_f numeric, dest_session_id_f numeric, dest_series_id_f character varying, mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_behavioral_upload_f(file_name_f character varying, file_size_k_f numeric, dest_session_id_f numeric, dest_series_id_f character varying, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_behavioral_upload_f(file_name_f character varying, file_size_k_f numeric, dest_session_id_f numeric, dest_series_id_f character varying, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_add_charge_code_f(character varying, character varying, timestamp without time zone, timestamp without time zone, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_charge_code_f(p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_charge_code_f(p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_charge_code_f(p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_charge_code_f(p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_add_charge_code_site_f(numeric, numeric, character varying, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_charge_code_site_f(p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_charge_code_site_f(p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_charge_code_site_f(p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_charge_code_site_f(p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_add_charge_code_site_modality_f(numeric, numeric, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_charge_code_site_modality_f(p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_charge_code_site_modality_f(p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_charge_code_site_modality_f(p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_charge_code_site_modality_f(p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_add_charge_code_study_f(numeric, numeric, character varying, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_charge_code_study_f(p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_charge_code_study_f(p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_charge_code_study_f(p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_charge_code_study_f(p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_add_charge_code_study_modality_f(numeric, numeric, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_charge_code_study_modality_f(p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_charge_code_study_modality_f(p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_charge_code_study_modality_f(p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_charge_code_study_modality_f(p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_add_client_device_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_client_device_f(p_reg_remote_address character varying, p_reg_http_client_ip character varying, p_reg_http_x_forwarded_ip character varying, p_reg_user_agent character varying, p_reg_request_url character varying, p_reg_http_referer character varying, p_db_transaction_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_client_device_f(p_reg_remote_address character varying, p_reg_http_client_ip character varying, p_reg_http_x_forwarded_ip character varying, p_reg_user_agent character varying, p_reg_request_url character varying, p_reg_http_referer character varying, p_db_transaction_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_client_device_f(p_reg_remote_address character varying, p_reg_http_client_ip character varying, p_reg_http_x_forwarded_ip character varying, p_reg_user_agent character varying, p_reg_request_url character varying, p_reg_http_referer character varying, p_db_transaction_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_client_device_f(p_reg_remote_address character varying, p_reg_http_client_ip character varying, p_reg_http_x_forwarded_ip character varying, p_reg_user_agent character varying, p_reg_request_url character varying, p_reg_http_referer character varying, p_db_transaction_username character varying) TO micis_app;


--
-- Name: mrs_add_conditional_jump_f(text, text, text, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_conditional_jump_f(p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_conditional_jump_f(p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_conditional_jump_f(p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_conditional_jump_f(p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_add_data_domain_f(character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_data_domain_f(p_label character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_data_domain_f(p_label character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_data_domain_f(p_label character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_data_domain_f(p_label character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_data_qc_constraint_f(numeric, integer, numeric, text, text, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_data_qc_constraint_f(p_device_id numeric, p_event_type_id integer, p_event_param_id numeric, p_formula text, p_label text, p_mod_user text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_data_qc_constraint_f(p_device_id numeric, p_event_type_id integer, p_event_param_id numeric, p_formula text, p_label text, p_mod_user text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_data_qc_constraint_f(p_device_id numeric, p_event_type_id integer, p_event_param_id numeric, p_formula text, p_label text, p_mod_user text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_data_qc_constraint_f(p_device_id numeric, p_event_type_id integer, p_event_param_id numeric, p_formula text, p_label text, p_mod_user text) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_data_qc_constraint_f(p_device_id numeric, p_event_type_id integer, p_event_param_id numeric, p_formula text, p_label text, p_mod_user text) TO portal_app;


--
-- Name: mrs_add_dataentry_type_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_dataentry_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_dataentry_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_dataentry_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_dataentry_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_document_category_f(character varying, character varying, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_document_category_f(p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_document_category_f(p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_document_category_f(p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_document_category_f(p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_document_category_f(p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_add_document_f(character varying, character varying, character varying, character varying, character varying, character varying, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_document_f(p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_category_id numeric, p_site_id character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_document_f(p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_category_id numeric, p_site_id character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_document_f(p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_category_id numeric, p_site_id character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_document_f(p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_category_id numeric, p_site_id character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_document_f(p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_category_id numeric, p_site_id character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_add_drug_category_f(character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_drug_category_f(p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_drug_category_f(p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_drug_category_f(p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_drug_category_f(p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_drug_prop_details_f(character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_drug_prop_details_f(p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_drug_prop_details_f(p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_drug_prop_details_f(p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_drug_prop_details_f(p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_drug_property_f(character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_drug_property_f(p_drug_code character varying, p_property_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_drug_property_f(p_drug_code character varying, p_property_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_drug_property_f(p_drug_code character varying, p_property_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_drug_property_f(p_drug_code character varying, p_property_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_eeg_device_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_eeg_device_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_input_impedance numeric, p_number_of_channels numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_eeg_device_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_input_impedance numeric, p_number_of_channels numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_eeg_device_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_input_impedance numeric, p_number_of_channels numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_eeg_device_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_input_impedance numeric, p_number_of_channels numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_eeg_series_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_eeg_series_f(p_eeg_session_id numeric, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_eeg_series_f(p_eeg_session_id numeric, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_eeg_series_f(p_eeg_session_id numeric, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_eeg_series_f(p_eeg_session_id numeric, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_eeg_study_task_f(character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_eeg_study_task_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_eeg_study_task_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_eeg_study_task_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_eeg_study_task_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_generic_drug_f(character varying, character varying, character varying, numeric, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_category_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_category_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_category_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_category_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_category_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_add_inst_f(character varying, character varying, character varying, character varying, character varying, numeric, numeric, numeric, boolean, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_inst_f(p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_study_id numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_sa_hide_skipped_questions boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_inst_f(p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_study_id numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_sa_hide_skipped_questions boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_inst_f(p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_study_id numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_sa_hide_skipped_questions boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_inst_f(p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_study_id numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_sa_hide_skipped_questions boolean, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_add_inst_question_f(character varying, character varying, character varying, character varying, character varying, numeric, numeric, numeric, character varying, character varying, character varying, character varying, boolean, boolean, boolean, boolean, character varying, character varying, character varying, numeric, character varying, character, character, boolean, boolean, numeric, numeric, numeric, boolean, boolean, boolean, character varying, character varying, character varying, numeric, numeric, boolean, integer, character varying, numeric, numeric, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_sort_order numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_copied_from_question_id character varying, p_table_row_id numeric, p_table_col_id numeric, p_is_de_hidden boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_sort_order numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_copied_from_question_id character varying, p_table_row_id numeric, p_table_col_id numeric, p_is_de_hidden boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_sort_order numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_copied_from_question_id character varying, p_table_row_id numeric, p_table_col_id numeric, p_is_de_hidden boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_sort_order numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_copied_from_question_id character varying, p_table_row_id numeric, p_table_col_id numeric, p_is_de_hidden boolean, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_add_inst_question_score_f(character varying, numeric, character); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_inst_question_score_f(question_id_f character varying, study_id_f numeric, selected_f character) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_inst_question_score_f(question_id_f character varying, study_id_f numeric, selected_f character) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_inst_question_score_f(question_id_f character varying, study_id_f numeric, selected_f character) TO postgres;
GRANT ALL ON FUNCTION mrs_add_inst_question_score_f(question_id_f character varying, study_id_f numeric, selected_f character) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_inst_question_score_f(question_id_f character varying, study_id_f numeric, selected_f character) TO portal_app;


--
-- Name: mrs_add_inst_response_f(character varying, character varying, character varying, numeric, boolean, boolean, boolean, character, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_inst_response_f(p_question_id character varying, p_label character varying, p_description character varying, p_value numeric, p_is_critical boolean, p_is_hidden boolean, p_skip_revscore boolean, p_specify_detail character, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_inst_response_f(p_question_id character varying, p_label character varying, p_description character varying, p_value numeric, p_is_critical boolean, p_is_hidden boolean, p_skip_revscore boolean, p_specify_detail character, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_inst_response_f(p_question_id character varying, p_label character varying, p_description character varying, p_value numeric, p_is_critical boolean, p_is_hidden boolean, p_skip_revscore boolean, p_specify_detail character, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_inst_response_f(p_question_id character varying, p_label character varying, p_description character varying, p_value numeric, p_is_critical boolean, p_is_hidden boolean, p_skip_revscore boolean, p_specify_detail character, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_add_inst_section_details_f(numeric, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_add_inst_section_f(character varying, character varying, numeric, character varying, character varying, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_inst_section_f(p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_inst_section_f(p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_inst_section_f(p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_inst_section_f(p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_inst_section_f(p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) TO postgres;


--
-- Name: mrs_add_instrument_question_media_f(character varying, integer, integer, character varying, character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_instrument_question_media_f(p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_instrument_question_media_f(p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_instrument_question_media_f(p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_instrument_question_media_f(p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) TO micis_app;


--
-- Name: mrs_add_instrument_table_col_f(numeric, character varying, integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_instrument_table_col_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_instrument_table_col_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_instrument_table_col_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_instrument_table_col_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_instrument_table_col_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) TO p2_app;


--
-- Name: mrs_add_instrument_table_f(numeric, integer, integer, text, text, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_instrument_table_f(p_section_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_instrument_table_f(p_section_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_instrument_table_f(p_section_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_instrument_table_f(p_section_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_instrument_table_f(p_section_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_mod_user character varying) TO p2_app;


--
-- Name: mrs_add_instrument_table_row_f(numeric, character varying, integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_instrument_table_row_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_instrument_table_row_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_instrument_table_row_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_instrument_table_row_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_instrument_table_row_f(p_table_id numeric, p_label character varying, p_sort_order integer, p_mod_user character varying) TO p2_app;


--
-- Name: mrs_add_internal_subject_f(character varying, numeric, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_internal_subject_f(p_sid character varying, p_ext_id numeric, p_identifier character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_match_level character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_internal_subject_f(p_sid character varying, p_ext_id numeric, p_identifier character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_match_level character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_internal_subject_f(p_sid character varying, p_ext_id numeric, p_identifier character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_match_level character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_internal_subject_f(p_sid character varying, p_ext_id numeric, p_identifier character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_match_level character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_mail_f(numeric, boolean, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_mail_f(p_study_id numeric, p_use_coins_template boolean, p_from_label character varying, p_recipients character varying, p_reply_to_address character varying, p_subject character varying, p_text_body character varying, p_html_body character varying, p_disclamer_text character varying, p_menu_link_key character varying, p_send_time timestamp without time zone, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_mail_f(p_study_id numeric, p_use_coins_template boolean, p_from_label character varying, p_recipients character varying, p_reply_to_address character varying, p_subject character varying, p_text_body character varying, p_html_body character varying, p_disclamer_text character varying, p_menu_link_key character varying, p_send_time timestamp without time zone, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_mail_f(p_study_id numeric, p_use_coins_template boolean, p_from_label character varying, p_recipients character varying, p_reply_to_address character varying, p_subject character varying, p_text_body character varying, p_html_body character varying, p_disclamer_text character varying, p_menu_link_key character varying, p_send_time timestamp without time zone, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_mail_f(p_study_id numeric, p_use_coins_template boolean, p_from_label character varying, p_recipients character varying, p_reply_to_address character varying, p_subject character varying, p_text_body character varying, p_html_body character varying, p_disclamer_text character varying, p_menu_link_key character varying, p_send_time timestamp without time zone, p_user_entered character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_mail_f(p_study_id numeric, p_use_coins_template boolean, p_from_label character varying, p_recipients character varying, p_reply_to_address character varying, p_subject character varying, p_text_body character varying, p_html_body character varying, p_disclamer_text character varying, p_menu_link_key character varying, p_send_time timestamp without time zone, p_user_entered character varying) TO p2_app;
GRANT ALL ON FUNCTION mrs_add_mail_f(p_study_id numeric, p_use_coins_template boolean, p_from_label character varying, p_recipients character varying, p_reply_to_address character varying, p_subject character varying, p_text_body character varying, p_html_body character varying, p_disclamer_text character varying, p_menu_link_key character varying, p_send_time timestamp without time zone, p_user_entered character varying) TO login_app;


--
-- Name: mrs_add_message_f(character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_message_f(subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_message_f(subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_message_f(subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_message_f(subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_message_f(subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_add_missing_assessment_reason_f(character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_missing_assessment_reason_f(label_f character varying, description_f character varying, study_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_missing_assessment_reason_f(label_f character varying, description_f character varying, study_id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_missing_assessment_reason_f(label_f character varying, description_f character varying, study_id_f numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_add_missing_assessment_reason_f(label_f character varying, description_f character varying, study_id_f numeric) TO micis_app;


--
-- Name: mrs_add_modality_f(character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_modality_f(p_label character varying, p_description character varying, p_acquisition_level character varying, p_attribute_view character varying, p_attribute_view_id_column character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_modality_f(p_label character varying, p_description character varying, p_acquisition_level character varying, p_attribute_view character varying, p_attribute_view_id_column character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_modality_f(p_label character varying, p_description character varying, p_acquisition_level character varying, p_attribute_view character varying, p_attribute_view_id_column character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_modality_f(p_label character varying, p_description character varying, p_acquisition_level character varying, p_attribute_view character varying, p_attribute_view_id_column character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_person_alias_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_person_alias_f(p_label character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_person_alias_f(p_label character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_person_alias_f(p_label character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_person_alias_f(p_label character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_person_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_person_role_detail_f(numeric, character varying, numeric, numeric, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_person_role_detail_f(p_role_id numeric, p_person_id character varying, p_alias_id numeric, p_study_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_person_role_detail_f(p_role_id numeric, p_person_id character varying, p_alias_id numeric, p_study_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_person_role_detail_f(p_role_id numeric, p_person_id character varying, p_alias_id numeric, p_study_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_person_role_detail_f(p_role_id numeric, p_person_id character varying, p_alias_id numeric, p_study_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_personaddress_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_add_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) TO portal_app;


--
-- Name: mrs_add_personphone_f(character varying, character varying, character varying, numeric, numeric, numeric, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_personphone_f(p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_personphone_f(p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_personphone_f(p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_add_personphone_f(p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_personphone_f(p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_prd_id numeric) TO portal_app;


--
-- Name: mrs_add_pr_f(character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_pr_f(p_pr_number character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_pr_f(p_pr_number character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_pr_f(p_pr_number character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_pr_f(p_pr_number character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_proj_study_det_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_proj_study_det_f(p_study_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_proj_study_det_f(p_study_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_proj_study_det_f(p_study_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_proj_study_det_f(p_study_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_protocol_f(numeric, numeric, character varying, numeric, numeric, integer, integer, character varying, integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_protocol_f(p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_protocol_f(p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_protocol_f(p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_protocol_f(p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_protocol_f(p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) TO portal_app;


--
-- Name: mrs_add_protocol_requirement_f(numeric, character varying, character varying, character varying, character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_protocol_requirement_f(p_protocol_id numeric, p_table_name character varying, p_owner character varying, p_column_name character varying, p_column_type character varying, p_column_req_value_string character varying, p_column_req_value_number numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_protocol_requirement_f(p_protocol_id numeric, p_table_name character varying, p_owner character varying, p_column_name character varying, p_column_type character varying, p_column_req_value_string character varying, p_column_req_value_number numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_protocol_requirement_f(p_protocol_id numeric, p_table_name character varying, p_owner character varying, p_column_name character varying, p_column_type character varying, p_column_req_value_string character varying, p_column_req_value_number numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_add_protocol_requirement_f(p_protocol_id numeric, p_table_name character varying, p_owner character varying, p_column_name character varying, p_column_type character varying, p_column_req_value_string character varying, p_column_req_value_number numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_protocol_requirement_f(p_protocol_id numeric, p_table_name character varying, p_owner character varying, p_column_name character varying, p_column_type character varying, p_column_req_value_string character varying, p_column_req_value_number numeric) TO portal_app;


--
-- Name: mrs_add_queue_template_f(character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_queue_template_f(p_template_name character varying, p_study_id numeric, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_queue_template_f(p_template_name character varying, p_study_id numeric, p_dbtrans_username character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_queue_template_f(p_template_name character varying, p_study_id numeric, p_dbtrans_username character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_queue_template_f(p_template_name character varying, p_study_id numeric, p_dbtrans_username character varying) TO micis_app;


--
-- Name: mrs_add_queue_template_inst_f(numeric, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_queue_template_inst_f(p_template_id numeric, p_instrument_id numeric, p_sort_order numeric, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_queue_template_inst_f(p_template_id numeric, p_instrument_id numeric, p_sort_order numeric, p_dbtrans_username character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_queue_template_inst_f(p_template_id numeric, p_instrument_id numeric, p_sort_order numeric, p_dbtrans_username character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_queue_template_inst_f(p_template_id numeric, p_instrument_id numeric, p_sort_order numeric, p_dbtrans_username character varying) TO micis_app;


--
-- Name: mrs_add_rad_comment_f(character varying, boolean, text); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_rad_comment_f(p_comment_text character varying, p_requires_followup boolean, p_category text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_rad_comment_f(p_comment_text character varying, p_requires_followup boolean, p_category text) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_rad_comment_f(p_comment_text character varying, p_requires_followup boolean, p_category text) TO postgres;
GRANT ALL ON FUNCTION mrs_add_rad_comment_f(p_comment_text character varying, p_requires_followup boolean, p_category text) TO micis_app;


--
-- Name: mrs_add_rate_f(numeric, numeric, character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_rate_f(p_scanner_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_rate_amt numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_rate_f(p_scanner_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_rate_amt numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_rate_f(p_scanner_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_rate_amt numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_add_rate_f(p_scanner_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_rate_amt numeric) TO micis_app;


--
-- Name: mrs_add_rater_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_rater_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_alias character varying, p_study_id numeric, p_alias_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_rater_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_alias character varying, p_study_id numeric, p_alias_id numeric, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_rater_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_alias character varying, p_study_id numeric, p_alias_id numeric, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_rater_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_alias character varying, p_study_id numeric, p_alias_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_rater_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_alias character varying, p_study_id numeric, p_alias_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_add_recent_scan_export_f(character varying, text, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_recent_scan_export_f(p_dbuser character varying, p_query_text text, p_label character varying, p_scan_export_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_recent_scan_export_f(p_dbuser character varying, p_query_text text, p_label character varying, p_scan_export_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_recent_scan_export_f(p_dbuser character varying, p_query_text text, p_label character varying, p_scan_export_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_add_recent_scan_export_f(p_dbuser character varying, p_query_text text, p_label character varying, p_scan_export_id numeric) TO micis_app;


--
-- Name: mrs_add_recent_scan_export_study_f(numeric, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_recent_scan_export_study_f(p_scan_export_id numeric, p_study_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_recent_scan_export_study_f(p_scan_export_id numeric, p_study_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_recent_scan_export_study_f(p_scan_export_id numeric, p_study_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_add_recent_scan_export_study_f(p_scan_export_id numeric, p_study_id numeric) TO micis_app;


--
-- Name: mrs_add_role_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_role_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_role_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_role_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_role_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_saved_query_f(character varying, character varying, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_saved_query_f(p_username character varying, p_label character varying, p_json text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_saved_query_f(p_username character varying, p_label character varying, p_json text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_saved_query_f(p_username character varying, p_label character varying, p_json text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_saved_query_f(p_username character varying, p_label character varying, p_json text) TO micis_app;


--
-- Name: mrs_add_scan_sessions_review_f(numeric, character varying, timestamp without time zone, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_scan_sessions_review_f(p_scan_id numeric, p_person_id character varying, p_review_date timestamp without time zone, p_recommendation_code character varying, p_recommendation_comments character varying, p_dbtrans_username_pt character varying, p_report_template character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_scan_sessions_review_f(p_scan_id numeric, p_person_id character varying, p_review_date timestamp without time zone, p_recommendation_code character varying, p_recommendation_comments character varying, p_dbtrans_username_pt character varying, p_report_template character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_scan_sessions_review_f(p_scan_id numeric, p_person_id character varying, p_review_date timestamp without time zone, p_recommendation_code character varying, p_recommendation_comments character varying, p_dbtrans_username_pt character varying, p_report_template character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_scan_sessions_review_f(p_scan_id numeric, p_person_id character varying, p_review_date timestamp without time zone, p_recommendation_code character varying, p_recommendation_comments character varying, p_dbtrans_username_pt character varying, p_report_template character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_scan_sessions_review_f(p_scan_id numeric, p_person_id character varying, p_review_date timestamp without time zone, p_recommendation_code character varying, p_recommendation_comments character varying, p_dbtrans_username_pt character varying, p_report_template character varying) TO transfer_app;


--
-- Name: mrs_add_scan_slots_f(character varying, numeric, character varying, numeric, timestamp without time zone); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_scan_slots_f(p_pi_id character varying, p_default_charge_code_id numeric, p_user_entered character varying, p_count numeric, p_date_effective timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_scan_slots_f(p_pi_id character varying, p_default_charge_code_id numeric, p_user_entered character varying, p_count numeric, p_date_effective timestamp without time zone) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_scan_slots_f(p_pi_id character varying, p_default_charge_code_id numeric, p_user_entered character varying, p_count numeric, p_date_effective timestamp without time zone) TO postgres;
GRANT ALL ON FUNCTION mrs_add_scan_slots_f(p_pi_id character varying, p_default_charge_code_id numeric, p_user_entered character varying, p_count numeric, p_date_effective timestamp without time zone) TO micis_app;


--
-- Name: mrs_add_scanner_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_scanner_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_field_strength numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_scanner_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_field_strength numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_scanner_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_field_strength numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_scanner_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_field_strength numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_scanner_f(p_label character varying, p_description character varying, p_site_id character varying, p_model character varying, p_manufacturer character varying, p_station character varying, p_software_version character varying, p_field_strength numeric, p_modality_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_add_series_data_f(character varying, numeric, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_series_data_f(p_series_id character varying, p_scan_data_type_id numeric, p_value character varying, p_series_data_type_instance numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_series_data_f(p_series_id character varying, p_scan_data_type_id numeric, p_value character varying, p_series_data_type_instance numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_series_data_f(p_series_id character varying, p_scan_data_type_id numeric, p_value character varying, p_series_data_type_instance numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_series_data_f(p_series_id character varying, p_scan_data_type_id numeric, p_value character varying, p_series_data_type_instance numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_series_data_f(p_series_id character varying, p_scan_data_type_id numeric, p_value character varying, p_series_data_type_instance numeric, p_dbtrans_username_pt character varying) TO transfer_app;


--
-- Name: mrs_add_series_f(character varying, numeric, numeric, character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_series_f(p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_series_f(p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_series_f(p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_series_f(p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_series_f(p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) TO portal_app;
GRANT ALL ON FUNCTION mrs_add_series_f(p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) TO transfer_app;


--
-- Name: mrs_add_series_label_f(character varying, character varying, numeric, numeric, numeric, boolean, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_series_label_f(p_label character varying, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_modality_id numeric, p_is_hidden boolean, p_rad_loaded boolean, p_dx_excluded boolean, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_series_label_f(p_label character varying, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_modality_id numeric, p_is_hidden boolean, p_rad_loaded boolean, p_dx_excluded boolean, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_series_label_f(p_label character varying, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_modality_id numeric, p_is_hidden boolean, p_rad_loaded boolean, p_dx_excluded boolean, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_series_label_f(p_label character varying, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_modality_id numeric, p_is_hidden boolean, p_rad_loaded boolean, p_dx_excluded boolean, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_sharing_rule_f(numeric, numeric, numeric, character varying, character varying, numeric, character varying, numeric, character varying, numeric, numeric, character varying, timestamp without time zone, text, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_sharing_rule_f(p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_sharing_rule_f(p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_sharing_rule_f(p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_sharing_rule_f(p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_sharing_rules_exception_f(numeric, numeric, numeric, numeric, character varying, numeric, character varying, numeric, character varying, numeric, numeric, character varying, timestamp without time zone, text, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_sharing_rules_exception_f(p_rule_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval numeric, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_sharing_rules_exception_f(p_rule_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval numeric, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_sharing_rules_exception_f(p_rule_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval numeric, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_sharing_rules_exception_f(p_rule_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval numeric, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_software_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_software_f(s_name character varying, s_version character varying, s_description character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_software_f(s_name character varying, s_version character varying, s_description character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_software_f(s_name character varying, s_version character varying, s_description character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_software_f(s_name character varying, s_version character varying, s_description character varying) TO micis_app;


--
-- Name: mrs_add_source_type_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_source_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_source_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_source_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_source_type_f(p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_staged_scan_f(text, text, numeric, timestamp without time zone, numeric, text, text, text, text, text, text, boolean, text, text); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_staged_scan_f(p_label text, p_segment_interval text, p_scanner_id numeric, p_scan_date timestamp without time zone, p_subject_age numeric, p_notes text, p_study_dir_name text, p_pi_id text, p_ursi text, p_file_path text, p_source_filename text, p_is_error boolean, p_uid text, p_user_entered text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_staged_scan_f(p_label text, p_segment_interval text, p_scanner_id numeric, p_scan_date timestamp without time zone, p_subject_age numeric, p_notes text, p_study_dir_name text, p_pi_id text, p_ursi text, p_file_path text, p_source_filename text, p_is_error boolean, p_uid text, p_user_entered text) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_staged_scan_f(p_label text, p_segment_interval text, p_scanner_id numeric, p_scan_date timestamp without time zone, p_subject_age numeric, p_notes text, p_study_dir_name text, p_pi_id text, p_ursi text, p_file_path text, p_source_filename text, p_is_error boolean, p_uid text, p_user_entered text) TO postgres;
GRANT ALL ON FUNCTION mrs_add_staged_scan_f(p_label text, p_segment_interval text, p_scanner_id numeric, p_scan_date timestamp without time zone, p_subject_age numeric, p_notes text, p_study_dir_name text, p_pi_id text, p_ursi text, p_file_path text, p_source_filename text, p_is_error boolean, p_uid text, p_user_entered text) TO PUBLIC;
GRANT ALL ON FUNCTION mrs_add_staged_scan_f(p_label text, p_segment_interval text, p_scanner_id numeric, p_scan_date timestamp without time zone, p_subject_age numeric, p_notes text, p_study_dir_name text, p_pi_id text, p_ursi text, p_file_path text, p_source_filename text, p_is_error boolean, p_uid text, p_user_entered text) TO micis_app;


--
-- Name: mrs_add_staged_series_f(character varying, numeric, character varying, numeric, character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_staged_series_f(p_label character varying, p_scan_id numeric, p_base_path character varying, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_staged_series_f(p_label character varying, p_scan_id numeric, p_base_path character varying, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_staged_series_f(p_label character varying, p_scan_id numeric, p_base_path character varying, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_add_staged_series_f(p_label character varying, p_scan_id numeric, p_base_path character varying, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric) TO micis_app;


--
-- Name: mrs_add_study_code_f(character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_study_code_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_study_code_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_study_code_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_study_code_f(p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_study_f(character varying, character varying, character varying, character varying, numeric, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, boolean, character varying, character varying, numeric, boolean, character varying, boolean, boolean, character varying, character varying, boolean, boolean, boolean); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_study_f(p_label character varying, p_description character varying, p_irb_number character varying, p_hrrc_num character varying, p_approved_sessions numeric, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_title character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_is_rdoc_study boolean) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_study_f(p_label character varying, p_description character varying, p_irb_number character varying, p_hrrc_num character varying, p_approved_sessions numeric, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_title character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_is_rdoc_study boolean) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_study_f(p_label character varying, p_description character varying, p_irb_number character varying, p_hrrc_num character varying, p_approved_sessions numeric, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_title character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_is_rdoc_study boolean) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_study_f(p_label character varying, p_description character varying, p_irb_number character varying, p_hrrc_num character varying, p_approved_sessions numeric, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_title character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_is_rdoc_study boolean) TO micis_app;


--
-- Name: mrs_add_study_interval_f(numeric, character varying, numeric, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_study_message_f(numeric, numeric, numeric, boolean, integer, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_add_study_proj_f(character varying, numeric, timestamp without time zone, timestamp without time zone, character varying, character varying, character varying, character varying, numeric, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_study_proj_f(p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_study_proj_f(p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_study_proj_f(p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_study_proj_f(p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_study_proj_f(p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_add_study_recruitment_criteria_f(numeric, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_study_recruitment_criteria_f(study_id_f numeric, criteria_id_f numeric, value_f character varying, user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_study_recruitment_criteria_f(study_id_f numeric, criteria_id_f numeric, value_f character varying, user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_study_recruitment_criteria_f(study_id_f numeric, criteria_id_f numeric, value_f character varying, user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_study_recruitment_criteria_f(study_id_f numeric, criteria_id_f numeric, value_f character varying, user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_study_recruitment_criteria_f(study_id_f numeric, criteria_id_f numeric, value_f character varying, user_f character varying) TO portal_app;


--
-- Name: mrs_add_subject_class_details_f(character varying, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_add_subject_f(character varying, character varying, character varying, numeric, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, character varying, boolean, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_subject_f(p_site_id character varying, p_sid character varying, p_match_level character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_email_address character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_mod_user character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric, p_password character varying, p_is_p2_active boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_subject_f(p_site_id character varying, p_sid character varying, p_match_level character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_email_address character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_mod_user character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric, p_password character varying, p_is_p2_active boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_subject_f(p_site_id character varying, p_sid character varying, p_match_level character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_email_address character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_mod_user character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric, p_password character varying, p_is_p2_active boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_subject_f(p_site_id character varying, p_sid character varying, p_match_level character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_email_address character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_mod_user character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric, p_password character varying, p_is_p2_active boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_subject_f(p_site_id character varying, p_sid character varying, p_match_level character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_email_address character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_mod_user character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric, p_password character varying, p_is_p2_active boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying) TO portal_app;


--
-- Name: mrs_add_subject_login_f(character varying, numeric, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_subject_login_f(p_usid character varying, p_study_id numeric, p_subject_id character varying, p_source_type numeric, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_subject_login_f(p_usid character varying, p_study_id numeric, p_subject_id character varying, p_source_type numeric, p_dbtrans_username character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_subject_login_f(p_usid character varying, p_study_id numeric, p_subject_id character varying, p_source_type numeric, p_dbtrans_username character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_subject_login_f(p_usid character varying, p_study_id numeric, p_subject_id character varying, p_source_type numeric, p_dbtrans_username character varying) TO micis_app;


--
-- Name: mrs_add_subject_phone_f(character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_subject_phone_f(p_usid character varying, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_subject_phone_f(p_usid character varying, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_subject_phone_f(p_usid character varying, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_subject_phone_f(p_usid character varying, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_subject_phone_f(p_usid character varying, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying) TO portal_app;


--
-- Name: mrs_add_subject_tag_f(character varying, character varying, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_subject_tag_f(p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_subject_tag_f(p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_subject_tag_f(p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_subject_tag_f(p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_subject_type_f(numeric, character varying, character varying, boolean, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_subject_type_f(p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_allow_p2_self_enrollment boolean, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_subject_type_f(p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_allow_p2_self_enrollment boolean, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_subject_type_f(p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_allow_p2_self_enrollment boolean, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_subject_type_f(p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_allow_p2_self_enrollment boolean, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_subject_type_f(p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_allow_p2_self_enrollment boolean, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_add_subject_type_group_f(character varying, character varying, numeric[], character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_subject_type_group_f(label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_subject_type_group_f(label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_subject_type_group_f(label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_subject_type_group_f(label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_subject_type_group_f(label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) TO portal_app;


--
-- Name: mrs_add_submitted_asmt_f(numeric, timestamp without time zone, timestamp without time zone, character varying, numeric, numeric, numeric, character varying, character varying, character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_submitted_asmt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_submitted_asmt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_submitted_asmt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_add_submitted_asmt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_submitted_asmt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) TO portal_app;


--
-- Name: mrs_add_submitted_asmt_f_deleteme(numeric, timestamp without time zone, character varying, numeric, numeric, numeric, character varying, character varying, character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_submitted_asmt_f_deleteme(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_submitted_asmt_f_deleteme(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_submitted_asmt_f_deleteme(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_add_submitted_asmt_f_deleteme(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_successfully_completed character varying, p_study_id numeric) TO micis_app;


--
-- Name: mrs_add_submitted_asmt_tblt_f(numeric, timestamp without time zone, timestamp without time zone, character varying, character varying, numeric, numeric, character varying, character varying, mrs_response_type[], numeric, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_xml_source text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_xml_source text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_xml_source text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_xml_source text) TO micis_app;


--
-- Name: mrs_add_submitted_asmt_tblt_f(numeric, timestamp without time zone, timestamp without time zone, character varying, character varying, numeric, numeric, character varying, character varying, mrs_response_type[], numeric, boolean, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_uses_double_entry boolean, p_xml_source text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_uses_double_entry boolean, p_xml_source text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_uses_double_entry boolean, p_xml_source text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_uses_double_entry boolean, p_xml_source text) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_submitted_asmt_tblt_f(p_instrument_id numeric, p_assessment_date timestamp without time zone, p_assessment_end_date timestamp without time zone, p_ursi character varying, p_rater1 character varying, p_rater2 numeric, p_source_type numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying, p_responses mrs_response_type[], p_study_id numeric, p_uses_double_entry boolean, p_xml_source text) TO transfer_app;


--
-- Name: mrs_add_system_phi_log_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_system_phi_log_f(p_usid character varying, p_view_source character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_system_phi_log_f(p_usid character varying, p_view_source character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_system_phi_log_f(p_usid character varying, p_view_source character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_system_phi_log_f(p_usid character varying, p_view_source character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_add_trade_name_f(character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_trade_name_f(p_trade_name character varying, p_description character varying, p_drug_code character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_trade_name_f(p_trade_name character varying, p_description character varying, p_drug_code character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_trade_name_f(p_trade_name character varying, p_description character varying, p_drug_code character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_add_trade_name_f(p_trade_name character varying, p_description character varying, p_drug_code character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_trade_name_f(p_trade_name character varying, p_description character varying, p_drug_code character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_add_user_app_option_f(character varying, integer, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_add_user_app_option_f(p_username character varying, p_option_id integer, p_option_name character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_user_app_option_f(p_username character varying, p_option_id integer, p_option_name character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_add_user_app_option_f(p_username character varying, p_option_id integer, p_option_name character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_add_user_app_option_f(p_username character varying, p_option_id integer, p_option_name character varying, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_add_user_app_option_f(p_username character varying, p_option_id integer, p_option_name character varying, p_mod_user character varying) TO portal_app;


--
-- Name: mrs_add_user_scan_export_option_f(character varying, text); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_add_user_scan_export_option_f(p_db_username character varying, p_options_string text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_add_user_scan_export_option_f(p_db_username character varying, p_options_string text) FROM postgres;
GRANT ALL ON FUNCTION mrs_add_user_scan_export_option_f(p_db_username character varying, p_options_string text) TO postgres;
GRANT ALL ON FUNCTION mrs_add_user_scan_export_option_f(p_db_username character varying, p_options_string text) TO micis_app;


--
-- Name: mrs_analysis_add_analyzed_series_f(character varying, character varying, character varying, timestamp without time zone, timestamp without time zone, integer, character varying, boolean, integer); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_analysis_add_analyzed_series_f(f_series_id character varying, f_cpu_host character varying, f_cpu_env character varying, f_start timestamp without time zone, f_end timestamp without time zone, f_instance integer, f_notes character varying, f_is_usable boolean, f_software_id integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_analysis_add_analyzed_series_f(f_series_id character varying, f_cpu_host character varying, f_cpu_env character varying, f_start timestamp without time zone, f_end timestamp without time zone, f_instance integer, f_notes character varying, f_is_usable boolean, f_software_id integer) FROM postgres;
GRANT ALL ON FUNCTION mrs_analysis_add_analyzed_series_f(f_series_id character varying, f_cpu_host character varying, f_cpu_env character varying, f_start timestamp without time zone, f_end timestamp without time zone, f_instance integer, f_notes character varying, f_is_usable boolean, f_software_id integer) TO postgres;
GRANT ALL ON FUNCTION mrs_analysis_add_analyzed_series_f(f_series_id character varying, f_cpu_host character varying, f_cpu_env character varying, f_start timestamp without time zone, f_end timestamp without time zone, f_instance integer, f_notes character varying, f_is_usable boolean, f_software_id integer) TO micis_app;
GRANT ALL ON FUNCTION mrs_analysis_add_analyzed_series_f(f_series_id character varying, f_cpu_host character varying, f_cpu_env character varying, f_start timestamp without time zone, f_end timestamp without time zone, f_instance integer, f_notes character varying, f_is_usable boolean, f_software_id integer) TO portal_app;


--
-- Name: mrs_analysis_add_vbm_img_f(character varying, character varying, timestamp without time zone, bigint, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_analysis_add_vbm_img_f(label_f character varying, file_type_f character varying, creation_datetime_f timestamp without time zone, size_kb_f bigint, desc_f character varying, scan_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_analysis_add_vbm_img_f(label_f character varying, file_type_f character varying, creation_datetime_f timestamp without time zone, size_kb_f bigint, desc_f character varying, scan_id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_analysis_add_vbm_img_f(label_f character varying, file_type_f character varying, creation_datetime_f timestamp without time zone, size_kb_f bigint, desc_f character varying, scan_id_f numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_analysis_add_vbm_img_f(label_f character varying, file_type_f character varying, creation_datetime_f timestamp without time zone, size_kb_f bigint, desc_f character varying, scan_id_f numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_analysis_add_vbm_img_f(label_f character varying, file_type_f character varying, creation_datetime_f timestamp without time zone, size_kb_f bigint, desc_f character varying, scan_id_f numeric) TO portal_app;


--
-- Name: mrs_analysis_delete_one_substudy_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_analysis_delete_one_substudy_f(study_id_f numeric, sub_study_name_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_analysis_delete_one_substudy_f(study_id_f numeric, sub_study_name_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_analysis_delete_one_substudy_f(study_id_f numeric, sub_study_name_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_analysis_delete_one_substudy_f(study_id_f numeric, sub_study_name_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_analysis_delete_one_substudy_f(study_id_f numeric, sub_study_name_f character varying) TO portal_app;


--
-- Name: mrs_analysis_level2_update_analyzed_series_f(numeric, character varying, character varying, integer, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_analysis_level2_update_analyzed_series_f(scan_id_f numeric, module_f character varying, notes_f character varying, is_usable_f integer, software_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_analysis_level2_update_analyzed_series_f(scan_id_f numeric, module_f character varying, notes_f character varying, is_usable_f integer, software_id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_analysis_level2_update_analyzed_series_f(scan_id_f numeric, module_f character varying, notes_f character varying, is_usable_f integer, software_id_f numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_analysis_level2_update_analyzed_series_f(scan_id_f numeric, module_f character varying, notes_f character varying, is_usable_f integer, software_id_f numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_analysis_level2_update_analyzed_series_f(scan_id_f numeric, module_f character varying, notes_f character varying, is_usable_f integer, software_id_f numeric) TO portal_app;


--
-- Name: mrs_analysis_set_substudy_permission_f(numeric, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_analysis_set_substudy_permission_f(study_id_f numeric, sub_study_name_f character varying, permission_f character varying, sub_study_creator_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_analysis_set_substudy_permission_f(study_id_f numeric, sub_study_name_f character varying, permission_f character varying, sub_study_creator_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_analysis_set_substudy_permission_f(study_id_f numeric, sub_study_name_f character varying, permission_f character varying, sub_study_creator_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_analysis_set_substudy_permission_f(study_id_f numeric, sub_study_name_f character varying, permission_f character varying, sub_study_creator_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_analysis_set_substudy_permission_f(study_id_f numeric, sub_study_name_f character varying, permission_f character varying, sub_study_creator_f character varying) TO portal_app;


--
-- Name: mrs_analysis_update_analyzed_series_f(character varying, character varying, boolean, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_analysis_update_analyzed_series_f(series_id_f character varying, notes_f character varying, is_usable_f boolean, software_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_analysis_update_analyzed_series_f(series_id_f character varying, notes_f character varying, is_usable_f boolean, software_id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_analysis_update_analyzed_series_f(series_id_f character varying, notes_f character varying, is_usable_f boolean, software_id_f numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_analysis_update_analyzed_series_f(series_id_f character varying, notes_f character varying, is_usable_f boolean, software_id_f numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_analysis_update_analyzed_series_f(series_id_f character varying, notes_f character varying, is_usable_f boolean, software_id_f numeric) TO portal_app;


--
-- Name: mrs_analysis_update_ql_statistic_f(numeric, integer, integer, integer, integer, integer, integer, integer, integer); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_analysis_update_ql_statistic_f(study_id_f numeric, total_fmri_task_f integer, analyzed_fmri_task_f integer, total_dti_task_f integer, analyzed_dti_task_f integer, total_vbm_task_f integer, analyzed_vbm_task_f integer, total_fs_task_f integer, analyzed_fs_task_f integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_analysis_update_ql_statistic_f(study_id_f numeric, total_fmri_task_f integer, analyzed_fmri_task_f integer, total_dti_task_f integer, analyzed_dti_task_f integer, total_vbm_task_f integer, analyzed_vbm_task_f integer, total_fs_task_f integer, analyzed_fs_task_f integer) FROM postgres;
GRANT ALL ON FUNCTION mrs_analysis_update_ql_statistic_f(study_id_f numeric, total_fmri_task_f integer, analyzed_fmri_task_f integer, total_dti_task_f integer, analyzed_dti_task_f integer, total_vbm_task_f integer, analyzed_vbm_task_f integer, total_fs_task_f integer, analyzed_fs_task_f integer) TO postgres;
GRANT ALL ON FUNCTION mrs_analysis_update_ql_statistic_f(study_id_f numeric, total_fmri_task_f integer, analyzed_fmri_task_f integer, total_dti_task_f integer, analyzed_dti_task_f integer, total_vbm_task_f integer, analyzed_vbm_task_f integer, total_fs_task_f integer, analyzed_fs_task_f integer) TO micis_app;
GRANT ALL ON FUNCTION mrs_analysis_update_ql_statistic_f(study_id_f numeric, total_fmri_task_f integer, analyzed_fmri_task_f integer, total_dti_task_f integer, analyzed_dti_task_f integer, total_vbm_task_f integer, analyzed_vbm_task_f integer, total_fs_task_f integer, analyzed_fs_task_f integer) TO portal_app;


--
-- Name: mrs_analysis_update_substudy_f(numeric, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_analysis_update_substudy_f(study_id_f numeric, sub_study_name_f character varying, scan_id_f numeric, action_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_analysis_update_substudy_f(study_id_f numeric, sub_study_name_f character varying, scan_id_f numeric, action_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_analysis_update_substudy_f(study_id_f numeric, sub_study_name_f character varying, scan_id_f numeric, action_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_analysis_update_substudy_f(study_id_f numeric, sub_study_name_f character varying, scan_id_f numeric, action_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_analysis_update_substudy_f(study_id_f numeric, sub_study_name_f character varying, scan_id_f numeric, action_f character varying) TO portal_app;


--
-- Name: mrs_analysis_update_vbmqa_f(integer, numeric, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_analysis_update_vbmqa_f(f_scan_id integer, f_qa_value numeric, f_qa_status numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_analysis_update_vbmqa_f(f_scan_id integer, f_qa_value numeric, f_qa_status numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_analysis_update_vbmqa_f(f_scan_id integer, f_qa_value numeric, f_qa_status numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_analysis_update_vbmqa_f(f_scan_id integer, f_qa_value numeric, f_qa_status numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_analysis_update_vbmqa_f(f_scan_id integer, f_qa_value numeric, f_qa_status numeric) TO portal_app;


--
-- Name: mrs_assign_all_asmt_response_values_f(numeric, mrs_response_type[], character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_assign_all_asmt_response_values_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_all_asmt_response_values_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_assign_all_asmt_response_values_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_assign_all_asmt_response_values_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) TO p2_app;
GRANT ALL ON FUNCTION mrs_assign_all_asmt_response_values_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) TO micis_app;


--
-- Name: mrs_assign_assessment_value_f(numeric, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_assessment_value_f(p_assessment_id numeric, p_column_name character varying, p_column_value character varying, p_date_format character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_assessment_value_f(p_assessment_id numeric, p_column_name character varying, p_column_value character varying, p_date_format character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_assessment_value_f(p_assessment_id numeric, p_column_name character varying, p_column_value character varying, p_date_format character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_assessment_value_f(p_assessment_id numeric, p_column_name character varying, p_column_value character varying, p_date_format character varying, p_dbtrans_username_pt character varying) TO p2_app;
GRANT ALL ON FUNCTION mrs_assign_assessment_value_f(p_assessment_id numeric, p_column_name character varying, p_column_value character varying, p_date_format character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_assign_assessment_value_f(p_assessment_id numeric, p_column_name character varying, p_column_value character varying, p_date_format character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_assign_doc_category_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_doc_category_f(p_file_id numeric, p_category_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_doc_category_f(p_file_id numeric, p_category_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_doc_category_f(p_file_id numeric, p_category_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_doc_category_f(p_file_id numeric, p_category_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_assign_doc_category_f(p_file_id numeric, p_category_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_assign_doc_project_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_doc_project_f(p_file_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_doc_project_f(p_file_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_doc_project_f(p_file_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_doc_project_f(p_file_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_assign_doc_project_f(p_file_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_assign_drug_cat_f(character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_drug_cat_f(p_drug_code character varying, p_category_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_drug_cat_f(p_drug_code character varying, p_category_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_drug_cat_f(p_drug_code character varying, p_category_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_drug_cat_f(p_drug_code character varying, p_category_id numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_assign_drug_cat_f(p_drug_code character varying, p_category_id numeric) TO portal_app;


--
-- Name: mrs_assign_gdrug_tradenm_f(character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) TO micis_app;


--
-- Name: mrs_assign_instrument_study_f(numeric, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_assign_instrument_study_f(p_instrument_id numeric, p_study_id numeric, p_is_owner numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_instrument_study_f(p_instrument_id numeric, p_study_id numeric, p_is_owner numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_assign_instrument_study_f(p_instrument_id numeric, p_study_id numeric, p_is_owner numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_assign_instrument_study_f(p_instrument_id numeric, p_study_id numeric, p_is_owner numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_assign_multi_response_value_f(numeric, character varying, numeric, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_multi_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_multi_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_multi_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_multi_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) TO micis_app;


--
-- Name: mrs_assign_personaddress_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_assign_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_assign_personphone_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_assign_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_assign_proj_co_inv_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_assign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_assign_proj_datadom_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_assign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_assign_response_value_f(numeric, character varying, numeric, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) TO PUBLIC;
GRANT ALL ON FUNCTION mrs_assign_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbuser character varying) TO micis_app;


--
-- Name: mrs_assign_role_f(numeric, character varying, character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_assign_role_f(p_role_id numeric, p_person_id character varying, p_alias character varying, p_dbtrans_username_pt character varying, p_study_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_role_f(p_role_id numeric, p_person_id character varying, p_alias character varying, p_dbtrans_username_pt character varying, p_study_id numeric) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_assign_role_f(p_role_id numeric, p_person_id character varying, p_alias character varying, p_dbtrans_username_pt character varying, p_study_id numeric) TO ni_developers;
GRANT ALL ON FUNCTION mrs_assign_role_f(p_role_id numeric, p_person_id character varying, p_alias character varying, p_dbtrans_username_pt character varying, p_study_id numeric) TO micis_app;


--
-- Name: mrs_assign_scan_ext_prop_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) TO micis_app;


--
-- Name: mrs_assign_sharing_rule_study_f(numeric, numeric, character varying, timestamp without time zone, character varying, timestamp without time zone, text, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_assign_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_assign_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_assign_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_assign_subject_tag_detail_f(character varying, numeric, character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_assign_subject_tag_detail_f(p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_subject_tag_detail_f(p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_assign_subject_tag_detail_f(p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_assign_subject_tag_detail_f(p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_assign_subject_type_by_ursi_f(character varying, numeric, character varying, character varying, boolean, character varying, character varying, timestamp without time zone); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_assign_subject_type_by_ursi_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_subject_type_by_ursi_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_assign_subject_type_by_ursi_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone) TO ni_developers;
GRANT ALL ON FUNCTION mrs_assign_subject_type_by_ursi_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone) TO micis_app;
GRANT ALL ON FUNCTION mrs_assign_subject_type_by_ursi_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone) TO portal_app;


--
-- Name: mrs_assign_subject_type_f(character varying, numeric, character varying, character varying, boolean, character varying, character varying, timestamp without time zone, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_assign_subject_type_f(p_usid character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone, p_ethnicity character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_assign_subject_type_f(p_usid character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone, p_ethnicity character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_assign_subject_type_f(p_usid character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone, p_ethnicity character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_assign_subject_type_f(p_usid character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone, p_ethnicity character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_assign_subject_type_f(p_usid character varying, p_subject_type_id numeric, p_notes character varying, p_agreestosharedata character varying, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying, p_site_id character varying, p_consent_date timestamp without time zone, p_ethnicity character varying) TO portal_app;


--
-- Name: mrs_auto_read_no_anat_f(); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_auto_read_no_anat_f() FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_auto_read_no_anat_f() FROM ni_developers;
GRANT ALL ON FUNCTION mrs_auto_read_no_anat_f() TO ni_developers;
GRANT ALL ON FUNCTION mrs_auto_read_no_anat_f() TO transfer_app;


--
-- Name: mrs_backfill_all_autopop_questions_f(numeric, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_backfill_all_autopop_questions_f(p_instrument_id numeric, p_fill_blanks boolean, p_dbuser character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_backfill_all_autopop_questions_f(p_instrument_id numeric, p_fill_blanks boolean, p_dbuser character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_backfill_all_autopop_questions_f(p_instrument_id numeric, p_fill_blanks boolean, p_dbuser character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_backfill_all_autopop_questions_f(p_instrument_id numeric, p_fill_blanks boolean, p_dbuser character varying) TO micis_app;


--
-- Name: mrs_backfill_autopop_questions_f(numeric, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_backfill_autopop_questions_f(p_instrument_id numeric, p_question_id character varying, p_fill_blanks boolean, p_dbuser character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_backfill_autopop_questions_f(p_instrument_id numeric, p_question_id character varying, p_fill_blanks boolean, p_dbuser character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_backfill_autopop_questions_f(p_instrument_id numeric, p_question_id character varying, p_fill_blanks boolean, p_dbuser character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_backfill_autopop_questions_f(p_instrument_id numeric, p_question_id character varying, p_fill_blanks boolean, p_dbuser character varying) TO micis_app;


--
-- Name: mrs_backfill_inst_question_f(numeric, character varying, character varying[], numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_backfill_inst_question_f(p_instrument_id numeric, p_question_id character varying, p_dep_qids character varying[], p_assessment_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_backfill_inst_question_f(p_instrument_id numeric, p_question_id character varying, p_dep_qids character varying[], p_assessment_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_backfill_inst_question_f(p_instrument_id numeric, p_question_id character varying, p_dep_qids character varying[], p_assessment_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_backfill_inst_question_f(p_instrument_id numeric, p_question_id character varying, p_dep_qids character varying[], p_assessment_id numeric) TO micis_app;


--
-- Name: mrs_batch_update_q_requirement_f(numeric, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_batch_update_q_requirement_f(instrument_id_f numeric, all_required_f boolean, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_batch_update_q_requirement_f(instrument_id_f numeric, all_required_f boolean, mod_user_f character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_batch_update_q_requirement_f(instrument_id_f numeric, all_required_f boolean, mod_user_f character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_batch_update_q_requirement_f(instrument_id_f numeric, all_required_f boolean, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_batch_update_q_requirement_f(instrument_id_f numeric, all_required_f boolean, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_cancel_portal_event_auto_email_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_cancel_portal_event_auto_email_f(study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_cancel_portal_event_auto_email_f(study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_cancel_portal_event_auto_email_f(study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_cancel_portal_event_auto_email_f(study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_cancel_portal_event_auto_email_f(study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_clean_old_client_errors_f(); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_clean_old_client_errors_f() FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_clean_old_client_errors_f() FROM postgres;
GRANT ALL ON FUNCTION mrs_clean_old_client_errors_f() TO postgres;
GRANT ALL ON FUNCTION mrs_clean_old_client_errors_f() TO micis_app;


--
-- Name: mrs_clear_subj_ass_queue_f(numeric, numeric, character varying, integer); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_clear_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_mod_user character varying, p_queue_type_id integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_clear_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_mod_user character varying, p_queue_type_id integer) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_clear_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_mod_user character varying, p_queue_type_id integer) TO ni_developers;
GRANT ALL ON FUNCTION mrs_clear_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_mod_user character varying, p_queue_type_id integer) TO micis_app;


--
-- Name: mrs_client_assessment_backup_add_f(integer, numeric, text, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_client_assessment_backup_add_f(p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_client_assessment_backup_add_f(p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_client_assessment_backup_add_f(p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_client_assessment_backup_add_f(p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) TO micis_app;


--
-- Name: mrs_client_assessment_backup_update_f(integer, text, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_client_assessment_backup_update_f(p_backup_id integer, p_assessment_json text, p_db_transaction_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_client_assessment_backup_update_f(p_backup_id integer, p_assessment_json text, p_db_transaction_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_client_assessment_backup_update_f(p_backup_id integer, p_assessment_json text, p_db_transaction_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_client_assessment_backup_update_f(p_backup_id integer, p_assessment_json text, p_db_transaction_username character varying) TO micis_app;


--
-- Name: mrs_complete_assessment_f(numeric, numeric, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_complete_assessment_f(p_assessment_id numeric, p_elapsed_time numeric, p_dbtrans_username_pt character varying, p_study_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_complete_assessment_f(p_assessment_id numeric, p_elapsed_time numeric, p_dbtrans_username_pt character varying, p_study_id numeric) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_complete_assessment_f(p_assessment_id numeric, p_elapsed_time numeric, p_dbtrans_username_pt character varying, p_study_id numeric) TO ni_developers;
GRANT ALL ON FUNCTION mrs_complete_assessment_f(p_assessment_id numeric, p_elapsed_time numeric, p_dbtrans_username_pt character varying, p_study_id numeric) TO micis_app;


--
-- Name: mrs_complete_self_assessment_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_complete_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_complete_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_complete_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_complete_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_consolidate_raters_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_consolidate_raters_f(p_old_alias_id numeric, p_new_alias_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_consolidate_raters_f(p_old_alias_id numeric, p_new_alias_id numeric, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_consolidate_raters_f(p_old_alias_id numeric, p_new_alias_id numeric, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_consolidate_raters_f(p_old_alias_id numeric, p_new_alias_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_copy_protocol_f(numeric, numeric, integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_copy_protocol_f(p_from_protocol_id numeric, p_to_subject_type_id numeric, p_to_segment_interval_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_copy_protocol_f(p_from_protocol_id numeric, p_to_subject_type_id numeric, p_to_segment_interval_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_copy_protocol_f(p_from_protocol_id numeric, p_to_subject_type_id numeric, p_to_segment_interval_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_copy_protocol_f(p_from_protocol_id numeric, p_to_subject_type_id numeric, p_to_segment_interval_id integer, p_mod_user character varying) TO portal_app;


--
-- Name: mrs_copy_queue_template_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_copy_queue_template_f(p_from_template_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_copy_queue_template_f(p_from_template_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_copy_queue_template_f(p_from_template_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_copy_queue_template_f(p_from_template_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) TO PUBLIC;
GRANT ALL ON FUNCTION mrs_copy_queue_template_f(p_from_template_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) TO micis_app;


--
-- Name: mrs_copy_study_templates_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_copy_study_templates_f(p_from_study_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_copy_study_templates_f(p_from_study_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_copy_study_templates_f(p_from_study_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_copy_study_templates_f(p_from_study_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) TO PUBLIC;
GRANT ALL ON FUNCTION mrs_copy_study_templates_f(p_from_study_id numeric, p_to_study_id numeric, p_dbtrans_username character varying) TO micis_app;


--
-- Name: mrs_credit_scan_slot_usage_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_credit_scan_slot_usage_f(p_scan_id numeric, p_amount_to_credit numeric, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_credit_scan_slot_usage_f(p_scan_id numeric, p_amount_to_credit numeric, p_user_entered character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_credit_scan_slot_usage_f(p_scan_id numeric, p_amount_to_credit numeric, p_user_entered character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_credit_scan_slot_usage_f(p_scan_id numeric, p_amount_to_credit numeric, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_deactivate_sharing_rule_f(numeric, character varying, timestamp without time zone, text, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_deactivate_sharing_rule_f(p_sharing_rule_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deactivate_sharing_rule_f(p_sharing_rule_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_deactivate_sharing_rule_f(p_sharing_rule_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_deactivate_sharing_rule_f(p_sharing_rule_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_deactivate_sharing_rule_study_f(numeric, numeric, character varying, timestamp without time zone, text, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_deactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_deactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_deactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_deleted_by character varying, p_deletion_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_deassign_doc_category_f(numeric, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_deassign_doc_category_f(p_file_id numeric, p_category_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deassign_doc_category_f(p_file_id numeric, p_category_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_deassign_doc_category_f(p_file_id numeric, p_category_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_deassign_doc_category_f(p_file_id numeric, p_category_id numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_deassign_doc_category_f(p_file_id numeric, p_category_id numeric) TO portal_app;


--
-- Name: mrs_deassign_drug_cat_f(character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_deassign_drug_cat_f(p_drug_code character varying, p_category_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deassign_drug_cat_f(p_drug_code character varying, p_category_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_deassign_drug_cat_f(p_drug_code character varying, p_category_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_deassign_drug_cat_f(p_drug_code character varying, p_category_id numeric) TO micis_app;


--
-- Name: mrs_deassign_gdrug_tradenm_f(character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_deassign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deassign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_deassign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_deassign_gdrug_tradenm_f(p_drug_code character varying, p_trade_id numeric) TO micis_app;


--
-- Name: mrs_deassign_proj_co_inv_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_deassign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deassign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_deassign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_deassign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_deassign_proj_co_inv_f(p_project_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_deassign_proj_datadom_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_deassign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deassign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_deassign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_deassign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_deassign_proj_datadom_f(p_data_domain_id numeric, p_project_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_deassign_role_f(numeric, character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_deassign_role_f(p_role_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying, p_study_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deassign_role_f(p_role_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying, p_study_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_deassign_role_f(p_role_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying, p_study_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_deassign_role_f(p_role_id numeric, p_person_id character varying, p_dbtrans_username_pt character varying, p_study_id numeric) TO micis_app;


--
-- Name: mrs_deassign_scan_ext_prop_f(numeric, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_deassign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deassign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_deassign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_deassign_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric) TO micis_app;


--
-- Name: mrs_deassign_subject_tag_detail_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_deassign_subject_tag_detail_f(p_subject_tag_details_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deassign_subject_tag_detail_f(p_subject_tag_details_id numeric, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_deassign_subject_tag_detail_f(p_subject_tag_details_id numeric, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_deassign_subject_tag_detail_f(p_subject_tag_details_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_deassign_subject_type_f(character varying, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_deassign_subject_type_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deassign_subject_type_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_deassign_subject_type_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_deassign_subject_type_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_deassign_subject_type_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_decrement_scan_slot_f(numeric, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_decrement_scan_slot_f(p_scan_slot_id numeric, p_amount numeric, p_notes character varying, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_decrement_scan_slot_f(p_scan_slot_id numeric, p_amount numeric, p_notes character varying, p_user_entered character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_decrement_scan_slot_f(p_scan_slot_id numeric, p_amount numeric, p_notes character varying, p_user_entered character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_decrement_scan_slot_f(p_scan_slot_id numeric, p_amount numeric, p_notes character varying, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_delete_analysis_queue_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_analysis_queue_f(id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_analysis_queue_f(id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_analysis_queue_f(id_f numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_analysis_queue_f(id_f numeric) TO portal_app;


--
-- Name: mrs_delete_app_option_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_app_option_f(p_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_app_option_f(p_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_app_option_f(p_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_app_option_f(p_id integer, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_app_option_f(p_id integer, p_mod_user character varying) TO portal_app;


--
-- Name: mrs_delete_assessment_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_assessment_f(p_assessment_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_assessment_f(p_assessment_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_assessment_f(p_assessment_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_assessment_f(p_assessment_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_delete_assessment_f(numeric, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_assessment_f(p_assessment_id_c numeric, p_assessment_id_match numeric, p_assessment_id_match2 numeric, p_dbtransuser character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_assessment_f(p_assessment_id_c numeric, p_assessment_id_match numeric, p_assessment_id_match2 numeric, p_dbtransuser character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_assessment_f(p_assessment_id_c numeric, p_assessment_id_match numeric, p_assessment_id_match2 numeric, p_dbtransuser character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_assessment_f(p_assessment_id_c numeric, p_assessment_id_match numeric, p_assessment_id_match2 numeric, p_dbtransuser character varying) TO micis_app;


--
-- Name: mrs_delete_behavioral_upload_f(character varying, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_behavioral_upload_f(file_name_f character varying, scan_id_f numeric, series_id_f character varying, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_behavioral_upload_f(file_name_f character varying, scan_id_f numeric, series_id_f character varying, mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_behavioral_upload_f(file_name_f character varying, scan_id_f numeric, series_id_f character varying, mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_behavioral_upload_f(file_name_f character varying, scan_id_f numeric, series_id_f character varying, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_behavioral_upload_f(file_name_f character varying, scan_id_f numeric, series_id_f character varying, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_delete_charge_code_site_modality_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_charge_code_site_modality_f(p_site_modality_id numeric, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_charge_code_site_modality_f(p_site_modality_id numeric, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_charge_code_site_modality_f(p_site_modality_id numeric, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_charge_code_site_modality_f(p_site_modality_id numeric, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_delete_charge_code_study_modality_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_charge_code_study_modality_f(p_study_modality_id numeric, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_charge_code_study_modality_f(p_study_modality_id numeric, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_charge_code_study_modality_f(p_study_modality_id numeric, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_charge_code_study_modality_f(p_study_modality_id numeric, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_delete_conditional_jump_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_conditional_jump_f(p_question_jump_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_conditional_jump_f(p_question_jump_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_conditional_jump_f(p_question_jump_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_conditional_jump_f(p_question_jump_id integer, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_delete_data_qc_constraint_f(integer, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_data_qc_constraint_f(p_constraint_id integer, p_mod_user text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_data_qc_constraint_f(p_constraint_id integer, p_mod_user text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_data_qc_constraint_f(p_constraint_id integer, p_mod_user text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_data_qc_constraint_f(p_constraint_id integer, p_mod_user text) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_data_qc_constraint_f(p_constraint_id integer, p_mod_user text) TO portal_app;


--
-- Name: mrs_delete_dataentry_type_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_dataentry_type_f(p_dataentry_type_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_dataentry_type_f(p_dataentry_type_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_dataentry_type_f(p_dataentry_type_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_dataentry_type_f(p_dataentry_type_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_delete_document_category_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_document_category_f(p_category_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_document_category_f(p_category_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_document_category_f(p_category_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_document_category_f(p_category_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_document_category_f(p_category_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_delete_document_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_document_f(p_document_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_document_f(p_document_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_document_f(p_document_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_document_f(p_document_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_document_f(p_document_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_delete_inst_question_f(character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_inst_question_f(p_question_id character varying, p_confirmed numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_inst_question_f(p_question_id character varying, p_confirmed numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_inst_question_f(p_question_id character varying, p_confirmed numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_inst_question_f(p_question_id character varying, p_confirmed numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_delete_inst_question_score_f(character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_inst_question_score_f(question_id_f character varying, study_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_inst_question_score_f(question_id_f character varying, study_id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_inst_question_score_f(question_id_f character varying, study_id_f numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_inst_question_score_f(question_id_f character varying, study_id_f numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_inst_question_score_f(question_id_f character varying, study_id_f numeric) TO portal_app;


--
-- Name: mrs_delete_inst_response_f(character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_inst_response_f(p_question_id character varying, p_value character varying, p_sort_order numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_inst_response_f(p_question_id character varying, p_value character varying, p_sort_order numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_inst_response_f(p_question_id character varying, p_value character varying, p_sort_order numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_inst_response_f(p_question_id character varying, p_value character varying, p_sort_order numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_delete_inst_responses_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_inst_responses_f(p_question_id character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_inst_responses_f(p_question_id character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_inst_responses_f(p_question_id character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_inst_responses_f(p_question_id character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_delete_inst_section_f(numeric, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_inst_section_f(p_section_id numeric, p_confirmed numeric, p_delete_questions numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_inst_section_f(p_section_id numeric, p_confirmed numeric, p_delete_questions numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_inst_section_f(p_section_id numeric, p_confirmed numeric, p_delete_questions numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_inst_section_f(p_section_id numeric, p_confirmed numeric, p_delete_questions numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_delete_instrument_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_instrument_f(p_instrument_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_instrument_f(p_instrument_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_f(p_instrument_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_f(p_instrument_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_delete_instrument_question_media_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_instrument_question_media_f(p_question_media_id integer, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_instrument_question_media_f(p_question_media_id integer, p_dbtrans_username character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_instrument_question_media_f(p_question_media_id integer, p_dbtrans_username character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_instrument_question_media_f(p_question_media_id integer, p_dbtrans_username character varying) TO micis_app;


--
-- Name: mrs_delete_instrument_questions_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_instrument_questions_f(p_question_id character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_instrument_questions_f(p_question_id character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_questions_f(p_question_id character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_questions_f(p_question_id character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_delete_instrument_sections_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_instrument_sections_f(p_section_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_instrument_sections_f(p_section_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_sections_f(p_section_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_sections_f(p_section_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_delete_instrument_study_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_instrument_study_f(p_instrument_study_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_instrument_study_f(p_instrument_study_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_study_f(p_instrument_study_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_study_f(p_instrument_study_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_delete_instrument_table_col_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_instrument_table_col_f(p_col_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_instrument_table_col_f(p_col_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_table_col_f(p_col_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_table_col_f(p_col_id numeric, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_instrument_table_col_f(p_col_id numeric, p_mod_user character varying) TO p2_app;


--
-- Name: mrs_delete_instrument_table_f(numeric, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_instrument_table_f(p_table_id numeric, p_confirmed boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_instrument_table_f(p_table_id numeric, p_confirmed boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_table_f(p_table_id numeric, p_confirmed boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_table_f(p_table_id numeric, p_confirmed boolean, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_instrument_table_f(p_table_id numeric, p_confirmed boolean, p_mod_user character varying) TO p2_app;


--
-- Name: mrs_delete_instrument_table_row_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_instrument_table_row_f(p_row_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_instrument_table_row_f(p_row_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_table_row_f(p_row_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_instrument_table_row_f(p_row_id numeric, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_instrument_table_row_f(p_row_id numeric, p_mod_user character varying) TO p2_app;


--
-- Name: mrs_delete_legacy_sharing_rules_asmts_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_legacy_sharing_rules_asmts_f(p_min_rule numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_legacy_sharing_rules_asmts_f(p_min_rule numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_legacy_sharing_rules_asmts_f(p_min_rule numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_legacy_sharing_rules_asmts_f(p_min_rule numeric) TO micis_app;


--
-- Name: mrs_delete_mail_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_mail_f(p_mail_id integer, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_mail_f(p_mail_id integer, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_mail_f(p_mail_id integer, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_mail_f(p_mail_id integer, p_user_entered character varying) TO batch_app;


--
-- Name: mrs_delete_match_tmp_f(character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_match_tmp_f(p_session_id character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_match_tmp_f(p_session_id character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_match_tmp_f(p_session_id character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_match_tmp_f(p_session_id character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_match_tmp_f(p_session_id character varying) TO portal_app;


--
-- Name: mrs_delete_matched_per_f(character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_matched_per_f(p_sid character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_matched_per_f(p_sid character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_matched_per_f(p_sid character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_matched_per_f(p_sid character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_matched_per_f(p_sid character varying) TO portal_app;


--
-- Name: mrs_delete_message_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_message_f(message_id_f numeric, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_message_f(message_id_f numeric, mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_message_f(message_id_f numeric, mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_message_f(message_id_f numeric, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_message_f(message_id_f numeric, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_delete_person_role_detail_f(numeric, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_person_role_detail_f(p_alias_id numeric, p_study_id numeric, p_role_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_person_role_detail_f(p_alias_id numeric, p_study_id numeric, p_role_id numeric, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_person_role_detail_f(p_alias_id numeric, p_study_id numeric, p_role_id numeric, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_person_role_detail_f(p_alias_id numeric, p_study_id numeric, p_role_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_delete_personaddress_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_personaddress_f(p_prd_id numeric, p_address_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_delete_personphone_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_personphone_f(p_prd_id numeric, p_phone_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_delete_phone_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_phone_f(p_phone_id numeric, p_dbtransuser character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_phone_f(p_phone_id numeric, p_dbtransuser character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_phone_f(p_phone_id numeric, p_dbtransuser character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_phone_f(p_phone_id numeric, p_dbtransuser character varying) TO micis_app;


--
-- Name: mrs_delete_question_loops_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_question_loops_f(p_question_id character varying, p_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_question_loops_f(p_question_id character varying, p_username character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_question_loops_f(p_question_id character varying, p_username character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_question_loops_f(p_question_id character varying, p_username character varying) TO micis_app;


--
-- Name: mrs_delete_queued_time_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_queued_time_f(p_aqueue_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_queued_time_f(p_aqueue_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_queued_time_f(p_aqueue_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_queued_time_f(p_aqueue_id integer, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_queued_time_f(p_aqueue_id integer, p_mod_user character varying) TO portal_app;


--
-- Name: mrs_delete_saved_query_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_saved_query_f(p_username character varying, p_label character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_saved_query_f(p_username character varying, p_label character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_saved_query_f(p_username character varying, p_label character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_saved_query_f(p_username character varying, p_label character varying) TO micis_app;


--
-- Name: mrs_delete_scan_slot_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_scan_slot_f(p_scan_slot_id numeric, p_notes character varying, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_scan_slot_f(p_scan_slot_id numeric, p_notes character varying, p_user_entered character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_scan_slot_f(p_scan_slot_id numeric, p_notes character varying, p_user_entered character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_scan_slot_f(p_scan_slot_id numeric, p_notes character varying, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_delete_sharing_rules_asmts_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_sharing_rules_asmts_f(p_min_rule numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_sharing_rules_asmts_f(p_min_rule numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_sharing_rules_asmts_f(p_min_rule numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_sharing_rules_asmts_f(p_min_rule numeric) TO micis_app;


--
-- Name: mrs_delete_sitewise_missing_assessment_reason_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_sitewise_missing_assessment_reason_f(reason_id_f numeric, site_id_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_sitewise_missing_assessment_reason_f(reason_id_f numeric, site_id_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_sitewise_missing_assessment_reason_f(reason_id_f numeric, site_id_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_sitewise_missing_assessment_reason_f(reason_id_f numeric, site_id_f character varying) TO micis_app;


--
-- Name: mrs_delete_study_interval_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_study_interval_f(p_study_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_study_interval_f(p_study_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_study_interval_f(p_study_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_study_interval_f(p_study_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_delete_study_message_f(numeric, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_delete_study_missing_assessment_reason_f(numeric, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_study_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_study_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_study_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_study_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) TO micis_app;


--
-- Name: mrs_delete_study_recruitment_criteria_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_study_recruitment_criteria_f(study_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_study_recruitment_criteria_f(study_id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_study_recruitment_criteria_f(study_id_f numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_study_recruitment_criteria_f(study_id_f numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_delete_study_recruitment_criteria_f(study_id_f numeric) TO portal_app;


--
-- Name: mrs_delete_subject_type_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_delete_subject_type_f(p_subject_type_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_subject_type_f(p_subject_type_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_delete_subject_type_f(p_subject_type_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_delete_subject_type_f(p_subject_type_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_delete_user_app_option_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_delete_user_app_option_f(p_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_delete_user_app_option_f(p_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_delete_user_app_option_f(p_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_delete_user_app_option_f(p_id integer, p_mod_user character varying) TO portal_app;
GRANT ALL ON FUNCTION mrs_delete_user_app_option_f(p_id integer, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_deny_self_assessment_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_deny_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_deny_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_deny_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_deny_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) TO PUBLIC;
GRANT ALL ON FUNCTION mrs_deny_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_disambiguate_assessments_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_disambiguate_assessments_f(p_assessment_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_disambiguate_assessments_f(p_assessment_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_disambiguate_assessments_f(p_assessment_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_disambiguate_assessments_f(p_assessment_id numeric) TO micis_app;


--
-- Name: mrs_duplicate_instrument_f(numeric, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_duplicate_instrument_f(p_instrument_id numeric, p_prefix character varying, p_study_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_duplicate_instrument_f(p_instrument_id numeric, p_prefix character varying, p_study_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_duplicate_instrument_f(p_instrument_id numeric, p_prefix character varying, p_study_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_duplicate_instrument_f(p_instrument_id numeric, p_prefix character varying, p_study_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_duplicate_instrument_question_f(character varying, character varying, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_duplicate_instrument_question_f(p_new_question_id character varying, p_old_question_id character varying, p_section_id numeric, p_sort_order numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_duplicate_instrument_question_f(p_new_question_id character varying, p_old_question_id character varying, p_section_id numeric, p_sort_order numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_duplicate_instrument_question_f(p_new_question_id character varying, p_old_question_id character varying, p_section_id numeric, p_sort_order numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_duplicate_instrument_question_f(p_new_question_id character varying, p_old_question_id character varying, p_section_id numeric, p_sort_order numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_edit_rad_comment_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_edit_rad_comment_f(p_comment_id numeric, p_comment_text character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_edit_rad_comment_f(p_comment_id numeric, p_comment_text character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_edit_rad_comment_f(p_comment_id numeric, p_comment_text character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_edit_rad_comment_f(p_comment_id numeric, p_comment_text character varying) TO micis_app;


--
-- Name: mrs_exact_match_ursi_f(character varying, character varying, timestamp without time zone, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_exact_match_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_exact_match_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_exact_match_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_exact_match_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) TO micis_app;


--
-- Name: mrs_find_asmt_studies_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_find_asmt_studies_f(p_assessment_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_find_asmt_studies_f(p_assessment_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_find_asmt_studies_f(p_assessment_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_find_asmt_studies_f(p_assessment_id numeric) TO micis_app;


--
-- Name: mrs_find_asmt_study_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_find_asmt_study_f(p_assessment_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_find_asmt_study_f(p_assessment_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_find_asmt_study_f(p_assessment_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_find_asmt_study_f(p_assessment_id numeric) TO micis_app;


--
-- Name: mrs_generate_instrument_sql_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_generate_instrument_sql_f(p_instrument_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_generate_instrument_sql_f(p_instrument_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_generate_instrument_sql_f(p_instrument_id numeric, p_mod_user character varying) TO ni_developers;


--
-- Name: mrs_generate_table_row_sql_f(character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_generate_table_row_sql_f(p_table_name character varying, p_col1 character varying, p_value1 character varying, p_col2 character varying, p_value2 character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_generate_table_row_sql_f(p_table_name character varying, p_col1 character varying, p_value1 character varying, p_col2 character varying, p_value2 character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_generate_table_row_sql_f(p_table_name character varying, p_col1 character varying, p_value1 character varying, p_col2 character varying, p_value2 character varying, p_mod_user character varying) TO ni_developers;


--
-- Name: mrs_get_age_at_scan_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_age_at_scan_f(p_ursi character varying, p_scan_label character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_age_at_scan_f(p_ursi character varying, p_scan_label character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_age_at_scan_f(p_ursi character varying, p_scan_label character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_get_age_at_scan_f(p_ursi character varying, p_scan_label character varying) TO micis_app;


--
-- Name: mrs_get_alias_per_role_det_f(character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_alias_per_role_det_f(p_person_id character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_alias_per_role_det_f(p_person_id character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_alias_per_role_det_f(p_person_id character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_get_alias_per_role_det_f(p_person_id character varying) TO micis_app;


--
-- Name: mrs_get_anchor_date_f(character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_anchor_date_f(p_ursi character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_anchor_date_f(p_ursi character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_anchor_date_f(p_ursi character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_get_anchor_date_f(p_ursi character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_get_anchor_date_f(p_ursi character varying) TO portal_app;


--
-- Name: mrs_get_asmts_4_olin_f(); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_asmts_4_olin_f() FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_asmts_4_olin_f() FROM postgres;
GRANT ALL ON FUNCTION mrs_get_asmts_4_olin_f() TO postgres;
GRANT ALL ON FUNCTION mrs_get_asmts_4_olin_f() TO micis_app;


--
-- Name: mrs_get_col_list_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_col_list_f(p_project_id numeric, p_incol character varying, p_indel character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_col_list_f(p_project_id numeric, p_incol character varying, p_indel character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_col_list_f(p_project_id numeric, p_incol character varying, p_indel character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_get_col_list_f(p_project_id numeric, p_incol character varying, p_indel character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_get_col_list_f(p_project_id numeric, p_incol character varying, p_indel character varying) TO portal_app;


--
-- Name: mrs_get_header(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_header(p_string character varying, p_location character varying, p_location2 character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_header(p_string character varying, p_location character varying, p_location2 character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_header(p_string character varying, p_location character varying, p_location2 character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_get_header(p_string character varying, p_location character varying, p_location2 character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_get_header(p_string character varying, p_location character varying, p_location2 character varying) TO coinspr_app;


--
-- Name: mrs_get_mcic_has_imaging_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_mcic_has_imaging_f(p_ursi character varying, p_type character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_mcic_has_imaging_f(p_ursi character varying, p_type character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_mcic_has_imaging_f(p_ursi character varying, p_type character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_get_mcic_has_imaging_f(p_ursi character varying, p_type character varying) TO micis_app;


--
-- Name: mrs_get_mcic_response_value_f(numeric, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_mcic_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_mcic_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_mcic_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_get_mcic_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric) TO micis_app;


--
-- Name: mrs_get_next_ursi_f(character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_next_ursi_f(p_ursi_prefix character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_next_ursi_f(p_ursi_prefix character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_next_ursi_f(p_ursi_prefix character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_get_next_ursi_f(p_ursi_prefix character varying) TO micis_app;


--
-- Name: mrs_get_next_usid_f(character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_next_usid_f(p_stub character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_next_usid_f(p_stub character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_next_usid_f(p_stub character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_get_next_usid_f(p_stub character varying) TO micis_app;


--
-- Name: mrs_get_prd_id_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_get_prd_id_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_role_id numeric, p_study_id numeric, p_alias_label character varying, p_force_add character varying, p_sid character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_prd_id_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_role_id numeric, p_study_id numeric, p_alias_label character varying, p_force_add character varying, p_sid character varying, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_get_prd_id_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_role_id numeric, p_study_id numeric, p_alias_label character varying, p_force_add character varying, p_sid character varying, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_get_prd_id_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_role_id numeric, p_study_id numeric, p_alias_label character varying, p_force_add character varying, p_sid character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_get_prd_id_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_role_id numeric, p_study_id numeric, p_alias_label character varying, p_force_add character varying, p_sid character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_get_study_scan_count_f(numeric, numeric, date, date); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_study_scan_count_f(p_study_id numeric, p_field_strength numeric, p_start_date date, p_end_date date) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_study_scan_count_f(p_study_id numeric, p_field_strength numeric, p_start_date date, p_end_date date) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_study_scan_count_f(p_study_id numeric, p_field_strength numeric, p_start_date date, p_end_date date) TO postgres;
GRANT ALL ON FUNCTION mrs_get_study_scan_count_f(p_study_id numeric, p_field_strength numeric, p_start_date date, p_end_date date) TO micis_app;


--
-- Name: mrs_get_subject_info_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_subject_info_f(p_id character varying, p_idtype character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_subject_info_f(p_id character varying, p_idtype character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_subject_info_f(p_id character varying, p_idtype character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_get_subject_info_f(p_id character varying, p_idtype character varying) TO micis_app;


--
-- Name: mrs_get_subject_race_f(character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_subject_race_f(p_ursi character varying, p_study_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_subject_race_f(p_ursi character varying, p_study_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_subject_race_f(p_ursi character varying, p_study_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_get_subject_race_f(p_ursi character varying, p_study_id numeric) TO micis_app;


--
-- Name: mrs_get_subject_ursi_f(character varying, character varying, timestamp without time zone, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_subject_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_subject_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_subject_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_get_subject_ursi_f(p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying) TO micis_app;


--
-- Name: mrs_get_ursi_scan_count_f(character varying, numeric, date, date); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_get_ursi_scan_count_f(p_ursi character varying, p_field_strength numeric, p_start_date date, p_end_date date) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_get_ursi_scan_count_f(p_ursi character varying, p_field_strength numeric, p_start_date date, p_end_date date) FROM postgres;
GRANT ALL ON FUNCTION mrs_get_ursi_scan_count_f(p_ursi character varying, p_field_strength numeric, p_start_date date, p_end_date date) TO postgres;
GRANT ALL ON FUNCTION mrs_get_ursi_scan_count_f(p_ursi character varying, p_field_strength numeric, p_start_date date, p_end_date date) TO micis_app;


--
-- Name: mrs_insert_asmts_4_olin_f(character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_insert_asmts_4_olin_f(p_ursi character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_insert_asmts_4_olin_f(p_ursi character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_insert_asmts_4_olin_f(p_ursi character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_insert_asmts_4_olin_f(p_ursi character varying) TO micis_app;


--
-- Name: mrs_insert_client_error_f(character varying, character varying, character varying, character varying, text, text, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_insert_client_error_f(p_error_message character varying, p_src_url character varying, p_line_number character varying, p_page_url character varying, p_shared_vars text, p_user_note text, p_client_agent character varying, p_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_insert_client_error_f(p_error_message character varying, p_src_url character varying, p_line_number character varying, p_page_url character varying, p_shared_vars text, p_user_note text, p_client_agent character varying, p_username character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_insert_client_error_f(p_error_message character varying, p_src_url character varying, p_line_number character varying, p_page_url character varying, p_shared_vars text, p_user_note text, p_client_agent character varying, p_username character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_insert_client_error_f(p_error_message character varying, p_src_url character varying, p_line_number character varying, p_page_url character varying, p_shared_vars text, p_user_note text, p_client_agent character varying, p_username character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_insert_client_error_f(p_error_message character varying, p_src_url character varying, p_line_number character varying, p_page_url character varying, p_shared_vars text, p_user_note text, p_client_agent character varying, p_username character varying) TO PUBLIC;


--
-- Name: mrs_insert_qa_threshold_f(character varying, character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_insert_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_value numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_insert_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_value numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_insert_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_value numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_insert_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_value numeric) TO micis_app;


--
-- Name: mrs_insert_row(character varying, character varying, character varying, character varying[], character varying[], character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_insert_row(p_tblname character varying, p_key_col character varying, p_key_col_seq_name character varying, p_cols character varying[], p_vals character varying[], p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_insert_row(p_tblname character varying, p_key_col character varying, p_key_col_seq_name character varying, p_cols character varying[], p_vals character varying[], p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_insert_row(p_tblname character varying, p_key_col character varying, p_key_col_seq_name character varying, p_cols character varying[], p_vals character varying[], p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_insert_row(p_tblname character varying, p_key_col character varying, p_key_col_seq_name character varying, p_cols character varying[], p_vals character varying[], p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_insert_trgt_enrllmnt_note_f(numeric, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_insert_trgt_enrllmnt_note_f(p_study_id numeric, p_dbuser character varying, p_enrollment numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_insert_trgt_enrllmnt_note_f(p_study_id numeric, p_dbuser character varying, p_enrollment numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_insert_trgt_enrllmnt_note_f(p_study_id numeric, p_dbuser character varying, p_enrollment numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_insert_trgt_enrllmnt_note_f(p_study_id numeric, p_dbuser character varying, p_enrollment numeric) TO micis_app;


--
-- Name: mrs_match_email_confirmation_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_match_email_confirmation_f(p_email_code character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_match_email_confirmation_f(p_email_code character varying, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_match_email_confirmation_f(p_email_code character varying, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_match_email_confirmation_f(p_email_code character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_match_person_role_det_f(character varying, numeric, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_match_person_role_det_f(p_person_id character varying, p_role_id numeric, p_study_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_match_person_role_det_f(p_person_id character varying, p_role_id numeric, p_study_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_match_person_role_det_f(p_person_id character varying, p_role_id numeric, p_study_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_match_person_role_det_f(p_person_id character varying, p_role_id numeric, p_study_id numeric) TO micis_app;


--
-- Name: mrs_match_persons_f(character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_match_persons_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_sid character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_match_persons_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_sid character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_match_persons_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_sid character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_match_persons_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_sid character varying) TO micis_app;


--
-- Name: mrs_match_subject_f(character varying, character varying, character varying, timestamp without time zone, character varying, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_match_subject_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_ext_id numeric, p_identifier character varying, p_match_level character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_match_subject_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_ext_id numeric, p_identifier character varying, p_match_level character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_match_subject_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_ext_id numeric, p_identifier character varying, p_match_level character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_match_subject_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_ext_id numeric, p_identifier character varying, p_match_level character varying) TO micis_app;


--
-- Name: mrs_matchdate_f(date, date, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_matchdate_f(p1 date, p2 date, p1_elements_to_match numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_matchdate_f(p1 date, p2 date, p1_elements_to_match numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_matchdate_f(p1 date, p2 date, p1_elements_to_match numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_matchdate_f(p1 date, p2 date, p1_elements_to_match numeric) TO micis_app;


--
-- Name: mrs_matched_subjects_f(character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, numeric, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_matched_subjects_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_area_code character varying, p_phone_number character varying, p_email character varying, p_subject_tag_id numeric, p_encrypted_tag_value character varying, p_match_style character varying, p_key character varying, p_iv character varying, p_site_id character varying, p_user_study_ids character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_matched_subjects_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_area_code character varying, p_phone_number character varying, p_email character varying, p_subject_tag_id numeric, p_encrypted_tag_value character varying, p_match_style character varying, p_key character varying, p_iv character varying, p_site_id character varying, p_user_study_ids character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_matched_subjects_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_area_code character varying, p_phone_number character varying, p_email character varying, p_subject_tag_id numeric, p_encrypted_tag_value character varying, p_match_style character varying, p_key character varying, p_iv character varying, p_site_id character varying, p_user_study_ids character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_matched_subjects_f(p_sid character varying, p_first_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_area_code character varying, p_phone_number character varying, p_email character varying, p_subject_tag_id numeric, p_encrypted_tag_value character varying, p_match_style character varying, p_key character varying, p_iv character varying, p_site_id character varying, p_user_study_ids character varying) TO micis_app;


--
-- Name: mrs_matchstr_f(character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_matchstr_f(p1 character varying, p2 character varying, p1_pct numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_matchstr_f(p1 character varying, p2 character varying, p1_pct numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_matchstr_f(p1 character varying, p2 character varying, p1_pct numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_matchstr_f(p1 character varying, p2 character varying, p1_pct numeric) TO micis_app;


--
-- Name: mrs_mcic_round_rule(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_mcic_round_rule(p_number numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_mcic_round_rule(p_number numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_mcic_round_rule(p_number numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_mcic_round_rule(p_number numeric) TO micis_app;


--
-- Name: mrs_merge_recruitment_subjects_f(character varying, character varying, character varying[], character varying[], character varying[], character varying[], character varying[], character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_merge_recruitment_subjects_f(p_from_usid character varying, p_to_usid character varying, p_from_subject_columns character varying[], p_from_subject_values character varying[], p_from_address_columns character varying[], p_from_address_values character varying[], p_from_phone_ids character varying[], p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_merge_recruitment_subjects_f(p_from_usid character varying, p_to_usid character varying, p_from_subject_columns character varying[], p_from_subject_values character varying[], p_from_address_columns character varying[], p_from_address_values character varying[], p_from_phone_ids character varying[], p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_merge_recruitment_subjects_f(p_from_usid character varying, p_to_usid character varying, p_from_subject_columns character varying[], p_from_subject_values character varying[], p_from_address_columns character varying[], p_from_address_values character varying[], p_from_phone_ids character varying[], p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_merge_recruitment_subjects_f(p_from_usid character varying, p_to_usid character varying, p_from_subject_columns character varying[], p_from_subject_values character varying[], p_from_address_columns character varying[], p_from_address_values character varying[], p_from_phone_ids character varying[], p_mod_user character varying) TO micis_app;


--
-- Name: mrs_merge_ursis_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_merge_ursis_f(p_fromursi character varying, p_toursi character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_merge_ursis_f(p_fromursi character varying, p_toursi character varying, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_merge_ursis_f(p_fromursi character varying, p_toursi character varying, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_merge_ursis_f(p_fromursi character varying, p_toursi character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_num_to_subject_type_tf_f(character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_num_to_subject_type_tf_f(p_number character varying, p_subject_type_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_num_to_subject_type_tf_f(p_number character varying, p_subject_type_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_num_to_subject_type_tf_f(p_number character varying, p_subject_type_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_num_to_subject_type_tf_f(p_number character varying, p_subject_type_id numeric) TO micis_app;


--
-- Name: mrs_num_to_tf_f(character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_num_to_tf_f(p_number character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_num_to_tf_f(p_number character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_num_to_tf_f(p_number character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_num_to_tf_f(p_number character varying) TO micis_app;


--
-- Name: mrs_populate_query_table_temp_f(); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_populate_query_table_temp_f() FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_populate_query_table_temp_f() FROM ni_developers;
GRANT ALL ON FUNCTION mrs_populate_query_table_temp_f() TO ni_developers;


--
-- Name: mrs_queue_subject_assessment_f(numeric, numeric, numeric, numeric, character varying, integer, numeric, timestamp without time zone, timestamp without time zone); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_queue_subject_assessment_f(p_login_id numeric, p_instrument_id numeric, p_segment_interval_id numeric, p_sort_order numeric, p_mod_user character varying, p_queue_type_id integer, p_from_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_queue_subject_assessment_f(p_login_id numeric, p_instrument_id numeric, p_segment_interval_id numeric, p_sort_order numeric, p_mod_user character varying, p_queue_type_id integer, p_from_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_queue_subject_assessment_f(p_login_id numeric, p_instrument_id numeric, p_segment_interval_id numeric, p_sort_order numeric, p_mod_user character varying, p_queue_type_id integer, p_from_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) TO ni_developers;
GRANT ALL ON FUNCTION mrs_queue_subject_assessment_f(p_login_id numeric, p_instrument_id numeric, p_segment_interval_id numeric, p_sort_order numeric, p_mod_user character varying, p_queue_type_id integer, p_from_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) TO micis_app;
GRANT ALL ON FUNCTION mrs_queue_subject_assessment_f(p_login_id numeric, p_instrument_id numeric, p_segment_interval_id numeric, p_sort_order numeric, p_mod_user character varying, p_queue_type_id integer, p_from_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) TO p2_app;


--
-- Name: mrs_rdoc_coins_question_map_add_f(integer, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_rdoc_coins_question_map_add_f(p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_rdoc_coins_question_map_add_f(p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_rdoc_coins_question_map_add_f(p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_rdoc_coins_question_map_add_f(p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_rdoc_coins_question_map_remove_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_rdoc_coins_question_map_remove_f(p_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_rdoc_coins_question_map_remove_f(p_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_rdoc_coins_question_map_remove_f(p_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_rdoc_coins_question_map_remove_f(p_id integer, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_rdoc_coins_question_map_update_f(integer, integer, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_rdoc_coins_question_map_update_f(p_id integer, p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_rdoc_coins_question_map_update_f(p_id integer, p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_rdoc_coins_question_map_update_f(p_id integer, p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_rdoc_coins_question_map_update_f(p_id integer, p_coins_question_id integer, p_rdoc_inst_id character varying, p_rdoc_question_short_tag character varying, p_transform character varying, p_transform_ui_cache character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_reactivate_sharing_rule_f(numeric, character varying, timestamp without time zone, text, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_reactivate_sharing_rule_f(p_sharing_rule_id numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_reactivate_sharing_rule_f(p_sharing_rule_id numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_reactivate_sharing_rule_f(p_sharing_rule_id numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_reactivate_sharing_rule_f(p_sharing_rule_id numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_reactivate_sharing_rule_study_f(numeric, numeric, character varying, timestamp without time zone, character varying, timestamp without time zone, text, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_reactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_reactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_reactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_reactivate_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_reassign_all_section_questions_f(numeric, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_reassign_all_section_questions_f(p_from_section numeric, p_to_section numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_reassign_all_section_questions_f(p_from_section numeric, p_to_section numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_reassign_all_section_questions_f(p_from_section numeric, p_to_section numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_reassign_all_section_questions_f(p_from_section numeric, p_to_section numeric) TO micis_app;


--
-- Name: mrs_refresh_qb_mat_views_f(); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_refresh_qb_mat_views_f() FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_refresh_qb_mat_views_f() FROM postgres;
GRANT ALL ON FUNCTION mrs_refresh_qb_mat_views_f() TO postgres;
GRANT ALL ON FUNCTION mrs_refresh_qb_mat_views_f() TO micis_app;


--
-- Name: mrs_refresh_vbmqa_status_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_refresh_vbmqa_status_f(f_threshold numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_refresh_vbmqa_status_f(f_threshold numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_refresh_vbmqa_status_f(f_threshold numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_refresh_vbmqa_status_f(f_threshold numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_refresh_vbmqa_status_f(f_threshold numeric) TO portal_app;


--
-- Name: mrs_register_reserved_sub_f(character varying, character varying, character varying, character varying, numeric, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_register_reserved_sub_f(p_reserved_ursi character varying, p_check_match character varying, p_site_id character varying, p_sid character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_email_address character varying, p_notes character varying, p_ethnicity character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_dbtrans_username_pt character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_register_reserved_sub_f(p_reserved_ursi character varying, p_check_match character varying, p_site_id character varying, p_sid character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_email_address character varying, p_notes character varying, p_ethnicity character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_dbtrans_username_pt character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_register_reserved_sub_f(p_reserved_ursi character varying, p_check_match character varying, p_site_id character varying, p_sid character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_email_address character varying, p_notes character varying, p_ethnicity character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_dbtrans_username_pt character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric) TO ni_developers;
GRANT ALL ON FUNCTION mrs_register_reserved_sub_f(p_reserved_ursi character varying, p_check_match character varying, p_site_id character varying, p_sid character varying, p_subject_tag_id numeric, p_tag_value character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_email_address character varying, p_notes character varying, p_ethnicity character varying, p_key character varying, p_iv character varying, p_suffix character varying, p_dbtrans_username_pt character varying, p_user_study_ids character varying, p_tag_site_id character varying, p_tag_study_id numeric) TO micis_app;


--
-- Name: mrs_remove_protocol_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_remove_protocol_f(p_protocol_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_remove_protocol_f(p_protocol_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_remove_protocol_f(p_protocol_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_remove_protocol_f(p_protocol_id numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_remove_protocol_f(p_protocol_id numeric) TO portal_app;


--
-- Name: mrs_remove_protocol_req_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_remove_protocol_req_f(p_protocol_req_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_remove_protocol_req_f(p_protocol_req_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_remove_protocol_req_f(p_protocol_req_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_remove_protocol_req_f(p_protocol_req_id numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_remove_protocol_req_f(p_protocol_req_id numeric) TO portal_app;


--
-- Name: mrs_remove_rad_comment_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_remove_rad_comment_f(p_comment_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_remove_rad_comment_f(p_comment_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_remove_rad_comment_f(p_comment_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_remove_rad_comment_f(p_comment_id numeric) TO micis_app;


--
-- Name: mrs_remove_reserved_ursi_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_remove_reserved_ursi_f(p_ursi character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_remove_reserved_ursi_f(p_ursi character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_remove_reserved_ursi_f(p_ursi character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_remove_reserved_ursi_f(p_ursi character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_remove_scan_session_review_f(numeric, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_remove_scan_session_review_f(p_scan_id numeric, p_mod_user text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_remove_scan_session_review_f(p_scan_id numeric, p_mod_user text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_remove_scan_session_review_f(p_scan_id numeric, p_mod_user text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_remove_scan_session_review_f(p_scan_id numeric, p_mod_user text) TO micis_app;


--
-- Name: mrs_remove_scan_slot_use_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_remove_scan_slot_use_f(p_scan_id numeric, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_remove_scan_slot_use_f(p_scan_id numeric, p_user_entered character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_remove_scan_slot_use_f(p_scan_id numeric, p_user_entered character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_remove_scan_slot_use_f(p_scan_id numeric, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_remove_staged_scan_f(numeric, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_remove_staged_scan_f(p_scan_id numeric, p_dbtrans_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_remove_staged_scan_f(p_scan_id numeric, p_dbtrans_username text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_remove_staged_scan_f(p_scan_id numeric, p_dbtrans_username text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_remove_staged_scan_f(p_scan_id numeric, p_dbtrans_username text) TO micis_app;


--
-- Name: mrs_remove_study_instrument_f(numeric, numeric, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_remove_study_instrument_f(p_study_id numeric, p_instrument_id numeric, p_dbtrans_username_pt text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_remove_study_instrument_f(p_study_id numeric, p_instrument_id numeric, p_dbtrans_username_pt text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_remove_study_instrument_f(p_study_id numeric, p_instrument_id numeric, p_dbtrans_username_pt text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_remove_study_instrument_f(p_study_id numeric, p_instrument_id numeric, p_dbtrans_username_pt text) TO PUBLIC;
GRANT ALL ON FUNCTION mrs_remove_study_instrument_f(p_study_id numeric, p_instrument_id numeric, p_dbtrans_username_pt text) TO micis_app;


--
-- Name: mrs_remove_study_template_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_remove_study_template_f(p_template_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_remove_study_template_f(p_template_id numeric, p_mod_user character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_remove_study_template_f(p_template_id numeric, p_mod_user character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_remove_study_template_f(p_template_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_remove_subject_class_details_f(character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_remove_subject_class_details_f(p_usid character varying, p_subject_class_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_remove_subject_class_details_f(p_usid character varying, p_subject_class_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_remove_subject_class_details_f(p_usid character varying, p_subject_class_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_remove_subject_class_details_f(p_usid character varying, p_subject_class_id numeric) TO micis_app;


--
-- Name: mrs_remove_trgt_enrllmnt_notes_f(); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_remove_trgt_enrllmnt_notes_f() FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_remove_trgt_enrllmnt_notes_f() FROM postgres;
GRANT ALL ON FUNCTION mrs_remove_trgt_enrllmnt_notes_f() TO postgres;
GRANT ALL ON FUNCTION mrs_remove_trgt_enrllmnt_notes_f() TO micis_app;


--
-- Name: mrs_rename_saved_query_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_rename_saved_query_f(p_username character varying, p_old_label character varying, p_label character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_rename_saved_query_f(p_username character varying, p_old_label character varying, p_label character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_rename_saved_query_f(p_username character varying, p_old_label character varying, p_label character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_rename_saved_query_f(p_username character varying, p_old_label character varying, p_label character varying) TO micis_app;


--
-- Name: mrs_reorder_inst_responses_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_reorder_inst_responses_f(p_question_id character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_reorder_inst_responses_f(p_question_id character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_reorder_inst_responses_f(p_question_id character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_reorder_inst_responses_f(p_question_id character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_replace_all_asmt_responses_f(numeric, mrs_response_type[], character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_replace_all_asmt_responses_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_replace_all_asmt_responses_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_replace_all_asmt_responses_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_replace_all_asmt_responses_f(p_assessment_id numeric, p_table mrs_response_type[], p_dbuser character varying) TO micis_app;


--
-- Name: mrs_reserve_ursi_f(character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_reserve_ursi_f(p_pi_id character varying, p_ursi_prefix character varying, p_incount numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_reserve_ursi_f(p_pi_id character varying, p_ursi_prefix character varying, p_incount numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_reserve_ursi_f(p_pi_id character varying, p_ursi_prefix character varying, p_incount numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_reserve_ursi_f(p_pi_id character varying, p_ursi_prefix character varying, p_incount numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_reset_subject_password_f(character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_reset_subject_password_f(p_usid character varying, p_password character varying, p_password_reset_key character varying, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_reset_subject_password_f(p_usid character varying, p_password character varying, p_password_reset_key character varying, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_reset_subject_password_f(p_usid character varying, p_password character varying, p_password_reset_key character varying, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_reset_subject_password_f(p_usid character varying, p_password character varying, p_password_reset_key character varying, p_user_entered character varying) TO p2_app;
GRANT ALL ON FUNCTION mrs_reset_subject_password_f(p_usid character varying, p_password character varying, p_password_reset_key character varying, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_resolve_assessment_f(numeric, numeric, numeric, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_resolve_assessment_f(p_asmt_f_id numeric, p_asmt_1_id numeric, p_asmt_2_id numeric, p_dbtrans_username_pt character varying, p_study_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_resolve_assessment_f(p_asmt_f_id numeric, p_asmt_1_id numeric, p_asmt_2_id numeric, p_dbtrans_username_pt character varying, p_study_id numeric) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_resolve_assessment_f(p_asmt_f_id numeric, p_asmt_1_id numeric, p_asmt_2_id numeric, p_dbtrans_username_pt character varying, p_study_id numeric) TO ni_developers;
GRANT ALL ON FUNCTION mrs_resolve_assessment_f(p_asmt_f_id numeric, p_asmt_1_id numeric, p_asmt_2_id numeric, p_dbtrans_username_pt character varying, p_study_id numeric) TO micis_app;


--
-- Name: mrs_save_queued_time_f(numeric, numeric, timestamp without time zone, timestamp without time zone, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_save_queued_time_f(p_login_id numeric, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_save_queued_time_f(p_login_id numeric, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_save_queued_time_f(p_login_id numeric, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_save_queued_time_f(p_login_id numeric, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_save_queued_time_f(p_login_id numeric, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_mod_user character varying) TO portal_app;


--
-- Name: mrs_save_scheduled_time_f(integer, character varying, timestamp without time zone, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_save_scheduled_time_f(p_segment_interval_id integer, p_ursi character varying, p_segment_interval_timestamp timestamp without time zone, p_use_template_time boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_save_scheduled_time_f(p_segment_interval_id integer, p_ursi character varying, p_segment_interval_timestamp timestamp without time zone, p_use_template_time boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_save_scheduled_time_f(p_segment_interval_id integer, p_ursi character varying, p_segment_interval_timestamp timestamp without time zone, p_use_template_time boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_save_scheduled_time_f(p_segment_interval_id integer, p_ursi character varying, p_segment_interval_timestamp timestamp without time zone, p_use_template_time boolean, p_mod_user character varying) TO PUBLIC;
GRANT ALL ON FUNCTION mrs_save_scheduled_time_f(p_segment_interval_id integer, p_ursi character varying, p_segment_interval_timestamp timestamp without time zone, p_use_template_time boolean, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_save_scheduled_time_f(p_segment_interval_id integer, p_ursi character varying, p_segment_interval_timestamp timestamp without time zone, p_use_template_time boolean, p_mod_user character varying) TO portal_app;


--
-- Name: mrs_scan_session_reimburse_f(numeric, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_scan_session_reimburse_f(p_scan_id numeric, p_user_entered text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_scan_session_reimburse_f(p_scan_id numeric, p_user_entered text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_scan_session_reimburse_f(p_scan_id numeric, p_user_entered text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_scan_session_reimburse_f(p_scan_id numeric, p_user_entered text) TO PUBLIC;
GRANT ALL ON FUNCTION mrs_scan_session_reimburse_f(p_scan_id numeric, p_user_entered text) TO micis_app;


--
-- Name: mrs_set_email_confirmation_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_set_email_confirmation_f(p_usid character varying, p_email_code character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_set_email_confirmation_f(p_usid character varying, p_email_code character varying, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_set_email_confirmation_f(p_usid character varying, p_email_code character varying, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_set_email_confirmation_f(p_usid character varying, p_email_code character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_set_mail_sent_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_set_mail_sent_f(p_mail_id integer, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_set_mail_sent_f(p_mail_id integer, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_set_mail_sent_f(p_mail_id integer, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_set_mail_sent_f(p_mail_id integer, p_user_entered character varying) TO batch_app;


--
-- Name: mrs_set_sa_nonstop_queue_f(numeric, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_set_sa_nonstop_queue_f(login_id_f numeric, nonstop_queue_f boolean, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_set_sa_nonstop_queue_f(login_id_f numeric, nonstop_queue_f boolean, mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_set_sa_nonstop_queue_f(login_id_f numeric, nonstop_queue_f boolean, mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_set_sa_nonstop_queue_f(login_id_f numeric, nonstop_queue_f boolean, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_set_sa_nonstop_queue_f(login_id_f numeric, nonstop_queue_f boolean, mod_user_f character varying) TO p2_app;


--
-- Name: mrs_set_subject_password_reset_key_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_set_subject_password_reset_key_f(p_usid character varying, p_password_reset_key character varying, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_set_subject_password_reset_key_f(p_usid character varying, p_password_reset_key character varying, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_set_subject_password_reset_key_f(p_usid character varying, p_password_reset_key character varying, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_set_subject_password_reset_key_f(p_usid character varying, p_password_reset_key character varying, p_user_entered character varying) TO p2_app;
GRANT ALL ON FUNCTION mrs_set_subject_password_reset_key_f(p_usid character varying, p_password_reset_key character varying, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_share_instrument_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_share_instrument_f(p_study_id numeric, p_instrument_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_share_instrument_f(p_study_id numeric, p_instrument_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_share_instrument_f(p_study_id numeric, p_instrument_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_share_instrument_f(p_study_id numeric, p_instrument_id numeric, p_mod_user character varying) TO PUBLIC;
GRANT ALL ON FUNCTION mrs_share_instrument_f(p_study_id numeric, p_instrument_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_share_missing_assessment_reason_f(numeric, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_share_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_share_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_share_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_share_missing_assessment_reason_f(reason_id_f numeric, study_id_f numeric) TO micis_app;


--
-- Name: mrs_share_saved_query_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_share_saved_query_f(p_from_user character varying, p_to_user character varying, p_label character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_share_saved_query_f(p_from_user character varying, p_to_user character varying, p_label character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_share_saved_query_f(p_from_user character varying, p_to_user character varying, p_label character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_share_saved_query_f(p_from_user character varying, p_to_user character varying, p_label character varying) TO micis_app;


--
-- Name: mrs_start_assessment_f(numeric, numeric, timestamp without time zone, character varying, numeric, numeric, numeric, character varying, numeric, character varying, boolean, character varying, boolean, boolean, boolean, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_start_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean, p_auto_queue_generated boolean, p_from_protocol_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_start_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean, p_auto_queue_generated boolean, p_from_protocol_id numeric, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_start_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean, p_auto_queue_generated boolean, p_from_protocol_id numeric, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_start_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean, p_auto_queue_generated boolean, p_from_protocol_id numeric, p_dbtrans_username_pt character varying) TO PUBLIC;
GRANT ALL ON FUNCTION mrs_start_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean, p_auto_queue_generated boolean, p_from_protocol_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_start_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean, p_auto_queue_generated boolean, p_from_protocol_id numeric, p_dbtrans_username_pt character varying) TO p2_app;
GRANT ALL ON FUNCTION mrs_start_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_rater2 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean, p_auto_queue_generated boolean, p_from_protocol_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_start_erp_scan_f(character varying, character varying, numeric, numeric, timestamp without time zone, character varying, character varying, numeric, character varying, numeric, character varying, numeric, numeric, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_start_erp_scan_f(p_label character varying, p_segment_interval character varying, p_study_id numeric, p_eeg_id numeric, p_scan_date timestamp without time zone, p_operator_id character varying, p_ursi character varying, p_cap numeric, p_capno character varying, p_impedance numeric, p_impedance_other character varying, p_amp_gain numeric, p_amp_lpf numeric, p_amp_hpf character varying, p_eye_tracking_aso character varying, p_eye_tracking_spem character varying, p_eye_tracking_na character varying, p_eye_tracking_pupillometry character varying, p_eye_tracking_other character varying, p_eye_tracked character varying, p_notes character varying, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_start_erp_scan_f(p_label character varying, p_segment_interval character varying, p_study_id numeric, p_eeg_id numeric, p_scan_date timestamp without time zone, p_operator_id character varying, p_ursi character varying, p_cap numeric, p_capno character varying, p_impedance numeric, p_impedance_other character varying, p_amp_gain numeric, p_amp_lpf numeric, p_amp_hpf character varying, p_eye_tracking_aso character varying, p_eye_tracking_spem character varying, p_eye_tracking_na character varying, p_eye_tracking_pupillometry character varying, p_eye_tracking_other character varying, p_eye_tracked character varying, p_notes character varying, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_start_erp_scan_f(p_label character varying, p_segment_interval character varying, p_study_id numeric, p_eeg_id numeric, p_scan_date timestamp without time zone, p_operator_id character varying, p_ursi character varying, p_cap numeric, p_capno character varying, p_impedance numeric, p_impedance_other character varying, p_amp_gain numeric, p_amp_lpf numeric, p_amp_hpf character varying, p_eye_tracking_aso character varying, p_eye_tracking_spem character varying, p_eye_tracking_na character varying, p_eye_tracking_pupillometry character varying, p_eye_tracking_other character varying, p_eye_tracked character varying, p_notes character varying, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_start_erp_scan_f(p_label character varying, p_segment_interval character varying, p_study_id numeric, p_eeg_id numeric, p_scan_date timestamp without time zone, p_operator_id character varying, p_ursi character varying, p_cap numeric, p_capno character varying, p_impedance numeric, p_impedance_other character varying, p_amp_gain numeric, p_amp_lpf numeric, p_amp_hpf character varying, p_eye_tracking_aso character varying, p_eye_tracking_spem character varying, p_eye_tracking_na character varying, p_eye_tracking_pupillometry character varying, p_eye_tracking_other character varying, p_eye_tracked character varying, p_notes character varying, p_eeg_study_task_ids character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_start_mcic_scan_f(timestamp without time zone, character varying, character varying, numeric, numeric, character varying, character varying, character varying, numeric, character varying, numeric, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_start_mcic_scan_f(p_scan_date timestamp without time zone, p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_start_mcic_scan_f(p_scan_date timestamp without time zone, p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_start_mcic_scan_f(p_scan_date timestamp without time zone, p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_start_mcic_scan_f(p_scan_date timestamp without time zone, p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_start_mcic_scan_f(p_scan_date timestamp without time zone, p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_start_scan_f(character varying, character varying, numeric, numeric, character varying, character varying, character varying, numeric, character varying, numeric, character varying, character varying, timestamp without time zone, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_start_scan_f(p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_scan_date timestamp without time zone, p_study_dir_name character varying, p_pi_dir_name character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_start_scan_f(p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_scan_date timestamp without time zone, p_study_dir_name character varying, p_pi_dir_name character varying, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_start_scan_f(p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_scan_date timestamp without time zone, p_study_dir_name character varying, p_pi_dir_name character varying, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_start_scan_f(p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_scan_date timestamp without time zone, p_study_dir_name character varying, p_pi_dir_name character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_start_scan_f(p_scan_label character varying, p_segment_interval character varying, p_study_id numeric, p_scanner_id numeric, p_rate_label character varying, p_operator_id character varying, p_ursi character varying, p_subject_height numeric, p_subject_height_units character varying, p_subject_mass numeric, p_subject_mass_units character varying, p_notes character varying, p_scan_date timestamp without time zone, p_study_dir_name character varying, p_pi_dir_name character varying, p_dbtrans_username_pt character varying) TO transfer_app;


--
-- Name: mrs_study_secondary_site_add_f(integer, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_study_secondary_site_add_f(p_study_id integer, p_site_id character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_study_secondary_site_add_f(p_study_id integer, p_site_id character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_study_secondary_site_add_f(p_study_id integer, p_site_id character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_study_secondary_site_add_f(p_study_id integer, p_site_id character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_study_secondary_site_remove_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_study_secondary_site_remove_f(p_study_site_relation_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_study_secondary_site_remove_f(p_study_site_relation_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_study_secondary_site_remove_f(p_study_site_relation_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_study_secondary_site_remove_f(p_study_site_relation_id integer, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_study_tracker_event_canned_responses_add_f(integer, character varying, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_study_tracker_event_canned_responses_add_f(p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_study_tracker_event_canned_responses_add_f(p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_event_canned_responses_add_f(p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_event_canned_responses_add_f(p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_study_tracker_event_canned_responses_remove_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_study_tracker_event_canned_responses_remove_f(p_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_study_tracker_event_canned_responses_remove_f(p_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_event_canned_responses_remove_f(p_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_event_canned_responses_remove_f(p_id integer, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_study_tracker_event_canned_responses_update_f(integer, integer, character varying, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_study_tracker_event_canned_responses_update_f(p_id integer, p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_study_tracker_event_canned_responses_update_f(p_id integer, p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_event_canned_responses_update_f(p_id integer, p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_event_canned_responses_update_f(p_id integer, p_study_id integer, p_label character varying, p_default_response boolean, p_hidden boolean, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_study_tracker_response_options_add_f(integer, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_study_tracker_response_options_add_f(p_tracker_id integer, p_label character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_study_tracker_response_options_add_f(p_tracker_id integer, p_label character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_response_options_add_f(p_tracker_id integer, p_label character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_response_options_add_f(p_tracker_id integer, p_label character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_study_tracker_response_options_remove_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_study_tracker_response_options_remove_f(p_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_study_tracker_response_options_remove_f(p_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_response_options_remove_f(p_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_response_options_remove_f(p_id integer, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_study_tracker_response_options_update_f(integer, integer, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_study_tracker_response_options_update_f(p_id integer, p_tracker_id integer, p_label character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_study_tracker_response_options_update_f(p_id integer, p_tracker_id integer, p_label character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_response_options_update_f(p_id integer, p_tracker_id integer, p_label character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_study_tracker_response_options_update_f(p_id integer, p_tracker_id integer, p_label character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_study_trackers_add_f(integer, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_study_trackers_add_f(p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_study_trackers_add_f(p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_study_trackers_add_f(p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_study_trackers_add_f(p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_study_trackers_remove_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_study_trackers_remove_f(p_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_study_trackers_remove_f(p_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_study_trackers_remove_f(p_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_study_trackers_remove_f(p_id integer, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_study_trackers_update_f(integer, integer, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_study_trackers_update_f(p_id integer, p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_study_trackers_update_f(p_id integer, p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_study_trackers_update_f(p_id integer, p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_study_trackers_update_f(p_id integer, p_study_id integer, p_label character varying, p_permit_custom_text_response boolean, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_subject_tracker_events_add_f(integer, timestamp with time zone, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_subject_tracker_events_add_f(p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_subject_tracker_events_add_f(p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_events_add_f(p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_events_add_f(p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_subject_tracker_events_remove_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_subject_tracker_events_remove_f(p_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_subject_tracker_events_remove_f(p_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_events_remove_f(p_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_events_remove_f(p_id integer, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_subject_tracker_events_update_f(integer, integer, timestamp with time zone, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_subject_tracker_events_update_f(p_id integer, p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_subject_tracker_events_update_f(p_id integer, p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_events_update_f(p_id integer, p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_events_update_f(p_id integer, p_subject_type_detail_id integer, p_timestamp timestamp with time zone, p_log character varying, p_tracking_diff character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_subject_tracker_responses_add_f(integer, integer, integer, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_subject_tracker_responses_add_f(p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_subject_tracker_responses_add_f(p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_responses_add_f(p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_responses_add_f(p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_subject_tracker_responses_remove_f(integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_subject_tracker_responses_remove_f(p_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_subject_tracker_responses_remove_f(p_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_responses_remove_f(p_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_responses_remove_f(p_id integer, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_subject_tracker_responses_update_f(integer, integer, integer, integer, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_subject_tracker_responses_update_f(p_id integer, p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_subject_tracker_responses_update_f(p_id integer, p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_responses_update_f(p_id integer, p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_subject_tracker_responses_update_f(p_id integer, p_event_id integer, p_tracker_id integer, p_tracker_response_option_id integer, p_custom_text_response character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_submit_self_assessment_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_submit_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_submit_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_submit_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_submit_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) TO p2_app;
GRANT ALL ON FUNCTION mrs_submit_self_assessment_f(p_assessment_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_testing_func_f(integer); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_testing_func_f(numparameter integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_testing_func_f(numparameter integer) FROM postgres;
GRANT ALL ON FUNCTION mrs_testing_func_f(numparameter integer) TO postgres;
GRANT ALL ON FUNCTION mrs_testing_func_f(numparameter integer) TO micis_app;


--
-- Name: mrs_testing_func_f(integer, integer); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_testing_func_f(numparameter integer, extraparam integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_testing_func_f(numparameter integer, extraparam integer) FROM postgres;
GRANT ALL ON FUNCTION mrs_testing_func_f(numparameter integer, extraparam integer) TO postgres;
GRANT ALL ON FUNCTION mrs_testing_func_f(numparameter integer, extraparam integer) TO micis_app;


--
-- Name: mrs_unassign_per_rol_det_add_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_unassign_per_rol_det_add_f(p_address_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_unassign_per_rol_det_add_f(p_address_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_unassign_per_rol_det_add_f(p_address_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_unassign_per_rol_det_add_f(p_address_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_unassign_personphone_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_unassign_personphone_f(p_phone_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_unassign_personphone_f(p_phone_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_unassign_personphone_f(p_phone_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_unassign_personphone_f(p_phone_id numeric, p_prd_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_account_f(character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_account_f(p_account_number character varying, p_account_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_account_f(p_account_number character varying, p_account_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_account_f(p_account_number character varying, p_account_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_account_f(p_account_number character varying, p_account_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_address_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_address_f(p_usid character varying, p_line1 character varying, p_line2 character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_all_conditional_jump_sort_f(numeric[], text, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_all_conditional_jump_sort_f(p_conditional_jump_array numeric[], p_question_id text, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_all_conditional_jump_sort_f(p_conditional_jump_array numeric[], p_question_id text, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_all_conditional_jump_sort_f(p_conditional_jump_array numeric[], p_question_id text, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_all_conditional_jump_sort_f(p_conditional_jump_array numeric[], p_question_id text, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_all_inst_quest_sort_f(character varying[], character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_all_inst_quest_sort_f(p_question_array character varying[], p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_all_inst_quest_sort_f(p_question_array character varying[], p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_all_inst_quest_sort_f(p_question_array character varying[], p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_all_inst_quest_sort_f(p_question_array character varying[], p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_all_inst_section_sort_f(numeric[], numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_all_inst_section_sort_f(p_section_array numeric[], p_instrument_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_all_inst_section_sort_f(p_section_array numeric[], p_instrument_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_all_inst_section_sort_f(p_section_array numeric[], p_instrument_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_update_all_inst_section_sort_f(p_section_array numeric[], p_instrument_id numeric) TO micis_app;


--
-- Name: mrs_update_analysis_detail_finishtime_f(numeric, character varying, timestamp without time zone); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_analysis_detail_finishtime_f(analysis_id_f numeric, series_id_f character varying, finish_time_f timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_analysis_detail_finishtime_f(analysis_id_f numeric, series_id_f character varying, finish_time_f timestamp without time zone) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_analysis_detail_finishtime_f(analysis_id_f numeric, series_id_f character varying, finish_time_f timestamp without time zone) TO postgres;


--
-- Name: mrs_update_analysis_detail_starttime_f(numeric, character varying, timestamp without time zone); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_analysis_detail_starttime_f(analysis_id_f numeric, series_id_f character varying, start_time_f timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_analysis_detail_starttime_f(analysis_id_f numeric, series_id_f character varying, start_time_f timestamp without time zone) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_analysis_detail_starttime_f(analysis_id_f numeric, series_id_f character varying, start_time_f timestamp without time zone) TO postgres;


--
-- Name: mrs_update_analysis_queue_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_analysis_queue_f(id_f numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_analysis_queue_f(id_f numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_analysis_queue_f(id_f numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_update_analysis_queue_f(id_f numeric) TO portal_app;


--
-- Name: mrs_update_anatomy_f(numeric, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_anatomy_f(p_anatomy_region_id numeric, p_anatomy_region_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_anatomy_f(p_anatomy_region_id numeric, p_anatomy_region_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_anatomy_f(p_anatomy_region_id numeric, p_anatomy_region_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_anatomy_f(p_anatomy_region_id numeric, p_anatomy_region_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_anchor_date_f(numeric, character varying, timestamp without time zone, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_anchor_date_f(subject_type_id_f numeric, ursi_f character varying, anchor_date_f timestamp without time zone, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_anchor_date_f(subject_type_id_f numeric, ursi_f character varying, anchor_date_f timestamp without time zone, mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_anchor_date_f(subject_type_id_f numeric, ursi_f character varying, anchor_date_f timestamp without time zone, mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_anchor_date_f(subject_type_id_f numeric, ursi_f character varying, anchor_date_f timestamp without time zone, mod_user_f character varying) TO portal_app;
GRANT ALL ON FUNCTION mrs_update_anchor_date_f(subject_type_id_f numeric, ursi_f character varying, anchor_date_f timestamp without time zone, mod_user_f character varying) TO micis_app;


--
-- Name: mrs_update_asmt_dx_excluded_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_asmt_dx_excluded_f(p_assessment_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_asmt_dx_excluded_f(p_assessment_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_asmt_dx_excluded_f(p_assessment_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_asmt_dx_excluded_f(p_assessment_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_asmt_last_qid_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_asmt_last_qid_f(p_asmt_id numeric, p_last_qid character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_asmt_last_qid_f(p_asmt_id numeric, p_last_qid character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_asmt_last_qid_f(p_asmt_id numeric, p_last_qid character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_asmt_last_qid_f(p_asmt_id numeric, p_last_qid character varying) TO p2_app;
GRANT ALL ON FUNCTION mrs_update_asmt_last_qid_f(p_asmt_id numeric, p_last_qid character varying) TO micis_app;


--
-- Name: mrs_update_asmt_ownership_f(numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_asmt_ownership_f(p_assessment_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_asmt_ownership_f(p_assessment_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_asmt_ownership_f(p_assessment_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_update_asmt_ownership_f(p_assessment_id numeric) TO micis_app;


--
-- Name: mrs_update_auto_message_f(numeric, text, text, text, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_auto_message_f(message_id_f numeric, subject_f text, cc_f text, body_f text, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_auto_message_f(message_id_f numeric, subject_f text, cc_f text, body_f text, mod_user_f character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_auto_message_f(message_id_f numeric, subject_f text, cc_f text, body_f text, mod_user_f character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_auto_message_f(message_id_f numeric, subject_f text, cc_f text, body_f text, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_auto_message_f(message_id_f numeric, subject_f text, cc_f text, body_f text, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_update_charge_code_f(numeric, character varying, character varying, timestamp without time zone, timestamp without time zone, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_charge_code_f(p_charge_code_id numeric, p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_charge_code_f(p_charge_code_id numeric, p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_charge_code_f(p_charge_code_id numeric, p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_charge_code_f(p_charge_code_id numeric, p_charge_code character varying, p_project_number character varying, p_start_date timestamp without time zone, p_end_date timestamp without time zone, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_update_charge_code_site_f(numeric, numeric, numeric, character varying, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_charge_code_site_f(p_site_charge_id numeric, p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_charge_code_site_f(p_site_charge_id numeric, p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_charge_code_site_f(p_site_charge_id numeric, p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_charge_code_site_f(p_site_charge_id numeric, p_charge_code_id numeric, p_site_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_update_charge_code_site_modality_f(numeric, numeric, numeric, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_charge_code_site_modality_f(p_site_modality_id numeric, p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_charge_code_site_modality_f(p_site_modality_id numeric, p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_charge_code_site_modality_f(p_site_modality_id numeric, p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_charge_code_site_modality_f(p_site_modality_id numeric, p_site_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_update_charge_code_study_f(numeric, numeric, numeric, character varying, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_charge_code_study_f(p_study_charge_id numeric, p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_charge_code_study_f(p_study_charge_id numeric, p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_charge_code_study_f(p_study_charge_id numeric, p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_charge_code_study_f(p_study_charge_id numeric, p_charge_code_id numeric, p_study_id numeric, p_funding_source character varying, p_notes character varying, p_is_enabled boolean, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_update_charge_code_study_modality_f(numeric, numeric, numeric, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_charge_code_study_modality_f(p_study_modality_id numeric, p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_charge_code_study_modality_f(p_study_modality_id numeric, p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_charge_code_study_modality_f(p_study_modality_id numeric, p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_charge_code_study_modality_f(p_study_modality_id numeric, p_study_charge_id numeric, p_modality_id numeric, p_is_default boolean, p_uses_credits boolean, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_update_client_assessment_backup_f(integer, integer, numeric, text, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_client_assessment_backup_f(p_backup_id integer, p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_client_assessment_backup_f(p_backup_id integer, p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_client_assessment_backup_f(p_backup_id integer, p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_client_assessment_backup_f(p_backup_id integer, p_device_id integer, p_study_id numeric, p_assessment_json text, p_db_transaction_username character varying) TO micis_app;


--
-- Name: mrs_update_conditional_jump_f(integer, text, text, text, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_conditional_jump_f(p_question_jump_id integer, p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_conditional_jump_f(p_question_jump_id integer, p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_conditional_jump_f(p_question_jump_id integer, p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_conditional_jump_f(p_question_jump_id integer, p_question_id text, p_target_qid text, p_formula text, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_data_qc_constraint_f(integer, text, text, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_data_qc_constraint_f(p_constraint_id integer, p_formula text, p_label text, p_mod_user text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_data_qc_constraint_f(p_constraint_id integer, p_formula text, p_label text, p_mod_user text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_data_qc_constraint_f(p_constraint_id integer, p_formula text, p_label text, p_mod_user text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_data_qc_constraint_f(p_constraint_id integer, p_formula text, p_label text, p_mod_user text) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_data_qc_constraint_f(p_constraint_id integer, p_formula text, p_label text, p_mod_user text) TO portal_app;


--
-- Name: mrs_update_dataentry_type_f(numeric, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_dataentry_type_f(p_dataentry_type_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_dataentry_type_f(p_dataentry_type_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_dataentry_type_f(p_dataentry_type_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_dataentry_type_f(p_dataentry_type_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_document_category_f(numeric, character varying, character varying, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_document_category_f(p_category_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_document_category_f(p_category_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_document_category_f(p_category_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_document_category_f(p_category_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_document_category_f(p_category_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_parent_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_update_document_f(numeric, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_document_f(p_file_id numeric, p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_site_id character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_document_f(p_file_id numeric, p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_site_id character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_document_f(p_file_id numeric, p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_site_id character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_document_f(p_file_id numeric, p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_site_id character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_document_f(p_file_id numeric, p_file_name character varying, p_file_mime_type character varying, p_label character varying, p_description character varying, p_file_size character varying, p_path_relative character varying, p_site_id character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_update_drug_category_f(numeric, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_drug_category_f(p_category_id numeric, p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_drug_category_f(p_category_id numeric, p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_drug_category_f(p_category_id numeric, p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_drug_category_f(p_category_id numeric, p_category_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_drug_prop_details_f(numeric, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_drug_prop_details_f(p_property_id numeric, p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_drug_prop_details_f(p_property_id numeric, p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_drug_prop_details_f(p_property_id numeric, p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_drug_prop_details_f(p_property_id numeric, p_label character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_expired_studies_f(character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_expired_studies_f(p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_expired_studies_f(p_dbtrans_username character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_expired_studies_f(p_dbtrans_username character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_expired_studies_f(p_dbtrans_username character varying) TO micis_app;


--
-- Name: mrs_update_future_contact_permission_f(boolean, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_future_contact_permission_f(p_agrees_to_future_studies boolean, p_usid character varying, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_future_contact_permission_f(p_agrees_to_future_studies boolean, p_usid character varying, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_future_contact_permission_f(p_agrees_to_future_studies boolean, p_usid character varying, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_future_contact_permission_f(p_agrees_to_future_studies boolean, p_usid character varying, p_dbtrans_username character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_future_contact_permission_f(p_agrees_to_future_studies boolean, p_usid character varying, p_dbtrans_username character varying) TO portal_app;


--
-- Name: mrs_update_generic_drug_f(character varying, character varying, character varying, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_generic_drug_f(p_drug_code character varying, p_generic_name character varying, p_description character varying, p_equivalency numeric, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_inst_f(numeric, character varying, character varying, character varying, character varying, character varying, numeric, numeric, boolean, character varying, numeric, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_inst_f(p_instrument_id numeric, p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_is_locked numeric, p_sa_hide_skipped_questions boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_inst_f(p_instrument_id numeric, p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_is_locked numeric, p_sa_hide_skipped_questions boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_f(p_instrument_id numeric, p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_is_locked numeric, p_sa_hide_skipped_questions boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_f(p_instrument_id numeric, p_label character varying, p_salabel character varying, p_description character varying, p_copyright_notice character varying, p_version character varying, p_display_type numeric, p_max_per_segment numeric, p_hide_sa_previous boolean, p_skip_question_text character varying, p_is_locked numeric, p_sa_hide_skipped_questions boolean, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_inst_quest_sort_f(character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_inst_quest_sort_f(p_question_id character varying, p_sort_order numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_inst_quest_sort_f(p_question_id character varying, p_sort_order numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_quest_sort_f(p_question_id character varying, p_sort_order numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_quest_sort_f(p_question_id character varying, p_sort_order numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_inst_question_f(character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying, character varying, character varying, character varying, boolean, boolean, boolean, boolean, character varying, character varying, character varying, numeric, character varying, character, character, boolean, boolean, numeric, numeric, numeric, boolean, boolean, boolean, character varying, character varying, character varying, numeric, numeric, boolean, integer, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_is_de_hidden boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_is_de_hidden boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_is_de_hidden boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_question_f(p_question_id character varying, p_label character varying, p_description character varying, p_example_description character varying, p_exclusion_description character varying, p_max_instances numeric, p_section_id numeric, p_dsm_question_type character varying, p_disp_label_first character varying, p_formula_question_type character varying, p_formula character varying, p_is_required boolean, p_is_sa_hidden boolean, p_is_sa_radio_type boolean, p_is_auto_complete_type boolean, p_sa_label character varying, p_autopop_qid character varying, p_assumed_value character varying, p_response_format_id numeric, p_other_option_label character varying, p_specify_detail character, p_multiple_choice character, p_istextquestion boolean, p_isvasquestion boolean, p_vas_minimum numeric, p_vas_maximum numeric, p_vas_interval numeric, p_vas_display_extrema boolean, p_vas_display_cursor_value boolean, p_vas_display_center_mark boolean, p_vas_min_label character varying, p_vas_mid_label character varying, p_vas_max_label character varying, p_numeric_response_min numeric, p_numeric_response_max numeric, p_is_media_upload boolean, p_vas_recording_interval integer, p_is_de_hidden boolean, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_inst_question_property_f(character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_inst_question_property_f(p_question_id character varying, p_istextquestion boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_inst_question_property_f(p_question_id character varying, p_istextquestion boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_question_property_f(p_question_id character varying, p_istextquestion boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_question_property_f(p_question_id character varying, p_istextquestion boolean, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_inst_question_property_f(p_question_id character varying, p_istextquestion boolean, p_mod_user character varying) TO p2_app;


--
-- Name: mrs_update_inst_response_f(character varying, numeric, character varying, character varying, numeric, boolean, boolean, boolean, character, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_inst_response_f(p_question_id character varying, p_value numeric, p_label character varying, p_description character varying, p_sort_order numeric, p_is_critical boolean, p_skip_revscore boolean, p_is_hidden boolean, p_specify_detail character, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_inst_response_f(p_question_id character varying, p_value numeric, p_label character varying, p_description character varying, p_sort_order numeric, p_is_critical boolean, p_skip_revscore boolean, p_is_hidden boolean, p_specify_detail character, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_response_f(p_question_id character varying, p_value numeric, p_label character varying, p_description character varying, p_sort_order numeric, p_is_critical boolean, p_skip_revscore boolean, p_is_hidden boolean, p_specify_detail character, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_response_f(p_question_id character varying, p_value numeric, p_label character varying, p_description character varying, p_sort_order numeric, p_is_critical boolean, p_skip_revscore boolean, p_is_hidden boolean, p_specify_detail character, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_inst_section_details_f(numeric, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_inst_section_details_f(p_instrument_id numeric, p_section_id numeric, p_sa_questions_per_page numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_inst_section_f(numeric, character varying, character varying, numeric, character varying, character varying, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_inst_section_f(p_section_id numeric, p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_inst_section_f(p_section_id numeric, p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_section_f(p_section_id numeric, p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_section_f(p_section_id numeric, p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_inst_section_f(p_section_id numeric, p_label character varying, p_description character varying, p_multi_inst_grid numeric, p_sa_label character varying, p_sa_description character varying, p_is_likert_grid boolean, p_is_table_grid boolean, p_mod_user character varying) TO postgres;


--
-- Name: mrs_update_inst_study_f(numeric, numeric, boolean, boolean, boolean, numeric, numeric, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_inst_study_f(p_instrument_id numeric, p_study_id numeric, p_enforce_schedule boolean, p_single_entry boolean, p_ongoing_entry boolean, p_is_hidden numeric, p_is_owner numeric, p_dx_excluded boolean, p_sa_review boolean, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_inst_study_f(p_instrument_id numeric, p_study_id numeric, p_enforce_schedule boolean, p_single_entry boolean, p_ongoing_entry boolean, p_is_hidden numeric, p_is_owner numeric, p_dx_excluded boolean, p_sa_review boolean, p_dbtrans_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_study_f(p_instrument_id numeric, p_study_id numeric, p_enforce_schedule boolean, p_single_entry boolean, p_ongoing_entry boolean, p_is_hidden numeric, p_is_owner numeric, p_dx_excluded boolean, p_sa_review boolean, p_dbtrans_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_inst_study_f(p_instrument_id numeric, p_study_id numeric, p_enforce_schedule boolean, p_single_entry boolean, p_ongoing_entry boolean, p_is_hidden numeric, p_is_owner numeric, p_dx_excluded boolean, p_sa_review boolean, p_dbtrans_username character varying) TO micis_app;


--
-- Name: mrs_update_instrument_question_media_f(integer, character varying, integer, integer, character varying, character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_instrument_question_media_f(p_question_media_id integer, p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_instrument_question_media_f(p_question_media_id integer, p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_instrument_question_media_f(p_question_media_id integer, p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_instrument_question_media_f(p_question_media_id integer, p_question_id character varying, p_media_type_id integer, p_sort_order integer, p_url character varying, p_attributes character varying, p_caption character varying, p_position numeric, p_dbtrans_username character varying) TO micis_app;


--
-- Name: mrs_update_instrument_table_col_f(numeric, text, integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_instrument_table_col_f(p_col_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_instrument_table_col_f(p_col_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_instrument_table_col_f(p_col_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_instrument_table_col_f(p_col_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_instrument_table_col_f(p_col_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) TO p2_app;


--
-- Name: mrs_update_instrument_table_f(numeric, integer, integer, text, text, integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_instrument_table_f(p_table_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_sort_order integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_instrument_table_f(p_table_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_sort_order integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_instrument_table_f(p_table_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_sort_order integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_instrument_table_f(p_table_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_sort_order integer, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_instrument_table_f(p_table_id numeric, p_num_rows integer, p_num_cols integer, p_label text, p_description text, p_sort_order integer, p_mod_user character varying) TO p2_app;


--
-- Name: mrs_update_instrument_table_row_f(numeric, text, integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_instrument_table_row_f(p_row_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_instrument_table_row_f(p_row_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_instrument_table_row_f(p_row_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_instrument_table_row_f(p_row_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_instrument_table_row_f(p_row_id numeric, p_label text, p_sort_order integer, p_mod_user character varying) TO p2_app;


--
-- Name: mrs_update_internal_subject_f(character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, boolean, boolean, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_internal_subject_f(p_ursi character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_email_address character varying, p_suffix character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_internal_subject_f(p_ursi character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_email_address character varying, p_suffix character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_internal_subject_f(p_ursi character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_email_address character varying, p_suffix character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_internal_subject_f(p_ursi character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_email_address character varying, p_suffix character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_first_name_at_birth character varying, p_middle_name_at_birth character varying, p_last_name_at_birth character varying, p_physical_sex_at_birth character varying, p_city_born_in character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_intrnl_sbjct_by_usid_f(character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_intrnl_sbjct_by_usid_f(p_usid character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_intrnl_sbjct_by_usid_f(p_usid character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_intrnl_sbjct_by_usid_f(p_usid character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_intrnl_sbjct_by_usid_f(p_usid character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_birthdate timestamp without time zone, p_gender character varying, p_password character varying, p_is_p2_active boolean, p_agrees_to_future_studies boolean, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_message_f(numeric, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_message_f(message_id_f numeric, subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_message_f(message_id_f numeric, subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_message_f(message_id_f numeric, subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_message_f(message_id_f numeric, subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_message_f(message_id_f numeric, subject_f character varying, body_f character varying, from_f character varying, to_f character varying, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_update_modality_f(numeric, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_modality_f(p_modality_id numeric, p_modality_label character varying, p_description character varying, p_attribute_view character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_modality_f(p_modality_id numeric, p_modality_label character varying, p_description character varying, p_attribute_view character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_modality_f(p_modality_id numeric, p_modality_label character varying, p_description character varying, p_attribute_view character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_modality_f(p_modality_id numeric, p_modality_label character varying, p_description character varying, p_attribute_view character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_person_alias_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_person_alias_f(p_alias_id numeric, p_label character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_person_alias_f(p_alias_id numeric, p_label character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_person_alias_f(p_alias_id numeric, p_label character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_person_alias_f(p_alias_id numeric, p_label character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_person_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_person_f(p_person_id character varying, p_first_name character varying, p_middle_name character varying, p_last_name character varying, p_site_id character varying, p_department character varying, p_institution character varying, p_contact_email character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_update_person_role_detail_f(numeric, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_person_role_detail_f(p_prd_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_person_role_detail_f(p_prd_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_person_role_detail_f(p_prd_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_person_role_detail_f(p_prd_id numeric, p_is_hidden boolean, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_personaddress_f(character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_address_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_address_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_address_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_update_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_address_id numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_personaddress_f(p_address_line_1 character varying, p_address_line_2 character varying, p_msc character varying, p_city character varying, p_state character varying, p_zip character varying, p_country character varying, p_address_type_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying, p_address_id numeric) TO portal_app;


--
-- Name: mrs_update_personphone_f(numeric, character varying, character varying, character varying, numeric, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_personphone_f(p_phone_id numeric, p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_personphone_f(p_phone_id numeric, p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_personphone_f(p_phone_id numeric, p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_personphone_f(p_phone_id numeric, p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_personphone_f(p_phone_id numeric, p_country_code character varying, p_area_code character varying, p_phone_number character varying, p_phone_type_id numeric, p_sms_preference_id numeric, p_preference_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_update_phone_f(numeric, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_phone_f(p_phone_id numeric, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying, p_dbtransuser character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_phone_f(p_phone_id numeric, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying, p_dbtransuser character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_phone_f(p_phone_id numeric, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying, p_dbtransuser character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_phone_f(p_phone_id numeric, p_area_code character varying, p_phone_num character varying, p_extension character varying, p_notes character varying, p_dbtransuser character varying) TO micis_app;


--
-- Name: mrs_update_pr_f(character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_pr_f(p_pr_number character varying, p_new_pr_number character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_pr_f(p_pr_number character varying, p_new_pr_number character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_pr_f(p_pr_number character varying, p_new_pr_number character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_pr_f(p_pr_number character varying, p_new_pr_number character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_protocol_f(numeric, numeric, numeric, character varying, numeric, numeric, integer, integer, character varying, integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_protocol_f(p_protocol_id numeric, p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_protocol_f(p_protocol_id numeric, p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_protocol_f(p_protocol_id numeric, p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_protocol_f(p_protocol_id numeric, p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_protocol_f(p_protocol_id numeric, p_subject_type_id numeric, p_protocol_type_id numeric, p_description character varying, p_start_minutes_from_segment_interval numeric, p_end_minutes_from_segment_interval numeric, p_source_type_id integer, p_segment_interval_id integer, p_label character varying, p_queue_type_id integer, p_mod_user character varying) TO portal_app;


--
-- Name: mrs_update_protocol_req_f(numeric, numeric, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_protocol_req_f(p_protocol_req_id numeric, p_sort_order numeric, p_dbtrans_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_protocol_req_f(p_protocol_req_id numeric, p_sort_order numeric, p_dbtrans_username text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_protocol_req_f(p_protocol_req_id numeric, p_sort_order numeric, p_dbtrans_username text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_protocol_req_f(p_protocol_req_id numeric, p_sort_order numeric, p_dbtrans_username text) TO PUBLIC;
GRANT ALL ON FUNCTION mrs_update_protocol_req_f(p_protocol_req_id numeric, p_sort_order numeric, p_dbtrans_username text) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_protocol_req_f(p_protocol_req_id numeric, p_sort_order numeric, p_dbtrans_username text) TO portal_app;


--
-- Name: mrs_update_qa_threshold_f(character varying, character varying, character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_threshold numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_threshold numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_threshold numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_update_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_threshold numeric) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_qa_threshold_f(f_label character varying, f_study character varying, f_user character varying, f_threshold numeric) TO portal_app;


--
-- Name: mrs_update_question_dx_excluded_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_question_dx_excluded_f(p_question_id character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_question_dx_excluded_f(p_question_id character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_question_dx_excluded_f(p_question_id character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_question_dx_excluded_f(p_question_id character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_rate_f(numeric, numeric, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_rate_f(p_scanner_id numeric, p_study_id numeric, p_rate_label character varying, p_rate_amt numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_rate_f(p_scanner_id numeric, p_study_id numeric, p_rate_label character varying, p_rate_amt numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_rate_f(p_scanner_id numeric, p_study_id numeric, p_rate_label character varying, p_rate_amt numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_rate_f(p_scanner_id numeric, p_study_id numeric, p_rate_label character varying, p_rate_amt numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_response_value_f(numeric, character varying, numeric, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbtransuser character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbtransuser character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbtransuser character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_response_value_f(p_assessment_id numeric, p_question_id character varying, p_question_instance numeric, p_response_value character varying, p_response_value_description character varying, p_dbtransuser character varying) TO micis_app;


--
-- Name: mrs_update_role_f(numeric, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_role_f(p_role_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_role_f(p_role_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_role_f(p_role_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_role_f(p_role_id numeric, p_label character varying, p_description character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_row(character varying, character varying[], character varying[], character varying[], character varying[], character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_row(p_table_name character varying, p_key_cols character varying[], p_key_cols_vals character varying[], p_cols character varying[], p_vals character varying[], p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_row(p_table_name character varying, p_key_cols character varying[], p_key_cols_vals character varying[], p_cols character varying[], p_vals character varying[], p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_row(p_table_name character varying, p_key_cols character varying[], p_key_cols_vals character varying[], p_cols character varying[], p_vals character varying[], p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_row(p_table_name character varying, p_key_cols character varying[], p_key_cols_vals character varying[], p_cols character varying[], p_vals character varying[], p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_scan_billing_f(numeric, text, text, text, numeric, numeric, text, boolean, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_scan_billing_f(p_scan_id numeric, p_charge_code text, p_funding_source text, p_project_number text, p_contrast_vials_used numeric, p_tech_slots_used numeric, p_injector_type text, p_oxygen_used boolean, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_scan_billing_f(p_scan_id numeric, p_charge_code text, p_funding_source text, p_project_number text, p_contrast_vials_used numeric, p_tech_slots_used numeric, p_injector_type text, p_oxygen_used boolean, p_notes character varying, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_scan_billing_f(p_scan_id numeric, p_charge_code text, p_funding_source text, p_project_number text, p_contrast_vials_used numeric, p_tech_slots_used numeric, p_injector_type text, p_oxygen_used boolean, p_notes character varying, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_scan_billing_f(p_scan_id numeric, p_charge_code text, p_funding_source text, p_project_number text, p_contrast_vials_used numeric, p_tech_slots_used numeric, p_injector_type text, p_oxygen_used boolean, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_scan_dx_excluded_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_scan_dx_excluded_f(p_scan_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_scan_dx_excluded_f(p_scan_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_scan_dx_excluded_f(p_scan_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_scan_dx_excluded_f(p_scan_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_scan_ext_prop_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_scan_ext_prop_f(p_scan_id numeric, p_prop_id numeric, p_prop_value character varying) TO micis_app;


--
-- Name: mrs_update_scan_notes_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_scan_notes_f(p_scan_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_scan_notes_f(p_scan_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_scan_notes_f(p_scan_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_scan_notes_f(p_scan_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_scan_notes_f(p_scan_id numeric, p_notes character varying, p_dbtrans_username_pt character varying) TO transfer_app;


--
-- Name: mrs_update_scan_review_load_f(integer, date, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_scan_review_load_f(p_scan_id integer, p_review_load_date date, p_dbtrans_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_scan_review_load_f(p_scan_id integer, p_review_load_date date, p_dbtrans_username text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_scan_review_load_f(p_scan_id integer, p_review_load_date date, p_dbtrans_username text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_scan_review_load_f(p_scan_id integer, p_review_load_date date, p_dbtrans_username text) TO transfer_app;


--
-- Name: mrs_update_scan_seg_int_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_scan_seg_int_f(p_scan_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_scan_seg_int_f(p_scan_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_scan_seg_int_f(p_scan_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_scan_seg_int_f(p_scan_id numeric, p_segment_interval character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_scan_session_f(numeric, character varying, character varying, character varying, character varying, character varying, numeric, character varying, character varying, numeric, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_scan_session_f(p_scan_id numeric, p_billto_study_id character varying, p_ursi character varying, p_segment_interval character varying, p_scan_label character varying, p_scan_date character varying, p_scanner_id numeric, p_operator_id character varying, p_notes character varying, p_consented_under_study_id numeric, p_assigned_radiologist character varying, p_dx_excluded boolean, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_scan_session_f(p_scan_id numeric, p_billto_study_id character varying, p_ursi character varying, p_segment_interval character varying, p_scan_label character varying, p_scan_date character varying, p_scanner_id numeric, p_operator_id character varying, p_notes character varying, p_consented_under_study_id numeric, p_assigned_radiologist character varying, p_dx_excluded boolean, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_scan_session_f(p_scan_id numeric, p_billto_study_id character varying, p_ursi character varying, p_segment_interval character varying, p_scan_label character varying, p_scan_date character varying, p_scanner_id numeric, p_operator_id character varying, p_notes character varying, p_consented_under_study_id numeric, p_assigned_radiologist character varying, p_dx_excluded boolean, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_scan_session_f(p_scan_id numeric, p_billto_study_id character varying, p_ursi character varying, p_segment_interval character varying, p_scan_label character varying, p_scan_date character varying, p_scanner_id numeric, p_operator_id character varying, p_notes character varying, p_consented_under_study_id numeric, p_assigned_radiologist character varying, p_dx_excluded boolean, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_series_data_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_series_data_f(p_series_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_series_data_f(p_series_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_series_data_f(p_series_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_series_data_f(p_series_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_series_dx_excluded_f(character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_series_dx_excluded_f(p_series_id character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_series_dx_excluded_f(p_series_id character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_series_dx_excluded_f(p_series_id character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_series_dx_excluded_f(p_series_id character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_series_f(character varying, character varying, numeric, numeric, character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_series_f(p_series_id character varying, p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_series_f(p_series_id character varying, p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_series_f(p_series_id character varying, p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_series_f(p_series_id character varying, p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_series_f(p_series_id character varying, p_label character varying, p_scan_id numeric, p_study_code_id numeric, p_usable character varying, p_notes character varying, p_sort_order numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_update_series_label_definition_id_f(integer, integer, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_series_label_definition_id_f(p_label_id integer, p_definition_id integer, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_series_label_definition_id_f(p_label_id integer, p_definition_id integer, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_series_label_definition_id_f(p_label_id integer, p_definition_id integer, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_series_label_definition_id_f(p_label_id integer, p_definition_id integer, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_series_label_dx_excluded_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_series_label_dx_excluded_f(p_label_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_series_label_dx_excluded_f(p_label_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_series_label_dx_excluded_f(p_label_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_series_label_dx_excluded_f(p_label_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_series_label_f(integer, character varying, numeric, character varying, numeric, numeric, boolean, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_series_label_f(p_label_id integer, p_label character varying, p_modality_id numeric, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_is_hidden boolean, p_dx_excluded boolean, p_rad_loaded boolean, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_series_label_f(p_label_id integer, p_label character varying, p_modality_id numeric, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_is_hidden boolean, p_dx_excluded boolean, p_rad_loaded boolean, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_series_label_f(p_label_id integer, p_label character varying, p_modality_id numeric, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_is_hidden boolean, p_dx_excluded boolean, p_rad_loaded boolean, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_series_label_f(p_label_id integer, p_label character varying, p_modality_id numeric, p_description character varying, p_study_id numeric, p_dest_study_id numeric, p_is_hidden boolean, p_dx_excluded boolean, p_rad_loaded boolean, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_sharing_rule_f(numeric, numeric, numeric, numeric, character varying, character varying, numeric, character varying, numeric, character varying, numeric, numeric, character varying, timestamp without time zone, text, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_sharing_rule_f(p_sharing_rule_id numeric, p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_sharing_rule_f(p_sharing_rule_id numeric, p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_sharing_rule_f(p_sharing_rule_id numeric, p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_sharing_rule_f(p_sharing_rule_id numeric, p_study_id numeric, p_instrument_id numeric, p_rater_id numeric, p_segment_interval character varying, p_site_id character varying, p_subject_type_id numeric, p_ursi character varying, p_assessment_id numeric, p_entry_code character varying, p_dataentry_type_id numeric, p_source_type numeric, p_approved_by character varying, p_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_sharing_rule_study_f(numeric, numeric, character varying, timestamp without time zone, character varying, timestamp without time zone, text, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_sharing_rule_study_f(p_rule_id numeric, p_study_id numeric, p_recipient_approved_by character varying, p_recipient_approval_date timestamp without time zone, p_donor_approved_by character varying, p_donor_approval_date timestamp without time zone, p_note text, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_staged_scan_f(numeric, text, text, numeric, text, numeric, text, text, numeric, text, text, boolean, text, text); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_staged_scan_f(p_scan_id numeric, p_label text, p_uid text, p_scanner_id numeric, p_pi_id text, p_study_id numeric, p_ursi text, p_segment_interval text, p_subject_age numeric, p_file_path text, p_source_filename text, p_is_error boolean, p_notes text, p_dbtrans_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_staged_scan_f(p_scan_id numeric, p_label text, p_uid text, p_scanner_id numeric, p_pi_id text, p_study_id numeric, p_ursi text, p_segment_interval text, p_subject_age numeric, p_file_path text, p_source_filename text, p_is_error boolean, p_notes text, p_dbtrans_username text) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_staged_scan_f(p_scan_id numeric, p_label text, p_uid text, p_scanner_id numeric, p_pi_id text, p_study_id numeric, p_ursi text, p_segment_interval text, p_subject_age numeric, p_file_path text, p_source_filename text, p_is_error boolean, p_notes text, p_dbtrans_username text) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_staged_scan_f(p_scan_id numeric, p_label text, p_uid text, p_scanner_id numeric, p_pi_id text, p_study_id numeric, p_ursi text, p_segment_interval text, p_subject_age numeric, p_file_path text, p_source_filename text, p_is_error boolean, p_notes text, p_dbtrans_username text) TO micis_app;


--
-- Name: mrs_update_study_code_f(numeric, character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_study_code_f(p_code_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_study_code_f(p_code_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_study_code_f(p_code_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_study_code_f(p_code_id numeric, p_label character varying, p_description character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_study_dx_description_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_study_dx_description_f(p_study_id numeric, p_dx_description character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_study_dx_description_f(p_study_id numeric, p_dx_description character varying, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_study_dx_description_f(p_study_id numeric, p_dx_description character varying, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_study_dx_description_f(p_study_id numeric, p_dx_description character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_study_dx_excluded_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_study_dx_excluded_f(p_study_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_study_dx_excluded_f(p_study_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_study_dx_excluded_f(p_study_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_study_dx_excluded_f(p_study_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_study_f(numeric, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, boolean, character varying, character varying, character varying, numeric, boolean, character varying, boolean, boolean, character varying, character varying, boolean, boolean, boolean, boolean); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_study_f(p_study_id numeric, p_study_label character varying, p_irb_number character varying, p_hrrc_num character varying, p_description character varying, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_hrrc_title character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_sa_review_emails character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_tracker_enabled boolean, p_is_rdoc_study boolean) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_study_f(p_study_id numeric, p_study_label character varying, p_irb_number character varying, p_hrrc_num character varying, p_description character varying, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_hrrc_title character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_sa_review_emails character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_tracker_enabled boolean, p_is_rdoc_study boolean) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_study_f(p_study_id numeric, p_study_label character varying, p_irb_number character varying, p_hrrc_num character varying, p_description character varying, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_hrrc_title character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_sa_review_emails character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_tracker_enabled boolean, p_is_rdoc_study boolean) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_study_f(p_study_id numeric, p_study_label character varying, p_irb_number character varying, p_hrrc_num character varying, p_description character varying, p_expiration_date timestamp without time zone, p_exp_warn_emails character varying, p_pi_id character varying, p_co_pi_id character varying, p_rad_review_emails character varying, p_status_id character varying, p_hrrc_consent_date timestamp without time zone, p_grant_number character varying, p_url_reference character varying, p_url_description character varying, p_sponsor character varying, p_hrrc_title character varying, p_primary_research_area_id character varying, p_secondary_research_area_id character varying, p_add_to_recruitment character varying, p_recruitment_study_purpose character varying, p_recruitment_protocol_summary character varying, p_recruitment_contact_name character varying, p_recruitment_contact_email character varying, p_recruitment_contact_phone character varying, p_mod_user character varying, p_max_enrollment numeric, p_reuse_ursi boolean, p_site_id character varying, p_sa_review_emails character varying, p_share_inst_emails character varying, p_parent_study_id numeric, p_dx_excluded boolean, p_default_radiologist character varying, p_hide_savenexit_in_sa boolean, p_nonstop_queue_in_sa boolean, p_study_css_url character varying, p_study_dir_name character varying, p_self_enroll_enabled boolean, p_recruitment_study boolean, p_tracker_enabled boolean, p_is_rdoc_study boolean) TO micis_app;


--
-- Name: mrs_update_study_interval_f(numeric, character varying, numeric, character varying, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_is_hidden boolean, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_is_hidden boolean, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_is_hidden boolean, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_study_interval_f(p_study_id numeric, p_label character varying, p_time_from_baseline numeric, p_time_unit character varying, p_segment_interval character varying, p_is_hidden boolean, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_study_message_f(numeric, numeric, numeric, boolean, integer, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_study_message_f(message_id_f numeric, study_id_f numeric, message_type_id_f numeric, auto_send_f boolean, days_in_advance_f integer, mod_user_f character varying) TO portal_app;


--
-- Name: mrs_update_study_notification_emails_f(numeric, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_study_notification_emails_f(study_id_f numeric, rad_rev_email_f character varying, warning_email_f character varying, sa_rev_email_f character varying, share_inst_email_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_study_notification_emails_f(study_id_f numeric, rad_rev_email_f character varying, warning_email_f character varying, sa_rev_email_f character varying, share_inst_email_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_study_notification_emails_f(study_id_f numeric, rad_rev_email_f character varying, warning_email_f character varying, sa_rev_email_f character varying, share_inst_email_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_study_notification_emails_f(study_id_f numeric, rad_rev_email_f character varying, warning_email_f character varying, sa_rev_email_f character varying, share_inst_email_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_study_notification_emails_f(study_id_f numeric, rad_rev_email_f character varying, warning_email_f character varying, sa_rev_email_f character varying, share_inst_email_f character varying) TO portal_app;


--
-- Name: mrs_update_study_proj_f(numeric, character varying, numeric, timestamp without time zone, timestamp without time zone, character varying, character varying, character varying, character varying, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_study_proj_f(p_project_id numeric, p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_study_proj_f(p_project_id numeric, p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_study_proj_f(p_project_id numeric, p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_study_proj_f(p_project_id numeric, p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_study_proj_f(p_project_id numeric, p_label character varying, p_priority numeric, p_date_requested timestamp without time zone, p_date_approved timestamp without time zone, p_datasource_cat character varying, p_outcome_measures character varying, p_outcome_dependencies character varying, p_notes character varying, p_parent_project_id numeric, p_pr_inv_person_id character varying, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_update_study_status_f(numeric, text, text); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_study_status_f(p_study_id numeric, p_status_id text, p_dbtrans_username text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_study_status_f(p_study_id numeric, p_status_id text, p_dbtrans_username text) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_study_status_f(p_study_id numeric, p_status_id text, p_dbtrans_username text) TO postgres;
GRANT ALL ON FUNCTION mrs_update_study_status_f(p_study_id numeric, p_status_id text, p_dbtrans_username text) TO micis_app;


--
-- Name: mrs_update_sub_det_notes_f(character varying, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_sub_det_notes_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_sub_det_notes_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_user_entered character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_sub_det_notes_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_user_entered character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_sub_det_notes_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_user_entered character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_sub_det_notes_f(p_ursi character varying, p_subject_type_id numeric, p_notes character varying, p_user_entered character varying) TO portal_app;


--
-- Name: mrs_update_subj_ass_queue_f(numeric, numeric, numeric[], character varying, integer, numeric, timestamp without time zone, timestamp without time zone); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_inst_array numeric[], p_mod_user character varying, p_queue_type_id integer, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_inst_array numeric[], p_mod_user character varying, p_queue_type_id integer, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_inst_array numeric[], p_mod_user character varying, p_queue_type_id integer, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_inst_array numeric[], p_mod_user character varying, p_queue_type_id integer, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_subj_ass_queue_f(p_login_id numeric, p_segment_interval_id numeric, p_inst_array numeric[], p_mod_user character varying, p_queue_type_id integer, p_protocol_id numeric, p_start_date timestamp without time zone, p_end_date timestamp without time zone) TO p2_app;


--
-- Name: mrs_update_subj_ass_queue_item_f(numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_subj_ass_queue_item_f(p_queue_instrument_id numeric, p_assessment_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subj_ass_queue_item_f(p_queue_instrument_id numeric, p_assessment_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_subj_ass_queue_item_f(p_queue_instrument_id numeric, p_assessment_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_subj_ass_queue_item_f(p_queue_instrument_id numeric, p_assessment_id numeric, p_mod_user character varying) TO p2_app;
GRANT ALL ON FUNCTION mrs_update_subj_ass_queue_item_f(p_queue_instrument_id numeric, p_assessment_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_subject_class_details_f(character varying, numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_subject_class_details_f(p_usid character varying, p_subject_class_id numeric, p_notes character varying, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_subject_dx_excluded_f(character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_subject_dx_excluded_f(p_ursi character varying, p_subject_type_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_dx_excluded_f(p_ursi character varying, p_subject_type_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_subject_dx_excluded_f(p_ursi character varying, p_subject_type_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_subject_dx_excluded_f(p_ursi character varying, p_subject_type_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_subject_login_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_subject_login_f(p_login_id numeric, p_subject_id character varying, p_dbtrans_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_login_f(p_login_id numeric, p_subject_id character varying, p_dbtrans_username character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_subject_login_f(p_login_id numeric, p_subject_id character varying, p_dbtrans_username character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_subject_login_f(p_login_id numeric, p_subject_id character varying, p_dbtrans_username character varying) TO micis_app;


--
-- Name: mrs_update_subject_race_cats_f(character varying, character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_subject_race_cats_f(p_usid character varying, p_ursi character varying, p_racial_category_ids character varying, p_subject_type_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_race_cats_f(p_usid character varying, p_ursi character varying, p_racial_category_ids character varying, p_subject_type_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_subject_race_cats_f(p_usid character varying, p_ursi character varying, p_racial_category_ids character varying, p_subject_type_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_subject_race_cats_f(p_usid character varying, p_ursi character varying, p_racial_category_ids character varying, p_subject_type_id numeric, p_dbtrans_username_pt character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_subject_race_cats_f(p_usid character varying, p_ursi character varying, p_racial_category_ids character varying, p_subject_type_id numeric, p_dbtrans_username_pt character varying) TO portal_app;


--
-- Name: mrs_update_subject_tag_detail_f(numeric, character varying, numeric, character varying, character varying, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_subject_tag_detail_f(p_subject_tag_details_id numeric, p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_tag_detail_f(p_subject_tag_details_id numeric, p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_subject_tag_detail_f(p_subject_tag_details_id numeric, p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_subject_tag_detail_f(p_subject_tag_details_id numeric, p_usid character varying, p_subject_tag_id numeric, p_value character varying, p_site_id character varying, p_study_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_subject_tag_f(numeric, character varying, character varying, character varying, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_subject_tag_f(p_subject_tag_id numeric, p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_tag_f(p_subject_tag_id numeric, p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_subject_tag_f(p_subject_tag_id numeric, p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_subject_tag_f(p_subject_tag_id numeric, p_organization character varying, p_label character varying, p_description character varying, p_is_phi boolean, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_subject_type_details_f(character varying, numeric, numeric, character varying, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_subject_type_details_f(p_usid character varying, p_new_subject_type_id numeric, p_old_subject_type_id numeric, p_ursi character varying, p_user_enrolled character varying, p_notes character varying, p_isphilinked character varying, p_agreestosharedata character varying, p_ethnicity character varying, p_consent_date timestamp without time zone, p_dx_excluded boolean, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_type_details_f(p_usid character varying, p_new_subject_type_id numeric, p_old_subject_type_id numeric, p_ursi character varying, p_user_enrolled character varying, p_notes character varying, p_isphilinked character varying, p_agreestosharedata character varying, p_ethnicity character varying, p_consent_date timestamp without time zone, p_dx_excluded boolean, p_mod_user character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_subject_type_details_f(p_usid character varying, p_new_subject_type_id numeric, p_old_subject_type_id numeric, p_ursi character varying, p_user_enrolled character varying, p_notes character varying, p_isphilinked character varying, p_agreestosharedata character varying, p_ethnicity character varying, p_consent_date timestamp without time zone, p_dx_excluded boolean, p_mod_user character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_subject_type_details_f(p_usid character varying, p_new_subject_type_id numeric, p_old_subject_type_id numeric, p_ursi character varying, p_user_enrolled character varying, p_notes character varying, p_isphilinked character varying, p_agreestosharedata character varying, p_ethnicity character varying, p_consent_date timestamp without time zone, p_dx_excluded boolean, p_mod_user character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_subject_type_details_f(p_usid character varying, p_new_subject_type_id numeric, p_old_subject_type_id numeric, p_ursi character varying, p_user_enrolled character varying, p_notes character varying, p_isphilinked character varying, p_agreestosharedata character varying, p_ethnicity character varying, p_consent_date timestamp without time zone, p_dx_excluded boolean, p_mod_user character varying) TO portal_app;


--
-- Name: mrs_update_subject_type_f(numeric, numeric, character varying, character varying, boolean, boolean, boolean, boolean, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_subject_type_f(p_subject_type_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_hidden boolean, p_allow_p2_self_enrollment boolean, p_db_username character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_type_f(p_subject_type_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_hidden boolean, p_allow_p2_self_enrollment boolean, p_db_username character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_subject_type_f(p_subject_type_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_hidden boolean, p_allow_p2_self_enrollment boolean, p_db_username character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_subject_type_f(p_subject_type_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_hidden boolean, p_allow_p2_self_enrollment boolean, p_db_username character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_subject_type_f(p_subject_type_id numeric, p_study_id numeric, p_label character varying, p_description character varying, p_dx_excluded boolean, p_qb_excluded boolean, p_hidden boolean, p_allow_p2_self_enrollment boolean, p_db_username character varying) TO portal_app;


--
-- Name: mrs_update_subject_type_group_f(numeric, character varying, character varying, numeric[], character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_subject_type_group_f(type_group_id_f numeric, label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_type_group_f(type_group_id_f numeric, label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_subject_type_group_f(type_group_id_f numeric, label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_subject_type_group_f(type_group_id_f numeric, label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_update_subject_type_group_f(type_group_id_f numeric, label_f character varying, desc_f character varying, typeids_f numeric[], mod_user_f character varying) TO portal_app;


--
-- Name: mrs_update_subject_types_dx_excluded_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_update_subject_types_dx_excluded_f(p_subject_type_id numeric, p_mod_user character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_types_dx_excluded_f(p_subject_type_id numeric, p_mod_user character varying) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_update_subject_types_dx_excluded_f(p_subject_type_id numeric, p_mod_user character varying) TO ni_developers;
GRANT ALL ON FUNCTION mrs_update_subject_types_dx_excluded_f(p_subject_type_id numeric, p_mod_user character varying) TO micis_app;


--
-- Name: mrs_update_subject_unlink_all_phi_f(numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_subject_unlink_all_phi_f(p_study_id numeric, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_unlink_all_phi_f(p_study_id numeric, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_subject_unlink_all_phi_f(p_study_id numeric, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_subject_unlink_all_phi_f(p_study_id numeric, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_subject_unlinkphi_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_subject_unlinkphi_f(p_study_id numeric, p_ursi character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_subject_unlinkphi_f(p_study_id numeric, p_ursi character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_subject_unlinkphi_f(p_study_id numeric, p_ursi character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_subject_unlinkphi_f(p_study_id numeric, p_ursi character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_update_trade_name_f(numeric, character varying, character varying, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_update_trade_name_f(p_trade_id numeric, p_trade_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_update_trade_name_f(p_trade_id numeric, p_trade_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_update_trade_name_f(p_trade_id numeric, p_trade_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_update_trade_name_f(p_trade_id numeric, p_trade_name character varying, p_description character varying, p_notes character varying, p_dbtrans_username_pt character varying) TO micis_app;


--
-- Name: mrs_ursi_to_usid_f(character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_ursi_to_usid_f(p_ursi character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_ursi_to_usid_f(p_ursi character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_ursi_to_usid_f(p_ursi character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_ursi_to_usid_f(p_ursi character varying) TO micis_app;
GRANT ALL ON FUNCTION mrs_ursi_to_usid_f(p_ursi character varying) TO portal_app;


--
-- Name: mrs_use_nonrev_slots_f(numeric, character varying, character varying, numeric, timestamp without time zone, character varying, character varying, numeric, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_use_nonrev_slots_f(p_amount_used numeric, p_charge_code character varying, p_pi_id character varying, p_scan_slot_id numeric, p_date_used timestamp without time zone, p_user_entered character varying, p_notes character varying, p_tech_slots_used numeric, p_modality_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_use_nonrev_slots_f(p_amount_used numeric, p_charge_code character varying, p_pi_id character varying, p_scan_slot_id numeric, p_date_used timestamp without time zone, p_user_entered character varying, p_notes character varying, p_tech_slots_used numeric, p_modality_id numeric) FROM postgres;
GRANT ALL ON FUNCTION mrs_use_nonrev_slots_f(p_amount_used numeric, p_charge_code character varying, p_pi_id character varying, p_scan_slot_id numeric, p_date_used timestamp without time zone, p_user_entered character varying, p_notes character varying, p_tech_slots_used numeric, p_modality_id numeric) TO postgres;
GRANT ALL ON FUNCTION mrs_use_nonrev_slots_f(p_amount_used numeric, p_charge_code character varying, p_pi_id character varying, p_scan_slot_id numeric, p_date_used timestamp without time zone, p_user_entered character varying, p_notes character varying, p_tech_slots_used numeric, p_modality_id numeric) TO micis_app;


--
-- Name: mrs_use_scan_slots_f(numeric, numeric, numeric, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_use_scan_slots_f(p_scan_slot_id numeric, p_amount_used numeric, p_scan_id numeric, p_user_entered character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_use_scan_slots_f(p_scan_slot_id numeric, p_amount_used numeric, p_scan_id numeric, p_user_entered character varying) FROM postgres;
GRANT ALL ON FUNCTION mrs_use_scan_slots_f(p_scan_slot_id numeric, p_amount_used numeric, p_scan_id numeric, p_user_entered character varying) TO postgres;
GRANT ALL ON FUNCTION mrs_use_scan_slots_f(p_scan_slot_id numeric, p_amount_used numeric, p_scan_id numeric, p_user_entered character varying) TO micis_app;


--
-- Name: mrs_validate_assessment_f(numeric, numeric, timestamp without time zone, character varying, numeric, numeric, character varying, numeric, character varying, boolean, character varying, boolean, boolean); Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON FUNCTION mrs_validate_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_validate_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean) FROM ni_developers;
GRANT ALL ON FUNCTION mrs_validate_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean) TO ni_developers;
GRANT ALL ON FUNCTION mrs_validate_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean) TO p2_app;
GRANT ALL ON FUNCTION mrs_validate_assessment_f(p_study_id numeric, p_instrument_id numeric, p_assessment_date timestamp without time zone, p_ursi character varying, p_rater1 numeric, p_source_type numeric, p_site_id character varying, p_dataentry_type_id numeric, p_segment_interval character varying, p_is_self_assessment boolean, p_force_first_entry character varying, p_is_single_entry boolean, p_is_ongoing_entry boolean) TO micis_app;


--
-- Name: mrs_write_xml_source_f(numeric, text); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION mrs_write_xml_source_f(p_assessment_id numeric, p_xml_source text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mrs_write_xml_source_f(p_assessment_id numeric, p_xml_source text) FROM postgres;
GRANT ALL ON FUNCTION mrs_write_xml_source_f(p_assessment_id numeric, p_xml_source text) TO postgres;
GRANT ALL ON FUNCTION mrs_write_xml_source_f(p_assessment_id numeric, p_xml_source text) TO micis_app;


--
-- Name: nvl(character varying, unknown); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION nvl(test_value character varying, result_value unknown) FROM PUBLIC;
REVOKE ALL ON FUNCTION nvl(test_value character varying, result_value unknown) FROM postgres;
GRANT ALL ON FUNCTION nvl(test_value character varying, result_value unknown) TO postgres;
GRANT ALL ON FUNCTION nvl(test_value character varying, result_value unknown) TO micis_app;


--
-- Name: racial_cats(character varying, numeric); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION racial_cats(p_ursi character varying, p_subject_type_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION racial_cats(p_ursi character varying, p_subject_type_id numeric) FROM postgres;
GRANT ALL ON FUNCTION racial_cats(p_ursi character varying, p_subject_type_id numeric) TO postgres;
GRANT ALL ON FUNCTION racial_cats(p_ursi character varying, p_subject_type_id numeric) TO micis_app;


--
-- Name: strip_zeroes(character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION strip_zeroes(p_val character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION strip_zeroes(p_val character varying) FROM postgres;
GRANT ALL ON FUNCTION strip_zeroes(p_val character varying) TO postgres;
GRANT ALL ON FUNCTION strip_zeroes(p_val character varying) TO micis_app;


--
-- Name: update_scan_data_f(numeric, character varying, character varying); Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON FUNCTION update_scan_data_f(p_scan_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION update_scan_data_f(p_scan_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) FROM postgres;
GRANT ALL ON FUNCTION update_scan_data_f(p_scan_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) TO postgres;
GRANT ALL ON FUNCTION update_scan_data_f(p_scan_data_id numeric, p_value character varying, p_dbtrans_username_pt character varying) TO micis_app;


SET search_path = public, pg_catalog;

--
-- Name: armor(bytea); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION armor(bytea) FROM PUBLIC;
REVOKE ALL ON FUNCTION armor(bytea) FROM postgres;
GRANT ALL ON FUNCTION armor(bytea) TO postgres;
GRANT ALL ON FUNCTION armor(bytea) TO PUBLIC;
GRANT ALL ON FUNCTION armor(bytea) TO portal_app;


--
-- Name: crypt(text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION crypt(text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION crypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION crypt(text, text) TO postgres;
GRANT ALL ON FUNCTION crypt(text, text) TO PUBLIC;
GRANT ALL ON FUNCTION crypt(text, text) TO portal_app;


--
-- Name: dearmor(text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION dearmor(text) FROM PUBLIC;
REVOKE ALL ON FUNCTION dearmor(text) FROM postgres;
GRANT ALL ON FUNCTION dearmor(text) TO postgres;
GRANT ALL ON FUNCTION dearmor(text) TO PUBLIC;
GRANT ALL ON FUNCTION dearmor(text) TO portal_app;


--
-- Name: decrypt(bytea, bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION decrypt(bytea, bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION decrypt(bytea, bytea, text) TO postgres;
GRANT ALL ON FUNCTION decrypt(bytea, bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION decrypt(bytea, bytea, text) TO portal_app;


--
-- Name: decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION decrypt_iv(bytea, bytea, bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION decrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION decrypt_iv(bytea, bytea, bytea, text) TO postgres;
GRANT ALL ON FUNCTION decrypt_iv(bytea, bytea, bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION decrypt_iv(bytea, bytea, bytea, text) TO portal_app;


--
-- Name: difference(text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION difference(text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION difference(text, text) FROM postgres;
GRANT ALL ON FUNCTION difference(text, text) TO postgres;
GRANT ALL ON FUNCTION difference(text, text) TO PUBLIC;
GRANT ALL ON FUNCTION difference(text, text) TO portal_app;


--
-- Name: digest(bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION digest(bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION digest(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION digest(bytea, text) TO postgres;
GRANT ALL ON FUNCTION digest(bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION digest(bytea, text) TO portal_app;


--
-- Name: digest(text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION digest(text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION digest(text, text) FROM postgres;
GRANT ALL ON FUNCTION digest(text, text) TO postgres;
GRANT ALL ON FUNCTION digest(text, text) TO PUBLIC;
GRANT ALL ON FUNCTION digest(text, text) TO portal_app;


--
-- Name: dmetaphone(text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION dmetaphone(text) FROM PUBLIC;
REVOKE ALL ON FUNCTION dmetaphone(text) FROM postgres;
GRANT ALL ON FUNCTION dmetaphone(text) TO postgres;
GRANT ALL ON FUNCTION dmetaphone(text) TO PUBLIC;
GRANT ALL ON FUNCTION dmetaphone(text) TO portal_app;


--
-- Name: dmetaphone_alt(text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION dmetaphone_alt(text) FROM PUBLIC;
REVOKE ALL ON FUNCTION dmetaphone_alt(text) FROM postgres;
GRANT ALL ON FUNCTION dmetaphone_alt(text) TO postgres;
GRANT ALL ON FUNCTION dmetaphone_alt(text) TO PUBLIC;
GRANT ALL ON FUNCTION dmetaphone_alt(text) TO portal_app;


--
-- Name: encrypt(bytea, bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION encrypt(bytea, bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION encrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION encrypt(bytea, bytea, text) TO postgres;
GRANT ALL ON FUNCTION encrypt(bytea, bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION encrypt(bytea, bytea, text) TO portal_app;


--
-- Name: encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION encrypt_iv(bytea, bytea, bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION encrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION encrypt_iv(bytea, bytea, bytea, text) TO postgres;
GRANT ALL ON FUNCTION encrypt_iv(bytea, bytea, bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION encrypt_iv(bytea, bytea, bytea, text) TO portal_app;


--
-- Name: gen_random_bytes(integer); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION gen_random_bytes(integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION gen_random_bytes(integer) FROM postgres;
GRANT ALL ON FUNCTION gen_random_bytes(integer) TO postgres;
GRANT ALL ON FUNCTION gen_random_bytes(integer) TO PUBLIC;
GRANT ALL ON FUNCTION gen_random_bytes(integer) TO portal_app;


--
-- Name: gen_salt(text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION gen_salt(text) FROM PUBLIC;
REVOKE ALL ON FUNCTION gen_salt(text) FROM postgres;
GRANT ALL ON FUNCTION gen_salt(text) TO postgres;
GRANT ALL ON FUNCTION gen_salt(text) TO PUBLIC;
GRANT ALL ON FUNCTION gen_salt(text) TO portal_app;


--
-- Name: gen_salt(text, integer); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION gen_salt(text, integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION gen_salt(text, integer) FROM postgres;
GRANT ALL ON FUNCTION gen_salt(text, integer) TO postgres;
GRANT ALL ON FUNCTION gen_salt(text, integer) TO PUBLIC;
GRANT ALL ON FUNCTION gen_salt(text, integer) TO portal_app;


--
-- Name: hmac(bytea, bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION hmac(bytea, bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION hmac(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION hmac(bytea, bytea, text) TO postgres;
GRANT ALL ON FUNCTION hmac(bytea, bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION hmac(bytea, bytea, text) TO portal_app;


--
-- Name: hmac(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION hmac(text, text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION hmac(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION hmac(text, text, text) TO postgres;
GRANT ALL ON FUNCTION hmac(text, text, text) TO PUBLIC;
GRANT ALL ON FUNCTION hmac(text, text, text) TO portal_app;


--
-- Name: instr(text, unknown); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION instr(text, unknown) FROM PUBLIC;
REVOKE ALL ON FUNCTION instr(text, unknown) FROM postgres;
GRANT ALL ON FUNCTION instr(text, unknown) TO postgres;
GRANT ALL ON FUNCTION instr(text, unknown) TO PUBLIC;
GRANT ALL ON FUNCTION instr(text, unknown) TO portal_app;


--
-- Name: instr(unknown, unknown); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION instr(unknown, unknown) FROM PUBLIC;
REVOKE ALL ON FUNCTION instr(unknown, unknown) FROM postgres;
GRANT ALL ON FUNCTION instr(unknown, unknown) TO postgres;
GRANT ALL ON FUNCTION instr(unknown, unknown) TO PUBLIC;
GRANT ALL ON FUNCTION instr(unknown, unknown) TO portal_app;


--
-- Name: instr(character varying, character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION instr(character varying, character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION instr(character varying, character varying) FROM postgres;
GRANT ALL ON FUNCTION instr(character varying, character varying) TO postgres;
GRANT ALL ON FUNCTION instr(character varying, character varying) TO PUBLIC;
GRANT ALL ON FUNCTION instr(character varying, character varying) TO portal_app;


--
-- Name: instr(character varying, character varying, integer); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION instr(string character varying, string_to_search character varying, beg_index integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION instr(string character varying, string_to_search character varying, beg_index integer) FROM postgres;
GRANT ALL ON FUNCTION instr(string character varying, string_to_search character varying, beg_index integer) TO postgres;
GRANT ALL ON FUNCTION instr(string character varying, string_to_search character varying, beg_index integer) TO PUBLIC;
GRANT ALL ON FUNCTION instr(string character varying, string_to_search character varying, beg_index integer) TO portal_app;


--
-- Name: instr(character varying, character varying, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION instr(string character varying, string_to_search character varying, beg_index integer, occur_index integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION instr(string character varying, string_to_search character varying, beg_index integer, occur_index integer) FROM postgres;
GRANT ALL ON FUNCTION instr(string character varying, string_to_search character varying, beg_index integer, occur_index integer) TO postgres;
GRANT ALL ON FUNCTION instr(string character varying, string_to_search character varying, beg_index integer, occur_index integer) TO PUBLIC;
GRANT ALL ON FUNCTION instr(string character varying, string_to_search character varying, beg_index integer, occur_index integer) TO portal_app;


--
-- Name: levenshtein(text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION levenshtein(text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION levenshtein(text, text) FROM postgres;
GRANT ALL ON FUNCTION levenshtein(text, text) TO postgres;
GRANT ALL ON FUNCTION levenshtein(text, text) TO PUBLIC;
GRANT ALL ON FUNCTION levenshtein(text, text) TO portal_app;


--
-- Name: levenshtein(text, text, integer, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION levenshtein(text, text, integer, integer, integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION levenshtein(text, text, integer, integer, integer) FROM postgres;
GRANT ALL ON FUNCTION levenshtein(text, text, integer, integer, integer) TO postgres;
GRANT ALL ON FUNCTION levenshtein(text, text, integer, integer, integer) TO PUBLIC;
GRANT ALL ON FUNCTION levenshtein(text, text, integer, integer, integer) TO portal_app;


--
-- Name: metaphone(text, integer); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION metaphone(text, integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION metaphone(text, integer) FROM postgres;
GRANT ALL ON FUNCTION metaphone(text, integer) TO postgres;
GRANT ALL ON FUNCTION metaphone(text, integer) TO PUBLIC;
GRANT ALL ON FUNCTION metaphone(text, integer) TO portal_app;


--
-- Name: nvl(anyelement, anyelement); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION nvl(test_value anyelement, result_value anyelement) FROM PUBLIC;
REVOKE ALL ON FUNCTION nvl(test_value anyelement, result_value anyelement) FROM postgres;
GRANT ALL ON FUNCTION nvl(test_value anyelement, result_value anyelement) TO postgres;
GRANT ALL ON FUNCTION nvl(test_value anyelement, result_value anyelement) TO PUBLIC;
GRANT ALL ON FUNCTION nvl(test_value anyelement, result_value anyelement) TO portal_app;


--
-- Name: nvl(numeric, numeric); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION nvl(test_value numeric, result_value numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION nvl(test_value numeric, result_value numeric) FROM postgres;
GRANT ALL ON FUNCTION nvl(test_value numeric, result_value numeric) TO postgres;
GRANT ALL ON FUNCTION nvl(test_value numeric, result_value numeric) TO PUBLIC;
GRANT ALL ON FUNCTION nvl(test_value numeric, result_value numeric) TO portal_app;


--
-- Name: nvl(unknown, unknown); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION nvl(test_value unknown, result_value unknown) FROM PUBLIC;
REVOKE ALL ON FUNCTION nvl(test_value unknown, result_value unknown) FROM postgres;
GRANT ALL ON FUNCTION nvl(test_value unknown, result_value unknown) TO postgres;
GRANT ALL ON FUNCTION nvl(test_value unknown, result_value unknown) TO PUBLIC;
GRANT ALL ON FUNCTION nvl(test_value unknown, result_value unknown) TO portal_app;


--
-- Name: nvl(character varying, numeric); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION nvl(test_value character varying, result_value numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION nvl(test_value character varying, result_value numeric) FROM postgres;
GRANT ALL ON FUNCTION nvl(test_value character varying, result_value numeric) TO postgres;
GRANT ALL ON FUNCTION nvl(test_value character varying, result_value numeric) TO PUBLIC;
GRANT ALL ON FUNCTION nvl(test_value character varying, result_value numeric) TO portal_app;


--
-- Name: nvl(character varying, unknown); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION nvl(test_value character varying, result_value unknown) FROM PUBLIC;
REVOKE ALL ON FUNCTION nvl(test_value character varying, result_value unknown) FROM postgres;
GRANT ALL ON FUNCTION nvl(test_value character varying, result_value unknown) TO postgres;
GRANT ALL ON FUNCTION nvl(test_value character varying, result_value unknown) TO PUBLIC;
GRANT ALL ON FUNCTION nvl(test_value character varying, result_value unknown) TO portal_app;


--
-- Name: nvl(character varying, character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION nvl(test_value character varying, result_value character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION nvl(test_value character varying, result_value character varying) FROM postgres;
GRANT ALL ON FUNCTION nvl(test_value character varying, result_value character varying) TO postgres;
GRANT ALL ON FUNCTION nvl(test_value character varying, result_value character varying) TO PUBLIC;
GRANT ALL ON FUNCTION nvl(test_value character varying, result_value character varying) TO portal_app;


--
-- Name: pc_chartoint(character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pc_chartoint(chartoconvert character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION pc_chartoint(chartoconvert character varying) FROM postgres;
GRANT ALL ON FUNCTION pc_chartoint(chartoconvert character varying) TO postgres;
GRANT ALL ON FUNCTION pc_chartoint(chartoconvert character varying) TO PUBLIC;
GRANT ALL ON FUNCTION pc_chartoint(chartoconvert character varying) TO portal_app;


--
-- Name: pgp_key_id(bytea); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_key_id(bytea) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_key_id(bytea) FROM postgres;
GRANT ALL ON FUNCTION pgp_key_id(bytea) TO postgres;
GRANT ALL ON FUNCTION pgp_key_id(bytea) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_key_id(bytea) TO portal_app;


--
-- Name: pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea) TO postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea) TO portal_app;


--
-- Name: pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea, text) TO postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea, text) TO portal_app;


--
-- Name: pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea, text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea, text, text) TO postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea, text, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_pub_decrypt(bytea, bytea, text, text) TO portal_app;


--
-- Name: pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea) TO postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea) TO portal_app;


--
-- Name: pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text) TO portal_app;


--
-- Name: pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres;
GRANT ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO portal_app;


--
-- Name: pgp_pub_encrypt(text, bytea); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_pub_encrypt(text, bytea) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_pub_encrypt(text, bytea) FROM postgres;
GRANT ALL ON FUNCTION pgp_pub_encrypt(text, bytea) TO postgres;
GRANT ALL ON FUNCTION pgp_pub_encrypt(text, bytea) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_pub_encrypt(text, bytea) TO portal_app;


--
-- Name: pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_pub_encrypt(text, bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_pub_encrypt(text, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_pub_encrypt(text, bytea, text) TO postgres;
GRANT ALL ON FUNCTION pgp_pub_encrypt(text, bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_pub_encrypt(text, bytea, text) TO portal_app;


--
-- Name: pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_pub_encrypt_bytea(bytea, bytea) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_pub_encrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION pgp_pub_encrypt_bytea(bytea, bytea) TO postgres;
GRANT ALL ON FUNCTION pgp_pub_encrypt_bytea(bytea, bytea) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_pub_encrypt_bytea(bytea, bytea) TO portal_app;


--
-- Name: pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres;
GRANT ALL ON FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text) TO portal_app;


--
-- Name: pgp_sym_decrypt(bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_sym_decrypt(bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_sym_decrypt(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_sym_decrypt(bytea, text) TO postgres;
GRANT ALL ON FUNCTION pgp_sym_decrypt(bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_sym_decrypt(bytea, text) TO portal_app;


--
-- Name: pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_sym_decrypt(bytea, text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_sym_decrypt(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_sym_decrypt(bytea, text, text) TO postgres;
GRANT ALL ON FUNCTION pgp_sym_decrypt(bytea, text, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_sym_decrypt(bytea, text, text) TO portal_app;


--
-- Name: pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_sym_decrypt_bytea(bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_sym_decrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_sym_decrypt_bytea(bytea, text) TO postgres;
GRANT ALL ON FUNCTION pgp_sym_decrypt_bytea(bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_sym_decrypt_bytea(bytea, text) TO portal_app;


--
-- Name: pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_sym_decrypt_bytea(bytea, text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_sym_decrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_sym_decrypt_bytea(bytea, text, text) TO postgres;
GRANT ALL ON FUNCTION pgp_sym_decrypt_bytea(bytea, text, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_sym_decrypt_bytea(bytea, text, text) TO portal_app;


--
-- Name: pgp_sym_encrypt(text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_sym_encrypt(text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_sym_encrypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_sym_encrypt(text, text) TO postgres;
GRANT ALL ON FUNCTION pgp_sym_encrypt(text, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_sym_encrypt(text, text) TO portal_app;


--
-- Name: pgp_sym_encrypt(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_sym_encrypt(text, text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_sym_encrypt(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_sym_encrypt(text, text, text) TO postgres;
GRANT ALL ON FUNCTION pgp_sym_encrypt(text, text, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_sym_encrypt(text, text, text) TO portal_app;


--
-- Name: pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_sym_encrypt_bytea(bytea, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_sym_encrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_sym_encrypt_bytea(bytea, text) TO postgres;
GRANT ALL ON FUNCTION pgp_sym_encrypt_bytea(bytea, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_sym_encrypt_bytea(bytea, text) TO portal_app;


--
-- Name: pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION pgp_sym_encrypt_bytea(bytea, text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pgp_sym_encrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION pgp_sym_encrypt_bytea(bytea, text, text) TO postgres;
GRANT ALL ON FUNCTION pgp_sym_encrypt_bytea(bytea, text, text) TO PUBLIC;
GRANT ALL ON FUNCTION pgp_sym_encrypt_bytea(bytea, text, text) TO portal_app;


--
-- Name: soundex(text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION soundex(text) FROM PUBLIC;
REVOKE ALL ON FUNCTION soundex(text) FROM postgres;
GRANT ALL ON FUNCTION soundex(text) TO postgres;
GRANT ALL ON FUNCTION soundex(text) TO PUBLIC;
GRANT ALL ON FUNCTION soundex(text) TO portal_app;


--
-- Name: sysdate(); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION sysdate() FROM PUBLIC;
REVOKE ALL ON FUNCTION sysdate() FROM postgres;
GRANT ALL ON FUNCTION sysdate() TO postgres;
GRANT ALL ON FUNCTION sysdate() TO PUBLIC;
GRANT ALL ON FUNCTION sysdate() TO portal_app;


--
-- Name: text_soundex(text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION text_soundex(text) FROM PUBLIC;
REVOKE ALL ON FUNCTION text_soundex(text) FROM postgres;
GRANT ALL ON FUNCTION text_soundex(text) TO postgres;
GRANT ALL ON FUNCTION text_soundex(text) TO PUBLIC;
GRANT ALL ON FUNCTION text_soundex(text) TO portal_app;


SET search_path = casdba, pg_catalog;

--
-- Name: cas_app_user_role_privs; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_app_user_role_privs FROM PUBLIC;
REVOKE ALL ON TABLE cas_app_user_role_privs FROM postgres;
GRANT ALL ON TABLE cas_app_user_role_privs TO postgres;
GRANT ALL ON TABLE cas_app_user_role_privs TO node_api;


--
-- Name: cas_app_user_role_privs_hist; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_app_user_role_privs_hist FROM PUBLIC;
REVOKE ALL ON TABLE cas_app_user_role_privs_hist FROM postgres;
GRANT ALL ON TABLE cas_app_user_role_privs_hist TO postgres;
GRANT ALL ON TABLE cas_app_user_role_privs_hist TO node_api;


--
-- Name: cas_apps; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_apps FROM PUBLIC;
REVOKE ALL ON TABLE cas_apps FROM postgres;
GRANT ALL ON TABLE cas_apps TO postgres;
GRANT ALL ON TABLE cas_apps TO node_api;


--
-- Name: cas_roles; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_roles FROM PUBLIC;
REVOKE ALL ON TABLE cas_roles FROM postgres;
GRANT ALL ON TABLE cas_roles TO postgres;
GRANT ALL ON TABLE cas_roles TO node_api;


--
-- Name: cas_app_user_role_privs_vw; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_app_user_role_privs_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_app_user_role_privs_vw FROM postgres;
GRANT ALL ON TABLE cas_app_user_role_privs_vw TO postgres;
GRANT SELECT ON TABLE cas_app_user_role_privs_vw TO login_app;
GRANT SELECT ON TABLE cas_app_user_role_privs_vw TO cas_app;
GRANT SELECT ON TABLE cas_app_user_role_privs_vw TO micis_app;
GRANT ALL ON TABLE cas_app_user_role_privs_vw TO node_api;


--
-- Name: cas_apps_hist; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_apps_hist FROM PUBLIC;
REVOKE ALL ON TABLE cas_apps_hist FROM postgres;
GRANT ALL ON TABLE cas_apps_hist TO postgres;
GRANT ALL ON TABLE cas_apps_hist TO node_api;


--
-- Name: cas_apps_vw; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_apps_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_apps_vw FROM postgres;
GRANT ALL ON TABLE cas_apps_vw TO postgres;
GRANT SELECT ON TABLE cas_apps_vw TO cas_app;
GRANT SELECT ON TABLE cas_apps_vw TO portal_app;
GRANT SELECT ON TABLE cas_apps_vw TO micis_app;
GRANT ALL ON TABLE cas_apps_vw TO node_api;


--
-- Name: cas_coins_metrics; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_coins_metrics FROM PUBLIC;
REVOKE ALL ON TABLE cas_coins_metrics FROM postgres;
GRANT ALL ON TABLE cas_coins_metrics TO postgres;
GRANT ALL ON TABLE cas_coins_metrics TO node_api;


--
-- Name: cas_coins_metrics_vw; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_coins_metrics_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_coins_metrics_vw FROM postgres;
GRANT ALL ON TABLE cas_coins_metrics_vw TO postgres;
GRANT ALL ON TABLE cas_coins_metrics_vw TO ni_developers;
GRANT SELECT ON TABLE cas_coins_metrics_vw TO cas_app;
GRANT ALL ON TABLE cas_coins_metrics_vw TO node_api;


--
-- Name: cas_ip_locations; Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON TABLE cas_ip_locations FROM PUBLIC;
REVOKE ALL ON TABLE cas_ip_locations FROM ni_developers;
GRANT ALL ON TABLE cas_ip_locations TO ni_developers;
GRANT ALL ON TABLE cas_ip_locations TO node_api;


--
-- Name: cas_ip_locations_hist; Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON TABLE cas_ip_locations_hist FROM PUBLIC;
REVOKE ALL ON TABLE cas_ip_locations_hist FROM ni_developers;
GRANT ALL ON TABLE cas_ip_locations_hist TO ni_developers;
GRANT ALL ON TABLE cas_ip_locations_hist TO node_api;


--
-- Name: cas_ip_locations_ip_id_seq; Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE cas_ip_locations_ip_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cas_ip_locations_ip_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE cas_ip_locations_ip_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE cas_ip_locations_ip_id_seq TO node_api;


--
-- Name: cas_ip_locations_vw; Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON TABLE cas_ip_locations_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_ip_locations_vw FROM ni_developers;
GRANT ALL ON TABLE cas_ip_locations_vw TO ni_developers;
GRANT SELECT ON TABLE cas_ip_locations_vw TO coinspr_app;
GRANT ALL ON TABLE cas_ip_locations_vw TO node_api;


--
-- Name: cas_login_records; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_login_records FROM PUBLIC;
REVOKE ALL ON TABLE cas_login_records FROM postgres;
GRANT ALL ON TABLE cas_login_records TO postgres;
GRANT ALL ON TABLE cas_login_records TO node_api;


--
-- Name: cas_login_records_counter; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE cas_login_records_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE cas_login_records_counter FROM postgres;
GRANT ALL ON SEQUENCE cas_login_records_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE cas_login_records_counter TO node_api;


--
-- Name: cas_login_records_vw; Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON TABLE cas_login_records_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_login_records_vw FROM ni_developers;
GRANT ALL ON TABLE cas_login_records_vw TO ni_developers;
GRANT SELECT ON TABLE cas_login_records_vw TO coinspr_app;
GRANT ALL ON TABLE cas_login_records_vw TO node_api;


--
-- Name: cas_portal_info; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_portal_info FROM PUBLIC;
REVOKE ALL ON TABLE cas_portal_info FROM postgres;
GRANT ALL ON TABLE cas_portal_info TO postgres;
GRANT ALL ON TABLE cas_portal_info TO node_api;


--
-- Name: cas_portal_info_vw; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_portal_info_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_portal_info_vw FROM postgres;
GRANT ALL ON TABLE cas_portal_info_vw TO postgres;
GRANT SELECT ON TABLE cas_portal_info_vw TO portal_app;
GRANT SELECT ON TABLE cas_portal_info_vw TO micis_app;
GRANT ALL ON TABLE cas_portal_info_vw TO node_api;


--
-- Name: cas_roles_hist; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_roles_hist FROM PUBLIC;
REVOKE ALL ON TABLE cas_roles_hist FROM postgres;
GRANT ALL ON TABLE cas_roles_hist TO postgres;
GRANT ALL ON TABLE cas_roles_hist TO node_api;


--
-- Name: cas_roles_vw; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_roles_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_roles_vw FROM postgres;
GRANT ALL ON TABLE cas_roles_vw TO postgres;
GRANT SELECT ON TABLE cas_roles_vw TO cas_app;
GRANT SELECT ON TABLE cas_roles_vw TO micis_app;
GRANT ALL ON TABLE cas_roles_vw TO node_api;


--
-- Name: cas_siteid_seq; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE cas_siteid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cas_siteid_seq FROM postgres;
GRANT ALL ON SEQUENCE cas_siteid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE cas_siteid_seq TO node_api;


--
-- Name: cas_sites; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_sites FROM PUBLIC;
REVOKE ALL ON TABLE cas_sites FROM postgres;
GRANT ALL ON TABLE cas_sites TO postgres;
GRANT ALL ON TABLE cas_sites TO node_api;


--
-- Name: cas_sites_config; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_sites_config FROM PUBLIC;
REVOKE ALL ON TABLE cas_sites_config FROM postgres;
GRANT ALL ON TABLE cas_sites_config TO postgres;
GRANT ALL ON TABLE cas_sites_config TO node_api;


--
-- Name: cas_sites_config_hist; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_sites_config_hist FROM PUBLIC;
REVOKE ALL ON TABLE cas_sites_config_hist FROM postgres;
GRANT ALL ON TABLE cas_sites_config_hist TO postgres;
GRANT ALL ON TABLE cas_sites_config_hist TO node_api;


--
-- Name: cas_sites_config_vw; Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON TABLE cas_sites_config_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_sites_config_vw FROM ni_developers;
GRANT ALL ON TABLE cas_sites_config_vw TO ni_developers;
GRANT SELECT ON TABLE cas_sites_config_vw TO micis_app;
GRANT SELECT ON TABLE cas_sites_config_vw TO login_app;
GRANT SELECT ON TABLE cas_sites_config_vw TO cas_app;
GRANT SELECT ON TABLE cas_sites_config_vw TO portal_app;
GRANT ALL ON TABLE cas_sites_config_vw TO node_api;


--
-- Name: cas_sites_hist; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_sites_hist FROM PUBLIC;
REVOKE ALL ON TABLE cas_sites_hist FROM postgres;
GRANT ALL ON TABLE cas_sites_hist TO postgres;
GRANT ALL ON TABLE cas_sites_hist TO node_api;


--
-- Name: cas_sites_vw; Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON TABLE cas_sites_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_sites_vw FROM ni_developers;
GRANT ALL ON TABLE cas_sites_vw TO ni_developers;
GRANT SELECT ON TABLE cas_sites_vw TO login_app;
GRANT SELECT ON TABLE cas_sites_vw TO micis_app;
GRANT SELECT ON TABLE cas_sites_vw TO cas_app;
GRANT SELECT ON TABLE cas_sites_vw TO portal_app;
GRANT SELECT ON TABLE cas_sites_vw TO transfer_app;
GRANT ALL ON TABLE cas_sites_vw TO node_api;


--
-- Name: cas_study_user_role_privs; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_study_user_role_privs FROM PUBLIC;
REVOKE ALL ON TABLE cas_study_user_role_privs FROM postgres;
GRANT ALL ON TABLE cas_study_user_role_privs TO postgres;
GRANT ALL ON TABLE cas_study_user_role_privs TO node_api;


--
-- Name: cas_study_user_role_privs_hist; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_study_user_role_privs_hist FROM PUBLIC;
REVOKE ALL ON TABLE cas_study_user_role_privs_hist FROM postgres;
GRANT ALL ON TABLE cas_study_user_role_privs_hist TO postgres;
GRANT ALL ON TABLE cas_study_user_role_privs_hist TO node_api;


SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_studies; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_studies FROM PUBLIC;
REVOKE ALL ON TABLE mrs_studies FROM postgres;
GRANT ALL ON TABLE mrs_studies TO postgres;
GRANT ALL ON TABLE mrs_studies TO node_api;


SET search_path = casdba, pg_catalog;

--
-- Name: cas_study_user_role_privs_vw; Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON TABLE cas_study_user_role_privs_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_study_user_role_privs_vw FROM ni_developers;
GRANT ALL ON TABLE cas_study_user_role_privs_vw TO ni_developers;
GRANT SELECT ON TABLE cas_study_user_role_privs_vw TO login_app;
GRANT SELECT ON TABLE cas_study_user_role_privs_vw TO cas_app;
GRANT SELECT ON TABLE cas_study_user_role_privs_vw TO micis_app;
GRANT ALL ON TABLE cas_study_user_role_privs_vw TO node_api;


--
-- Name: cas_ursi_prefix_seq; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE cas_ursi_prefix_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cas_ursi_prefix_seq FROM postgres;
GRANT ALL ON SEQUENCE cas_ursi_prefix_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE cas_ursi_prefix_seq TO node_api;


--
-- Name: cas_user_field_values; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_user_field_values FROM PUBLIC;
REVOKE ALL ON TABLE cas_user_field_values FROM postgres;
GRANT ALL ON TABLE cas_user_field_values TO postgres;
GRANT ALL ON TABLE cas_user_field_values TO node_api;


--
-- Name: cas_user_field_values_counter; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE cas_user_field_values_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE cas_user_field_values_counter FROM postgres;
GRANT ALL ON SEQUENCE cas_user_field_values_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE cas_user_field_values_counter TO node_api;


--
-- Name: cas_user_field_values_hist; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_user_field_values_hist FROM PUBLIC;
REVOKE ALL ON TABLE cas_user_field_values_hist FROM postgres;
GRANT ALL ON TABLE cas_user_field_values_hist TO postgres;
GRANT ALL ON TABLE cas_user_field_values_hist TO node_api;


--
-- Name: cas_user_field_values_vw; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_user_field_values_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_user_field_values_vw FROM postgres;
GRANT ALL ON TABLE cas_user_field_values_vw TO postgres;
GRANT SELECT ON TABLE cas_user_field_values_vw TO login_app;
GRANT SELECT ON TABLE cas_user_field_values_vw TO cas_app;
GRANT SELECT ON TABLE cas_user_field_values_vw TO micis_app;
GRANT ALL ON TABLE cas_user_field_values_vw TO node_api;


--
-- Name: cas_user_fields; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_user_fields FROM PUBLIC;
REVOKE ALL ON TABLE cas_user_fields FROM postgres;
GRANT ALL ON TABLE cas_user_fields TO postgres;
GRANT ALL ON TABLE cas_user_fields TO node_api;


--
-- Name: cas_user_fields_counter; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE cas_user_fields_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE cas_user_fields_counter FROM postgres;
GRANT ALL ON SEQUENCE cas_user_fields_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE cas_user_fields_counter TO node_api;


--
-- Name: cas_user_fields_hist; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_user_fields_hist FROM PUBLIC;
REVOKE ALL ON TABLE cas_user_fields_hist FROM postgres;
GRANT ALL ON TABLE cas_user_fields_hist TO postgres;
GRANT ALL ON TABLE cas_user_fields_hist TO node_api;


--
-- Name: cas_user_fields_vw; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_user_fields_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_user_fields_vw FROM postgres;
GRANT ALL ON TABLE cas_user_fields_vw TO postgres;
GRANT SELECT ON TABLE cas_user_fields_vw TO login_app;
GRANT SELECT ON TABLE cas_user_fields_vw TO cas_app;
GRANT SELECT ON TABLE cas_user_fields_vw TO micis_app;
GRANT ALL ON TABLE cas_user_fields_vw TO node_api;


--
-- Name: cas_user_study_privs_tmp; Type: ACL; Schema: casdba; Owner: ni_developers
--

REVOKE ALL ON TABLE cas_user_study_privs_tmp FROM PUBLIC;
REVOKE ALL ON TABLE cas_user_study_privs_tmp FROM ni_developers;
GRANT ALL ON TABLE cas_user_study_privs_tmp TO ni_developers;
GRANT ALL ON TABLE cas_user_study_privs_tmp TO node_api;


--
-- Name: cas_users; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_users FROM PUBLIC;
REVOKE ALL ON TABLE cas_users FROM postgres;
GRANT ALL ON TABLE cas_users TO postgres;
GRANT ALL ON TABLE cas_users TO node_api;


--
-- Name: cas_users_hist; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_users_hist FROM PUBLIC;
REVOKE ALL ON TABLE cas_users_hist FROM postgres;
GRANT ALL ON TABLE cas_users_hist TO postgres;
GRANT ALL ON TABLE cas_users_hist TO node_api;


--
-- Name: cas_users_vw; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE cas_users_vw FROM PUBLIC;
REVOKE ALL ON TABLE cas_users_vw FROM postgres;
GRANT ALL ON TABLE cas_users_vw TO postgres;
GRANT SELECT ON TABLE cas_users_vw TO login_app;
GRANT SELECT ON TABLE cas_users_vw TO micis_app;
GRANT SELECT ON TABLE cas_users_vw TO cas_app;
GRANT SELECT ON TABLE cas_users_vw TO portal_app;
GRANT SELECT ON TABLE cas_users_vw TO coinspr_app;
GRANT ALL ON TABLE cas_users_vw TO node_api;


--
-- Name: casapps_appid_seq; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE casapps_appid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE casapps_appid_seq FROM postgres;
GRANT ALL ON SEQUENCE casapps_appid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE casapps_appid_seq TO node_api;


--
-- Name: casroles_roleid_seq; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE casroles_roleid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE casroles_roleid_seq FROM postgres;
GRANT ALL ON SEQUENCE casroles_roleid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE casroles_roleid_seq TO node_api;


--
-- Name: databasechangelog; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE databasechangelog FROM PUBLIC;
REVOKE ALL ON TABLE databasechangelog FROM postgres;
GRANT ALL ON TABLE databasechangelog TO postgres;
GRANT ALL ON TABLE databasechangelog TO node_api;


--
-- Name: databasechangeloglock; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE databasechangeloglock FROM PUBLIC;
REVOKE ALL ON TABLE databasechangeloglock FROM postgres;
GRANT ALL ON TABLE databasechangeloglock TO postgres;
GRANT ALL ON TABLE databasechangeloglock TO node_api;


--
-- Name: olingrants; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE olingrants FROM PUBLIC;
REVOKE ALL ON TABLE olingrants FROM postgres;
GRANT ALL ON TABLE olingrants TO postgres;
GRANT ALL ON TABLE olingrants TO node_api;


--
-- Name: olingrantsd; Type: ACL; Schema: casdba; Owner: postgres
--

REVOKE ALL ON TABLE olingrantsd FROM PUBLIC;
REVOKE ALL ON TABLE olingrantsd FROM postgres;
GRANT ALL ON TABLE olingrantsd TO postgres;
GRANT ALL ON TABLE olingrantsd TO node_api;


SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_study_tracker_response_options; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_tracker_response_options FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_tracker_response_options FROM ni_developers;
GRANT ALL ON TABLE mrs_study_tracker_response_options TO ni_developers;
GRANT ALL ON TABLE mrs_study_tracker_response_options TO node_api;


--
-- Name: mrs_study_tracker_response_options_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_tracker_response_options_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_tracker_response_options_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_study_tracker_response_options_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_study_tracker_response_options_vw TO micis_app;
GRANT ALL ON TABLE mrs_study_tracker_response_options_vw TO node_api;


--
-- Name: mrs_subj_anon_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_subj_anon_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subj_anon_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrs_subj_anon_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_subj_anon_id_seq TO node_api;


--
-- Name: mrs_subject_tracker_events; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tracker_events FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tracker_events FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tracker_events TO ni_developers;
GRANT ALL ON TABLE mrs_subject_tracker_events TO node_api;


--
-- Name: mrs_subject_tracker_events_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tracker_events_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tracker_events_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tracker_events_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_tracker_events_vw TO micis_app;
GRANT ALL ON TABLE mrs_subject_tracker_events_vw TO node_api;


--
-- Name: mrs_subject_tracker_responses; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tracker_responses FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tracker_responses FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tracker_responses TO ni_developers;
GRANT ALL ON TABLE mrs_subject_tracker_responses TO node_api;


--
-- Name: mrs_subject_tracker_responses_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tracker_responses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tracker_responses_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tracker_responses_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_tracker_responses_vw TO micis_app;
GRANT ALL ON TABLE mrs_subject_tracker_responses_vw TO node_api;


--
-- Name: mrs_subject_type_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_type_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_type_details FROM postgres;
GRANT ALL ON TABLE mrs_subject_type_details TO postgres;
GRANT ALL ON TABLE mrs_subject_type_details TO node_api;


--
-- Name: mrs_subject_types; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_types FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_types FROM postgres;
GRANT ALL ON TABLE mrs_subject_types TO postgres;
GRANT ALL ON TABLE mrs_subject_types TO node_api;


--
-- Name: mrs_subject_type_details_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_type_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_type_details_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_type_details_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_type_details_vw TO p2_app;
GRANT SELECT ON TABLE mrs_subject_type_details_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_type_details_vw TO portal_app;
GRANT ALL ON TABLE mrs_subject_type_details_vw TO node_api;


SET search_path = dtdba, pg_catalog;

--
-- Name: dt_tracker_response_events_vw; Type: ACL; Schema: dtdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dt_tracker_response_events_vw FROM PUBLIC;
REVOKE ALL ON TABLE dt_tracker_response_events_vw FROM ni_developers;
GRANT ALL ON TABLE dt_tracker_response_events_vw TO ni_developers;
GRANT SELECT ON TABLE dt_tracker_response_events_vw TO p2_app;
GRANT SELECT ON TABLE dt_tracker_response_events_vw TO micis_app;
GRANT SELECT ON TABLE dt_tracker_response_events_vw TO portal_app;
GRANT SELECT ON TABLE dt_tracker_response_events_vw TO transfer_app;
GRANT ALL ON TABLE dt_tracker_response_events_vw TO node_api;


SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_study_trackers; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_trackers FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_trackers FROM ni_developers;
GRANT ALL ON TABLE mrs_study_trackers TO ni_developers;
GRANT ALL ON TABLE mrs_study_trackers TO node_api;


--
-- Name: mrs_study_trackers_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_trackers_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_trackers_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_study_trackers_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_study_trackers_vw TO micis_app;
GRANT ALL ON TABLE mrs_study_trackers_vw TO node_api;


SET search_path = dtdba, pg_catalog;

--
-- Name: dt_tracker_responses_latest_vw; Type: ACL; Schema: dtdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dt_tracker_responses_latest_vw FROM PUBLIC;
REVOKE ALL ON TABLE dt_tracker_responses_latest_vw FROM ni_developers;
GRANT ALL ON TABLE dt_tracker_responses_latest_vw TO ni_developers;
GRANT SELECT ON TABLE dt_tracker_responses_latest_vw TO p2_app;
GRANT SELECT ON TABLE dt_tracker_responses_latest_vw TO micis_app;
GRANT SELECT ON TABLE dt_tracker_responses_latest_vw TO portal_app;
GRANT SELECT ON TABLE dt_tracker_responses_latest_vw TO transfer_app;
GRANT ALL ON TABLE dt_tracker_responses_latest_vw TO node_api;


SET search_path = dxdba, pg_catalog;

--
-- Name: databasechangelog; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE databasechangelog FROM PUBLIC;
REVOKE ALL ON TABLE databasechangelog FROM postgres;
GRANT ALL ON TABLE databasechangelog TO postgres;
GRANT ALL ON TABLE databasechangelog TO node_api;


--
-- Name: databasechangeloglock; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE databasechangeloglock FROM PUBLIC;
REVOKE ALL ON TABLE databasechangeloglock FROM postgres;
GRANT ALL ON TABLE databasechangeloglock TO postgres;
GRANT ALL ON TABLE databasechangeloglock TO node_api;


--
-- Name: dx_asmt_responses_mv; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_asmt_responses_mv FROM PUBLIC;
REVOKE ALL ON TABLE dx_asmt_responses_mv FROM postgres;
GRANT ALL ON TABLE dx_asmt_responses_mv TO postgres;
GRANT SELECT ON TABLE dx_asmt_responses_mv TO micis_app;
GRANT ALL ON TABLE dx_asmt_responses_mv TO node_api;


SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_subjects; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subjects FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subjects FROM postgres;
GRANT ALL ON TABLE mrs_subjects TO postgres;
GRANT ALL ON TABLE mrs_subjects TO node_api;


SET search_path = dxdba, pg_catalog;

--
-- Name: dx_subjects_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_subjects_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_subjects_vw FROM ni_developers;
GRANT ALL ON TABLE dx_subjects_vw TO ni_developers;
GRANT SELECT ON TABLE dx_subjects_vw TO micis_app;
GRANT ALL ON TABLE dx_subjects_vw TO node_api;


SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_sharing_rules_asmts; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules_asmts FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_asmts FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules_asmts TO postgres;
GRANT ALL ON TABLE mrs_sharing_rules_asmts TO node_api;


--
-- Name: mrs_sharing_rules_studies; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules_studies FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_studies FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules_studies TO postgres;
GRANT ALL ON TABLE mrs_sharing_rules_studies TO node_api;


--
-- Name: mrs_asmts_studies_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_asmts_studies_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_asmts_studies_vw FROM postgres;
GRANT ALL ON TABLE mrs_asmts_studies_vw TO postgres;
GRANT SELECT ON TABLE mrs_asmts_studies_vw TO micis_app;
GRANT ALL ON TABLE mrs_asmts_studies_vw TO node_api;


--
-- Name: mrs_assessments; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_assessments FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessments FROM postgres;
GRANT ALL ON TABLE mrs_assessments TO postgres;
GRANT ALL ON TABLE mrs_assessments TO node_api;


--
-- Name: mrs_instruments; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instruments FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instruments FROM postgres;
GRANT ALL ON TABLE mrs_instruments TO postgres;
GRANT ALL ON TABLE mrs_instruments TO node_api;


--
-- Name: mrs_instruments_studies; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instruments_studies FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instruments_studies FROM ni_developers;
GRANT ALL ON TABLE mrs_instruments_studies TO ni_developers;
GRANT ALL ON TABLE mrs_instruments_studies TO node_api;


SET search_path = dxdba, pg_catalog;

--
-- Name: dx_asmts_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_asmts_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_asmts_vw FROM ni_developers;
GRANT ALL ON TABLE dx_asmts_vw TO ni_developers;
GRANT SELECT ON TABLE dx_asmts_vw TO micis_app;
GRANT ALL ON TABLE dx_asmts_vw TO node_api;


SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_assessment_responses; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_assessment_responses FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessment_responses FROM postgres;
GRANT ALL ON TABLE mrs_assessment_responses TO postgres;
GRANT ALL ON TABLE mrs_assessment_responses TO node_api;


--
-- Name: mrs_instrument_questions; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_questions FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_questions FROM postgres;
GRANT ALL ON TABLE mrs_instrument_questions TO postgres;
GRANT ALL ON TABLE mrs_instrument_questions TO node_api;


SET search_path = dxdba, pg_catalog;

--
-- Name: dx_asmt_responses_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_asmt_responses_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_asmt_responses_vw FROM ni_developers;
GRANT ALL ON TABLE dx_asmt_responses_vw TO ni_developers;
GRANT SELECT ON TABLE dx_asmt_responses_vw TO micis_app;
GRANT ALL ON TABLE dx_asmt_responses_vw TO node_api;


--
-- Name: dx_asmt_sharing_rules; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_asmt_sharing_rules FROM PUBLIC;
REVOKE ALL ON TABLE dx_asmt_sharing_rules FROM postgres;
GRANT ALL ON TABLE dx_asmt_sharing_rules TO postgres;
GRANT ALL ON TABLE dx_asmt_sharing_rules TO node_api;


--
-- Name: dx_asmt_sharing_rules_vw; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_asmt_sharing_rules_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_asmt_sharing_rules_vw FROM postgres;
GRANT ALL ON TABLE dx_asmt_sharing_rules_vw TO postgres;
GRANT ALL ON TABLE dx_asmt_sharing_rules_vw TO ni_developers;
GRANT SELECT ON TABLE dx_asmt_sharing_rules_vw TO micis_app;
GRANT ALL ON TABLE dx_asmt_sharing_rules_vw TO node_api;


--
-- Name: dx_asmt_sharing_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_asmt_sharing_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_asmt_sharing_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_asmt_sharing_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_asmt_sharing_seq TO node_api;


--
-- Name: dx_asmts_mv; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_asmts_mv FROM PUBLIC;
REVOKE ALL ON TABLE dx_asmts_mv FROM postgres;
GRANT ALL ON TABLE dx_asmts_mv TO postgres;
GRANT SELECT ON TABLE dx_asmts_mv TO micis_app;
GRANT ALL ON TABLE dx_asmts_mv TO node_api;


--
-- Name: dx_capsule_processing_temp; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_capsule_processing_temp FROM PUBLIC;
REVOKE ALL ON TABLE dx_capsule_processing_temp FROM postgres;
GRANT ALL ON TABLE dx_capsule_processing_temp TO postgres;
GRANT ALL ON TABLE dx_capsule_processing_temp TO node_api;


--
-- Name: dx_capsule_processing_temp_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_capsule_processing_temp_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_capsule_processing_temp_vw FROM ni_developers;
GRANT ALL ON TABLE dx_capsule_processing_temp_vw TO ni_developers;
GRANT SELECT ON TABLE dx_capsule_processing_temp_vw TO micis_app;
GRANT ALL ON TABLE dx_capsule_processing_temp_vw TO node_api;


--
-- Name: dx_data_capsule_counter; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_data_capsule_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_data_capsule_counter FROM postgres;
GRANT ALL ON SEQUENCE dx_data_capsule_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_data_capsule_counter TO node_api;


--
-- Name: dx_data_capsule_creation_queue; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_capsule_creation_queue FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_capsule_creation_queue FROM postgres;
GRANT ALL ON TABLE dx_data_capsule_creation_queue TO postgres;
GRANT ALL ON TABLE dx_data_capsule_creation_queue TO node_api;


--
-- Name: dx_data_capsule_creation_queue_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_capsule_creation_queue_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_capsule_creation_queue_hist FROM postgres;
GRANT ALL ON TABLE dx_data_capsule_creation_queue_hist TO postgres;
GRANT ALL ON TABLE dx_data_capsule_creation_queue_hist TO node_api;


--
-- Name: dx_data_capsule_creation_queue_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_capsule_creation_queue_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_capsule_creation_queue_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_capsule_creation_queue_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_capsule_creation_queue_vw TO micis_app;
GRANT ALL ON TABLE dx_data_capsule_creation_queue_vw TO node_api;


--
-- Name: dx_data_capsule_downloads; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_capsule_downloads FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_capsule_downloads FROM postgres;
GRANT ALL ON TABLE dx_data_capsule_downloads TO postgres;
GRANT ALL ON TABLE dx_data_capsule_downloads TO node_api;


--
-- Name: dx_data_capsule_downloads_counter; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_data_capsule_downloads_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_data_capsule_downloads_counter FROM postgres;
GRANT ALL ON SEQUENCE dx_data_capsule_downloads_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_data_capsule_downloads_counter TO node_api;


--
-- Name: dx_data_capsule_downloads_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_capsule_downloads_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_capsule_downloads_hist FROM postgres;
GRANT ALL ON TABLE dx_data_capsule_downloads_hist TO postgres;
GRANT ALL ON TABLE dx_data_capsule_downloads_hist TO node_api;


--
-- Name: dx_data_capsule_downloads_hist_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_capsule_downloads_hist_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_capsule_downloads_hist_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_capsule_downloads_hist_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_capsule_downloads_hist_vw TO micis_app;
GRANT SELECT ON TABLE dx_data_capsule_downloads_hist_vw TO portal_app;
GRANT ALL ON TABLE dx_data_capsule_downloads_hist_vw TO node_api;


--
-- Name: dx_data_capsule_downloads_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_capsule_downloads_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_capsule_downloads_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_capsule_downloads_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_capsule_downloads_vw TO micis_app;
GRANT ALL ON TABLE dx_data_capsule_downloads_vw TO node_api;


--
-- Name: dx_data_capsule_file_counter; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_data_capsule_file_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_data_capsule_file_counter FROM postgres;
GRANT ALL ON SEQUENCE dx_data_capsule_file_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_data_capsule_file_counter TO node_api;


--
-- Name: dx_data_capsule_modification_queue; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_capsule_modification_queue FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_capsule_modification_queue FROM postgres;
GRANT ALL ON TABLE dx_data_capsule_modification_queue TO postgres;
GRANT ALL ON TABLE dx_data_capsule_modification_queue TO node_api;


--
-- Name: dx_data_request_source_components; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_request_source_components FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_source_components FROM postgres;
GRANT ALL ON TABLE dx_data_request_source_components TO postgres;
GRANT ALL ON TABLE dx_data_request_source_components TO node_api;


--
-- Name: dx_data_source_capsule_link; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_source_capsule_link FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_source_capsule_link FROM postgres;
GRANT ALL ON TABLE dx_data_source_capsule_link TO postgres;
GRANT ALL ON TABLE dx_data_source_capsule_link TO node_api;


--
-- Name: dx_ex_situ_data_capsule_files; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_ex_situ_data_capsule_files FROM PUBLIC;
REVOKE ALL ON TABLE dx_ex_situ_data_capsule_files FROM postgres;
GRANT ALL ON TABLE dx_ex_situ_data_capsule_files TO postgres;
GRANT ALL ON TABLE dx_ex_situ_data_capsule_files TO node_api;


--
-- Name: dx_ex_situ_data_capsules; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_ex_situ_data_capsules FROM PUBLIC;
REVOKE ALL ON TABLE dx_ex_situ_data_capsules FROM postgres;
GRANT ALL ON TABLE dx_ex_situ_data_capsules TO postgres;
GRANT ALL ON TABLE dx_ex_situ_data_capsules TO node_api;


--
-- Name: dx_data_capsule_modification_queue_details_vw; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_capsule_modification_queue_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_capsule_modification_queue_details_vw FROM postgres;
GRANT ALL ON TABLE dx_data_capsule_modification_queue_details_vw TO postgres;
GRANT ALL ON TABLE dx_data_capsule_modification_queue_details_vw TO node_api;


--
-- Name: dx_data_capsule_modification_queue_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_capsule_modification_queue_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_capsule_modification_queue_hist FROM postgres;
GRANT ALL ON TABLE dx_data_capsule_modification_queue_hist TO postgres;
GRANT ALL ON TABLE dx_data_capsule_modification_queue_hist TO node_api;


--
-- Name: dx_data_capsule_modification_queue_modification_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_data_capsule_modification_queue_modification_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_data_capsule_modification_queue_modification_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_data_capsule_modification_queue_modification_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_data_capsule_modification_queue_modification_id_seq TO node_api;


--
-- Name: dx_data_capsule_modification_queue_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_capsule_modification_queue_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_capsule_modification_queue_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_capsule_modification_queue_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_capsule_modification_queue_vw TO micis_app;
GRANT ALL ON TABLE dx_data_capsule_modification_queue_vw TO node_api;


--
-- Name: dx_data_request_source_component_exclusions_mv; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_request_source_component_exclusions_mv FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_source_component_exclusions_mv FROM postgres;
GRANT ALL ON TABLE dx_data_request_source_component_exclusions_mv TO postgres;
GRANT SELECT ON TABLE dx_data_request_source_component_exclusions_mv TO micis_app;
GRANT ALL ON TABLE dx_data_request_source_component_exclusions_mv TO node_api;


--
-- Name: dx_series_mv; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_series_mv FROM PUBLIC;
REVOKE ALL ON TABLE dx_series_mv FROM postgres;
GRANT ALL ON TABLE dx_series_mv TO postgres;
GRANT SELECT ON TABLE dx_series_mv TO micis_app;
GRANT ALL ON TABLE dx_series_mv TO node_api;


--
-- Name: dx_data_request_source_component_exclusions_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_request_source_component_exclusions_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_source_component_exclusions_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_request_source_component_exclusions_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_request_source_component_exclusions_vw TO micis_app;
GRANT ALL ON TABLE dx_data_request_source_component_exclusions_vw TO node_api;


--
-- Name: dx_data_request_source_components_component_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_data_request_source_components_component_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_data_request_source_components_component_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_data_request_source_components_component_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_data_request_source_components_component_id_seq TO node_api;


--
-- Name: dx_data_request_source_components_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_request_source_components_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_source_components_hist FROM postgres;
GRANT ALL ON TABLE dx_data_request_source_components_hist TO postgres;
GRANT ALL ON TABLE dx_data_request_source_components_hist TO node_api;


--
-- Name: dx_data_request_source_components_hist_component_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_data_request_source_components_hist_component_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_data_request_source_components_hist_component_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_data_request_source_components_hist_component_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_data_request_source_components_hist_component_id_seq TO node_api;


--
-- Name: dx_data_request_source_components_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_request_source_components_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_source_components_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_request_source_components_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_request_source_components_vw TO micis_app;
GRANT ALL ON TABLE dx_data_request_source_components_vw TO node_api;


--
-- Name: dx_data_request_sources; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_request_sources FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_sources FROM postgres;
GRANT ALL ON TABLE dx_data_request_sources TO postgres;
GRANT ALL ON TABLE dx_data_request_sources TO node_api;


--
-- Name: dx_data_request_sources_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_request_sources_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_sources_hist FROM postgres;
GRANT ALL ON TABLE dx_data_request_sources_hist TO postgres;
GRANT ALL ON TABLE dx_data_request_sources_hist TO node_api;


--
-- Name: dx_data_request_sources_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_request_sources_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_sources_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_request_sources_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_request_sources_vw TO micis_app;
GRANT ALL ON TABLE dx_data_request_sources_vw TO node_api;


--
-- Name: dx_data_request_template_filters; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_request_template_filters FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_template_filters FROM postgres;
GRANT ALL ON TABLE dx_data_request_template_filters TO postgres;
GRANT ALL ON TABLE dx_data_request_template_filters TO node_api;


--
-- Name: dx_data_request_template_filters_filter_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_data_request_template_filters_filter_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_data_request_template_filters_filter_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_data_request_template_filters_filter_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_data_request_template_filters_filter_id_seq TO node_api;


--
-- Name: dx_data_request_template_filters_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_request_template_filters_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_template_filters_hist FROM postgres;
GRANT ALL ON TABLE dx_data_request_template_filters_hist TO postgres;
GRANT ALL ON TABLE dx_data_request_template_filters_hist TO node_api;


--
-- Name: dx_data_request_template_filters_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_request_template_filters_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_template_filters_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_request_template_filters_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_request_template_filters_vw TO micis_app;
GRANT ALL ON TABLE dx_data_request_template_filters_vw TO node_api;


--
-- Name: dx_data_request_template_groups; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_request_template_groups FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_template_groups FROM postgres;
GRANT ALL ON TABLE dx_data_request_template_groups TO postgres;
GRANT ALL ON TABLE dx_data_request_template_groups TO node_api;


--
-- Name: dx_data_request_template_groups_group_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_data_request_template_groups_group_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_data_request_template_groups_group_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_data_request_template_groups_group_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_data_request_template_groups_group_id_seq TO node_api;


--
-- Name: dx_data_request_template_groups_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_request_template_groups_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_template_groups_hist FROM postgres;
GRANT ALL ON TABLE dx_data_request_template_groups_hist TO postgres;
GRANT ALL ON TABLE dx_data_request_template_groups_hist TO node_api;


--
-- Name: dx_data_request_template_groups_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_request_template_groups_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_request_template_groups_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_request_template_groups_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_request_template_groups_vw TO micis_app;
GRANT ALL ON TABLE dx_data_request_template_groups_vw TO node_api;


--
-- Name: dx_data_requests; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_requests FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_requests FROM postgres;
GRANT ALL ON TABLE dx_data_requests TO postgres;
GRANT ALL ON TABLE dx_data_requests TO node_api;


--
-- Name: dx_data_requests_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_requests_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_requests_hist FROM postgres;
GRANT ALL ON TABLE dx_data_requests_hist TO postgres;
GRANT ALL ON TABLE dx_data_requests_hist TO node_api;


--
-- Name: dx_data_requests_hist_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_requests_hist_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_requests_hist_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_requests_hist_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_requests_hist_vw TO micis_app;
GRANT ALL ON TABLE dx_data_requests_hist_vw TO node_api;


--
-- Name: dx_data_requests_sources; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_requests_sources FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_requests_sources FROM postgres;
GRANT ALL ON TABLE dx_data_requests_sources TO postgres;
GRANT ALL ON TABLE dx_data_requests_sources TO node_api;


--
-- Name: dx_data_requests_sources_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_requests_sources_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_requests_sources_hist FROM postgres;
GRANT ALL ON TABLE dx_data_requests_sources_hist TO postgres;
GRANT ALL ON TABLE dx_data_requests_sources_hist TO node_api;


--
-- Name: dx_data_requests_sources_hist_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_requests_sources_hist_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_requests_sources_hist_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_requests_sources_hist_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_requests_sources_hist_vw TO micis_app;
GRANT ALL ON TABLE dx_data_requests_sources_hist_vw TO node_api;


--
-- Name: dx_data_requests_target_studies; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_requests_target_studies FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_requests_target_studies FROM postgres;
GRANT ALL ON TABLE dx_data_requests_target_studies TO postgres;
GRANT ALL ON TABLE dx_data_requests_target_studies TO node_api;


--
-- Name: dx_data_requests_target_studies_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_requests_target_studies_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_requests_target_studies_hist FROM postgres;
GRANT ALL ON TABLE dx_data_requests_target_studies_hist TO postgres;
GRANT ALL ON TABLE dx_data_requests_target_studies_hist TO node_api;


--
-- Name: dx_data_requests_target_studies_hist_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_requests_target_studies_hist_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_requests_target_studies_hist_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_requests_target_studies_hist_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_requests_target_studies_hist_vw TO micis_app;
GRANT ALL ON TABLE dx_data_requests_target_studies_hist_vw TO node_api;


--
-- Name: dx_data_requests_target_studies_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_requests_target_studies_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_requests_target_studies_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_requests_target_studies_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_requests_target_studies_vw TO micis_app;
GRANT ALL ON TABLE dx_data_requests_target_studies_vw TO node_api;


--
-- Name: dx_data_requests_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_requests_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_requests_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_requests_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_requests_vw TO micis_app;
GRANT SELECT ON TABLE dx_data_requests_vw TO coinspr_app;
GRANT ALL ON TABLE dx_data_requests_vw TO node_api;


--
-- Name: dx_data_source_capsule_link_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_source_capsule_link_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_source_capsule_link_hist FROM postgres;
GRANT ALL ON TABLE dx_data_source_capsule_link_hist TO postgres;
GRANT ALL ON TABLE dx_data_source_capsule_link_hist TO node_api;


--
-- Name: dx_data_source_capsule_link_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_data_source_capsule_link_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_source_capsule_link_vw FROM ni_developers;
GRANT ALL ON TABLE dx_data_source_capsule_link_vw TO ni_developers;
GRANT SELECT ON TABLE dx_data_source_capsule_link_vw TO micis_app;
GRANT ALL ON TABLE dx_data_source_capsule_link_vw TO node_api;


--
-- Name: dx_source_attribute_values; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_source_attribute_values FROM PUBLIC;
REVOKE ALL ON TABLE dx_source_attribute_values FROM postgres;
GRANT ALL ON TABLE dx_source_attribute_values TO postgres;
GRANT ALL ON TABLE dx_source_attribute_values TO node_api;


--
-- Name: dx_source_attributes; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_source_attributes FROM PUBLIC;
REVOKE ALL ON TABLE dx_source_attributes FROM postgres;
GRANT ALL ON TABLE dx_source_attributes TO postgres;
GRANT ALL ON TABLE dx_source_attributes TO node_api;


SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_modalities; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_modalities FROM PUBLIC;
REVOKE ALL ON TABLE mrs_modalities FROM postgres;
GRANT ALL ON TABLE mrs_modalities TO postgres;
GRANT ALL ON TABLE mrs_modalities TO node_api;


SET search_path = dxdba, pg_catalog;

--
-- Name: dx_data_source_key_elements_vw; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_source_key_elements_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_source_key_elements_vw FROM postgres;
GRANT ALL ON TABLE dx_data_source_key_elements_vw TO postgres;
GRANT SELECT ON TABLE dx_data_source_key_elements_vw TO micis_app;
GRANT ALL ON TABLE dx_data_source_key_elements_vw TO node_api;


--
-- Name: dx_data_upload_file_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_data_upload_file_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_data_upload_file_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_data_upload_file_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_data_upload_file_id_seq TO node_api;


--
-- Name: dx_data_upload_files; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_upload_files FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_upload_files FROM postgres;
GRANT ALL ON TABLE dx_data_upload_files TO postgres;
GRANT ALL ON TABLE dx_data_upload_files TO node_api;


--
-- Name: dx_data_upload_files_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_upload_files_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_upload_files_hist FROM postgres;
GRANT ALL ON TABLE dx_data_upload_files_hist TO postgres;
GRANT ALL ON TABLE dx_data_upload_files_hist TO node_api;


--
-- Name: dx_data_upload_files_vw; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_upload_files_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_upload_files_vw FROM postgres;
GRANT ALL ON TABLE dx_data_upload_files_vw TO postgres;
GRANT SELECT ON TABLE dx_data_upload_files_vw TO micis_app;
GRANT ALL ON TABLE dx_data_upload_files_vw TO node_api;


--
-- Name: dx_data_upload_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_data_upload_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_data_upload_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_data_upload_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_data_upload_id_seq TO node_api;


--
-- Name: dx_data_uploads; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_uploads FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_uploads FROM postgres;
GRANT ALL ON TABLE dx_data_uploads TO postgres;
GRANT ALL ON TABLE dx_data_uploads TO node_api;


--
-- Name: dx_data_uploads_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_uploads_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_uploads_hist FROM postgres;
GRANT ALL ON TABLE dx_data_uploads_hist TO postgres;
GRANT ALL ON TABLE dx_data_uploads_hist TO node_api;


--
-- Name: dx_data_uploads_vw; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_data_uploads_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_data_uploads_vw FROM postgres;
GRANT ALL ON TABLE dx_data_uploads_vw TO postgres;
GRANT SELECT ON TABLE dx_data_uploads_vw TO micis_app;
GRANT ALL ON TABLE dx_data_uploads_vw TO node_api;


--
-- Name: dx_ex_situ_data_capsule_files_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_ex_situ_data_capsule_files_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_ex_situ_data_capsule_files_hist FROM postgres;
GRANT ALL ON TABLE dx_ex_situ_data_capsule_files_hist TO postgres;
GRANT ALL ON TABLE dx_ex_situ_data_capsule_files_hist TO node_api;


--
-- Name: dx_ex_situ_data_capsule_files_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_ex_situ_data_capsule_files_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_ex_situ_data_capsule_files_vw FROM ni_developers;
GRANT ALL ON TABLE dx_ex_situ_data_capsule_files_vw TO ni_developers;
GRANT SELECT ON TABLE dx_ex_situ_data_capsule_files_vw TO micis_app;
GRANT ALL ON TABLE dx_ex_situ_data_capsule_files_vw TO node_api;


--
-- Name: dx_ex_situ_data_capsules_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_ex_situ_data_capsules_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_ex_situ_data_capsules_hist FROM postgres;
GRANT ALL ON TABLE dx_ex_situ_data_capsules_hist TO postgres;
GRANT ALL ON TABLE dx_ex_situ_data_capsules_hist TO node_api;


--
-- Name: dx_ex_situ_data_capsules_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_ex_situ_data_capsules_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_ex_situ_data_capsules_vw FROM ni_developers;
GRANT ALL ON TABLE dx_ex_situ_data_capsules_vw TO ni_developers;
GRANT SELECT ON TABLE dx_ex_situ_data_capsules_vw TO micis_app;
GRANT ALL ON TABLE dx_ex_situ_data_capsules_vw TO node_api;


--
-- Name: dx_filter_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_filter_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_filter_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_filter_id_seq TO postgres;
GRANT UPDATE ON SEQUENCE dx_filter_id_seq TO micis_app;
GRANT SELECT,USAGE ON SEQUENCE dx_filter_id_seq TO node_api;


--
-- Name: dx_messages; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_messages FROM PUBLIC;
REVOKE ALL ON TABLE dx_messages FROM postgres;
GRANT ALL ON TABLE dx_messages TO postgres;
GRANT ALL ON TABLE dx_messages TO node_api;


--
-- Name: dx_msg_counter; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_msg_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_msg_counter FROM postgres;
GRANT ALL ON SEQUENCE dx_msg_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_msg_counter TO node_api;


--
-- Name: dx_msgs_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_msgs_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_msgs_vw FROM ni_developers;
GRANT ALL ON TABLE dx_msgs_vw TO ni_developers;
GRANT SELECT ON TABLE dx_msgs_vw TO micis_app;
GRANT ALL ON TABLE dx_msgs_vw TO node_api;


--
-- Name: dx_options_mv; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_options_mv FROM PUBLIC;
REVOKE ALL ON TABLE dx_options_mv FROM ni_developers;
GRANT ALL ON TABLE dx_options_mv TO ni_developers;
GRANT ALL ON TABLE dx_options_mv TO micis_app;
GRANT ALL ON TABLE dx_options_mv TO node_api;


--
-- Name: dx_preapproval_attributes; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_preapproval_attributes FROM PUBLIC;
REVOKE ALL ON TABLE dx_preapproval_attributes FROM postgres;
GRANT ALL ON TABLE dx_preapproval_attributes TO postgres;
GRANT ALL ON TABLE dx_preapproval_attributes TO node_api;


--
-- Name: dx_preapproval_attributes_approval_attribute_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_preapproval_attributes_approval_attribute_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_preapproval_attributes_approval_attribute_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_preapproval_attributes_approval_attribute_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_preapproval_attributes_approval_attribute_id_seq TO node_api;


--
-- Name: dx_preapproval_attributes_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_preapproval_attributes_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_preapproval_attributes_vw FROM ni_developers;
GRANT ALL ON TABLE dx_preapproval_attributes_vw TO ni_developers;
GRANT SELECT ON TABLE dx_preapproval_attributes_vw TO micis_app;
GRANT ALL ON TABLE dx_preapproval_attributes_vw TO node_api;


--
-- Name: dx_preapprovals; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_preapprovals FROM PUBLIC;
REVOKE ALL ON TABLE dx_preapprovals FROM postgres;
GRANT ALL ON TABLE dx_preapprovals TO postgres;
GRANT ALL ON TABLE dx_preapprovals TO node_api;


--
-- Name: dx_preapprovals_approval_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_preapprovals_approval_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_preapprovals_approval_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_preapprovals_approval_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_preapprovals_approval_id_seq TO node_api;


--
-- Name: dx_preapprovals_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_preapprovals_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_preapprovals_hist FROM postgres;
GRANT ALL ON TABLE dx_preapprovals_hist TO postgres;
GRANT ALL ON TABLE dx_preapprovals_hist TO node_api;


--
-- Name: dx_preapprovals_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_preapprovals_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_preapprovals_vw FROM ni_developers;
GRANT ALL ON TABLE dx_preapprovals_vw TO ni_developers;
GRANT SELECT ON TABLE dx_preapprovals_vw TO micis_app;
GRANT ALL ON TABLE dx_preapprovals_vw TO node_api;


--
-- Name: dx_req_counter; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_req_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_req_counter FROM postgres;
GRANT ALL ON SEQUENCE dx_req_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_req_counter TO node_api;


--
-- Name: dx_req_src_counter; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_req_src_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_req_src_counter FROM postgres;
GRANT ALL ON SEQUENCE dx_req_src_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_req_src_counter TO node_api;


--
-- Name: dx_scan_sharing_rules; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_scan_sharing_rules FROM PUBLIC;
REVOKE ALL ON TABLE dx_scan_sharing_rules FROM postgres;
GRANT ALL ON TABLE dx_scan_sharing_rules TO postgres;
GRANT ALL ON TABLE dx_scan_sharing_rules TO node_api;


SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_scan_sessions; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions TO postgres;
GRANT ALL ON TABLE mrs_scan_sessions TO node_api;


--
-- Name: mrs_series; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series FROM postgres;
GRANT ALL ON TABLE mrs_series TO postgres;
GRANT ALL ON TABLE mrs_series TO node_api;


--
-- Name: mrs_series_labels; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_series_labels FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_labels FROM ni_developers;
GRANT ALL ON TABLE mrs_series_labels TO ni_developers;
GRANT ALL ON TABLE mrs_series_labels TO node_api;


--
-- Name: mrs_study_codes; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_codes FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_codes FROM postgres;
GRANT ALL ON TABLE mrs_study_codes TO postgres;
GRANT ALL ON TABLE mrs_study_codes TO node_api;


--
-- Name: mrs_series_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_series_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_series_vw TO ni_developers;
GRANT ALL ON TABLE mrs_series_vw TO postgres;
GRANT SELECT ON TABLE mrs_series_vw TO micis_app;
GRANT SELECT ON TABLE mrs_series_vw TO portal_app;
GRANT SELECT ON TABLE mrs_series_vw TO transfer_app;
GRANT ALL ON TABLE mrs_series_vw TO node_api;


SET search_path = dxdba, pg_catalog;

--
-- Name: dx_scan_sharing_rules_vw; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_scan_sharing_rules_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_scan_sharing_rules_vw FROM postgres;
GRANT ALL ON TABLE dx_scan_sharing_rules_vw TO postgres;
GRANT ALL ON TABLE dx_scan_sharing_rules_vw TO ni_developers;
GRANT SELECT ON TABLE dx_scan_sharing_rules_vw TO micis_app;
GRANT ALL ON TABLE dx_scan_sharing_rules_vw TO node_api;


--
-- Name: dx_scan_sharing_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_scan_sharing_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_scan_sharing_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_scan_sharing_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_scan_sharing_seq TO node_api;


--
-- Name: dx_series_anonymized_file_paths; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_series_anonymized_file_paths FROM PUBLIC;
REVOKE ALL ON TABLE dx_series_anonymized_file_paths FROM ni_developers;
GRANT ALL ON TABLE dx_series_anonymized_file_paths TO ni_developers;
GRANT ALL ON TABLE dx_series_anonymized_file_paths TO node_api;


--
-- Name: dx_series_anonymized_file_paths_file_path_id_seq; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE dx_series_anonymized_file_paths_file_path_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_series_anonymized_file_paths_file_path_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE dx_series_anonymized_file_paths_file_path_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE dx_series_anonymized_file_paths_file_path_id_seq TO node_api;


--
-- Name: dx_series_anonymized_file_paths_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_series_anonymized_file_paths_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_series_anonymized_file_paths_vw FROM ni_developers;
GRANT ALL ON TABLE dx_series_anonymized_file_paths_vw TO ni_developers;
GRANT SELECT ON TABLE dx_series_anonymized_file_paths_vw TO micis_app;
GRANT ALL ON TABLE dx_series_anonymized_file_paths_vw TO node_api;


SET search_path = mrsdba, pg_catalog;

--
-- Name: mrs_collection_techniques; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_collection_techniques FROM PUBLIC;
REVOKE ALL ON TABLE mrs_collection_techniques FROM ni_developers;
GRANT ALL ON TABLE mrs_collection_techniques TO ni_developers;
GRANT ALL ON TABLE mrs_collection_techniques TO node_api;


--
-- Name: mrs_scanners; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scanners FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scanners FROM postgres;
GRANT ALL ON TABLE mrs_scanners TO postgres;
GRANT ALL ON TABLE mrs_scanners TO node_api;


--
-- Name: mrs_series_definitions; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_series_definitions FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_definitions FROM ni_developers;
GRANT ALL ON TABLE mrs_series_definitions TO ni_developers;
GRANT ALL ON TABLE mrs_series_definitions TO node_api;


SET search_path = dxdba, pg_catalog;

--
-- Name: dx_series_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_series_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_series_vw FROM ni_developers;
GRANT ALL ON TABLE dx_series_vw TO ni_developers;
GRANT SELECT ON TABLE dx_series_vw TO micis_app;
GRANT ALL ON TABLE dx_series_vw TO node_api;


--
-- Name: dx_series_zip_file_contents; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_series_zip_file_contents FROM PUBLIC;
REVOKE ALL ON TABLE dx_series_zip_file_contents FROM ni_developers;
GRANT ALL ON TABLE dx_series_zip_file_contents TO ni_developers;
GRANT ALL ON TABLE dx_series_zip_file_contents TO node_api;


--
-- Name: dx_series_zip_file_contents_hist; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_series_zip_file_contents_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_series_zip_file_contents_hist FROM ni_developers;
GRANT ALL ON TABLE dx_series_zip_file_contents_hist TO ni_developers;
GRANT ALL ON TABLE dx_series_zip_file_contents_hist TO node_api;


--
-- Name: dx_series_zip_file_contents_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_series_zip_file_contents_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_series_zip_file_contents_vw FROM ni_developers;
GRANT ALL ON TABLE dx_series_zip_file_contents_vw TO ni_developers;
GRANT SELECT ON TABLE dx_series_zip_file_contents_vw TO micis_app;
GRANT ALL ON TABLE dx_series_zip_file_contents_vw TO node_api;


--
-- Name: dx_series_zip_file_contents_zip_file_content_id_seq; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE dx_series_zip_file_contents_zip_file_content_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_series_zip_file_contents_zip_file_content_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE dx_series_zip_file_contents_zip_file_content_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE dx_series_zip_file_contents_zip_file_content_id_seq TO node_api;


--
-- Name: dx_series_zip_file_paths; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_series_zip_file_paths FROM PUBLIC;
REVOKE ALL ON TABLE dx_series_zip_file_paths FROM ni_developers;
GRANT ALL ON TABLE dx_series_zip_file_paths TO ni_developers;
GRANT ALL ON TABLE dx_series_zip_file_paths TO node_api;


--
-- Name: dx_series_zip_file_paths_hist; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_series_zip_file_paths_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_series_zip_file_paths_hist FROM ni_developers;
GRANT ALL ON TABLE dx_series_zip_file_paths_hist TO ni_developers;
GRANT ALL ON TABLE dx_series_zip_file_paths_hist TO node_api;


--
-- Name: dx_series_zip_file_paths_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_series_zip_file_paths_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_series_zip_file_paths_vw FROM ni_developers;
GRANT ALL ON TABLE dx_series_zip_file_paths_vw TO ni_developers;
GRANT SELECT ON TABLE dx_series_zip_file_paths_vw TO micis_app;
GRANT ALL ON TABLE dx_series_zip_file_paths_vw TO node_api;


--
-- Name: dx_series_zip_file_paths_with_contents_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_series_zip_file_paths_with_contents_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_series_zip_file_paths_with_contents_vw FROM ni_developers;
GRANT ALL ON TABLE dx_series_zip_file_paths_with_contents_vw TO ni_developers;
GRANT SELECT ON TABLE dx_series_zip_file_paths_with_contents_vw TO micis_app;
GRANT ALL ON TABLE dx_series_zip_file_paths_with_contents_vw TO node_api;


--
-- Name: dx_series_zip_file_paths_zip_file_id_seq; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE dx_series_zip_file_paths_zip_file_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_series_zip_file_paths_zip_file_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE dx_series_zip_file_paths_zip_file_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE dx_series_zip_file_paths_zip_file_id_seq TO node_api;


--
-- Name: dx_source_attribute_values_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_source_attribute_values_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_source_attribute_values_hist FROM postgres;
GRANT ALL ON TABLE dx_source_attribute_values_hist TO postgres;
GRANT ALL ON TABLE dx_source_attribute_values_hist TO node_api;


--
-- Name: dx_source_attribute_values_pk_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_source_attribute_values_pk_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_source_attribute_values_pk_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_source_attribute_values_pk_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_source_attribute_values_pk_id_seq TO node_api;


--
-- Name: dx_source_attribute_values_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_source_attribute_values_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_source_attribute_values_vw FROM ni_developers;
GRANT ALL ON TABLE dx_source_attribute_values_vw TO ni_developers;
GRANT SELECT ON TABLE dx_source_attribute_values_vw TO micis_app;
GRANT ALL ON TABLE dx_source_attribute_values_vw TO node_api;


--
-- Name: dx_source_attributes_attr_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_source_attributes_attr_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_source_attributes_attr_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_source_attributes_attr_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_source_attributes_attr_id_seq TO node_api;


--
-- Name: dx_source_attributes_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_source_attributes_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_source_attributes_hist FROM postgres;
GRANT ALL ON TABLE dx_source_attributes_hist TO postgres;
GRANT ALL ON TABLE dx_source_attributes_hist TO node_api;


--
-- Name: dx_source_attributes_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_source_attributes_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_source_attributes_vw FROM ni_developers;
GRANT ALL ON TABLE dx_source_attributes_vw TO ni_developers;
GRANT SELECT ON TABLE dx_source_attributes_vw TO micis_app;
GRANT ALL ON TABLE dx_source_attributes_vw TO node_api;


--
-- Name: dx_studies_mv; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_studies_mv FROM PUBLIC;
REVOKE ALL ON TABLE dx_studies_mv FROM postgres;
GRANT ALL ON TABLE dx_studies_mv TO postgres;
GRANT SELECT ON TABLE dx_studies_mv TO micis_app;
GRANT ALL ON TABLE dx_studies_mv TO node_api;


--
-- Name: dx_studies_vw; Type: ACL; Schema: dxdba; Owner: ni_developers
--

REVOKE ALL ON TABLE dx_studies_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_studies_vw FROM ni_developers;
GRANT ALL ON TABLE dx_studies_vw TO ni_developers;
GRANT SELECT ON TABLE dx_studies_vw TO micis_app;
GRANT ALL ON TABLE dx_studies_vw TO node_api;


--
-- Name: dx_subjects_mv; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_subjects_mv FROM PUBLIC;
REVOKE ALL ON TABLE dx_subjects_mv FROM postgres;
GRANT ALL ON TABLE dx_subjects_mv TO postgres;
GRANT SELECT ON TABLE dx_subjects_mv TO micis_app;
GRANT SELECT ON TABLE dx_subjects_mv TO coinspr_app;
GRANT ALL ON TABLE dx_subjects_mv TO node_api;


--
-- Name: dx_usage_agreement_acceptance; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_usage_agreement_acceptance FROM PUBLIC;
REVOKE ALL ON TABLE dx_usage_agreement_acceptance FROM postgres;
GRANT ALL ON TABLE dx_usage_agreement_acceptance TO postgres;
GRANT ALL ON TABLE dx_usage_agreement_acceptance TO node_api;


--
-- Name: dx_usage_agreement_acceptance_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_usage_agreement_acceptance_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_usage_agreement_acceptance_hist FROM postgres;
GRANT ALL ON TABLE dx_usage_agreement_acceptance_hist TO postgres;
GRANT ALL ON TABLE dx_usage_agreement_acceptance_hist TO node_api;


--
-- Name: dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_usage_agreement_acceptance_usage_agreement_acceptance_id_seq TO node_api;


--
-- Name: dx_usage_agreement_acceptance_vw; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_usage_agreement_acceptance_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_usage_agreement_acceptance_vw FROM postgres;
GRANT ALL ON TABLE dx_usage_agreement_acceptance_vw TO postgres;
GRANT ALL ON TABLE dx_usage_agreement_acceptance_vw TO ni_developers;
GRANT SELECT ON TABLE dx_usage_agreement_acceptance_vw TO micis_app;
GRANT ALL ON TABLE dx_usage_agreement_acceptance_vw TO node_api;


--
-- Name: dx_usage_agreements; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_usage_agreements FROM PUBLIC;
REVOKE ALL ON TABLE dx_usage_agreements FROM postgres;
GRANT ALL ON TABLE dx_usage_agreements TO postgres;
GRANT ALL ON TABLE dx_usage_agreements TO node_api;


--
-- Name: dx_usage_agreements_hist; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_usage_agreements_hist FROM PUBLIC;
REVOKE ALL ON TABLE dx_usage_agreements_hist FROM postgres;
GRANT ALL ON TABLE dx_usage_agreements_hist TO postgres;
GRANT ALL ON TABLE dx_usage_agreements_hist TO node_api;


--
-- Name: dx_usage_agreements_usage_agreement_id_seq; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE dx_usage_agreements_usage_agreement_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dx_usage_agreements_usage_agreement_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dx_usage_agreements_usage_agreement_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE dx_usage_agreements_usage_agreement_id_seq TO node_api;


--
-- Name: dx_usage_agreements_vw; Type: ACL; Schema: dxdba; Owner: postgres
--

REVOKE ALL ON TABLE dx_usage_agreements_vw FROM PUBLIC;
REVOKE ALL ON TABLE dx_usage_agreements_vw FROM postgres;
GRANT ALL ON TABLE dx_usage_agreements_vw TO postgres;
GRANT ALL ON TABLE dx_usage_agreements_vw TO ni_developers;
GRANT SELECT ON TABLE dx_usage_agreements_vw TO micis_app;
GRANT ALL ON TABLE dx_usage_agreements_vw TO node_api;


SET search_path = mrsdba, pg_catalog;

--
-- Name: create$java$lob$table; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE "create$java$lob$table" FROM PUBLIC;
REVOKE ALL ON TABLE "create$java$lob$table" FROM postgres;
GRANT ALL ON TABLE "create$java$lob$table" TO postgres;
GRANT ALL ON TABLE "create$java$lob$table" TO node_api;


--
-- Name: databasechangelog; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE databasechangelog FROM PUBLIC;
REVOKE ALL ON TABLE databasechangelog FROM postgres;
GRANT ALL ON TABLE databasechangelog TO postgres;
GRANT ALL ON TABLE databasechangelog TO node_api;


--
-- Name: databasechangeloglock; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE databasechangeloglock FROM PUBLIC;
REVOKE ALL ON TABLE databasechangeloglock FROM postgres;
GRANT ALL ON TABLE databasechangeloglock TO postgres;
GRANT ALL ON TABLE databasechangeloglock TO node_api;


--
-- Name: java$class$md5$table; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE "java$class$md5$table" FROM PUBLIC;
REVOKE ALL ON TABLE "java$class$md5$table" FROM postgres;
GRANT ALL ON TABLE "java$class$md5$table" TO postgres;
GRANT ALL ON TABLE "java$class$md5$table" TO node_api;


--
-- Name: java$options; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE "java$options" FROM PUBLIC;
REVOKE ALL ON TABLE "java$options" FROM postgres;
GRANT ALL ON TABLE "java$options" TO postgres;
GRANT ALL ON TABLE "java$options" TO node_api;


--
-- Name: may_5_and_after_asmt_responses_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE may_5_and_after_asmt_responses_hist FROM PUBLIC;
REVOKE ALL ON TABLE may_5_and_after_asmt_responses_hist FROM ni_developers;
GRANT ALL ON TABLE may_5_and_after_asmt_responses_hist TO ni_developers;
GRANT ALL ON TABLE may_5_and_after_asmt_responses_hist TO node_api;


--
-- Name: may_5_and_after_asmt_responses_hist_2; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE may_5_and_after_asmt_responses_hist_2 FROM PUBLIC;
REVOKE ALL ON TABLE may_5_and_after_asmt_responses_hist_2 FROM ni_developers;
GRANT ALL ON TABLE may_5_and_after_asmt_responses_hist_2 TO ni_developers;
GRANT ALL ON TABLE may_5_and_after_asmt_responses_hist_2 TO node_api;


--
-- Name: may_5_and_after_asmts__hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE may_5_and_after_asmts__hist FROM PUBLIC;
REVOKE ALL ON TABLE may_5_and_after_asmts__hist FROM ni_developers;
GRANT ALL ON TABLE may_5_and_after_asmts__hist TO ni_developers;
GRANT ALL ON TABLE may_5_and_after_asmts__hist TO node_api;


--
-- Name: may_5_and_after_asmts_hist_2; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE may_5_and_after_asmts_hist_2 FROM PUBLIC;
REVOKE ALL ON TABLE may_5_and_after_asmts_hist_2 FROM ni_developers;
GRANT ALL ON TABLE may_5_and_after_asmts_hist_2 TO ni_developers;
GRANT ALL ON TABLE may_5_and_after_asmts_hist_2 TO node_api;


--
-- Name: may_5_conflict_resolution_audit; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE may_5_conflict_resolution_audit FROM PUBLIC;
REVOKE ALL ON TABLE may_5_conflict_resolution_audit FROM ni_developers;
GRANT ALL ON TABLE may_5_conflict_resolution_audit TO ni_developers;
GRANT ALL ON TABLE may_5_conflict_resolution_audit TO node_api;


--
-- Name: may_5_conflict_resolution_audit_2; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE may_5_conflict_resolution_audit_2 FROM PUBLIC;
REVOKE ALL ON TABLE may_5_conflict_resolution_audit_2 FROM ni_developers;
GRANT ALL ON TABLE may_5_conflict_resolution_audit_2 TO ni_developers;
GRANT SELECT ON TABLE may_5_conflict_resolution_audit_2 TO micis_app;
GRANT ALL ON TABLE may_5_conflict_resolution_audit_2 TO node_api;


--
-- Name: mrs_accounts; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_accounts FROM PUBLIC;
REVOKE ALL ON TABLE mrs_accounts FROM postgres;
GRANT ALL ON TABLE mrs_accounts TO postgres;
GRANT ALL ON TABLE mrs_accounts TO node_api;


--
-- Name: mrs_accounts_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_accounts_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_accounts_hist FROM postgres;
GRANT ALL ON TABLE mrs_accounts_hist TO postgres;
GRANT ALL ON TABLE mrs_accounts_hist TO node_api;


--
-- Name: mrs_accounts_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_accounts_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_accounts_vw FROM postgres;
GRANT ALL ON TABLE mrs_accounts_vw TO postgres;
GRANT SELECT ON TABLE mrs_accounts_vw TO micis_app;
GRANT ALL ON TABLE mrs_accounts_vw TO node_api;


--
-- Name: mrs_addresses; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_addresses FROM PUBLIC;
REVOKE ALL ON TABLE mrs_addresses FROM postgres;
GRANT ALL ON TABLE mrs_addresses TO postgres;
GRANT ALL ON TABLE mrs_addresses TO node_api;


--
-- Name: mrs_addresses_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_addresses_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_addresses_hist FROM postgres;
GRANT ALL ON TABLE mrs_addresses_hist TO postgres;
GRANT ALL ON TABLE mrs_addresses_hist TO node_api;


--
-- Name: mrs_addresses_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_addresses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_addresses_vw FROM postgres;
GRANT ALL ON TABLE mrs_addresses_vw TO postgres;
GRANT SELECT ON TABLE mrs_addresses_vw TO micis_app;
GRANT SELECT ON TABLE mrs_addresses_vw TO portal_app;
GRANT ALL ON TABLE mrs_addresses_vw TO node_api;


--
-- Name: mrs_eeg_devices; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_devices FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_devices FROM postgres;
GRANT ALL ON TABLE mrs_eeg_devices TO postgres;
GRANT ALL ON TABLE mrs_eeg_devices TO node_api;


--
-- Name: mrs_all_scanners_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_all_scanners_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_all_scanners_vw FROM postgres;
GRANT ALL ON TABLE mrs_all_scanners_vw TO postgres;
GRANT SELECT ON TABLE mrs_all_scanners_vw TO micis_app;
GRANT SELECT ON TABLE mrs_all_scanners_vw TO portal_app;
GRANT ALL ON TABLE mrs_all_scanners_vw TO node_api;


--
-- Name: mrs_ambiguous_assessments; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_ambiguous_assessments FROM PUBLIC;
REVOKE ALL ON TABLE mrs_ambiguous_assessments FROM postgres;
GRANT ALL ON TABLE mrs_ambiguous_assessments TO postgres;
GRANT ALL ON TABLE mrs_ambiguous_assessments TO node_api;


--
-- Name: mrs_analysis; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis FROM postgres;
GRANT ALL ON TABLE mrs_analysis TO postgres;
GRANT ALL ON TABLE mrs_analysis TO node_api;


--
-- Name: mrs_analysis_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_analysis_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_analysis_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_analysis_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_analysis_counter TO node_api;


--
-- Name: mrs_analysis_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_details FROM postgres;
GRANT ALL ON TABLE mrs_analysis_details TO postgres;
GRANT ALL ON TABLE mrs_analysis_details TO node_api;


--
-- Name: mrs_analysis_details_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_details_vw FROM postgres;
GRANT ALL ON TABLE mrs_analysis_details_vw TO postgres;
GRANT SELECT ON TABLE mrs_analysis_details_vw TO micis_app;
GRANT SELECT ON TABLE mrs_analysis_details_vw TO portal_app;
GRANT ALL ON TABLE mrs_analysis_details_vw TO node_api;


--
-- Name: mrs_analysis_dti_qa_values; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_dti_qa_values FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_dti_qa_values FROM postgres;
GRANT ALL ON TABLE mrs_analysis_dti_qa_values TO postgres;
GRANT ALL ON TABLE mrs_analysis_dti_qa_values TO node_api;


--
-- Name: mrs_analysis_dti_qa_values_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_dti_qa_values_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_dti_qa_values_hist FROM postgres;
GRANT ALL ON TABLE mrs_analysis_dti_qa_values_hist TO postgres;
GRANT ALL ON TABLE mrs_analysis_dti_qa_values_hist TO node_api;


--
-- Name: mrs_analysis_files; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_files FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_files FROM postgres;
GRANT ALL ON TABLE mrs_analysis_files TO postgres;
GRANT ALL ON TABLE mrs_analysis_files TO node_api;


--
-- Name: mrs_analysis_files_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_analysis_files_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_analysis_files_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_analysis_files_counter TO postgres;
GRANT USAGE ON SEQUENCE mrs_analysis_files_counter TO PUBLIC;
GRANT SELECT,USAGE ON SEQUENCE mrs_analysis_files_counter TO node_api;


--
-- Name: mrs_analysis_files_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_files_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_files_vw FROM postgres;
GRANT ALL ON TABLE mrs_analysis_files_vw TO postgres;
GRANT SELECT ON TABLE mrs_analysis_files_vw TO micis_app;
GRANT SELECT ON TABLE mrs_analysis_files_vw TO portal_app;
GRANT ALL ON TABLE mrs_analysis_files_vw TO node_api;


--
-- Name: mrs_analysis_job_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_analysis_job_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_analysis_job_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_analysis_job_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_analysis_job_counter TO node_api;


--
-- Name: mrs_analysis_job_monitor; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_job_monitor FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_job_monitor FROM postgres;
GRANT ALL ON TABLE mrs_analysis_job_monitor TO postgres;
GRANT ALL ON TABLE mrs_analysis_job_monitor TO node_api;


--
-- Name: mrs_analysis_job_status; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_job_status FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_job_status FROM postgres;
GRANT ALL ON TABLE mrs_analysis_job_status TO postgres;
GRANT ALL ON TABLE mrs_analysis_job_status TO node_api;


--
-- Name: mrs_analysis_queue; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_queue FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_queue FROM postgres;
GRANT ALL ON TABLE mrs_analysis_queue TO postgres;
GRANT ALL ON TABLE mrs_analysis_queue TO node_api;


--
-- Name: mrs_analysis_queue_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_analysis_queue_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_analysis_queue_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_analysis_queue_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_analysis_queue_counter TO node_api;


--
-- Name: mrs_analysis_queue_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_queue_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_queue_hist FROM postgres;
GRANT ALL ON TABLE mrs_analysis_queue_hist TO postgres;
GRANT ALL ON TABLE mrs_analysis_queue_hist TO node_api;


--
-- Name: mrs_analysis_queue_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_queue_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_queue_vw FROM postgres;
GRANT ALL ON TABLE mrs_analysis_queue_vw TO postgres;
GRANT SELECT ON TABLE mrs_analysis_queue_vw TO micis_app;
GRANT SELECT ON TABLE mrs_analysis_queue_vw TO portal_app;
GRANT ALL ON TABLE mrs_analysis_queue_vw TO node_api;


--
-- Name: mrs_analysis_quicklook_statistic; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_quicklook_statistic FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_quicklook_statistic FROM postgres;
GRANT ALL ON TABLE mrs_analysis_quicklook_statistic TO postgres;
GRANT ALL ON TABLE mrs_analysis_quicklook_statistic TO node_api;


--
-- Name: mrs_analysis_quicklook_statistic_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_quicklook_statistic_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_quicklook_statistic_hist FROM postgres;
GRANT ALL ON TABLE mrs_analysis_quicklook_statistic_hist TO postgres;
GRANT ALL ON TABLE mrs_analysis_quicklook_statistic_hist TO node_api;


--
-- Name: mrs_analysis_quicklook_statistic_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_quicklook_statistic_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_quicklook_statistic_vw FROM postgres;
GRANT ALL ON TABLE mrs_analysis_quicklook_statistic_vw TO postgres;
GRANT SELECT ON TABLE mrs_analysis_quicklook_statistic_vw TO micis_app;
GRANT SELECT ON TABLE mrs_analysis_quicklook_statistic_vw TO portal_app;
GRANT ALL ON TABLE mrs_analysis_quicklook_statistic_vw TO node_api;


--
-- Name: mrs_analysis_stats_files; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_stats_files FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_stats_files FROM postgres;
GRANT ALL ON TABLE mrs_analysis_stats_files TO postgres;
GRANT ALL ON TABLE mrs_analysis_stats_files TO node_api;


--
-- Name: mrs_analysis_stats_files_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_analysis_stats_files_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_analysis_stats_files_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_analysis_stats_files_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_analysis_stats_files_counter TO PUBLIC;
GRANT SELECT,USAGE ON SEQUENCE mrs_analysis_stats_files_counter TO node_api;


--
-- Name: mrs_analysis_stats_files_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_stats_files_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_stats_files_vw FROM postgres;
GRANT ALL ON TABLE mrs_analysis_stats_files_vw TO postgres;
GRANT SELECT ON TABLE mrs_analysis_stats_files_vw TO micis_app;
GRANT SELECT ON TABLE mrs_analysis_stats_files_vw TO portal_app;
GRANT ALL ON TABLE mrs_analysis_stats_files_vw TO node_api;


--
-- Name: mrs_analysis_sub_study; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_sub_study FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_sub_study FROM postgres;
GRANT ALL ON TABLE mrs_analysis_sub_study TO postgres;
GRANT ALL ON TABLE mrs_analysis_sub_study TO node_api;


--
-- Name: mrs_analysis_sub_study_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_analysis_sub_study_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_analysis_sub_study_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_analysis_sub_study_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_analysis_sub_study_counter TO node_api;


--
-- Name: mrs_analysis_sub_study_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_sub_study_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_sub_study_vw FROM postgres;
GRANT ALL ON TABLE mrs_analysis_sub_study_vw TO postgres;
GRANT SELECT ON TABLE mrs_analysis_sub_study_vw TO micis_app;
GRANT SELECT ON TABLE mrs_analysis_sub_study_vw TO portal_app;
GRANT ALL ON TABLE mrs_analysis_sub_study_vw TO node_api;


--
-- Name: mrs_analysis_substudy_permission; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_substudy_permission FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_substudy_permission FROM postgres;
GRANT ALL ON TABLE mrs_analysis_substudy_permission TO postgres;
GRANT ALL ON TABLE mrs_analysis_substudy_permission TO node_api;


--
-- Name: mrs_analysis_substudy_permission_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_substudy_permission_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_substudy_permission_vw FROM postgres;
GRANT ALL ON TABLE mrs_analysis_substudy_permission_vw TO postgres;
GRANT SELECT ON TABLE mrs_analysis_substudy_permission_vw TO micis_app;
GRANT SELECT ON TABLE mrs_analysis_substudy_permission_vw TO portal_app;
GRANT ALL ON TABLE mrs_analysis_substudy_permission_vw TO node_api;


--
-- Name: mrs_analysis_summary_by_scanner; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_summary_by_scanner FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_summary_by_scanner FROM postgres;
GRANT ALL ON TABLE mrs_analysis_summary_by_scanner TO postgres;
GRANT ALL ON TABLE mrs_analysis_summary_by_scanner TO node_api;


--
-- Name: mrs_analysis_summary_by_scanner_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_summary_by_scanner_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_summary_by_scanner_hist FROM postgres;
GRANT ALL ON TABLE mrs_analysis_summary_by_scanner_hist TO postgres;
GRANT ALL ON TABLE mrs_analysis_summary_by_scanner_hist TO node_api;


--
-- Name: mrs_analysis_summary_by_scanner_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_summary_by_scanner_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_summary_by_scanner_vw FROM postgres;
GRANT ALL ON TABLE mrs_analysis_summary_by_scanner_vw TO postgres;
GRANT SELECT ON TABLE mrs_analysis_summary_by_scanner_vw TO micis_app;
GRANT SELECT ON TABLE mrs_analysis_summary_by_scanner_vw TO portal_app;
GRANT ALL ON TABLE mrs_analysis_summary_by_scanner_vw TO node_api;


--
-- Name: mrs_analysis_vbm_img; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_vbm_img FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_vbm_img FROM postgres;
GRANT ALL ON TABLE mrs_analysis_vbm_img TO postgres;
GRANT ALL ON TABLE mrs_analysis_vbm_img TO node_api;


--
-- Name: mrs_analysis_vbm_img_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_analysis_vbm_img_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_analysis_vbm_img_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_analysis_vbm_img_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_analysis_vbm_img_counter TO node_api;


--
-- Name: mrs_analysis_vbm_img_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_vbm_img_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_vbm_img_vw FROM postgres;
GRANT ALL ON TABLE mrs_analysis_vbm_img_vw TO postgres;
GRANT SELECT ON TABLE mrs_analysis_vbm_img_vw TO micis_app;
GRANT SELECT ON TABLE mrs_analysis_vbm_img_vw TO portal_app;
GRANT ALL ON TABLE mrs_analysis_vbm_img_vw TO node_api;


--
-- Name: mrs_analysis_vbm_qa_values; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_vbm_qa_values FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_vbm_qa_values FROM postgres;
GRANT ALL ON TABLE mrs_analysis_vbm_qa_values TO postgres;
GRANT ALL ON TABLE mrs_analysis_vbm_qa_values TO node_api;


--
-- Name: mrs_analysis_vbm_qa_values_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_vbm_qa_values_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_vbm_qa_values_vw FROM postgres;
GRANT ALL ON TABLE mrs_analysis_vbm_qa_values_vw TO postgres;
GRANT SELECT ON TABLE mrs_analysis_vbm_qa_values_vw TO micis_app;
GRANT SELECT ON TABLE mrs_analysis_vbm_qa_values_vw TO portal_app;
GRANT ALL ON TABLE mrs_analysis_vbm_qa_values_vw TO node_api;


--
-- Name: mrs_analysis_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_analysis_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_analysis_vw FROM postgres;
GRANT ALL ON TABLE mrs_analysis_vw TO postgres;
GRANT SELECT ON TABLE mrs_analysis_vw TO micis_app;
GRANT SELECT ON TABLE mrs_analysis_vw TO portal_app;
GRANT ALL ON TABLE mrs_analysis_vw TO node_api;


--
-- Name: mrs_anatomy_regions; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_anatomy_regions FROM PUBLIC;
REVOKE ALL ON TABLE mrs_anatomy_regions FROM postgres;
GRANT ALL ON TABLE mrs_anatomy_regions TO postgres;
GRANT ALL ON TABLE mrs_anatomy_regions TO node_api;


--
-- Name: mrs_anatomy_regions_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_anatomy_regions_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_anatomy_regions_hist FROM postgres;
GRANT ALL ON TABLE mrs_anatomy_regions_hist TO postgres;
GRANT ALL ON TABLE mrs_anatomy_regions_hist TO node_api;


--
-- Name: mrs_anatomy_regions_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_anatomy_regions_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_anatomy_regions_vw FROM postgres;
GRANT ALL ON TABLE mrs_anatomy_regions_vw TO postgres;
GRANT SELECT ON TABLE mrs_anatomy_regions_vw TO micis_app;
GRANT ALL ON TABLE mrs_anatomy_regions_vw TO node_api;


--
-- Name: mrs_app_options; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_app_options FROM PUBLIC;
REVOKE ALL ON TABLE mrs_app_options FROM ni_developers;
GRANT ALL ON TABLE mrs_app_options TO ni_developers;
GRANT ALL ON TABLE mrs_app_options TO node_api;


--
-- Name: mrs_app_options_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_app_options_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_app_options_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_app_options_hist TO ni_developers;
GRANT ALL ON TABLE mrs_app_options_hist TO node_api;


--
-- Name: mrs_app_options_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_app_options_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_app_options_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_app_options_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_app_options_id_seq TO node_api;


--
-- Name: mrs_app_options_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_app_options_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_app_options_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_app_options_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_app_options_vw TO p2_app;
GRANT SELECT ON TABLE mrs_app_options_vw TO micis_app;
GRANT SELECT ON TABLE mrs_app_options_vw TO portal_app;
GRANT ALL ON TABLE mrs_app_options_vw TO node_api;


--
-- Name: mrs_asmt_resp_hist_new; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_asmt_resp_hist_new FROM PUBLIC;
REVOKE ALL ON TABLE mrs_asmt_resp_hist_new FROM ni_developers;
GRANT ALL ON TABLE mrs_asmt_resp_hist_new TO ni_developers;
GRANT ALL ON TABLE mrs_asmt_resp_hist_new TO node_api;


--
-- Name: mrs_asmts_4_olin; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_asmts_4_olin FROM PUBLIC;
REVOKE ALL ON TABLE mrs_asmts_4_olin FROM postgres;
GRANT ALL ON TABLE mrs_asmts_4_olin TO postgres;
GRANT ALL ON TABLE mrs_asmts_4_olin TO node_api;


--
-- Name: mrs_instrument_section_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_section_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_section_details FROM postgres;
GRANT ALL ON TABLE mrs_instrument_section_details TO postgres;
GRANT ALL ON TABLE mrs_instrument_section_details TO node_api;


--
-- Name: mrs_asmts_and_responses_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_asmts_and_responses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_asmts_and_responses_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_asmts_and_responses_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_asmts_and_responses_vw TO micis_app;
GRANT ALL ON TABLE mrs_asmts_and_responses_vw TO node_api;


--
-- Name: mrs_asmts_and_their_matches_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_asmts_and_their_matches_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_asmts_and_their_matches_vw FROM postgres;
GRANT ALL ON TABLE mrs_asmts_and_their_matches_vw TO postgres;
GRANT SELECT ON TABLE mrs_asmts_and_their_matches_vw TO micis_app;
GRANT SELECT ON TABLE mrs_asmts_and_their_matches_vw TO portal_app;
GRANT ALL ON TABLE mrs_asmts_and_their_matches_vw TO node_api;


--
-- Name: mrs_asmts_most_clean_mv; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_asmts_most_clean_mv FROM PUBLIC;
REVOKE ALL ON TABLE mrs_asmts_most_clean_mv FROM postgres;
GRANT ALL ON TABLE mrs_asmts_most_clean_mv TO postgres;
GRANT ALL ON TABLE mrs_asmts_most_clean_mv TO node_api;


--
-- Name: mrs_asmts_most_complete_mv; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_asmts_most_complete_mv FROM PUBLIC;
REVOKE ALL ON TABLE mrs_asmts_most_complete_mv FROM postgres;
GRANT ALL ON TABLE mrs_asmts_most_complete_mv TO postgres;
GRANT ALL ON TABLE mrs_asmts_most_complete_mv TO node_api;


--
-- Name: mrs_asmts_most_complete_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_asmts_most_complete_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_asmts_most_complete_vw FROM postgres;
GRANT ALL ON TABLE mrs_asmts_most_complete_vw TO postgres;
GRANT SELECT ON TABLE mrs_asmts_most_complete_vw TO micis_app;
GRANT SELECT ON TABLE mrs_asmts_most_complete_vw TO portal_app;
GRANT ALL ON TABLE mrs_asmts_most_complete_vw TO node_api;


--
-- Name: mrs_legacy_sharing_rules_asmts; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_legacy_sharing_rules_asmts FROM PUBLIC;
REVOKE ALL ON TABLE mrs_legacy_sharing_rules_asmts FROM postgres;
GRANT ALL ON TABLE mrs_legacy_sharing_rules_asmts TO postgres;
GRANT ALL ON TABLE mrs_legacy_sharing_rules_asmts TO node_api;


--
-- Name: mrs_legacy_sharing_rules_studies; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_legacy_sharing_rules_studies FROM PUBLIC;
REVOKE ALL ON TABLE mrs_legacy_sharing_rules_studies FROM postgres;
GRANT ALL ON TABLE mrs_legacy_sharing_rules_studies TO postgres;
GRANT ALL ON TABLE mrs_legacy_sharing_rules_studies TO node_api;


--
-- Name: mrs_asmts_owners_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_asmts_owners_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_asmts_owners_vw FROM postgres;
GRANT ALL ON TABLE mrs_asmts_owners_vw TO postgres;
GRANT SELECT ON TABLE mrs_asmts_owners_vw TO micis_app;
GRANT SELECT ON TABLE mrs_asmts_owners_vw TO portal_app;
GRANT ALL ON TABLE mrs_asmts_owners_vw TO node_api;


--
-- Name: mrs_asmts_sorted_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_asmts_sorted_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_asmts_sorted_vw FROM postgres;
GRANT ALL ON TABLE mrs_asmts_sorted_vw TO postgres;
GRANT SELECT ON TABLE mrs_asmts_sorted_vw TO micis_app;
GRANT ALL ON TABLE mrs_asmts_sorted_vw TO node_api;


--
-- Name: mrs_ass_queue_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_ass_queue_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_ass_queue_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_ass_queue_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_ass_queue_counter TO node_api;


--
-- Name: mrs_assessment_event_types; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_assessment_event_types FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessment_event_types FROM postgres;
GRANT ALL ON TABLE mrs_assessment_event_types TO postgres;
GRANT ALL ON TABLE mrs_assessment_event_types TO node_api;


--
-- Name: mrs_assessment_event_types_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_assessment_event_types_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessment_event_types_vw FROM postgres;
GRANT ALL ON TABLE mrs_assessment_event_types_vw TO postgres;
GRANT SELECT ON TABLE mrs_assessment_event_types_vw TO micis_app;
GRANT ALL ON TABLE mrs_assessment_event_types_vw TO node_api;


--
-- Name: mrs_assessment_events; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_assessment_events FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessment_events FROM postgres;
GRANT ALL ON TABLE mrs_assessment_events TO postgres;
GRANT ALL ON TABLE mrs_assessment_events TO node_api;


--
-- Name: mrs_assessment_events_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_assessment_events_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_assessment_events_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_assessment_events_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_assessment_events_counter TO node_api;


--
-- Name: mrs_assessment_events_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_assessment_events_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessment_events_vw FROM postgres;
GRANT ALL ON TABLE mrs_assessment_events_vw TO postgres;
GRANT SELECT ON TABLE mrs_assessment_events_vw TO micis_app;
GRANT ALL ON TABLE mrs_assessment_events_vw TO node_api;


--
-- Name: mrs_assessment_orphans_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_assessment_orphans_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessment_orphans_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_assessment_orphans_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_assessment_orphans_vw TO micis_app;
GRANT ALL ON TABLE mrs_assessment_orphans_vw TO node_api;


--
-- Name: mrs_assessment_responses_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_assessment_responses_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessment_responses_hist FROM postgres;
GRANT ALL ON TABLE mrs_assessment_responses_hist TO postgres;
GRANT ALL ON TABLE mrs_assessment_responses_hist TO node_api;


--
-- Name: mrs_assessment_resp_hist_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_assessment_resp_hist_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessment_resp_hist_vw FROM postgres;
GRANT ALL ON TABLE mrs_assessment_resp_hist_vw TO postgres;
GRANT SELECT ON TABLE mrs_assessment_resp_hist_vw TO micis_app;
GRANT ALL ON TABLE mrs_assessment_resp_hist_vw TO node_api;


--
-- Name: mrs_assessment_responses_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_assessment_responses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessment_responses_vw FROM postgres;
GRANT ALL ON TABLE mrs_assessment_responses_vw TO postgres;
GRANT SELECT ON TABLE mrs_assessment_responses_vw TO p2_app;
GRANT SELECT ON TABLE mrs_assessment_responses_vw TO micis_app;
GRANT SELECT ON TABLE mrs_assessment_responses_vw TO portal_app;
GRANT ALL ON TABLE mrs_assessment_responses_vw TO node_api;


--
-- Name: mrs_assessments_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_assessments_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessments_hist FROM postgres;
GRANT ALL ON TABLE mrs_assessments_hist TO postgres;
GRANT ALL ON TABLE mrs_assessments_hist TO node_api;


--
-- Name: mrs_assessments_hist_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_assessments_hist_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessments_hist_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_assessments_hist_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_assessments_hist_vw TO micis_app;
GRANT ALL ON TABLE mrs_assessments_hist_vw TO node_api;


--
-- Name: mrs_assessments_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_assessments_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_assessments_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_assessments_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_assessments_vw TO p2_app;
GRANT SELECT ON TABLE mrs_assessments_vw TO micis_app;
GRANT SELECT ON TABLE mrs_assessments_vw TO portal_app;
GRANT SELECT ON TABLE mrs_assessments_vw TO transfer_app;
GRANT ALL ON TABLE mrs_assessments_vw TO node_api;


--
-- Name: mrs_auto_message_counter; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_auto_message_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_auto_message_counter FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_auto_message_counter TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_auto_message_counter TO node_api;


--
-- Name: mrs_auto_messages; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_auto_messages FROM PUBLIC;
REVOKE ALL ON TABLE mrs_auto_messages FROM ni_developers;
GRANT ALL ON TABLE mrs_auto_messages TO ni_developers;
GRANT ALL ON TABLE mrs_auto_messages TO node_api;


--
-- Name: mrs_auto_messages_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_auto_messages_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_auto_messages_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_auto_messages_hist TO ni_developers;
GRANT ALL ON TABLE mrs_auto_messages_hist TO node_api;


--
-- Name: mrs_auto_messages_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_auto_messages_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_auto_messages_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_auto_messages_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_auto_messages_vw TO micis_app;
GRANT SELECT ON TABLE mrs_auto_messages_vw TO portal_app;
GRANT ALL ON TABLE mrs_auto_messages_vw TO node_api;


--
-- Name: mrs_bcc; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_bcc FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_bcc FROM postgres;
GRANT ALL ON SEQUENCE mrs_bcc TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_bcc TO node_api;


--
-- Name: mrs_behavioral_uploads; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_behavioral_uploads FROM PUBLIC;
REVOKE ALL ON TABLE mrs_behavioral_uploads FROM postgres;
GRANT ALL ON TABLE mrs_behavioral_uploads TO postgres;
GRANT ALL ON TABLE mrs_behavioral_uploads TO node_api;


--
-- Name: mrs_behavioral_uploads_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_behavioral_uploads_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_behavioral_uploads_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_behavioral_uploads_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_behavioral_uploads_counter TO node_api;


--
-- Name: mrs_behavioral_uploads_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_behavioral_uploads_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_behavioral_uploads_hist FROM postgres;
GRANT ALL ON TABLE mrs_behavioral_uploads_hist TO postgres;
GRANT ALL ON TABLE mrs_behavioral_uploads_hist TO node_api;


--
-- Name: mrs_billing_codes_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_billing_codes_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_billing_codes_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_billing_codes_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_billing_codes_counter TO node_api;


--
-- Name: mrs_charge_code_site_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_charge_code_site_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_code_site_details FROM postgres;
GRANT ALL ON TABLE mrs_charge_code_site_details TO postgres;
GRANT ALL ON TABLE mrs_charge_code_site_details TO node_api;


--
-- Name: mrs_charge_code_site_details_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_charge_code_site_details_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_code_site_details_hist FROM postgres;
GRANT ALL ON TABLE mrs_charge_code_site_details_hist TO postgres;
GRANT ALL ON TABLE mrs_charge_code_site_details_hist TO node_api;


--
-- Name: mrs_charge_code_site_modalities; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_charge_code_site_modalities FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_code_site_modalities FROM postgres;
GRANT ALL ON TABLE mrs_charge_code_site_modalities TO postgres;
GRANT ALL ON TABLE mrs_charge_code_site_modalities TO node_api;


--
-- Name: mrs_charge_code_site_modalities_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_charge_code_site_modalities_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_code_site_modalities_hist FROM postgres;
GRANT ALL ON TABLE mrs_charge_code_site_modalities_hist TO postgres;
GRANT ALL ON TABLE mrs_charge_code_site_modalities_hist TO node_api;


--
-- Name: mrs_charge_code_study_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_charge_code_study_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_code_study_details FROM postgres;
GRANT ALL ON TABLE mrs_charge_code_study_details TO postgres;
GRANT ALL ON TABLE mrs_charge_code_study_details TO node_api;


--
-- Name: mrs_charge_code_study_details_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_charge_code_study_details_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_code_study_details_hist FROM postgres;
GRANT ALL ON TABLE mrs_charge_code_study_details_hist TO postgres;
GRANT ALL ON TABLE mrs_charge_code_study_details_hist TO node_api;


--
-- Name: mrs_charge_code_study_modalities; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_charge_code_study_modalities FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_code_study_modalities FROM postgres;
GRANT ALL ON TABLE mrs_charge_code_study_modalities TO postgres;
GRANT ALL ON TABLE mrs_charge_code_study_modalities TO node_api;


--
-- Name: mrs_charge_code_study_modalities_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_charge_code_study_modalities_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_code_study_modalities_hist FROM postgres;
GRANT ALL ON TABLE mrs_charge_code_study_modalities_hist TO postgres;
GRANT ALL ON TABLE mrs_charge_code_study_modalities_hist TO node_api;


--
-- Name: mrs_charge_codes; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_charge_codes FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_codes FROM postgres;
GRANT ALL ON TABLE mrs_charge_codes TO postgres;
GRANT ALL ON TABLE mrs_charge_codes TO node_api;


--
-- Name: mrs_charge_codes_sites_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_charge_codes_sites_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_codes_sites_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_charge_codes_sites_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_charge_codes_sites_vw TO micis_app;
GRANT ALL ON TABLE mrs_charge_codes_sites_vw TO node_api;


--
-- Name: mrs_study_status; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_status FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_status FROM postgres;
GRANT ALL ON TABLE mrs_study_status TO postgres;
GRANT ALL ON TABLE mrs_study_status TO node_api;


--
-- Name: mrs_charge_codes_studies_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_charge_codes_studies_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_codes_studies_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_charge_codes_studies_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_charge_codes_studies_vw TO micis_app;
GRANT ALL ON TABLE mrs_charge_codes_studies_vw TO node_api;


--
-- Name: mrs_charge_codes_all_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_charge_codes_all_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_codes_all_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_charge_codes_all_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_charge_codes_all_vw TO micis_app;
GRANT ALL ON TABLE mrs_charge_codes_all_vw TO node_api;


--
-- Name: mrs_charge_codes_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_charge_codes_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_codes_hist FROM postgres;
GRANT ALL ON TABLE mrs_charge_codes_hist TO postgres;
GRANT ALL ON TABLE mrs_charge_codes_hist TO node_api;


--
-- Name: mrs_charge_codes_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_charge_codes_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_charge_codes_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_charge_codes_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_charge_codes_vw TO micis_app;
GRANT ALL ON TABLE mrs_charge_codes_vw TO node_api;


--
-- Name: mrs_client_assessment_backups; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_client_assessment_backups FROM PUBLIC;
REVOKE ALL ON TABLE mrs_client_assessment_backups FROM ni_developers;
GRANT ALL ON TABLE mrs_client_assessment_backups TO ni_developers;
GRANT ALL ON TABLE mrs_client_assessment_backups TO node_api;


--
-- Name: mrs_client_assessment_backups_backup_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_client_assessment_backups_backup_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_client_assessment_backups_backup_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_client_assessment_backups_backup_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_client_assessment_backups_backup_id_seq TO node_api;


--
-- Name: mrs_client_assessment_backups_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_client_assessment_backups_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_client_assessment_backups_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_client_assessment_backups_hist TO ni_developers;
GRANT ALL ON TABLE mrs_client_assessment_backups_hist TO node_api;


--
-- Name: mrs_client_assessment_backups_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_client_assessment_backups_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_client_assessment_backups_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_client_assessment_backups_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_client_assessment_backups_vw TO micis_app;
GRANT ALL ON TABLE mrs_client_assessment_backups_vw TO node_api;


--
-- Name: mrs_client_devices; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_client_devices FROM PUBLIC;
REVOKE ALL ON TABLE mrs_client_devices FROM ni_developers;
GRANT ALL ON TABLE mrs_client_devices TO ni_developers;
GRANT ALL ON TABLE mrs_client_devices TO node_api;


--
-- Name: mrs_client_devices_device_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_client_devices_device_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_client_devices_device_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_client_devices_device_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_client_devices_device_id_seq TO node_api;


--
-- Name: mrs_client_devices_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_client_devices_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_client_devices_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_client_devices_hist TO ni_developers;
GRANT ALL ON TABLE mrs_client_devices_hist TO node_api;


--
-- Name: mrs_client_devices_hist_device_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_client_devices_hist_device_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_client_devices_hist_device_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_client_devices_hist_device_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_client_devices_hist_device_id_seq TO node_api;


--
-- Name: mrs_client_devices_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_client_devices_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_client_devices_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_client_devices_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_client_devices_vw TO micis_app;
GRANT ALL ON TABLE mrs_client_devices_vw TO node_api;


--
-- Name: mrs_client_error_log; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_client_error_log FROM PUBLIC;
REVOKE ALL ON TABLE mrs_client_error_log FROM postgres;
GRANT ALL ON TABLE mrs_client_error_log TO postgres;
GRANT ALL ON TABLE mrs_client_error_log TO node_api;


--
-- Name: mrs_coins_join_rdoc_mapping_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_coins_join_rdoc_mapping_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_coins_join_rdoc_mapping_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_coins_join_rdoc_mapping_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_coins_join_rdoc_mapping_vw TO p2_app;
GRANT SELECT ON TABLE mrs_coins_join_rdoc_mapping_vw TO micis_app;
GRANT SELECT ON TABLE mrs_coins_join_rdoc_mapping_vw TO portal_app;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE mrs_coins_join_rdoc_mapping_vw TO node_api;


--
-- Name: mrs_collection_techniques_collection_technique_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_collection_techniques_collection_technique_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_collection_techniques_collection_technique_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_collection_techniques_collection_technique_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_collection_techniques_collection_technique_id_seq TO node_api;


--
-- Name: mrs_collection_techniques_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_collection_techniques_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_collection_techniques_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_collection_techniques_hist TO ni_developers;
GRANT ALL ON TABLE mrs_collection_techniques_hist TO node_api;


--
-- Name: mrs_collection_techniques_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_collection_techniques_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_collection_techniques_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_collection_techniques_vw TO ni_developers;
GRANT ALL ON TABLE mrs_collection_techniques_vw TO postgres;
GRANT SELECT ON TABLE mrs_collection_techniques_vw TO micis_app;
GRANT SELECT ON TABLE mrs_collection_techniques_vw TO portal_app;
GRANT ALL ON TABLE mrs_collection_techniques_vw TO node_api;


--
-- Name: mrs_configs; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_configs FROM PUBLIC;
REVOKE ALL ON TABLE mrs_configs FROM postgres;
GRANT ALL ON TABLE mrs_configs TO postgres;
GRANT ALL ON TABLE mrs_configs TO node_api;


--
-- Name: mrs_configs_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_configs_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_configs_hist FROM postgres;
GRANT ALL ON TABLE mrs_configs_hist TO postgres;
GRANT ALL ON TABLE mrs_configs_hist TO node_api;


--
-- Name: mrs_configs_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_configs_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_configs_vw FROM postgres;
GRANT ALL ON TABLE mrs_configs_vw TO postgres;
GRANT SELECT ON TABLE mrs_configs_vw TO micis_app;
GRANT SELECT ON TABLE mrs_configs_vw TO portal_app;
GRANT ALL ON TABLE mrs_configs_vw TO node_api;


--
-- Name: mrs_person_role_det_addresses; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_role_det_addresses FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_role_det_addresses FROM postgres;
GRANT ALL ON TABLE mrs_person_role_det_addresses TO postgres;
GRANT ALL ON TABLE mrs_person_role_det_addresses TO node_api;


--
-- Name: mrs_person_role_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_role_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_role_details FROM postgres;
GRANT ALL ON TABLE mrs_person_role_details TO postgres;
GRANT ALL ON TABLE mrs_person_role_details TO node_api;


--
-- Name: mrs_personaddress_types; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_personaddress_types FROM PUBLIC;
REVOKE ALL ON TABLE mrs_personaddress_types FROM postgres;
GRANT ALL ON TABLE mrs_personaddress_types TO postgres;
GRANT ALL ON TABLE mrs_personaddress_types TO node_api;


--
-- Name: mrs_personaddresses; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_personaddresses FROM PUBLIC;
REVOKE ALL ON TABLE mrs_personaddresses FROM postgres;
GRANT ALL ON TABLE mrs_personaddresses TO postgres;
GRANT ALL ON TABLE mrs_personaddresses TO node_api;


--
-- Name: mrs_persons; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_persons FROM PUBLIC;
REVOKE ALL ON TABLE mrs_persons FROM postgres;
GRANT ALL ON TABLE mrs_persons TO postgres;
GRANT ALL ON TABLE mrs_persons TO node_api;


--
-- Name: mrs_contacts_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_contacts_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_contacts_vw FROM postgres;
GRANT ALL ON TABLE mrs_contacts_vw TO postgres;
GRANT SELECT ON TABLE mrs_contacts_vw TO micis_app;
GRANT SELECT ON TABLE mrs_contacts_vw TO portal_app;
GRANT ALL ON TABLE mrs_contacts_vw TO node_api;


--
-- Name: mrs_instrument_code_responses; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_code_responses FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_code_responses FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_code_responses TO ni_developers;
GRANT ALL ON TABLE mrs_instrument_code_responses TO node_api;


--
-- Name: mrs_critical_responses_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_critical_responses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_critical_responses_vw FROM postgres;
GRANT ALL ON TABLE mrs_critical_responses_vw TO postgres;
GRANT SELECT ON TABLE mrs_critical_responses_vw TO micis_app;
GRANT ALL ON TABLE mrs_critical_responses_vw TO node_api;


--
-- Name: mrs_data_domains; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_data_domains FROM PUBLIC;
REVOKE ALL ON TABLE mrs_data_domains FROM postgres;
GRANT ALL ON TABLE mrs_data_domains TO postgres;
GRANT ALL ON TABLE mrs_data_domains TO node_api;


--
-- Name: mrs_data_domains_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_data_domains_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_data_domains_hist FROM postgres;
GRANT ALL ON TABLE mrs_data_domains_hist TO postgres;
GRANT ALL ON TABLE mrs_data_domains_hist TO node_api;


--
-- Name: mrs_data_domains_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_data_domains_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_data_domains_vw FROM postgres;
GRANT ALL ON TABLE mrs_data_domains_vw TO postgres;
GRANT SELECT ON TABLE mrs_data_domains_vw TO micis_app;
GRANT SELECT ON TABLE mrs_data_domains_vw TO portal_app;
GRANT ALL ON TABLE mrs_data_domains_vw TO node_api;


--
-- Name: mrs_data_qc_constraints; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_data_qc_constraints FROM PUBLIC;
REVOKE ALL ON TABLE mrs_data_qc_constraints FROM ni_developers;
GRANT ALL ON TABLE mrs_data_qc_constraints TO ni_developers;
GRANT ALL ON TABLE mrs_data_qc_constraints TO node_api;


--
-- Name: mrs_data_qc_constraints_constraint_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_data_qc_constraints_constraint_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_data_qc_constraints_constraint_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_data_qc_constraints_constraint_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_data_qc_constraints_constraint_id_seq TO node_api;


--
-- Name: mrs_data_qc_constraints_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_data_qc_constraints_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_data_qc_constraints_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_data_qc_constraints_hist TO ni_developers;
GRANT ALL ON TABLE mrs_data_qc_constraints_hist TO node_api;


--
-- Name: mrs_scan_data_types; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_data_types FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_data_types FROM postgres;
GRANT ALL ON TABLE mrs_scan_data_types TO postgres;
GRANT ALL ON TABLE mrs_scan_data_types TO node_api;


--
-- Name: mrs_series_data; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_data FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_data FROM postgres;
GRANT ALL ON TABLE mrs_series_data TO postgres;
GRANT ALL ON TABLE mrs_series_data TO node_api;


--
-- Name: mrs_data_qc_constraints_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_data_qc_constraints_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_data_qc_constraints_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_data_qc_constraints_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_data_qc_constraints_vw TO micis_app;
GRANT SELECT ON TABLE mrs_data_qc_constraints_vw TO portal_app;
GRANT ALL ON TABLE mrs_data_qc_constraints_vw TO node_api;


--
-- Name: mrs_dataentry_types; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_dataentry_types FROM PUBLIC;
REVOKE ALL ON TABLE mrs_dataentry_types FROM postgres;
GRANT ALL ON TABLE mrs_dataentry_types TO postgres;
GRANT ALL ON TABLE mrs_dataentry_types TO node_api;


--
-- Name: mrs_dataentry_types_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_dataentry_types_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_dataentry_types_hist FROM postgres;
GRANT ALL ON TABLE mrs_dataentry_types_hist TO postgres;
GRANT ALL ON TABLE mrs_dataentry_types_hist TO node_api;


--
-- Name: mrs_dataentry_types_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_dataentry_types_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_dataentry_types_vw FROM postgres;
GRANT ALL ON TABLE mrs_dataentry_types_vw TO postgres;
GRANT SELECT ON TABLE mrs_dataentry_types_vw TO micis_app;
GRANT SELECT ON TABLE mrs_dataentry_types_vw TO portal_app;
GRANT ALL ON TABLE mrs_dataentry_types_vw TO node_api;


--
-- Name: mrs_disambig_asmts_nomatch; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_disambig_asmts_nomatch FROM PUBLIC;
REVOKE ALL ON TABLE mrs_disambig_asmts_nomatch FROM postgres;
GRANT ALL ON TABLE mrs_disambig_asmts_nomatch TO postgres;
GRANT ALL ON TABLE mrs_disambig_asmts_nomatch TO node_api;


--
-- Name: mrs_doc_category_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_doc_category_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_doc_category_details FROM postgres;
GRANT ALL ON TABLE mrs_doc_category_details TO postgres;
GRANT ALL ON TABLE mrs_doc_category_details TO node_api;


--
-- Name: mrs_doc_cat_details_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_doc_cat_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_doc_cat_details_vw FROM postgres;
GRANT ALL ON TABLE mrs_doc_cat_details_vw TO postgres;
GRANT SELECT ON TABLE mrs_doc_cat_details_vw TO micis_app;
GRANT SELECT ON TABLE mrs_doc_cat_details_vw TO portal_app;
GRANT ALL ON TABLE mrs_doc_cat_details_vw TO node_api;


--
-- Name: mrs_doc_proj_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_doc_proj_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_doc_proj_details FROM postgres;
GRANT ALL ON TABLE mrs_doc_proj_details TO postgres;
GRANT ALL ON TABLE mrs_doc_proj_details TO node_api;


--
-- Name: mrs_doc_proj_details_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_doc_proj_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_doc_proj_details_vw FROM postgres;
GRANT ALL ON TABLE mrs_doc_proj_details_vw TO postgres;
GRANT SELECT ON TABLE mrs_doc_proj_details_vw TO micis_app;
GRANT SELECT ON TABLE mrs_doc_proj_details_vw TO portal_app;
GRANT ALL ON TABLE mrs_doc_proj_details_vw TO node_api;


--
-- Name: mrs_document_categories; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_document_categories FROM PUBLIC;
REVOKE ALL ON TABLE mrs_document_categories FROM postgres;
GRANT ALL ON TABLE mrs_document_categories TO postgres;
GRANT ALL ON TABLE mrs_document_categories TO node_api;


--
-- Name: mrs_document_categories_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_document_categories_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_document_categories_vw FROM postgres;
GRANT ALL ON TABLE mrs_document_categories_vw TO postgres;
GRANT SELECT ON TABLE mrs_document_categories_vw TO micis_app;
GRANT SELECT ON TABLE mrs_document_categories_vw TO portal_app;
GRANT ALL ON TABLE mrs_document_categories_vw TO node_api;


--
-- Name: mrs_documents; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_documents FROM PUBLIC;
REVOKE ALL ON TABLE mrs_documents FROM postgres;
GRANT ALL ON TABLE mrs_documents TO postgres;
GRANT ALL ON TABLE mrs_documents TO node_api;


--
-- Name: mrs_documents_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_documents_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_documents_vw FROM postgres;
GRANT ALL ON TABLE mrs_documents_vw TO postgres;
GRANT SELECT ON TABLE mrs_documents_vw TO micis_app;
GRANT SELECT ON TABLE mrs_documents_vw TO portal_app;
GRANT ALL ON TABLE mrs_documents_vw TO node_api;


--
-- Name: mrs_drug_categories; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_drug_categories FROM PUBLIC;
REVOKE ALL ON TABLE mrs_drug_categories FROM postgres;
GRANT ALL ON TABLE mrs_drug_categories TO postgres;
GRANT ALL ON TABLE mrs_drug_categories TO node_api;


--
-- Name: mrs_drug_categories_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_drug_categories_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_drug_categories_vw FROM postgres;
GRANT ALL ON TABLE mrs_drug_categories_vw TO postgres;
GRANT SELECT ON TABLE mrs_drug_categories_vw TO micis_app;
GRANT ALL ON TABLE mrs_drug_categories_vw TO node_api;


--
-- Name: mrs_drug_prop_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_drug_prop_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_drug_prop_details FROM postgres;
GRANT ALL ON TABLE mrs_drug_prop_details TO postgres;
GRANT ALL ON TABLE mrs_drug_prop_details TO node_api;


--
-- Name: mrs_drug_prop_details_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_drug_prop_details_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_drug_prop_details_hist FROM postgres;
GRANT ALL ON TABLE mrs_drug_prop_details_hist TO postgres;
GRANT ALL ON TABLE mrs_drug_prop_details_hist TO node_api;


--
-- Name: mrs_drug_properties; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_drug_properties FROM PUBLIC;
REVOKE ALL ON TABLE mrs_drug_properties FROM postgres;
GRANT ALL ON TABLE mrs_drug_properties TO postgres;
GRANT ALL ON TABLE mrs_drug_properties TO node_api;


--
-- Name: mrs_drug_properties_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_drug_properties_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_drug_properties_hist FROM postgres;
GRANT ALL ON TABLE mrs_drug_properties_hist TO postgres;
GRANT ALL ON TABLE mrs_drug_properties_hist TO node_api;


--
-- Name: mrs_dsm_codes; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_dsm_codes FROM PUBLIC;
REVOKE ALL ON TABLE mrs_dsm_codes FROM postgres;
GRANT ALL ON TABLE mrs_dsm_codes TO postgres;
GRANT ALL ON TABLE mrs_dsm_codes TO node_api;


--
-- Name: mrs_dsm_codes_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_dsm_codes_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_dsm_codes_vw FROM postgres;
GRANT ALL ON TABLE mrs_dsm_codes_vw TO postgres;
GRANT SELECT ON TABLE mrs_dsm_codes_vw TO p2_app;
GRANT SELECT ON TABLE mrs_dsm_codes_vw TO micis_app;
GRANT ALL ON TABLE mrs_dsm_codes_vw TO node_api;


--
-- Name: mrs_dsm_groups; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_dsm_groups FROM PUBLIC;
REVOKE ALL ON TABLE mrs_dsm_groups FROM postgres;
GRANT ALL ON TABLE mrs_dsm_groups TO postgres;
GRANT ALL ON TABLE mrs_dsm_groups TO node_api;


--
-- Name: mrs_dsm_groups_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_dsm_groups_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_dsm_groups_vw FROM postgres;
GRANT ALL ON TABLE mrs_dsm_groups_vw TO postgres;
GRANT SELECT ON TABLE mrs_dsm_groups_vw TO p2_app;
GRANT SELECT ON TABLE mrs_dsm_groups_vw TO micis_app;
GRANT ALL ON TABLE mrs_dsm_groups_vw TO node_api;


--
-- Name: mrs_dsm_specifiers; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_dsm_specifiers FROM PUBLIC;
REVOKE ALL ON TABLE mrs_dsm_specifiers FROM postgres;
GRANT ALL ON TABLE mrs_dsm_specifiers TO postgres;
GRANT ALL ON TABLE mrs_dsm_specifiers TO node_api;


--
-- Name: mrs_dsm_specifiers_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_dsm_specifiers_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_dsm_specifiers_vw FROM postgres;
GRANT ALL ON TABLE mrs_dsm_specifiers_vw TO postgres;
GRANT SELECT ON TABLE mrs_dsm_specifiers_vw TO p2_app;
GRANT SELECT ON TABLE mrs_dsm_specifiers_vw TO micis_app;
GRANT ALL ON TABLE mrs_dsm_specifiers_vw TO node_api;


--
-- Name: mrs_eeg_devices_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_devices_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_devices_hist FROM postgres;
GRANT ALL ON TABLE mrs_eeg_devices_hist TO postgres;
GRANT ALL ON TABLE mrs_eeg_devices_hist TO node_api;


--
-- Name: mrs_eeg_devices_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_devices_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_devices_vw FROM postgres;
GRANT ALL ON TABLE mrs_eeg_devices_vw TO postgres;
GRANT SELECT ON TABLE mrs_eeg_devices_vw TO micis_app;
GRANT ALL ON TABLE mrs_eeg_devices_vw TO node_api;


--
-- Name: mrs_eeg_series; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_series FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_series FROM postgres;
GRANT ALL ON TABLE mrs_eeg_series TO postgres;
GRANT ALL ON TABLE mrs_eeg_series TO node_api;


--
-- Name: mrs_eeg_series_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_series_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_series_hist FROM postgres;
GRANT ALL ON TABLE mrs_eeg_series_hist TO postgres;
GRANT ALL ON TABLE mrs_eeg_series_hist TO node_api;


--
-- Name: mrs_eeg_series_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_series_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_series_vw FROM postgres;
GRANT ALL ON TABLE mrs_eeg_series_vw TO postgres;
GRANT SELECT ON TABLE mrs_eeg_series_vw TO micis_app;
GRANT ALL ON TABLE mrs_eeg_series_vw TO node_api;


--
-- Name: mrs_eeg_sessions; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_sessions FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_sessions FROM postgres;
GRANT ALL ON TABLE mrs_eeg_sessions TO postgres;
GRANT ALL ON TABLE mrs_eeg_sessions TO node_api;


--
-- Name: mrs_eeg_sessions_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_sessions_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_sessions_hist FROM postgres;
GRANT ALL ON TABLE mrs_eeg_sessions_hist TO postgres;
GRANT ALL ON TABLE mrs_eeg_sessions_hist TO node_api;


--
-- Name: mrs_eeg_sessions_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_sessions_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_sessions_vw FROM postgres;
GRANT ALL ON TABLE mrs_eeg_sessions_vw TO postgres;
GRANT SELECT ON TABLE mrs_eeg_sessions_vw TO micis_app;
GRANT ALL ON TABLE mrs_eeg_sessions_vw TO node_api;


--
-- Name: mrs_eeg_study_tasks; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_study_tasks FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_study_tasks FROM postgres;
GRANT ALL ON TABLE mrs_eeg_study_tasks TO postgres;
GRANT ALL ON TABLE mrs_eeg_study_tasks TO node_api;


--
-- Name: mrs_eeg_study_tasks_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_study_tasks_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_study_tasks_hist FROM postgres;
GRANT ALL ON TABLE mrs_eeg_study_tasks_hist TO postgres;
GRANT ALL ON TABLE mrs_eeg_study_tasks_hist TO node_api;


--
-- Name: mrs_eeg_study_tasks_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_eeg_study_tasks_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_eeg_study_tasks_vw FROM postgres;
GRANT ALL ON TABLE mrs_eeg_study_tasks_vw TO postgres;
GRANT SELECT ON TABLE mrs_eeg_study_tasks_vw TO micis_app;
GRANT ALL ON TABLE mrs_eeg_study_tasks_vw TO node_api;


--
-- Name: mrs_generic_category_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_generic_category_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_generic_category_details FROM postgres;
GRANT ALL ON TABLE mrs_generic_category_details TO postgres;
GRANT ALL ON TABLE mrs_generic_category_details TO node_api;


--
-- Name: mrs_generic_drugs; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_generic_drugs FROM PUBLIC;
REVOKE ALL ON TABLE mrs_generic_drugs FROM postgres;
GRANT ALL ON TABLE mrs_generic_drugs TO postgres;
GRANT ALL ON TABLE mrs_generic_drugs TO node_api;


--
-- Name: mrs_generic_cat_details_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_generic_cat_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_generic_cat_details_vw FROM postgres;
GRANT ALL ON TABLE mrs_generic_cat_details_vw TO postgres;
GRANT SELECT ON TABLE mrs_generic_cat_details_vw TO micis_app;
GRANT ALL ON TABLE mrs_generic_cat_details_vw TO node_api;


--
-- Name: mrs_generic_drugs_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_generic_drugs_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_generic_drugs_vw FROM postgres;
GRANT ALL ON TABLE mrs_generic_drugs_vw TO postgres;
GRANT SELECT ON TABLE mrs_generic_drugs_vw TO micis_app;
GRANT ALL ON TABLE mrs_generic_drugs_vw TO node_api;


--
-- Name: mrs_generic_trade_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_generic_trade_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_generic_trade_details FROM postgres;
GRANT ALL ON TABLE mrs_generic_trade_details TO postgres;
GRANT ALL ON TABLE mrs_generic_trade_details TO node_api;


--
-- Name: mrs_trade_names; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_trade_names FROM PUBLIC;
REVOKE ALL ON TABLE mrs_trade_names FROM postgres;
GRANT ALL ON TABLE mrs_trade_names TO postgres;
GRANT ALL ON TABLE mrs_trade_names TO node_api;


--
-- Name: mrs_generic_trade_details_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_generic_trade_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_generic_trade_details_vw FROM postgres;
GRANT ALL ON TABLE mrs_generic_trade_details_vw TO postgres;
GRANT SELECT ON TABLE mrs_generic_trade_details_vw TO micis_app;
GRANT ALL ON TABLE mrs_generic_trade_details_vw TO node_api;


--
-- Name: mrs_image_headers; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_image_headers FROM PUBLIC;
REVOKE ALL ON TABLE mrs_image_headers FROM postgres;
GRANT ALL ON TABLE mrs_image_headers TO postgres;
GRANT ALL ON TABLE mrs_image_headers TO node_api;


--
-- Name: mrs_image_headers_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_image_headers_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_image_headers_hist FROM postgres;
GRANT ALL ON TABLE mrs_image_headers_hist TO postgres;
GRANT ALL ON TABLE mrs_image_headers_hist TO node_api;


--
-- Name: mrs_images; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_images FROM PUBLIC;
REVOKE ALL ON TABLE mrs_images FROM postgres;
GRANT ALL ON TABLE mrs_images TO postgres;
GRANT ALL ON TABLE mrs_images TO node_api;


--
-- Name: mrs_images_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_images_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_images_hist FROM postgres;
GRANT ALL ON TABLE mrs_images_hist TO postgres;
GRANT ALL ON TABLE mrs_images_hist TO node_api;


--
-- Name: mrs_inst_code_responses_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_inst_code_responses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_inst_code_responses_vw FROM postgres;
GRANT ALL ON TABLE mrs_inst_code_responses_vw TO postgres;
GRANT SELECT ON TABLE mrs_inst_code_responses_vw TO p2_app;
GRANT SELECT ON TABLE mrs_inst_code_responses_vw TO micis_app;
GRANT SELECT ON TABLE mrs_inst_code_responses_vw TO portal_app;
GRANT ALL ON TABLE mrs_inst_code_responses_vw TO node_api;


--
-- Name: mrs_inst_ques_loop_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_inst_ques_loop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_inst_ques_loop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrs_inst_ques_loop_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_inst_ques_loop_id_seq TO node_api;


--
-- Name: mrs_instrument_question_jumps; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_question_jumps FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_jumps FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_question_jumps TO ni_developers;
GRANT ALL ON TABLE mrs_instrument_question_jumps TO node_api;


--
-- Name: mrs_inst_question_jumps_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_inst_question_jumps_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_inst_question_jumps_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_inst_question_jumps_vw TO ni_developers;
GRANT ALL ON TABLE mrs_inst_question_jumps_vw TO postgres;
GRANT SELECT ON TABLE mrs_inst_question_jumps_vw TO micis_app;
GRANT SELECT ON TABLE mrs_inst_question_jumps_vw TO p2_app;
GRANT ALL ON TABLE mrs_inst_question_jumps_vw TO node_api;


--
-- Name: mrs_instrument_question_score; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_question_score FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_score FROM postgres;
GRANT ALL ON TABLE mrs_instrument_question_score TO postgres;
GRANT ALL ON TABLE mrs_instrument_question_score TO node_api;


--
-- Name: mrs_inst_question_score_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_inst_question_score_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_inst_question_score_vw FROM postgres;
GRANT ALL ON TABLE mrs_inst_question_score_vw TO postgres;
GRANT SELECT ON TABLE mrs_inst_question_score_vw TO micis_app;
GRANT SELECT ON TABLE mrs_inst_question_score_vw TO portal_app;
GRANT ALL ON TABLE mrs_inst_question_score_vw TO node_api;


--
-- Name: mrs_inst_questions_dets_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_inst_questions_dets_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_inst_questions_dets_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_inst_questions_dets_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_inst_questions_dets_vw TO p2_app;
GRANT SELECT ON TABLE mrs_inst_questions_dets_vw TO micis_app;
GRANT SELECT ON TABLE mrs_inst_questions_dets_vw TO portal_app;
GRANT ALL ON TABLE mrs_inst_questions_dets_vw TO node_api;


--
-- Name: mrs_inst_questions_lov_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_inst_questions_lov_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_inst_questions_lov_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_inst_questions_lov_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_inst_questions_lov_vw TO p2_app;
GRANT SELECT ON TABLE mrs_inst_questions_lov_vw TO micis_app;
GRANT SELECT ON TABLE mrs_inst_questions_lov_vw TO portal_app;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE mrs_inst_questions_lov_vw TO node_api;


--
-- Name: mrs_inst_questions_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_inst_questions_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_inst_questions_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_inst_questions_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_inst_questions_vw TO p2_app;
GRANT SELECT ON TABLE mrs_inst_questions_vw TO micis_app;
GRANT SELECT ON TABLE mrs_inst_questions_vw TO portal_app;
GRANT ALL ON TABLE mrs_inst_questions_vw TO node_api;


--
-- Name: mrs_instrument_sections; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_sections FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_sections FROM postgres;
GRANT ALL ON TABLE mrs_instrument_sections TO postgres;
GRANT ALL ON TABLE mrs_instrument_sections TO node_api;


--
-- Name: mrs_inst_section_details_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_inst_section_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_inst_section_details_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_inst_section_details_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_inst_section_details_vw TO p2_app;
GRANT SELECT ON TABLE mrs_inst_section_details_vw TO micis_app;
GRANT SELECT ON TABLE mrs_inst_section_details_vw TO portal_app;
GRANT ALL ON TABLE mrs_inst_section_details_vw TO postgres;
GRANT ALL ON TABLE mrs_inst_section_details_vw TO node_api;


--
-- Name: mrs_inst_sections_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_inst_sections_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_inst_sections_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_inst_sections_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_inst_sections_vw TO p2_app;
GRANT SELECT ON TABLE mrs_inst_sections_vw TO micis_app;
GRANT SELECT ON TABLE mrs_inst_sections_vw TO portal_app;
GRANT ALL ON TABLE mrs_inst_sections_vw TO node_api;


--
-- Name: mrs_inst_studies_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_inst_studies_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_inst_studies_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_inst_studies_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_inst_studies_vw TO p2_app;
GRANT SELECT ON TABLE mrs_inst_studies_vw TO micis_app;
GRANT SELECT ON TABLE mrs_inst_studies_vw TO portal_app;
GRANT ALL ON TABLE mrs_inst_studies_vw TO node_api;


--
-- Name: mrs_inst_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_inst_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_inst_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_inst_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_inst_vw TO p2_app;
GRANT SELECT ON TABLE mrs_inst_vw TO micis_app;
GRANT SELECT ON TABLE mrs_inst_vw TO portal_app;
GRANT SELECT ON TABLE mrs_inst_vw TO transfer_app;
GRANT ALL ON TABLE mrs_inst_vw TO node_api;


--
-- Name: mrs_instrument_code_responses_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_code_responses_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_code_responses_hist FROM postgres;
GRANT ALL ON TABLE mrs_instrument_code_responses_hist TO postgres;
GRANT ALL ON TABLE mrs_instrument_code_responses_hist TO node_api;


--
-- Name: mrs_instrument_code_responses_response_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_instrument_code_responses_response_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_instrument_code_responses_response_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_instrument_code_responses_response_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_instrument_code_responses_response_id_seq TO node_api;


--
-- Name: mrs_instrument_question_jumps_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_question_jumps_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_jumps_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_question_jumps_hist TO ni_developers;
GRANT ALL ON TABLE mrs_instrument_question_jumps_hist TO node_api;


--
-- Name: mrs_instrument_question_jumps_question_jump_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_instrument_question_jumps_question_jump_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_instrument_question_jumps_question_jump_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_instrument_question_jumps_question_jump_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_instrument_question_jumps_question_jump_id_seq TO node_api;


--
-- Name: mrs_instrument_question_loops; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_question_loops FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_loops FROM postgres;
GRANT ALL ON TABLE mrs_instrument_question_loops TO postgres;
GRANT ALL ON TABLE mrs_instrument_question_loops TO node_api;


--
-- Name: mrs_instrument_question_loops_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_question_loops_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_loops_hist FROM postgres;
GRANT ALL ON TABLE mrs_instrument_question_loops_hist TO postgres;
GRANT ALL ON TABLE mrs_instrument_question_loops_hist TO node_api;


--
-- Name: mrs_instrument_question_loops_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_question_loops_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_loops_vw FROM postgres;
GRANT ALL ON TABLE mrs_instrument_question_loops_vw TO postgres;
GRANT SELECT ON TABLE mrs_instrument_question_loops_vw TO p2_app;
GRANT SELECT ON TABLE mrs_instrument_question_loops_vw TO micis_app;
GRANT ALL ON TABLE mrs_instrument_question_loops_vw TO node_api;


--
-- Name: mrs_instrument_question_media; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_question_media FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_media FROM postgres;
GRANT ALL ON TABLE mrs_instrument_question_media TO postgres;
GRANT ALL ON TABLE mrs_instrument_question_media TO node_api;


--
-- Name: mrs_instrument_question_media_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_question_media_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_media_hist FROM postgres;
GRANT ALL ON TABLE mrs_instrument_question_media_hist TO postgres;
GRANT ALL ON TABLE mrs_instrument_question_media_hist TO node_api;


--
-- Name: mrs_instrument_question_media_question_media_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_instrument_question_media_question_media_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_instrument_question_media_question_media_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrs_instrument_question_media_question_media_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_instrument_question_media_question_media_id_seq TO node_api;


--
-- Name: mrs_instrument_question_media_types; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_question_media_types FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_media_types FROM postgres;
GRANT ALL ON TABLE mrs_instrument_question_media_types TO postgres;
GRANT ALL ON TABLE mrs_instrument_question_media_types TO node_api;


--
-- Name: mrs_instrument_question_media_types_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_question_media_types_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_media_types_hist FROM postgres;
GRANT ALL ON TABLE mrs_instrument_question_media_types_hist TO postgres;
GRANT ALL ON TABLE mrs_instrument_question_media_types_hist TO node_api;


--
-- Name: mrs_instrument_question_media_types_media_type_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_instrument_question_media_types_media_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_instrument_question_media_types_media_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrs_instrument_question_media_types_media_type_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_instrument_question_media_types_media_type_id_seq TO node_api;


--
-- Name: mrs_instrument_question_media_types_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_question_media_types_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_media_types_vw FROM postgres;
GRANT ALL ON TABLE mrs_instrument_question_media_types_vw TO postgres;
GRANT SELECT ON TABLE mrs_instrument_question_media_types_vw TO micis_app;
GRANT SELECT ON TABLE mrs_instrument_question_media_types_vw TO p2_app;
GRANT ALL ON TABLE mrs_instrument_question_media_types_vw TO node_api;


--
-- Name: mrs_instrument_question_media_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_question_media_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_media_vw FROM postgres;
GRANT ALL ON TABLE mrs_instrument_question_media_vw TO postgres;
GRANT SELECT ON TABLE mrs_instrument_question_media_vw TO micis_app;
GRANT SELECT ON TABLE mrs_instrument_question_media_vw TO p2_app;
GRANT ALL ON TABLE mrs_instrument_question_media_vw TO node_api;


--
-- Name: mrs_instrument_question_response_format; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_question_response_format FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_response_format FROM postgres;
GRANT ALL ON TABLE mrs_instrument_question_response_format TO postgres;
GRANT ALL ON TABLE mrs_instrument_question_response_format TO node_api;


--
-- Name: mrs_instrument_question_response_format_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_question_response_format_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_question_response_format_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_question_response_format_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_instrument_question_response_format_vw TO p2_app;
GRANT SELECT ON TABLE mrs_instrument_question_response_format_vw TO micis_app;
GRANT ALL ON TABLE mrs_instrument_question_response_format_vw TO node_api;


--
-- Name: mrs_instrument_questions_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_questions_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_questions_hist FROM postgres;
GRANT ALL ON TABLE mrs_instrument_questions_hist TO postgres;
GRANT ALL ON TABLE mrs_instrument_questions_hist TO node_api;


--
-- Name: mrs_instrument_section_details_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_section_details_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_section_details_hist FROM postgres;
GRANT ALL ON TABLE mrs_instrument_section_details_hist TO postgres;
GRANT ALL ON TABLE mrs_instrument_section_details_hist TO node_api;


--
-- Name: mrs_instrument_sections_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instrument_sections_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_sections_hist FROM postgres;
GRANT ALL ON TABLE mrs_instrument_sections_hist TO postgres;
GRANT ALL ON TABLE mrs_instrument_sections_hist TO node_api;


--
-- Name: mrs_instrument_table_cols; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_table_cols FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_table_cols FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_table_cols TO ni_developers;
GRANT ALL ON TABLE mrs_instrument_table_cols TO node_api;


--
-- Name: mrs_instrument_table_cols_counter; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_instrument_table_cols_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_instrument_table_cols_counter FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_instrument_table_cols_counter TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_instrument_table_cols_counter TO node_api;


--
-- Name: mrs_instrument_table_cols_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_table_cols_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_table_cols_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_table_cols_hist TO ni_developers;
GRANT ALL ON TABLE mrs_instrument_table_cols_hist TO node_api;


--
-- Name: mrs_instrument_table_cols_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_table_cols_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_table_cols_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_table_cols_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_instrument_table_cols_vw TO p2_app;
GRANT SELECT ON TABLE mrs_instrument_table_cols_vw TO micis_app;
GRANT SELECT ON TABLE mrs_instrument_table_cols_vw TO portal_app;
GRANT ALL ON TABLE mrs_instrument_table_cols_vw TO node_api;


--
-- Name: mrs_instrument_table_rows; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_table_rows FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_table_rows FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_table_rows TO ni_developers;
GRANT ALL ON TABLE mrs_instrument_table_rows TO node_api;


--
-- Name: mrs_instrument_table_rows_counter; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_instrument_table_rows_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_instrument_table_rows_counter FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_instrument_table_rows_counter TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_instrument_table_rows_counter TO node_api;


--
-- Name: mrs_instrument_table_rows_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_table_rows_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_table_rows_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_table_rows_hist TO ni_developers;
GRANT ALL ON TABLE mrs_instrument_table_rows_hist TO node_api;


--
-- Name: mrs_instrument_table_rows_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_table_rows_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_table_rows_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_table_rows_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_instrument_table_rows_vw TO p2_app;
GRANT SELECT ON TABLE mrs_instrument_table_rows_vw TO micis_app;
GRANT SELECT ON TABLE mrs_instrument_table_rows_vw TO portal_app;
GRANT ALL ON TABLE mrs_instrument_table_rows_vw TO node_api;


--
-- Name: mrs_instrument_tables; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_tables FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_tables FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_tables TO ni_developers;
GRANT ALL ON TABLE mrs_instrument_tables TO node_api;


--
-- Name: mrs_instrument_tables_counter; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_instrument_tables_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_instrument_tables_counter FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_instrument_tables_counter TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_instrument_tables_counter TO node_api;


--
-- Name: mrs_instrument_tables_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_tables_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_tables_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_tables_hist TO ni_developers;
GRANT ALL ON TABLE mrs_instrument_tables_hist TO node_api;


--
-- Name: mrs_instrument_tables_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instrument_tables_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instrument_tables_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_instrument_tables_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_instrument_tables_vw TO p2_app;
GRANT SELECT ON TABLE mrs_instrument_tables_vw TO micis_app;
GRANT SELECT ON TABLE mrs_instrument_tables_vw TO portal_app;
GRANT ALL ON TABLE mrs_instrument_tables_vw TO node_api;


--
-- Name: mrs_instruments_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_instruments_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instruments_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_instruments_hist TO ni_developers;
GRANT ALL ON TABLE mrs_instruments_hist TO node_api;


--
-- Name: mrs_instruments_studies_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_instruments_studies_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_instruments_studies_hist FROM postgres;
GRANT ALL ON TABLE mrs_instruments_studies_hist TO postgres;
GRANT ALL ON TABLE mrs_instruments_studies_hist TO node_api;


--
-- Name: mrs_instruments_studies_instrument_study_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_instruments_studies_instrument_study_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_instruments_studies_instrument_study_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_instruments_studies_instrument_study_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_instruments_studies_instrument_study_id_seq TO node_api;


--
-- Name: mrs_legacy_sharing_rules; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_legacy_sharing_rules FROM PUBLIC;
REVOKE ALL ON TABLE mrs_legacy_sharing_rules FROM postgres;
GRANT ALL ON TABLE mrs_legacy_sharing_rules TO postgres;
GRANT ALL ON TABLE mrs_legacy_sharing_rules TO node_api;


--
-- Name: mrs_legacy_sharing_rules_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_legacy_sharing_rules_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_legacy_sharing_rules_hist FROM postgres;
GRANT ALL ON TABLE mrs_legacy_sharing_rules_hist TO postgres;
GRANT ALL ON TABLE mrs_legacy_sharing_rules_hist TO node_api;


--
-- Name: mrs_legacy_sharing_rules_studies_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_legacy_sharing_rules_studies_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_legacy_sharing_rules_studies_hist FROM postgres;
GRANT ALL ON TABLE mrs_legacy_sharing_rules_studies_hist TO postgres;
GRANT ALL ON TABLE mrs_legacy_sharing_rules_studies_hist TO node_api;


--
-- Name: mrs_mail; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_mail FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mail FROM ni_developers;
GRANT ALL ON TABLE mrs_mail TO ni_developers;
GRANT ALL ON TABLE mrs_mail TO node_api;


--
-- Name: mrs_mail_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_mail_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mail_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_mail_hist TO ni_developers;
GRANT ALL ON TABLE mrs_mail_hist TO node_api;


--
-- Name: mrs_mail_mail_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_mail_mail_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_mail_mail_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_mail_mail_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_mail_mail_id_seq TO node_api;


--
-- Name: mrs_mail_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_mail_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mail_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_mail_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_mail_vw TO micis_app;
GRANT SELECT ON TABLE mrs_mail_vw TO p2_app;
GRANT SELECT ON TABLE mrs_mail_vw TO batch_app;
GRANT ALL ON TABLE mrs_mail_vw TO node_api;


--
-- Name: mrs_mcic_basics_sbjx_map; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_basics_sbjx_map FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_basics_sbjx_map FROM postgres;
GRANT ALL ON TABLE mrs_mcic_basics_sbjx_map TO postgres;
GRANT ALL ON TABLE mrs_mcic_basics_sbjx_map TO node_api;


--
-- Name: mrs_mcic_sbjx_bx_share_int; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_sbjx_bx_share_int FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_sbjx_bx_share_int FROM postgres;
GRANT ALL ON TABLE mrs_mcic_sbjx_bx_share_int TO postgres;
GRANT ALL ON TABLE mrs_mcic_sbjx_bx_share_int TO node_api;


--
-- Name: mrs_mcic_basics_share_int_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_basics_share_int_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_basics_share_int_vw FROM postgres;
GRANT ALL ON TABLE mrs_mcic_basics_share_int_vw TO postgres;
GRANT SELECT ON TABLE mrs_mcic_basics_share_int_vw TO micis_app;
GRANT SELECT ON TABLE mrs_mcic_basics_share_int_vw TO portal_app;
GRANT ALL ON TABLE mrs_mcic_basics_share_int_vw TO node_api;


--
-- Name: mrs_mcic_sbjx_bx_share; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_sbjx_bx_share FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_sbjx_bx_share FROM postgres;
GRANT ALL ON TABLE mrs_mcic_sbjx_bx_share TO postgres;
GRANT ALL ON TABLE mrs_mcic_sbjx_bx_share TO node_api;


--
-- Name: mrs_mcic_basics_share_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_basics_share_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_basics_share_vw FROM postgres;
GRANT ALL ON TABLE mrs_mcic_basics_share_vw TO postgres;
GRANT SELECT ON TABLE mrs_mcic_basics_share_vw TO micis_app;
GRANT SELECT ON TABLE mrs_mcic_basics_share_vw TO portal_app;
GRANT ALL ON TABLE mrs_mcic_basics_share_vw TO node_api;


--
-- Name: mrs_mcic_sbjx_bx; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_sbjx_bx FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_sbjx_bx FROM postgres;
GRANT ALL ON TABLE mrs_mcic_sbjx_bx TO postgres;
GRANT ALL ON TABLE mrs_mcic_sbjx_bx TO node_api;


--
-- Name: mrs_mcic_basics_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_basics_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_basics_vw FROM postgres;
GRANT ALL ON TABLE mrs_mcic_basics_vw TO postgres;
GRANT SELECT ON TABLE mrs_mcic_basics_vw TO micis_app;
GRANT ALL ON TABLE mrs_mcic_basics_vw TO node_api;


--
-- Name: mrs_mcic_sbjx_ebx; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_sbjx_ebx FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_sbjx_ebx FROM postgres;
GRANT ALL ON TABLE mrs_mcic_sbjx_ebx TO postgres;
GRANT ALL ON TABLE mrs_mcic_sbjx_ebx TO node_api;


--
-- Name: mrs_mcic_extbasics_share_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_extbasics_share_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_extbasics_share_vw FROM postgres;
GRANT ALL ON TABLE mrs_mcic_extbasics_share_vw TO postgres;
GRANT SELECT ON TABLE mrs_mcic_extbasics_share_vw TO micis_app;
GRANT ALL ON TABLE mrs_mcic_extbasics_share_vw TO node_api;


--
-- Name: mrs_mcic_has_imaging_dti; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_has_imaging_dti FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_has_imaging_dti FROM postgres;
GRANT ALL ON TABLE mrs_mcic_has_imaging_dti TO postgres;
GRANT ALL ON TABLE mrs_mcic_has_imaging_dti TO node_api;


--
-- Name: mrs_mcic_has_imaging_dti_fm; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_has_imaging_dti_fm FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_has_imaging_dti_fm FROM postgres;
GRANT ALL ON TABLE mrs_mcic_has_imaging_dti_fm TO postgres;
GRANT ALL ON TABLE mrs_mcic_has_imaging_dti_fm TO node_api;


--
-- Name: mrs_mcic_has_imaging_fmr_fm; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_has_imaging_fmr_fm FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_has_imaging_fmr_fm FROM postgres;
GRANT ALL ON TABLE mrs_mcic_has_imaging_fmr_fm TO postgres;
GRANT ALL ON TABLE mrs_mcic_has_imaging_fmr_fm TO node_api;


--
-- Name: mrs_mcic_has_imaging_fmri; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_has_imaging_fmri FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_has_imaging_fmri FROM postgres;
GRANT ALL ON TABLE mrs_mcic_has_imaging_fmri TO postgres;
GRANT ALL ON TABLE mrs_mcic_has_imaging_fmri TO node_api;


--
-- Name: mrs_mcic_has_imaging_smr; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_mcic_has_imaging_smr FROM PUBLIC;
REVOKE ALL ON TABLE mrs_mcic_has_imaging_smr FROM postgres;
GRANT ALL ON TABLE mrs_mcic_has_imaging_smr TO postgres;
GRANT ALL ON TABLE mrs_mcic_has_imaging_smr TO node_api;


--
-- Name: mrs_message_types; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_message_types FROM PUBLIC;
REVOKE ALL ON TABLE mrs_message_types FROM postgres;
GRANT ALL ON TABLE mrs_message_types TO postgres;
GRANT ALL ON TABLE mrs_message_types TO node_api;


--
-- Name: mrs_message_types_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_message_types_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_message_types_vw FROM postgres;
GRANT ALL ON TABLE mrs_message_types_vw TO postgres;
GRANT SELECT ON TABLE mrs_message_types_vw TO micis_app;
GRANT SELECT ON TABLE mrs_message_types_vw TO portal_app;
GRANT ALL ON TABLE mrs_message_types_vw TO node_api;


--
-- Name: mrs_messages; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_messages FROM PUBLIC;
REVOKE ALL ON TABLE mrs_messages FROM postgres;
GRANT ALL ON TABLE mrs_messages TO postgres;
GRANT ALL ON TABLE mrs_messages TO node_api;


--
-- Name: mrs_messages_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_messages_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_messages_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_messages_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_messages_counter TO node_api;


--
-- Name: mrs_messages_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_messages_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_messages_hist FROM postgres;
GRANT ALL ON TABLE mrs_messages_hist TO postgres;
GRANT ALL ON TABLE mrs_messages_hist TO node_api;


--
-- Name: mrs_messages_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_messages_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_messages_vw FROM postgres;
GRANT ALL ON TABLE mrs_messages_vw TO postgres;
GRANT SELECT ON TABLE mrs_messages_vw TO micis_app;
GRANT SELECT ON TABLE mrs_messages_vw TO portal_app;
GRANT ALL ON TABLE mrs_messages_vw TO node_api;


--
-- Name: mrs_missing_assessment_reasons; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_missing_assessment_reasons FROM PUBLIC;
REVOKE ALL ON TABLE mrs_missing_assessment_reasons FROM postgres;
GRANT ALL ON TABLE mrs_missing_assessment_reasons TO postgres;
GRANT ALL ON TABLE mrs_missing_assessment_reasons TO node_api;


--
-- Name: mrs_missing_assessment_reasons_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_missing_assessment_reasons_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_missing_assessment_reasons_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_missing_assessment_reasons_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_missing_assessment_reasons_counter TO node_api;


--
-- Name: mrs_missing_assessment_reasons_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_missing_assessment_reasons_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_missing_assessment_reasons_hist FROM postgres;
GRANT ALL ON TABLE mrs_missing_assessment_reasons_hist TO postgres;
GRANT ALL ON TABLE mrs_missing_assessment_reasons_hist TO node_api;


--
-- Name: mrs_missing_assessment_reasons_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_missing_assessment_reasons_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_missing_assessment_reasons_vw FROM postgres;
GRANT ALL ON TABLE mrs_missing_assessment_reasons_vw TO postgres;
GRANT SELECT ON TABLE mrs_missing_assessment_reasons_vw TO micis_app;
GRANT SELECT ON TABLE mrs_missing_assessment_reasons_vw TO portal_app;
GRANT ALL ON TABLE mrs_missing_assessment_reasons_vw TO node_api;


--
-- Name: mrs_modalities_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_modalities_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_modalities_hist FROM postgres;
GRANT ALL ON TABLE mrs_modalities_hist TO postgres;
GRANT ALL ON TABLE mrs_modalities_hist TO node_api;


--
-- Name: mrs_modalities_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_modalities_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_modalities_vw FROM postgres;
GRANT ALL ON TABLE mrs_modalities_vw TO postgres;
GRANT SELECT ON TABLE mrs_modalities_vw TO micis_app;
GRANT ALL ON TABLE mrs_modalities_vw TO node_api;


--
-- Name: mrs_modality_properties; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_modality_properties FROM PUBLIC;
REVOKE ALL ON TABLE mrs_modality_properties FROM postgres;
GRANT ALL ON TABLE mrs_modality_properties TO postgres;
GRANT ALL ON TABLE mrs_modality_properties TO node_api;


--
-- Name: mrs_modality_props_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_modality_props_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_modality_props_vw FROM postgres;
GRANT ALL ON TABLE mrs_modality_props_vw TO postgres;
GRANT SELECT ON TABLE mrs_modality_props_vw TO micis_app;
GRANT ALL ON TABLE mrs_modality_props_vw TO node_api;


--
-- Name: mrs_nonrev_slot_uses; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_nonrev_slot_uses FROM PUBLIC;
REVOKE ALL ON TABLE mrs_nonrev_slot_uses FROM postgres;
GRANT ALL ON TABLE mrs_nonrev_slot_uses TO postgres;
GRANT ALL ON TABLE mrs_nonrev_slot_uses TO node_api;


--
-- Name: mrs_nonrev_slot_uses_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_nonrev_slot_uses_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_nonrev_slot_uses_hist FROM postgres;
GRANT ALL ON TABLE mrs_nonrev_slot_uses_hist TO postgres;
GRANT ALL ON TABLE mrs_nonrev_slot_uses_hist TO node_api;


--
-- Name: mrs_nonrev_slot_uses_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_nonrev_slot_uses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_nonrev_slot_uses_vw FROM postgres;
GRANT ALL ON TABLE mrs_nonrev_slot_uses_vw TO postgres;
GRANT SELECT ON TABLE mrs_nonrev_slot_uses_vw TO micis_app;
GRANT ALL ON TABLE mrs_nonrev_slot_uses_vw TO node_api;


--
-- Name: mrs_subject_details_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_details_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_details_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_details_vw TO p2_app;
GRANT SELECT ON TABLE mrs_subject_details_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_details_vw TO portal_app;
GRANT SELECT ON TABLE mrs_subject_details_vw TO transfer_app;
GRANT ALL ON TABLE mrs_subject_details_vw TO node_api;


--
-- Name: mrs_oldest_ursi_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_oldest_ursi_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_oldest_ursi_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_oldest_ursi_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_oldest_ursi_vw TO micis_app;
GRANT ALL ON TABLE mrs_oldest_ursi_vw TO node_api;


--
-- Name: mrs_per_role_det_addrss_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_per_role_det_addrss_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_per_role_det_addrss_hist FROM postgres;
GRANT ALL ON TABLE mrs_per_role_det_addrss_hist TO postgres;
GRANT ALL ON TABLE mrs_per_role_det_addrss_hist TO node_api;


--
-- Name: mrs_per_role_det_phones_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_per_role_det_phones_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_per_role_det_phones_hist FROM postgres;
GRANT ALL ON TABLE mrs_per_role_det_phones_hist TO postgres;
GRANT ALL ON TABLE mrs_per_role_det_phones_hist TO node_api;


--
-- Name: mrs_perad_address_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_perad_address_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_perad_address_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrs_perad_address_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_perad_address_id_seq TO node_api;


--
-- Name: mrs_perph_phone_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_perph_phone_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_perph_phone_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrs_perph_phone_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_perph_phone_id_seq TO node_api;


--
-- Name: mrs_person_alias; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_alias FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_alias FROM postgres;
GRANT ALL ON TABLE mrs_person_alias TO postgres;
GRANT ALL ON TABLE mrs_person_alias TO node_api;


--
-- Name: mrs_person_alias_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_alias_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_alias_hist FROM postgres;
GRANT ALL ON TABLE mrs_person_alias_hist TO postgres;
GRANT ALL ON TABLE mrs_person_alias_hist TO node_api;


--
-- Name: mrs_person_alias_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_alias_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_alias_vw FROM postgres;
GRANT ALL ON TABLE mrs_person_alias_vw TO postgres;
GRANT SELECT ON TABLE mrs_person_alias_vw TO micis_app;
GRANT ALL ON TABLE mrs_person_alias_vw TO node_api;


--
-- Name: mrs_person_match_tmp; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_match_tmp FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_match_tmp FROM postgres;
GRANT ALL ON TABLE mrs_person_match_tmp TO postgres;
GRANT ALL ON TABLE mrs_person_match_tmp TO node_api;


--
-- Name: mrs_person_match_tmp_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_person_match_tmp_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_match_tmp_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_person_match_tmp_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_person_match_tmp_vw TO micis_app;
GRANT SELECT ON TABLE mrs_person_match_tmp_vw TO portal_app;
GRANT ALL ON TABLE mrs_person_match_tmp_vw TO node_api;


--
-- Name: mrs_person_phone_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_phone_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_phone_details FROM postgres;
GRANT ALL ON TABLE mrs_person_phone_details TO postgres;
GRANT ALL ON TABLE mrs_person_phone_details TO node_api;


--
-- Name: mrs_person_role_det_add_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_role_det_add_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_role_det_add_vw FROM postgres;
GRANT ALL ON TABLE mrs_person_role_det_add_vw TO postgres;
GRANT SELECT ON TABLE mrs_person_role_det_add_vw TO micis_app;
GRANT SELECT ON TABLE mrs_person_role_det_add_vw TO portal_app;
GRANT ALL ON TABLE mrs_person_role_det_add_vw TO node_api;


--
-- Name: mrs_person_role_det_phones; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_role_det_phones FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_role_det_phones FROM postgres;
GRANT ALL ON TABLE mrs_person_role_det_phones TO postgres;
GRANT ALL ON TABLE mrs_person_role_det_phones TO node_api;


--
-- Name: mrs_person_role_det_phones_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_role_det_phones_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_role_det_phones_vw FROM postgres;
GRANT ALL ON TABLE mrs_person_role_det_phones_vw TO postgres;
GRANT SELECT ON TABLE mrs_person_role_det_phones_vw TO micis_app;
GRANT SELECT ON TABLE mrs_person_role_det_phones_vw TO portal_app;
GRANT ALL ON TABLE mrs_person_role_det_phones_vw TO node_api;


--
-- Name: mrs_person_role_details_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_role_details_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_role_details_hist FROM postgres;
GRANT ALL ON TABLE mrs_person_role_details_hist TO postgres;
GRANT ALL ON TABLE mrs_person_role_details_hist TO node_api;


--
-- Name: mrs_person_role_details_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_person_role_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_person_role_details_vw FROM postgres;
GRANT ALL ON TABLE mrs_person_role_details_vw TO postgres;
GRANT ALL ON TABLE mrs_person_role_details_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_person_role_details_vw TO micis_app;
GRANT SELECT ON TABLE mrs_person_role_details_vw TO portal_app;
GRANT ALL ON TABLE mrs_person_role_details_vw TO node_api;


--
-- Name: mrs_personaddress_types_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_personaddress_types_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_personaddress_types_vw FROM postgres;
GRANT ALL ON TABLE mrs_personaddress_types_vw TO postgres;
GRANT SELECT ON TABLE mrs_personaddress_types_vw TO micis_app;
GRANT SELECT ON TABLE mrs_personaddress_types_vw TO portal_app;
GRANT ALL ON TABLE mrs_personaddress_types_vw TO node_api;


--
-- Name: mrs_personaddresses_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_personaddresses_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_personaddresses_hist FROM postgres;
GRANT ALL ON TABLE mrs_personaddresses_hist TO postgres;
GRANT ALL ON TABLE mrs_personaddresses_hist TO node_api;


--
-- Name: mrs_personaddresses_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_personaddresses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_personaddresses_vw FROM postgres;
GRANT ALL ON TABLE mrs_personaddresses_vw TO postgres;
GRANT SELECT ON TABLE mrs_personaddresses_vw TO micis_app;
GRANT SELECT ON TABLE mrs_personaddresses_vw TO portal_app;
GRANT ALL ON TABLE mrs_personaddresses_vw TO node_api;


--
-- Name: mrs_personphone_types; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_personphone_types FROM PUBLIC;
REVOKE ALL ON TABLE mrs_personphone_types FROM postgres;
GRANT ALL ON TABLE mrs_personphone_types TO postgres;
GRANT ALL ON TABLE mrs_personphone_types TO node_api;


--
-- Name: mrs_personphone_types_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_personphone_types_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_personphone_types_vw FROM postgres;
GRANT ALL ON TABLE mrs_personphone_types_vw TO postgres;
GRANT SELECT ON TABLE mrs_personphone_types_vw TO micis_app;
GRANT SELECT ON TABLE mrs_personphone_types_vw TO portal_app;
GRANT ALL ON TABLE mrs_personphone_types_vw TO node_api;


--
-- Name: mrs_personphones; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_personphones FROM PUBLIC;
REVOKE ALL ON TABLE mrs_personphones FROM postgres;
GRANT ALL ON TABLE mrs_personphones TO postgres;
GRANT ALL ON TABLE mrs_personphones TO node_api;


--
-- Name: mrs_personphones_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_personphones_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_personphones_hist FROM postgres;
GRANT ALL ON TABLE mrs_personphones_hist TO postgres;
GRANT ALL ON TABLE mrs_personphones_hist TO node_api;


--
-- Name: mrs_personphones_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_personphones_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_personphones_vw FROM postgres;
GRANT ALL ON TABLE mrs_personphones_vw TO postgres;
GRANT SELECT ON TABLE mrs_personphones_vw TO micis_app;
GRANT SELECT ON TABLE mrs_personphones_vw TO portal_app;
GRANT ALL ON TABLE mrs_personphones_vw TO node_api;


--
-- Name: mrs_persons2_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_persons2_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_persons2_vw FROM postgres;
GRANT ALL ON TABLE mrs_persons2_vw TO postgres;
GRANT SELECT ON TABLE mrs_persons2_vw TO micis_app;
GRANT ALL ON TABLE mrs_persons2_vw TO node_api;


--
-- Name: mrs_persons_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_persons_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_persons_hist FROM postgres;
GRANT ALL ON TABLE mrs_persons_hist TO postgres;
GRANT ALL ON TABLE mrs_persons_hist TO node_api;


--
-- Name: mrs_roles; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_roles FROM PUBLIC;
REVOKE ALL ON TABLE mrs_roles FROM postgres;
GRANT ALL ON TABLE mrs_roles TO postgres;
GRANT ALL ON TABLE mrs_roles TO node_api;


--
-- Name: mrs_persons_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_persons_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_persons_vw FROM postgres;
GRANT ALL ON TABLE mrs_persons_vw TO postgres;
GRANT SELECT ON TABLE mrs_persons_vw TO micis_app;
GRANT SELECT ON TABLE mrs_persons_vw TO portal_app;
GRANT ALL ON TABLE mrs_persons_vw TO node_api;


--
-- Name: mrs_phones; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_phones FROM PUBLIC;
REVOKE ALL ON TABLE mrs_phones FROM postgres;
GRANT ALL ON TABLE mrs_phones TO postgres;
GRANT ALL ON TABLE mrs_phones TO node_api;


--
-- Name: mrs_phones_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_phones_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_phones_hist FROM postgres;
GRANT ALL ON TABLE mrs_phones_hist TO postgres;
GRANT ALL ON TABLE mrs_phones_hist TO node_api;


--
-- Name: mrs_phones_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_phones_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_phones_vw FROM postgres;
GRANT ALL ON TABLE mrs_phones_vw TO postgres;
GRANT SELECT ON TABLE mrs_phones_vw TO micis_app;
GRANT ALL ON TABLE mrs_phones_vw TO node_api;


--
-- Name: mrs_pi_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_pi_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_pi_vw FROM postgres;
GRANT ALL ON TABLE mrs_pi_vw TO postgres;
GRANT SELECT ON TABLE mrs_pi_vw TO p2_app;
GRANT SELECT ON TABLE mrs_pi_vw TO micis_app;
GRANT SELECT ON TABLE mrs_pi_vw TO cas_app;
GRANT SELECT ON TABLE mrs_pi_vw TO portal_app;
GRANT ALL ON TABLE mrs_pi_vw TO node_api;


--
-- Name: mrs_proj_co_investigator; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_proj_co_investigator FROM PUBLIC;
REVOKE ALL ON TABLE mrs_proj_co_investigator FROM postgres;
GRANT ALL ON TABLE mrs_proj_co_investigator TO postgres;
GRANT ALL ON TABLE mrs_proj_co_investigator TO node_api;


--
-- Name: mrs_proj_co_inv_details_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_proj_co_inv_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_proj_co_inv_details_vw FROM postgres;
GRANT ALL ON TABLE mrs_proj_co_inv_details_vw TO postgres;
GRANT SELECT ON TABLE mrs_proj_co_inv_details_vw TO micis_app;
GRANT SELECT ON TABLE mrs_proj_co_inv_details_vw TO portal_app;
GRANT ALL ON TABLE mrs_proj_co_inv_details_vw TO node_api;


--
-- Name: mrs_proj_co_inv_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_proj_co_inv_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_proj_co_inv_hist FROM postgres;
GRANT ALL ON TABLE mrs_proj_co_inv_hist TO postgres;
GRANT ALL ON TABLE mrs_proj_co_inv_hist TO node_api;


--
-- Name: mrs_proj_data_dom_det_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_proj_data_dom_det_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_proj_data_dom_det_hist FROM postgres;
GRANT ALL ON TABLE mrs_proj_data_dom_det_hist TO postgres;
GRANT ALL ON TABLE mrs_proj_data_dom_det_hist TO node_api;


--
-- Name: mrs_proj_data_dom_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_proj_data_dom_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_proj_data_dom_details FROM postgres;
GRANT ALL ON TABLE mrs_proj_data_dom_details TO postgres;
GRANT ALL ON TABLE mrs_proj_data_dom_details TO node_api;


--
-- Name: mrs_proj_data_dom_details_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_proj_data_dom_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_proj_data_dom_details_vw FROM postgres;
GRANT ALL ON TABLE mrs_proj_data_dom_details_vw TO postgres;
GRANT SELECT ON TABLE mrs_proj_data_dom_details_vw TO micis_app;
GRANT SELECT ON TABLE mrs_proj_data_dom_details_vw TO portal_app;
GRANT ALL ON TABLE mrs_proj_data_dom_details_vw TO node_api;


--
-- Name: mrs_proj_study_det_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_proj_study_det_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_proj_study_det_hist FROM postgres;
GRANT ALL ON TABLE mrs_proj_study_det_hist TO postgres;
GRANT ALL ON TABLE mrs_proj_study_det_hist TO node_api;


--
-- Name: mrs_proj_study_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_proj_study_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_proj_study_details FROM postgres;
GRANT ALL ON TABLE mrs_proj_study_details TO postgres;
GRANT ALL ON TABLE mrs_proj_study_details TO node_api;


--
-- Name: mrs_protocol_reqs_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_protocol_reqs_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_protocol_reqs_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_protocol_reqs_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_protocol_reqs_counter TO node_api;


--
-- Name: mrs_protocol_requirements; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_protocol_requirements FROM PUBLIC;
REVOKE ALL ON TABLE mrs_protocol_requirements FROM postgres;
GRANT ALL ON TABLE mrs_protocol_requirements TO postgres;
GRANT ALL ON TABLE mrs_protocol_requirements TO node_api;


--
-- Name: mrs_protocol_requirements_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_protocol_requirements_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_protocol_requirements_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_protocol_requirements_hist TO ni_developers;
GRANT ALL ON TABLE mrs_protocol_requirements_hist TO node_api;


--
-- Name: mrs_protocol_requirements_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_protocol_requirements_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_protocol_requirements_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_protocol_requirements_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_protocol_requirements_vw TO micis_app;
GRANT SELECT ON TABLE mrs_protocol_requirements_vw TO portal_app;
GRANT ALL ON TABLE mrs_protocol_requirements_vw TO node_api;


--
-- Name: mrs_protocols; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_protocols FROM PUBLIC;
REVOKE ALL ON TABLE mrs_protocols FROM postgres;
GRANT ALL ON TABLE mrs_protocols TO postgres;
GRANT ALL ON TABLE mrs_protocols TO node_api;


--
-- Name: mrs_study_intervals; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_intervals FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_intervals FROM ni_developers;
GRANT ALL ON TABLE mrs_study_intervals TO ni_developers;
GRANT ALL ON TABLE mrs_study_intervals TO node_api;


--
-- Name: mrs_subject_assessments_queue_types; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_assessments_queue_types FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_assessments_queue_types FROM postgres;
GRANT ALL ON TABLE mrs_subject_assessments_queue_types TO postgres;
GRANT ALL ON TABLE mrs_subject_assessments_queue_types TO node_api;


--
-- Name: mrs_protocols_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_protocols_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_protocols_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_protocols_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_protocols_vw TO micis_app;
GRANT SELECT ON TABLE mrs_protocols_vw TO portal_app;
GRANT ALL ON TABLE mrs_protocols_vw TO node_api;


--
-- Name: mrs_study_intervals_subject_schedules; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_intervals_subject_schedules FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_intervals_subject_schedules FROM ni_developers;
GRANT ALL ON TABLE mrs_study_intervals_subject_schedules TO ni_developers;
GRANT ALL ON TABLE mrs_study_intervals_subject_schedules TO node_api;


--
-- Name: mrs_study_intervals_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_intervals_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_intervals_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_study_intervals_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_study_intervals_vw TO micis_app;
GRANT SELECT ON TABLE mrs_study_intervals_vw TO portal_app;
GRANT SELECT ON TABLE mrs_study_intervals_vw TO transfer_app;
GRANT ALL ON TABLE mrs_study_intervals_vw TO node_api;


--
-- Name: mrs_subject_assessments_queue; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_assessments_queue FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_assessments_queue FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_assessments_queue TO ni_developers;
GRANT ALL ON TABLE mrs_subject_assessments_queue TO node_api;


--
-- Name: mrs_subject_logins; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_logins FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_logins FROM postgres;
GRANT ALL ON TABLE mrs_subject_logins TO postgres;
GRANT ALL ON TABLE mrs_subject_logins TO node_api;


--
-- Name: mrs_subject_type_det_active_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_type_det_active_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_type_det_active_vw FROM postgres;
GRANT ALL ON TABLE mrs_subject_type_det_active_vw TO postgres;
GRANT SELECT ON TABLE mrs_subject_type_det_active_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_type_det_active_vw TO portal_app;
GRANT ALL ON TABLE mrs_subject_type_det_active_vw TO node_api;


--
-- Name: mrs_protocol_times_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_protocol_times_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_protocol_times_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_protocol_times_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_protocol_times_vw TO micis_app;
GRANT SELECT ON TABLE mrs_protocol_times_vw TO portal_app;
GRANT ALL ON TABLE mrs_protocol_times_vw TO node_api;


--
-- Name: mrs_protocol_types; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_protocol_types FROM PUBLIC;
REVOKE ALL ON TABLE mrs_protocol_types FROM postgres;
GRANT ALL ON TABLE mrs_protocol_types TO postgres;
GRANT ALL ON TABLE mrs_protocol_types TO node_api;


--
-- Name: mrs_protocol_types_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_protocol_types_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_protocol_types_vw FROM postgres;
GRANT ALL ON TABLE mrs_protocol_types_vw TO postgres;
GRANT SELECT ON TABLE mrs_protocol_types_vw TO micis_app;
GRANT SELECT ON TABLE mrs_protocol_types_vw TO portal_app;
GRANT ALL ON TABLE mrs_protocol_types_vw TO node_api;


--
-- Name: mrs_protocols_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_protocols_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_protocols_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_protocols_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_protocols_counter TO node_api;


--
-- Name: mrs_protocols_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_protocols_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_protocols_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_protocols_hist TO ni_developers;
GRANT ALL ON TABLE mrs_protocols_hist TO node_api;


--
-- Name: mrs_purchase_requests; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_purchase_requests FROM PUBLIC;
REVOKE ALL ON TABLE mrs_purchase_requests FROM postgres;
GRANT ALL ON TABLE mrs_purchase_requests TO postgres;
GRANT ALL ON TABLE mrs_purchase_requests TO node_api;


--
-- Name: mrs_purchase_requests_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_purchase_requests_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_purchase_requests_hist FROM postgres;
GRANT ALL ON TABLE mrs_purchase_requests_hist TO postgres;
GRANT ALL ON TABLE mrs_purchase_requests_hist TO node_api;


--
-- Name: mrs_purchase_requests_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_purchase_requests_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_purchase_requests_vw FROM postgres;
GRANT ALL ON TABLE mrs_purchase_requests_vw TO postgres;
GRANT SELECT ON TABLE mrs_purchase_requests_vw TO micis_app;
GRANT ALL ON TABLE mrs_purchase_requests_vw TO node_api;


--
-- Name: mrs_qa_threshold; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_qa_threshold FROM PUBLIC;
REVOKE ALL ON TABLE mrs_qa_threshold FROM postgres;
GRANT ALL ON TABLE mrs_qa_threshold TO postgres;
GRANT ALL ON TABLE mrs_qa_threshold TO node_api;


--
-- Name: mrs_qa_threshold_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_qa_threshold_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_qa_threshold_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_qa_threshold_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_qa_threshold_counter TO node_api;


--
-- Name: mrs_qa_threshold_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_qa_threshold_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_qa_threshold_vw FROM postgres;
GRANT ALL ON TABLE mrs_qa_threshold_vw TO postgres;
GRANT SELECT ON TABLE mrs_qa_threshold_vw TO micis_app;
GRANT SELECT ON TABLE mrs_qa_threshold_vw TO portal_app;
GRANT ALL ON TABLE mrs_qa_threshold_vw TO node_api;


--
-- Name: mrs_qb_asmt_data_sort_temp; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_qb_asmt_data_sort_temp FROM PUBLIC;
REVOKE ALL ON TABLE mrs_qb_asmt_data_sort_temp FROM ni_developers;
GRANT ALL ON TABLE mrs_qb_asmt_data_sort_temp TO ni_developers;
GRANT ALL ON TABLE mrs_qb_asmt_data_sort_temp TO micis_app;
GRANT ALL ON TABLE mrs_qb_asmt_data_sort_temp TO node_api;


--
-- Name: mrs_qb_asmt_data_sort_temp_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_qb_asmt_data_sort_temp_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_qb_asmt_data_sort_temp_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_qb_asmt_data_sort_temp_id_seq TO ni_developers;
GRANT ALL ON SEQUENCE mrs_qb_asmt_data_sort_temp_id_seq TO micis_app;
GRANT SELECT,USAGE ON SEQUENCE mrs_qb_asmt_data_sort_temp_id_seq TO node_api;


--
-- Name: mrs_qb_asmt_pivot_categories_temp; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_qb_asmt_pivot_categories_temp FROM PUBLIC;
REVOKE ALL ON TABLE mrs_qb_asmt_pivot_categories_temp FROM ni_developers;
GRANT ALL ON TABLE mrs_qb_asmt_pivot_categories_temp TO ni_developers;
GRANT ALL ON TABLE mrs_qb_asmt_pivot_categories_temp TO micis_app;
GRANT ALL ON TABLE mrs_qb_asmt_pivot_categories_temp TO node_api;


--
-- Name: mrs_qb_asmt_pivot_categories_temp_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_qb_asmt_pivot_categories_temp_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_qb_asmt_pivot_categories_temp_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_qb_asmt_pivot_categories_temp_id_seq TO ni_developers;
GRANT ALL ON SEQUENCE mrs_qb_asmt_pivot_categories_temp_id_seq TO micis_app;
GRANT SELECT,USAGE ON SEQUENCE mrs_qb_asmt_pivot_categories_temp_id_seq TO node_api;


--
-- Name: mrs_query_temp; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_query_temp FROM PUBLIC;
REVOKE ALL ON TABLE mrs_query_temp FROM postgres;
GRANT ALL ON TABLE mrs_query_temp TO postgres;
GRANT ALL ON TABLE mrs_query_temp TO micis_app;
GRANT ALL ON TABLE mrs_query_temp TO node_api;


--
-- Name: mrs_racial_categories; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_racial_categories FROM PUBLIC;
REVOKE ALL ON TABLE mrs_racial_categories FROM postgres;
GRANT ALL ON TABLE mrs_racial_categories TO postgres;
GRANT ALL ON TABLE mrs_racial_categories TO node_api;


--
-- Name: mrs_racial_categories_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_racial_categories_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_racial_categories_vw FROM postgres;
GRANT ALL ON TABLE mrs_racial_categories_vw TO postgres;
GRANT SELECT ON TABLE mrs_racial_categories_vw TO micis_app;
GRANT SELECT ON TABLE mrs_racial_categories_vw TO portal_app;
GRANT ALL ON TABLE mrs_racial_categories_vw TO node_api;


--
-- Name: mrs_rad_comment_id_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_rad_comment_id_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_rad_comment_id_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_rad_comment_id_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_rad_comment_id_counter TO node_api;


--
-- Name: mrs_radiologist_comments; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_radiologist_comments FROM PUBLIC;
REVOKE ALL ON TABLE mrs_radiologist_comments FROM postgres;
GRANT ALL ON TABLE mrs_radiologist_comments TO postgres;
GRANT ALL ON TABLE mrs_radiologist_comments TO node_api;


--
-- Name: mrs_rad_comments_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_rad_comments_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_rad_comments_vw FROM postgres;
GRANT ALL ON TABLE mrs_rad_comments_vw TO postgres;
GRANT SELECT ON TABLE mrs_rad_comments_vw TO micis_app;
GRANT ALL ON TABLE mrs_rad_comments_vw TO node_api;


--
-- Name: mrs_radiologists_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_radiologists_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_radiologists_vw FROM postgres;
GRANT ALL ON TABLE mrs_radiologists_vw TO postgres;
GRANT SELECT ON TABLE mrs_radiologists_vw TO micis_app;
GRANT ALL ON TABLE mrs_radiologists_vw TO node_api;


--
-- Name: mrs_radiology_recommendation_codes; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_radiology_recommendation_codes FROM PUBLIC;
REVOKE ALL ON TABLE mrs_radiology_recommendation_codes FROM ni_developers;
GRANT ALL ON TABLE mrs_radiology_recommendation_codes TO ni_developers;
GRANT ALL ON TABLE mrs_radiology_recommendation_codes TO node_api;


--
-- Name: mrs_radiology_recommendation_codes_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_radiology_recommendation_codes_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_radiology_recommendation_codes_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_radiology_recommendation_codes_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_radiology_recommendation_codes_vw TO micis_app;
GRANT ALL ON TABLE mrs_radiology_recommendation_codes_vw TO node_api;


--
-- Name: mrs_raters_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_raters_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_raters_vw FROM postgres;
GRANT ALL ON TABLE mrs_raters_vw TO postgres;
GRANT ALL ON TABLE mrs_raters_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_raters_vw TO micis_app;
GRANT SELECT ON TABLE mrs_raters_vw TO portal_app;
GRANT SELECT ON TABLE mrs_raters_vw TO transfer_app;
GRANT ALL ON TABLE mrs_raters_vw TO node_api;


--
-- Name: mrs_study_scanner_rates; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_scanner_rates FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_scanner_rates FROM postgres;
GRANT ALL ON TABLE mrs_study_scanner_rates TO postgres;
GRANT ALL ON TABLE mrs_study_scanner_rates TO node_api;


--
-- Name: mrs_rates_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_rates_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_rates_vw FROM postgres;
GRANT ALL ON TABLE mrs_rates_vw TO postgres;
GRANT SELECT ON TABLE mrs_rates_vw TO micis_app;
GRANT ALL ON TABLE mrs_rates_vw TO node_api;


--
-- Name: mrs_rdoc_coins_question_map_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_rdoc_coins_question_map_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_rdoc_coins_question_map_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_rdoc_coins_question_map_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_rdoc_coins_question_map_vw TO micis_app;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE mrs_rdoc_coins_question_map_vw TO node_api;


--
-- Name: mrs_recent_scan_exports; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_recent_scan_exports FROM PUBLIC;
REVOKE ALL ON TABLE mrs_recent_scan_exports FROM postgres;
GRANT ALL ON TABLE mrs_recent_scan_exports TO postgres;
GRANT ALL ON TABLE mrs_recent_scan_exports TO node_api;


--
-- Name: mrs_recruitment_criteria; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_recruitment_criteria FROM PUBLIC;
REVOKE ALL ON TABLE mrs_recruitment_criteria FROM postgres;
GRANT ALL ON TABLE mrs_recruitment_criteria TO postgres;
GRANT ALL ON TABLE mrs_recruitment_criteria TO node_api;


--
-- Name: mrs_recruitment_criteria_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_recruitment_criteria_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_recruitment_criteria_vw FROM postgres;
GRANT ALL ON TABLE mrs_recruitment_criteria_vw TO postgres;
GRANT SELECT ON TABLE mrs_recruitment_criteria_vw TO micis_app;
GRANT SELECT ON TABLE mrs_recruitment_criteria_vw TO portal_app;
GRANT ALL ON TABLE mrs_recruitment_criteria_vw TO node_api;


--
-- Name: mrs_req_mod_cond_data; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_req_mod_cond_data FROM PUBLIC;
REVOKE ALL ON TABLE mrs_req_mod_cond_data FROM postgres;
GRANT ALL ON TABLE mrs_req_mod_cond_data TO postgres;
GRANT ALL ON TABLE mrs_req_mod_cond_data TO node_api;


--
-- Name: mrs_req_mod_cond_data_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_req_mod_cond_data_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_req_mod_cond_data_vw FROM postgres;
GRANT ALL ON TABLE mrs_req_mod_cond_data_vw TO postgres;
GRANT SELECT ON TABLE mrs_req_mod_cond_data_vw TO micis_app;
GRANT ALL ON TABLE mrs_req_mod_cond_data_vw TO node_api;


--
-- Name: mrs_roles_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_roles_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_roles_hist FROM postgres;
GRANT ALL ON TABLE mrs_roles_hist TO postgres;
GRANT ALL ON TABLE mrs_roles_hist TO node_api;


--
-- Name: mrs_roles_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_roles_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_roles_vw FROM postgres;
GRANT ALL ON TABLE mrs_roles_vw TO postgres;
GRANT SELECT ON TABLE mrs_roles_vw TO micis_app;
GRANT SELECT ON TABLE mrs_roles_vw TO portal_app;
GRANT ALL ON TABLE mrs_roles_vw TO node_api;


--
-- Name: mrs_saved_queries; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_saved_queries FROM PUBLIC;
REVOKE ALL ON TABLE mrs_saved_queries FROM ni_developers;
GRANT ALL ON TABLE mrs_saved_queries TO ni_developers;
GRANT ALL ON TABLE mrs_saved_queries TO node_api;


--
-- Name: mrs_saved_queries_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_saved_queries_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_saved_queries_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_saved_queries_hist TO ni_developers;
GRANT ALL ON TABLE mrs_saved_queries_hist TO node_api;


--
-- Name: mrs_saved_queries_hist_orig; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_saved_queries_hist_orig FROM PUBLIC;
REVOKE ALL ON TABLE mrs_saved_queries_hist_orig FROM postgres;
GRANT ALL ON TABLE mrs_saved_queries_hist_orig TO postgres;
GRANT ALL ON TABLE mrs_saved_queries_hist_orig TO node_api;


--
-- Name: mrs_saved_queries_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_saved_queries_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_saved_queries_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_saved_queries_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_saved_queries_id_seq TO node_api;


--
-- Name: mrs_saved_queries_orig; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_saved_queries_orig FROM PUBLIC;
REVOKE ALL ON TABLE mrs_saved_queries_orig FROM postgres;
GRANT ALL ON TABLE mrs_saved_queries_orig TO postgres;
GRANT ALL ON TABLE mrs_saved_queries_orig TO node_api;


--
-- Name: mrs_saved_user_queries; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_saved_user_queries FROM PUBLIC;
REVOKE ALL ON TABLE mrs_saved_user_queries FROM ni_developers;
GRANT ALL ON TABLE mrs_saved_user_queries TO ni_developers;
GRANT ALL ON TABLE mrs_saved_user_queries TO node_api;


--
-- Name: mrs_saved_queries_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_saved_queries_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_saved_queries_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_saved_queries_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_saved_queries_vw TO micis_app;
GRANT ALL ON TABLE mrs_saved_queries_vw TO node_api;


--
-- Name: mrs_saved_user_queries_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_saved_user_queries_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_saved_user_queries_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_saved_user_queries_hist TO ni_developers;
GRANT ALL ON TABLE mrs_saved_user_queries_hist TO node_api;


--
-- Name: mrs_saved_user_queries_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_saved_user_queries_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_saved_user_queries_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_saved_user_queries_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_saved_user_queries_id_seq TO node_api;


--
-- Name: mrs_scan_data_menu_values; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_data_menu_values FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_data_menu_values FROM postgres;
GRANT ALL ON TABLE mrs_scan_data_menu_values TO postgres;
GRANT ALL ON TABLE mrs_scan_data_menu_values TO node_api;


--
-- Name: mrs_scan_data_menu_values_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_data_menu_values_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_data_menu_values_vw FROM postgres;
GRANT ALL ON TABLE mrs_scan_data_menu_values_vw TO postgres;
GRANT SELECT ON TABLE mrs_scan_data_menu_values_vw TO micis_app;
GRANT ALL ON TABLE mrs_scan_data_menu_values_vw TO node_api;


--
-- Name: mrs_scan_data_types_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_data_types_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_data_types_vw FROM postgres;
GRANT ALL ON TABLE mrs_scan_data_types_vw TO postgres;
GRANT SELECT ON TABLE mrs_scan_data_types_vw TO micis_app;
GRANT SELECT ON TABLE mrs_scan_data_types_vw TO transfer_app;
GRANT ALL ON TABLE mrs_scan_data_types_vw TO node_api;


--
-- Name: mrs_scan_session_summary_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_scan_session_summary_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_session_summary_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_scan_session_summary_vw TO ni_developers;
GRANT ALL ON TABLE mrs_scan_session_summary_vw TO postgres;
GRANT SELECT ON TABLE mrs_scan_session_summary_vw TO micis_app;
GRANT SELECT ON TABLE mrs_scan_session_summary_vw TO portal_app;
GRANT ALL ON TABLE mrs_scan_session_summary_vw TO node_api;


--
-- Name: mrs_scan_sessions2_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_scan_sessions2_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions2_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_scan_sessions2_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_scan_sessions2_vw TO micis_app;
GRANT SELECT ON TABLE mrs_scan_sessions2_vw TO portal_app;
GRANT ALL ON TABLE mrs_scan_sessions2_vw TO node_api;


--
-- Name: mrs_scan_sessions_all_mods_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_scan_sessions_all_mods_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_all_mods_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_scan_sessions_all_mods_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_scan_sessions_all_mods_vw TO micis_app;
GRANT ALL ON TABLE mrs_scan_sessions_all_mods_vw TO node_api;


--
-- Name: mrs_scan_sessions_ext_props; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_ext_props FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_ext_props FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_ext_props TO postgres;
GRANT ALL ON TABLE mrs_scan_sessions_ext_props TO node_api;


--
-- Name: mrs_scan_sessions_ext_props_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_ext_props_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_ext_props_vw FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_ext_props_vw TO postgres;
GRANT SELECT ON TABLE mrs_scan_sessions_ext_props_vw TO micis_app;
GRANT ALL ON TABLE mrs_scan_sessions_ext_props_vw TO node_api;


--
-- Name: mrs_scan_sessions_from_archive; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_from_archive FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_from_archive FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_from_archive TO postgres;
GRANT ALL ON TABLE mrs_scan_sessions_from_archive TO node_api;


--
-- Name: mrs_scan_sessions_from_archive_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_scan_sessions_from_archive_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_scan_sessions_from_archive_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_scan_sessions_from_archive_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_scan_sessions_from_archive_counter TO node_api;


--
-- Name: mrs_scan_sessions_from_archive_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_from_archive_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_from_archive_hist FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_from_archive_hist TO postgres;
GRANT ALL ON TABLE mrs_scan_sessions_from_archive_hist TO node_api;


--
-- Name: mrs_scan_sessions_from_archive_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_from_archive_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_from_archive_vw FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_from_archive_vw TO postgres;
GRANT SELECT ON TABLE mrs_scan_sessions_from_archive_vw TO micis_app;
GRANT SELECT ON TABLE mrs_scan_sessions_from_archive_vw TO portal_app;
GRANT ALL ON TABLE mrs_scan_sessions_from_archive_vw TO node_api;


--
-- Name: mrs_scan_sessions_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_hist FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_hist TO postgres;
GRANT ALL ON TABLE mrs_scan_sessions_hist TO node_api;


--
-- Name: mrs_scan_sessions_hist_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_scan_sessions_hist_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_hist_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_scan_sessions_hist_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_scan_sessions_hist_vw TO micis_app;
GRANT ALL ON TABLE mrs_scan_sessions_hist_vw TO node_api;


--
-- Name: mrs_scan_sessions_qb_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_qb_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_qb_vw FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_qb_vw TO postgres;
GRANT SELECT ON TABLE mrs_scan_sessions_qb_vw TO micis_app;
GRANT ALL ON TABLE mrs_scan_sessions_qb_vw TO node_api;


--
-- Name: mrs_scan_sessions_review; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_review FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_review FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_review TO postgres;
GRANT ALL ON TABLE mrs_scan_sessions_review TO node_api;


--
-- Name: mrs_scan_sessions_review_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_review_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_review_hist FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_review_hist TO postgres;
GRANT ALL ON TABLE mrs_scan_sessions_review_hist TO node_api;


--
-- Name: mrs_scan_sessions_review_hist_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_review_hist_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_review_hist_vw FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_review_hist_vw TO postgres;
GRANT SELECT ON TABLE mrs_scan_sessions_review_hist_vw TO micis_app;
GRANT ALL ON TABLE mrs_scan_sessions_review_hist_vw TO node_api;


--
-- Name: mrs_scan_sessions_review_include; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_review_include FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_review_include FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_review_include TO postgres;
GRANT ALL ON TABLE mrs_scan_sessions_review_include TO node_api;


--
-- Name: mrs_scan_sessions_review_include_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_review_include_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_review_include_hist FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_review_include_hist TO postgres;
GRANT ALL ON TABLE mrs_scan_sessions_review_include_hist TO node_api;


--
-- Name: mrs_scan_sessions_review_include_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_review_include_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_review_include_vw FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_review_include_vw TO postgres;
GRANT SELECT ON TABLE mrs_scan_sessions_review_include_vw TO micis_app;
GRANT SELECT ON TABLE mrs_scan_sessions_review_include_vw TO transfer_app;
GRANT ALL ON TABLE mrs_scan_sessions_review_include_vw TO node_api;


--
-- Name: mrs_scan_sessions_review_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_scan_sessions_review_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_review_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_scan_sessions_review_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_scan_sessions_review_vw TO micis_app;
GRANT SELECT ON TABLE mrs_scan_sessions_review_vw TO transfer_app;
GRANT ALL ON TABLE mrs_scan_sessions_review_vw TO node_api;


--
-- Name: mrs_scan_sessions_stage; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_sessions_stage FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_stage FROM postgres;
GRANT ALL ON TABLE mrs_scan_sessions_stage TO postgres;
GRANT ALL ON TABLE mrs_scan_sessions_stage TO node_api;


--
-- Name: mrs_scan_sessions_stage_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_scan_sessions_stage_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_stage_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_scan_sessions_stage_hist TO ni_developers;
GRANT ALL ON TABLE mrs_scan_sessions_stage_hist TO node_api;


--
-- Name: mrs_scan_sessions_stage_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_scan_sessions_stage_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_stage_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_scan_sessions_stage_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_scan_sessions_stage_vw TO micis_app;
GRANT SELECT ON TABLE mrs_scan_sessions_stage_vw TO portal_app;
GRANT SELECT ON TABLE mrs_scan_sessions_stage_vw TO transfer_app;
GRANT ALL ON TABLE mrs_scan_sessions_stage_vw TO node_api;


--
-- Name: mrs_scan_sessions_t_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_scan_sessions_t_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_t_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_scan_sessions_t_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_scan_sessions_t_vw TO micis_app;
GRANT SELECT ON TABLE mrs_scan_sessions_t_vw TO transfer_app;
GRANT ALL ON TABLE mrs_scan_sessions_t_vw TO node_api;


--
-- Name: mrs_scan_sessions_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_scan_sessions_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_sessions_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_scan_sessions_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_scan_sessions_vw TO micis_app;
GRANT SELECT ON TABLE mrs_scan_sessions_vw TO portal_app;
GRANT SELECT ON TABLE mrs_scan_sessions_vw TO transfer_app;
GRANT ALL ON TABLE mrs_scan_sessions_vw TO node_api;


--
-- Name: mrs_scan_slot_uses; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_slot_uses FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_slot_uses FROM postgres;
GRANT ALL ON TABLE mrs_scan_slot_uses TO postgres;
GRANT ALL ON TABLE mrs_scan_slot_uses TO node_api;


--
-- Name: mrs_scan_slot_uses_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_scan_slot_uses_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_scan_slot_uses_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_scan_slot_uses_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_scan_slot_uses_counter TO node_api;


--
-- Name: mrs_scan_slot_uses_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_slot_uses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_slot_uses_vw FROM postgres;
GRANT ALL ON TABLE mrs_scan_slot_uses_vw TO postgres;
GRANT SELECT ON TABLE mrs_scan_slot_uses_vw TO micis_app;
GRANT ALL ON TABLE mrs_scan_slot_uses_vw TO node_api;


--
-- Name: mrs_scan_slots; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_slots FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_slots FROM postgres;
GRANT ALL ON TABLE mrs_scan_slots TO postgres;
GRANT ALL ON TABLE mrs_scan_slots TO node_api;


--
-- Name: mrs_scan_slots_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_scan_slots_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_scan_slots_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_scan_slots_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_scan_slots_counter TO node_api;


--
-- Name: mrs_scan_slots_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_slots_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_slots_hist FROM postgres;
GRANT ALL ON TABLE mrs_scan_slots_hist TO postgres;
GRANT ALL ON TABLE mrs_scan_slots_hist TO node_api;


--
-- Name: mrs_scan_slots_hist_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_slots_hist_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_slots_hist_vw FROM postgres;
GRANT ALL ON TABLE mrs_scan_slots_hist_vw TO postgres;
GRANT SELECT ON TABLE mrs_scan_slots_hist_vw TO micis_app;
GRANT ALL ON TABLE mrs_scan_slots_hist_vw TO node_api;


--
-- Name: mrs_scan_slots_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scan_slots_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scan_slots_vw FROM postgres;
GRANT ALL ON TABLE mrs_scan_slots_vw TO postgres;
GRANT SELECT ON TABLE mrs_scan_slots_vw TO micis_app;
GRANT ALL ON TABLE mrs_scan_slots_vw TO node_api;


--
-- Name: mrs_scanners2_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scanners2_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scanners2_vw FROM postgres;
GRANT ALL ON TABLE mrs_scanners2_vw TO postgres;
GRANT SELECT ON TABLE mrs_scanners2_vw TO micis_app;
GRANT SELECT ON TABLE mrs_scanners2_vw TO portal_app;
GRANT SELECT ON TABLE mrs_scanners2_vw TO transfer_app;
GRANT ALL ON TABLE mrs_scanners2_vw TO node_api;


--
-- Name: mrs_scanners_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_scanners_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scanners_hist FROM postgres;
GRANT ALL ON TABLE mrs_scanners_hist TO postgres;
GRANT ALL ON TABLE mrs_scanners_hist TO node_api;


--
-- Name: mrs_scanners_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_scanners_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_scanners_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_scanners_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_scanners_vw TO micis_app;
GRANT SELECT ON TABLE mrs_scanners_vw TO portal_app;
GRANT SELECT ON TABLE mrs_scanners_vw TO transfer_app;
GRANT ALL ON TABLE mrs_scanners_vw TO node_api;


--
-- Name: mrs_series_analysis; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_analysis FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_analysis FROM postgres;
GRANT ALL ON TABLE mrs_series_analysis TO postgres;
GRANT ALL ON TABLE mrs_series_analysis TO node_api;


--
-- Name: mrs_series_analysis_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_analysis_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_analysis_vw FROM postgres;
GRANT ALL ON TABLE mrs_series_analysis_vw TO postgres;
GRANT SELECT ON TABLE mrs_series_analysis_vw TO micis_app;
GRANT SELECT ON TABLE mrs_series_analysis_vw TO portal_app;
GRANT ALL ON TABLE mrs_series_analysis_vw TO node_api;


--
-- Name: mrs_series_data_comp_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_series_data_comp_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_data_comp_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_series_data_comp_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_series_data_comp_vw TO micis_app;
GRANT SELECT ON TABLE mrs_series_data_comp_vw TO portal_app;
GRANT ALL ON TABLE mrs_series_data_comp_vw TO node_api;


--
-- Name: mrs_series_data_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_series_data_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_series_data_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_series_data_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_series_data_counter TO node_api;


--
-- Name: mrs_series_data_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_data_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_data_hist FROM postgres;
GRANT ALL ON TABLE mrs_series_data_hist TO postgres;
GRANT ALL ON TABLE mrs_series_data_hist TO node_api;


--
-- Name: mrs_series_data_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_data_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_data_vw FROM postgres;
GRANT ALL ON TABLE mrs_series_data_vw TO postgres;
GRANT SELECT ON TABLE mrs_series_data_vw TO micis_app;
GRANT ALL ON TABLE mrs_series_data_vw TO node_api;


--
-- Name: mrs_series_definitions_definition_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_series_definitions_definition_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_series_definitions_definition_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_series_definitions_definition_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_series_definitions_definition_id_seq TO node_api;


--
-- Name: mrs_series_definitions_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_series_definitions_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_definitions_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_series_definitions_hist TO ni_developers;
GRANT ALL ON TABLE mrs_series_definitions_hist TO node_api;


--
-- Name: mrs_series_definitions_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_series_definitions_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_definitions_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_series_definitions_vw TO ni_developers;
GRANT ALL ON TABLE mrs_series_definitions_vw TO postgres;
GRANT SELECT ON TABLE mrs_series_definitions_vw TO micis_app;
GRANT SELECT ON TABLE mrs_series_definitions_vw TO portal_app;
GRANT ALL ON TABLE mrs_series_definitions_vw TO node_api;


--
-- Name: mrs_series_fmri_params; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_fmri_params FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_fmri_params FROM postgres;
GRANT ALL ON TABLE mrs_series_fmri_params TO postgres;
GRANT ALL ON TABLE mrs_series_fmri_params TO node_api;


--
-- Name: mrs_series_fmri_params_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_fmri_params_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_fmri_params_vw FROM postgres;
GRANT ALL ON TABLE mrs_series_fmri_params_vw TO postgres;
GRANT SELECT ON TABLE mrs_series_fmri_params_vw TO micis_app;
GRANT SELECT ON TABLE mrs_series_fmri_params_vw TO portal_app;
GRANT ALL ON TABLE mrs_series_fmri_params_vw TO node_api;


--
-- Name: mrs_series_from_archive; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_from_archive FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_from_archive FROM postgres;
GRANT ALL ON TABLE mrs_series_from_archive TO postgres;
GRANT ALL ON TABLE mrs_series_from_archive TO node_api;


--
-- Name: mrs_series_from_archive_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_series_from_archive_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_series_from_archive_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_series_from_archive_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_series_from_archive_counter TO node_api;


--
-- Name: mrs_series_from_archive_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_from_archive_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_from_archive_hist FROM postgres;
GRANT ALL ON TABLE mrs_series_from_archive_hist TO postgres;
GRANT ALL ON TABLE mrs_series_from_archive_hist TO node_api;


--
-- Name: mrs_series_from_archive_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_from_archive_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_from_archive_vw FROM postgres;
GRANT ALL ON TABLE mrs_series_from_archive_vw TO postgres;
GRANT SELECT ON TABLE mrs_series_from_archive_vw TO micis_app;
GRANT SELECT ON TABLE mrs_series_from_archive_vw TO portal_app;
GRANT ALL ON TABLE mrs_series_from_archive_vw TO node_api;


--
-- Name: mrs_series_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_hist FROM postgres;
GRANT ALL ON TABLE mrs_series_hist TO postgres;
GRANT ALL ON TABLE mrs_series_hist TO node_api;


--
-- Name: mrs_series_labels_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_series_labels_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_labels_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_series_labels_hist TO ni_developers;
GRANT ALL ON TABLE mrs_series_labels_hist TO node_api;


--
-- Name: mrs_series_labels_label_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_series_labels_label_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_series_labels_label_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_series_labels_label_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_series_labels_label_id_seq TO node_api;


--
-- Name: mrs_series_labels_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_labels_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_labels_vw FROM postgres;
GRANT ALL ON TABLE mrs_series_labels_vw TO postgres;
GRANT ALL ON TABLE mrs_series_labels_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_series_labels_vw TO micis_app;
GRANT SELECT ON TABLE mrs_series_labels_vw TO portal_app;
GRANT SELECT ON TABLE mrs_series_labels_vw TO transfer_app;
GRANT ALL ON TABLE mrs_series_labels_vw TO node_api;


--
-- Name: mrs_series_level2_analysis; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_level2_analysis FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_level2_analysis FROM postgres;
GRANT ALL ON TABLE mrs_series_level2_analysis TO postgres;
GRANT ALL ON TABLE mrs_series_level2_analysis TO node_api;


--
-- Name: mrs_series_level2_analysis_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_level2_analysis_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_level2_analysis_vw FROM postgres;
GRANT ALL ON TABLE mrs_series_level2_analysis_vw TO postgres;
GRANT SELECT ON TABLE mrs_series_level2_analysis_vw TO micis_app;
GRANT SELECT ON TABLE mrs_series_level2_analysis_vw TO portal_app;
GRANT ALL ON TABLE mrs_series_level2_analysis_vw TO node_api;


--
-- Name: mrs_series_mismatches; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_mismatches FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_mismatches FROM postgres;
GRANT ALL ON TABLE mrs_series_mismatches TO postgres;
GRANT ALL ON TABLE mrs_series_mismatches TO node_api;


--
-- Name: mrs_series_stage; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_stage FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_stage FROM postgres;
GRANT ALL ON TABLE mrs_series_stage TO postgres;
GRANT ALL ON TABLE mrs_series_stage TO node_api;


--
-- Name: mrs_series_stage_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_series_stage_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_series_stage_vw FROM postgres;
GRANT ALL ON TABLE mrs_series_stage_vw TO postgres;
GRANT SELECT ON TABLE mrs_series_stage_vw TO micis_app;
GRANT SELECT ON TABLE mrs_series_stage_vw TO portal_app;
GRANT ALL ON TABLE mrs_series_stage_vw TO node_api;


--
-- Name: mrs_sharing_rules; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules TO postgres;
GRANT ALL ON TABLE mrs_sharing_rules TO node_api;


--
-- Name: mrs_sharing_rules_asmts_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules_asmts_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_asmts_vw FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules_asmts_vw TO postgres;
GRANT SELECT ON TABLE mrs_sharing_rules_asmts_vw TO micis_app;
GRANT SELECT ON TABLE mrs_sharing_rules_asmts_vw TO portal_app;
GRANT ALL ON TABLE mrs_sharing_rules_asmts_vw TO node_api;


--
-- Name: mrs_sharing_rules_bak; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules_bak FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_bak FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules_bak TO postgres;
GRANT ALL ON TABLE mrs_sharing_rules_bak TO node_api;


--
-- Name: mrs_sharing_rules_dets_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_sharing_rules_dets_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_dets_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_sharing_rules_dets_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_sharing_rules_dets_vw TO micis_app;
GRANT ALL ON TABLE mrs_sharing_rules_dets_vw TO node_api;


--
-- Name: mrs_sharing_rules_exceptions; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules_exceptions FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_exceptions FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules_exceptions TO postgres;
GRANT ALL ON TABLE mrs_sharing_rules_exceptions TO node_api;


--
-- Name: mrs_sharing_rules_exceptions_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules_exceptions_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_exceptions_hist FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules_exceptions_hist TO postgres;
GRANT ALL ON TABLE mrs_sharing_rules_exceptions_hist TO node_api;


--
-- Name: mrs_sharing_rules_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_hist FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules_hist TO postgres;
GRANT ALL ON TABLE mrs_sharing_rules_hist TO node_api;


--
-- Name: mrs_sharing_rules_studies_bak; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules_studies_bak FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_studies_bak FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules_studies_bak TO postgres;
GRANT ALL ON TABLE mrs_sharing_rules_studies_bak TO node_api;


--
-- Name: mrs_sharing_rules_studies_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules_studies_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_studies_hist FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules_studies_hist TO postgres;
GRANT ALL ON TABLE mrs_sharing_rules_studies_hist TO node_api;


--
-- Name: mrs_sharing_rules_studies_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules_studies_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_studies_vw FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules_studies_vw TO postgres;
GRANT SELECT ON TABLE mrs_sharing_rules_studies_vw TO micis_app;
GRANT SELECT ON TABLE mrs_sharing_rules_studies_vw TO portal_app;
GRANT ALL ON TABLE mrs_sharing_rules_studies_vw TO node_api;


--
-- Name: mrs_sharing_rules_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sharing_rules_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sharing_rules_vw FROM postgres;
GRANT ALL ON TABLE mrs_sharing_rules_vw TO postgres;
GRANT SELECT ON TABLE mrs_sharing_rules_vw TO micis_app;
GRANT ALL ON TABLE mrs_sharing_rules_vw TO node_api;


--
-- Name: mrs_softwares; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_softwares FROM PUBLIC;
REVOKE ALL ON TABLE mrs_softwares FROM postgres;
GRANT ALL ON TABLE mrs_softwares TO postgres;
GRANT ALL ON TABLE mrs_softwares TO node_api;


--
-- Name: mrs_softwares_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_softwares_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_softwares_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_softwares_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_softwares_counter TO node_api;


--
-- Name: mrs_sorted_questionids_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_sorted_questionids_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_sorted_questionids_vw FROM postgres;
GRANT ALL ON TABLE mrs_sorted_questionids_vw TO postgres;
GRANT SELECT ON TABLE mrs_sorted_questionids_vw TO micis_app;
GRANT ALL ON TABLE mrs_sorted_questionids_vw TO node_api;


--
-- Name: mrs_source_type; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_source_type FROM PUBLIC;
REVOKE ALL ON TABLE mrs_source_type FROM ni_developers;
GRANT ALL ON TABLE mrs_source_type TO ni_developers;
GRANT ALL ON TABLE mrs_source_type TO node_api;


--
-- Name: mrs_source_type_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_source_type_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_source_type_hist FROM postgres;
GRANT ALL ON TABLE mrs_source_type_hist TO postgres;
GRANT ALL ON TABLE mrs_source_type_hist TO node_api;


--
-- Name: mrs_source_type_source_type_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_source_type_source_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_source_type_source_type_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_source_type_source_type_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_source_type_source_type_id_seq TO node_api;


--
-- Name: mrs_source_type_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_source_type_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_source_type_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_source_type_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_source_type_vw TO micis_app;
GRANT SELECT ON TABLE mrs_source_type_vw TO portal_app;
GRANT ALL ON TABLE mrs_source_type_vw TO node_api;


--
-- Name: mrs_specifiers_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_specifiers_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_specifiers_vw FROM postgres;
GRANT ALL ON TABLE mrs_specifiers_vw TO postgres;
GRANT SELECT ON TABLE mrs_specifiers_vw TO micis_app;
GRANT ALL ON TABLE mrs_specifiers_vw TO node_api;


--
-- Name: mrs_stats_system; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_stats_system FROM PUBLIC;
REVOKE ALL ON TABLE mrs_stats_system FROM postgres;
GRANT ALL ON TABLE mrs_stats_system TO postgres;
GRANT ALL ON TABLE mrs_stats_system TO node_api;


--
-- Name: mrs_stats_system_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_stats_system_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_stats_system_vw FROM postgres;
GRANT ALL ON TABLE mrs_stats_system_vw TO postgres;
GRANT SELECT ON TABLE mrs_stats_system_vw TO micis_app;
GRANT ALL ON TABLE mrs_stats_system_vw TO node_api;


--
-- Name: mrs_studies2_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_studies2_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_studies2_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_studies2_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_studies2_vw TO micis_app;
GRANT SELECT ON TABLE mrs_studies2_vw TO portal_app;
GRANT SELECT ON TABLE mrs_studies2_vw TO p2_app;
GRANT ALL ON TABLE mrs_studies2_vw TO node_api;


--
-- Name: mrs_studies_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_studies_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_studies_hist FROM postgres;
GRANT ALL ON TABLE mrs_studies_hist TO postgres;
GRANT ALL ON TABLE mrs_studies_hist TO node_api;


--
-- Name: mrs_studies_hist_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_studies_hist_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_studies_hist_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_studies_hist_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_studies_hist_vw TO micis_app;
GRANT ALL ON TABLE mrs_studies_hist_vw TO node_api;


--
-- Name: mrs_studies_researc_areas_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_studies_researc_areas_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_studies_researc_areas_hist FROM postgres;
GRANT ALL ON TABLE mrs_studies_researc_areas_hist TO postgres;
GRANT ALL ON TABLE mrs_studies_researc_areas_hist TO node_api;


--
-- Name: mrs_studies_research_areas; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_studies_research_areas FROM PUBLIC;
REVOKE ALL ON TABLE mrs_studies_research_areas FROM postgres;
GRANT ALL ON TABLE mrs_studies_research_areas TO postgres;
GRANT ALL ON TABLE mrs_studies_research_areas TO node_api;


--
-- Name: mrs_studies_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_studies_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_studies_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_studies_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_studies_vw TO p2_app;
GRANT SELECT ON TABLE mrs_studies_vw TO micis_app;
GRANT SELECT ON TABLE mrs_studies_vw TO cas_app;
GRANT SELECT ON TABLE mrs_studies_vw TO portal_app;
GRANT SELECT ON TABLE mrs_studies_vw TO transfer_app;
GRANT SELECT ON TABLE mrs_studies_vw TO coinspr_app;
GRANT ALL ON TABLE mrs_studies_vw TO node_api;


--
-- Name: mrs_studies_with_enrollment_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_studies_with_enrollment_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_studies_with_enrollment_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_studies_with_enrollment_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_studies_with_enrollment_vw TO p2_app;
GRANT SELECT ON TABLE mrs_studies_with_enrollment_vw TO micis_app;
GRANT SELECT ON TABLE mrs_studies_with_enrollment_vw TO portal_app;
GRANT ALL ON TABLE mrs_studies_with_enrollment_vw TO node_api;


--
-- Name: mrs_study_asmt_prot; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_asmt_prot FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_asmt_prot FROM postgres;
GRANT ALL ON TABLE mrs_study_asmt_prot TO postgres;
GRANT ALL ON TABLE mrs_study_asmt_prot TO node_api;


--
-- Name: mrs_study_asmt_prot_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_asmt_prot_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_asmt_prot_vw FROM postgres;
GRANT ALL ON TABLE mrs_study_asmt_prot_vw TO postgres;
GRANT SELECT ON TABLE mrs_study_asmt_prot_vw TO micis_app;
GRANT ALL ON TABLE mrs_study_asmt_prot_vw TO node_api;


--
-- Name: mrs_study_codes_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_codes_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_codes_hist FROM postgres;
GRANT ALL ON TABLE mrs_study_codes_hist TO postgres;
GRANT ALL ON TABLE mrs_study_codes_hist TO node_api;


--
-- Name: mrs_study_codes_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_codes_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_codes_vw FROM postgres;
GRANT ALL ON TABLE mrs_study_codes_vw TO postgres;
GRANT SELECT ON TABLE mrs_study_codes_vw TO micis_app;
GRANT SELECT ON TABLE mrs_study_codes_vw TO portal_app;
GRANT ALL ON TABLE mrs_study_codes_vw TO node_api;


--
-- Name: mrs_study_demo_config; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_demo_config FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_demo_config FROM postgres;
GRANT ALL ON TABLE mrs_study_demo_config TO postgres;
GRANT ALL ON TABLE mrs_study_demo_config TO node_api;


--
-- Name: mrs_study_demo_config_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_demo_config_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_demo_config_vw FROM postgres;
GRANT ALL ON TABLE mrs_study_demo_config_vw TO postgres;
GRANT SELECT ON TABLE mrs_study_demo_config_vw TO micis_app;
GRANT ALL ON TABLE mrs_study_demo_config_vw TO node_api;


--
-- Name: mrs_study_ids_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_ids_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_ids_vw FROM postgres;
GRANT ALL ON TABLE mrs_study_ids_vw TO postgres;
GRANT SELECT ON TABLE mrs_study_ids_vw TO micis_app;
GRANT ALL ON TABLE mrs_study_ids_vw TO node_api;


--
-- Name: mrs_study_intervals_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_intervals_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_intervals_hist FROM postgres;
GRANT ALL ON TABLE mrs_study_intervals_hist TO postgres;
GRANT ALL ON TABLE mrs_study_intervals_hist TO node_api;


--
-- Name: mrs_study_intervals_segment_interval_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_study_intervals_segment_interval_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_study_intervals_segment_interval_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_study_intervals_segment_interval_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_study_intervals_segment_interval_id_seq TO node_api;


--
-- Name: mrs_study_intervals_subject_s_study_intervals_subject_sched_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_study_intervals_subject_s_study_intervals_subject_sched_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_study_intervals_subject_s_study_intervals_subject_sched_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_study_intervals_subject_s_study_intervals_subject_sched_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_study_intervals_subject_s_study_intervals_subject_sched_seq TO node_api;


--
-- Name: mrs_study_intervals_subject_schedules_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_intervals_subject_schedules_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_intervals_subject_schedules_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_study_intervals_subject_schedules_hist TO ni_developers;
GRANT ALL ON TABLE mrs_study_intervals_subject_schedules_hist TO node_api;


--
-- Name: mrs_study_intervals_subject_schedules_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_intervals_subject_schedules_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_intervals_subject_schedules_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_study_intervals_subject_schedules_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_study_intervals_subject_schedules_vw TO micis_app;
GRANT SELECT ON TABLE mrs_study_intervals_subject_schedules_vw TO portal_app;
GRANT ALL ON TABLE mrs_study_intervals_subject_schedules_vw TO node_api;


--
-- Name: mrs_study_messages; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_messages FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_messages FROM postgres;
GRANT ALL ON TABLE mrs_study_messages TO postgres;
GRANT ALL ON TABLE mrs_study_messages TO node_api;


--
-- Name: mrs_study_messages_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_messages_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_messages_hist FROM postgres;
GRANT ALL ON TABLE mrs_study_messages_hist TO postgres;
GRANT ALL ON TABLE mrs_study_messages_hist TO node_api;


--
-- Name: mrs_study_messages_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_messages_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_messages_vw FROM postgres;
GRANT ALL ON TABLE mrs_study_messages_vw TO postgres;
GRANT SELECT ON TABLE mrs_study_messages_vw TO micis_app;
GRANT SELECT ON TABLE mrs_study_messages_vw TO portal_app;
GRANT ALL ON TABLE mrs_study_messages_vw TO node_api;


--
-- Name: mrs_study_missing_assessment_reasons; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_missing_assessment_reasons FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_missing_assessment_reasons FROM postgres;
GRANT ALL ON TABLE mrs_study_missing_assessment_reasons TO postgres;
GRANT ALL ON TABLE mrs_study_missing_assessment_reasons TO node_api;


--
-- Name: mrs_study_missing_assessment_reasons_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_missing_assessment_reasons_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_missing_assessment_reasons_vw FROM postgres;
GRANT ALL ON TABLE mrs_study_missing_assessment_reasons_vw TO postgres;
GRANT SELECT ON TABLE mrs_study_missing_assessment_reasons_vw TO micis_app;
GRANT SELECT ON TABLE mrs_study_missing_assessment_reasons_vw TO portal_app;
GRANT ALL ON TABLE mrs_study_missing_assessment_reasons_vw TO node_api;


--
-- Name: mrs_study_proj_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_proj_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_proj_hist FROM postgres;
GRANT ALL ON TABLE mrs_study_proj_hist TO postgres;
GRANT ALL ON TABLE mrs_study_proj_hist TO node_api;


--
-- Name: mrs_study_projects; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_projects FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_projects FROM postgres;
GRANT ALL ON TABLE mrs_study_projects TO postgres;
GRANT ALL ON TABLE mrs_study_projects TO node_api;


--
-- Name: mrs_study_projects_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_projects_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_projects_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_study_projects_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_study_projects_vw TO micis_app;
GRANT SELECT ON TABLE mrs_study_projects_vw TO portal_app;
GRANT ALL ON TABLE mrs_study_projects_vw TO node_api;


--
-- Name: mrs_study_recruitment_criteria; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_recruitment_criteria FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_recruitment_criteria FROM postgres;
GRANT ALL ON TABLE mrs_study_recruitment_criteria TO postgres;
GRANT ALL ON TABLE mrs_study_recruitment_criteria TO node_api;


--
-- Name: mrs_study_recruitment_criteria_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_recruitment_criteria_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_recruitment_criteria_hist FROM postgres;
GRANT ALL ON TABLE mrs_study_recruitment_criteria_hist TO postgres;
GRANT ALL ON TABLE mrs_study_recruitment_criteria_hist TO node_api;


--
-- Name: mrs_study_recruitment_criteria_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_recruitment_criteria_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_recruitment_criteria_vw FROM postgres;
GRANT ALL ON TABLE mrs_study_recruitment_criteria_vw TO postgres;
GRANT SELECT ON TABLE mrs_study_recruitment_criteria_vw TO micis_app;
GRANT SELECT ON TABLE mrs_study_recruitment_criteria_vw TO portal_app;
GRANT ALL ON TABLE mrs_study_recruitment_criteria_vw TO node_api;


--
-- Name: mrs_study_research_area; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_research_area FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_research_area FROM postgres;
GRANT ALL ON TABLE mrs_study_research_area TO postgres;
GRANT ALL ON TABLE mrs_study_research_area TO node_api;


--
-- Name: mrs_study_research_area_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_research_area_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_research_area_hist FROM postgres;
GRANT ALL ON TABLE mrs_study_research_area_hist TO postgres;
GRANT ALL ON TABLE mrs_study_research_area_hist TO node_api;


--
-- Name: mrs_study_research_area_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_research_area_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_research_area_vw FROM postgres;
GRANT ALL ON TABLE mrs_study_research_area_vw TO postgres;
GRANT SELECT ON TABLE mrs_study_research_area_vw TO p2_app;
GRANT SELECT ON TABLE mrs_study_research_area_vw TO micis_app;
GRANT ALL ON TABLE mrs_study_research_area_vw TO node_api;


--
-- Name: mrs_study_scanner_rates_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_scanner_rates_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_scanner_rates_hist FROM postgres;
GRANT ALL ON TABLE mrs_study_scanner_rates_hist TO postgres;
GRANT ALL ON TABLE mrs_study_scanner_rates_hist TO node_api;


--
-- Name: mrs_study_secondary_sites; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_secondary_sites FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_secondary_sites FROM ni_developers;
GRANT ALL ON TABLE mrs_study_secondary_sites TO ni_developers;
GRANT ALL ON TABLE mrs_study_secondary_sites TO node_api;


--
-- Name: mrs_study_secondary_sites_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_secondary_sites_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_secondary_sites_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_study_secondary_sites_hist TO ni_developers;
GRANT ALL ON TABLE mrs_study_secondary_sites_hist TO node_api;


--
-- Name: mrs_study_secondary_sites_study_site_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_study_secondary_sites_study_site_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_study_secondary_sites_study_site_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_study_secondary_sites_study_site_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_study_secondary_sites_study_site_id_seq TO node_api;


--
-- Name: mrs_study_secondary_sites_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_secondary_sites_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_secondary_sites_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_study_secondary_sites_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_study_secondary_sites_vw TO micis_app;
GRANT ALL ON TABLE mrs_study_secondary_sites_vw TO node_api;


--
-- Name: mrs_study_statuses_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_statuses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_statuses_vw FROM postgres;
GRANT ALL ON TABLE mrs_study_statuses_vw TO postgres;
GRANT SELECT ON TABLE mrs_study_statuses_vw TO p2_app;
GRANT SELECT ON TABLE mrs_study_statuses_vw TO micis_app;
GRANT ALL ON TABLE mrs_study_statuses_vw TO node_api;


--
-- Name: mrs_study_template_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_study_template_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_study_template_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_study_template_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_study_template_counter TO node_api;


--
-- Name: mrs_study_templates; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_templates FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_templates FROM postgres;
GRANT ALL ON TABLE mrs_study_templates TO postgres;
GRANT ALL ON TABLE mrs_study_templates TO node_api;


--
-- Name: mrs_study_templates_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_templates_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_templates_hist FROM postgres;
GRANT ALL ON TABLE mrs_study_templates_hist TO postgres;
GRANT ALL ON TABLE mrs_study_templates_hist TO node_api;


--
-- Name: mrs_study_templates_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_study_templates_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_templates_vw FROM postgres;
GRANT ALL ON TABLE mrs_study_templates_vw TO postgres;
GRANT SELECT ON TABLE mrs_study_templates_vw TO micis_app;
GRANT ALL ON TABLE mrs_study_templates_vw TO node_api;


--
-- Name: mrs_study_tracker_event_canned_responses; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_tracker_event_canned_responses FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_tracker_event_canned_responses FROM ni_developers;
GRANT ALL ON TABLE mrs_study_tracker_event_canned_responses TO ni_developers;
GRANT ALL ON TABLE mrs_study_tracker_event_canned_responses TO node_api;


--
-- Name: mrs_study_tracker_event_canned_responses_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_tracker_event_canned_responses_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_tracker_event_canned_responses_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_study_tracker_event_canned_responses_hist TO ni_developers;
GRANT ALL ON TABLE mrs_study_tracker_event_canned_responses_hist TO node_api;


--
-- Name: mrs_study_tracker_event_canned_responses_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_study_tracker_event_canned_responses_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_study_tracker_event_canned_responses_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_study_tracker_event_canned_responses_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_study_tracker_event_canned_responses_id_seq TO node_api;


--
-- Name: mrs_study_tracker_event_canned_responses_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_tracker_event_canned_responses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_tracker_event_canned_responses_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_study_tracker_event_canned_responses_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_study_tracker_event_canned_responses_vw TO micis_app;
GRANT ALL ON TABLE mrs_study_tracker_event_canned_responses_vw TO node_api;


--
-- Name: mrs_study_tracker_response_options_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_tracker_response_options_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_tracker_response_options_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_study_tracker_response_options_hist TO ni_developers;
GRANT ALL ON TABLE mrs_study_tracker_response_options_hist TO node_api;


--
-- Name: mrs_study_tracker_response_options_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_study_tracker_response_options_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_study_tracker_response_options_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_study_tracker_response_options_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_study_tracker_response_options_id_seq TO node_api;


--
-- Name: mrs_study_trackers_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_study_trackers_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_study_trackers_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_study_trackers_hist TO ni_developers;
GRANT ALL ON TABLE mrs_study_trackers_hist TO node_api;


--
-- Name: mrs_study_trackers_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_study_trackers_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_study_trackers_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_study_trackers_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_study_trackers_id_seq TO node_api;


--
-- Name: mrs_subject_anon_ids_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_anon_ids_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_anon_ids_vw FROM postgres;
GRANT ALL ON TABLE mrs_subject_anon_ids_vw TO postgres;
GRANT SELECT ON TABLE mrs_subject_anon_ids_vw TO micis_app;
GRANT ALL ON TABLE mrs_subject_anon_ids_vw TO node_api;


--
-- Name: mrs_subject_assessments_queue_aqueue_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_subject_assessments_queue_aqueue_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_assessments_queue_aqueue_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_subject_assessments_queue_aqueue_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_assessments_queue_aqueue_id_seq TO node_api;


--
-- Name: mrs_subject_assessments_queue_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_assessments_queue_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_assessments_queue_hist FROM postgres;
GRANT ALL ON TABLE mrs_subject_assessments_queue_hist TO postgres;
GRANT ALL ON TABLE mrs_subject_assessments_queue_hist TO node_api;


--
-- Name: mrs_subject_assessments_queue_instruments; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_assessments_queue_instruments FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_assessments_queue_instruments FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_assessments_queue_instruments TO ni_developers;
GRANT ALL ON TABLE mrs_subject_assessments_queue_instruments TO node_api;


--
-- Name: mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_assessments_queue_instrumen_queue_instrument_id_seq TO node_api;


--
-- Name: mrs_subject_assessments_queue_instruments_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_assessments_queue_instruments_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_assessments_queue_instruments_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_assessments_queue_instruments_hist TO ni_developers;
GRANT ALL ON TABLE mrs_subject_assessments_queue_instruments_hist TO node_api;


--
-- Name: mrs_subject_assessments_queue_types_queue_type_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_subject_assessments_queue_types_queue_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_assessments_queue_types_queue_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrs_subject_assessments_queue_types_queue_type_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_assessments_queue_types_queue_type_id_seq TO node_api;


--
-- Name: mrs_subject_assessments_queue_types_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_assessments_queue_types_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_assessments_queue_types_vw FROM postgres;
GRANT ALL ON TABLE mrs_subject_assessments_queue_types_vw TO postgres;
GRANT SELECT ON TABLE mrs_subject_assessments_queue_types_vw TO p2_app;
GRANT SELECT ON TABLE mrs_subject_assessments_queue_types_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_assessments_queue_types_vw TO portal_app;
GRANT ALL ON TABLE mrs_subject_assessments_queue_types_vw TO node_api;


--
-- Name: mrs_subject_assessments_queue_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_assessments_queue_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_assessments_queue_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_assessments_queue_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_assessments_queue_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_assessments_queue_vw TO p2_app;
GRANT ALL ON TABLE mrs_subject_assessments_queue_vw TO node_api;


--
-- Name: mrs_subject_class_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_class_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_class_details FROM postgres;
GRANT ALL ON TABLE mrs_subject_class_details TO postgres;
GRANT ALL ON TABLE mrs_subject_class_details TO node_api;


--
-- Name: mrs_subject_class_details_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_class_details_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_class_details_hist FROM postgres;
GRANT ALL ON TABLE mrs_subject_class_details_hist TO postgres;
GRANT ALL ON TABLE mrs_subject_class_details_hist TO node_api;


--
-- Name: mrs_subject_class_details_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_class_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_class_details_vw FROM postgres;
GRANT ALL ON TABLE mrs_subject_class_details_vw TO postgres;
GRANT SELECT ON TABLE mrs_subject_class_details_vw TO micis_app;
GRANT ALL ON TABLE mrs_subject_class_details_vw TO node_api;


--
-- Name: mrs_subject_classes; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_classes FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_classes FROM postgres;
GRANT ALL ON TABLE mrs_subject_classes TO postgres;
GRANT ALL ON TABLE mrs_subject_classes TO node_api;


--
-- Name: mrs_subject_classes_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_classes_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_classes_vw FROM postgres;
GRANT ALL ON TABLE mrs_subject_classes_vw TO postgres;
GRANT SELECT ON TABLE mrs_subject_classes_vw TO micis_app;
GRANT ALL ON TABLE mrs_subject_classes_vw TO node_api;


--
-- Name: mrs_subject_contacts; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_contacts FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_contacts FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts TO ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts TO node_api;


--
-- Name: mrs_subject_contacts_addresses; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_contacts_addresses FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_contacts_addresses FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_addresses TO ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_addresses TO node_api;


--
-- Name: mrs_subject_contacts_addresses_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_contacts_addresses_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_contacts_addresses_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_addresses_hist TO ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_addresses_hist TO node_api;


--
-- Name: mrs_subject_contacts_addresses_h_subject_contact_address_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_subject_contacts_addresses_h_subject_contact_address_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_contacts_addresses_h_subject_contact_address_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_subject_contacts_addresses_h_subject_contact_address_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_contacts_addresses_h_subject_contact_address_id_seq TO node_api;


--
-- Name: mrs_subject_contacts_addresses_subject_contact_address_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_subject_contacts_addresses_subject_contact_address_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_contacts_addresses_subject_contact_address_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_subject_contacts_addresses_subject_contact_address_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_contacts_addresses_subject_contact_address_id_seq TO node_api;


--
-- Name: mrs_subject_contacts_addresses_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_contacts_addresses_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_contacts_addresses_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_addresses_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_contacts_addresses_vw TO micis_app;
GRANT ALL ON TABLE mrs_subject_contacts_addresses_vw TO node_api;


--
-- Name: mrs_subject_contacts_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_contacts_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_contacts_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_hist TO ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_hist TO node_api;


--
-- Name: mrs_subject_contacts_hist_subject_contact_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_subject_contacts_hist_subject_contact_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_contacts_hist_subject_contact_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_subject_contacts_hist_subject_contact_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_contacts_hist_subject_contact_id_seq TO node_api;


--
-- Name: mrs_subject_contacts_phones; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_contacts_phones FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_contacts_phones FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_phones TO ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_phones TO node_api;


--
-- Name: mrs_subject_contacts_phones_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_contacts_phones_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_contacts_phones_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_phones_hist TO ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_phones_hist TO node_api;


--
-- Name: mrs_subject_contacts_phones_hist_subject_contact_phone_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_subject_contacts_phones_hist_subject_contact_phone_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_contacts_phones_hist_subject_contact_phone_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_subject_contacts_phones_hist_subject_contact_phone_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_contacts_phones_hist_subject_contact_phone_id_seq TO node_api;


--
-- Name: mrs_subject_contacts_phones_subject_contact_phone_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_subject_contacts_phones_subject_contact_phone_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_contacts_phones_subject_contact_phone_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_subject_contacts_phones_subject_contact_phone_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_contacts_phones_subject_contact_phone_id_seq TO node_api;


--
-- Name: mrs_subject_contacts_phones_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_contacts_phones_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_contacts_phones_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_phones_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_contacts_phones_vw TO micis_app;
GRANT ALL ON TABLE mrs_subject_contacts_phones_vw TO node_api;


--
-- Name: mrs_subject_contacts_subject_contact_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_subject_contacts_subject_contact_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_contacts_subject_contact_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_subject_contacts_subject_contact_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_contacts_subject_contact_id_seq TO node_api;


--
-- Name: mrs_subject_contacts_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_contacts_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_contacts_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_contacts_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_contacts_vw TO micis_app;
GRANT ALL ON TABLE mrs_subject_contacts_vw TO node_api;


--
-- Name: mrs_subject_phone_details; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_phone_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_phone_details FROM postgres;
GRANT ALL ON TABLE mrs_subject_phone_details TO postgres;
GRANT ALL ON TABLE mrs_subject_phone_details TO node_api;


--
-- Name: mrs_subject_tag_details; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tag_details FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tag_details FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tag_details TO ni_developers;
GRANT ALL ON TABLE mrs_subject_tag_details TO node_api;


--
-- Name: mrs_subjects_racial_categories; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subjects_racial_categories FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subjects_racial_categories FROM postgres;
GRANT ALL ON TABLE mrs_subjects_racial_categories TO postgres;
GRANT ALL ON TABLE mrs_subjects_racial_categories TO node_api;


--
-- Name: mrs_subject_details2_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_details2_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_details2_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_details2_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_details2_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_details2_vw TO portal_app;
GRANT ALL ON TABLE mrs_subject_details2_vw TO node_api;


--
-- Name: mrs_subject_details_active_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_details_active_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_details_active_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_details_active_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_details_active_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_details_active_vw TO portal_app;
GRANT SELECT ON TABLE mrs_subject_details_active_vw TO transfer_app;
GRANT ALL ON TABLE mrs_subject_details_active_vw TO node_api;


--
-- Name: mrs_subject_login_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_subject_login_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_login_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_subject_login_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_login_counter TO node_api;


--
-- Name: mrs_subject_logins_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_logins_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_logins_hist FROM postgres;
GRANT ALL ON TABLE mrs_subject_logins_hist TO postgres;
GRANT ALL ON TABLE mrs_subject_logins_hist TO node_api;


--
-- Name: mrs_subject_logins_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_logins_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_logins_vw FROM postgres;
GRANT ALL ON TABLE mrs_subject_logins_vw TO postgres;
GRANT SELECT ON TABLE mrs_subject_logins_vw TO p2_app;
GRANT SELECT ON TABLE mrs_subject_logins_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_logins_vw TO portal_app;
GRANT ALL ON TABLE mrs_subject_logins_vw TO node_api;


--
-- Name: mrs_subject_match_tmp; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_match_tmp FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_match_tmp FROM postgres;
GRANT ALL ON TABLE mrs_subject_match_tmp TO postgres;
GRANT ALL ON TABLE mrs_subject_match_tmp TO node_api;


--
-- Name: mrs_subject_match_tmp_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_match_tmp_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_match_tmp_vw FROM postgres;
GRANT ALL ON TABLE mrs_subject_match_tmp_vw TO postgres;
GRANT SELECT ON TABLE mrs_subject_match_tmp_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_match_tmp_vw TO portal_app;
GRANT ALL ON TABLE mrs_subject_match_tmp_vw TO node_api;


--
-- Name: mrs_subject_philink_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_philink_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_philink_vw FROM postgres;
GRANT ALL ON TABLE mrs_subject_philink_vw TO postgres;
GRANT SELECT ON TABLE mrs_subject_philink_vw TO micis_app;
GRANT ALL ON TABLE mrs_subject_philink_vw TO node_api;


--
-- Name: mrs_subject_phone_det_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_phone_det_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_phone_det_vw FROM postgres;
GRANT ALL ON TABLE mrs_subject_phone_det_vw TO postgres;
GRANT SELECT ON TABLE mrs_subject_phone_det_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_phone_det_vw TO portal_app;
GRANT ALL ON TABLE mrs_subject_phone_det_vw TO node_api;


--
-- Name: mrs_subject_phone_details_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_phone_details_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_phone_details_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_phone_details_hist TO ni_developers;
GRANT ALL ON TABLE mrs_subject_phone_details_hist TO node_api;


--
-- Name: mrs_subject_tags; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tags FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tags FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tags TO ni_developers;
GRANT ALL ON TABLE mrs_subject_tags TO node_api;


--
-- Name: mrs_subject_tags_exportable_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tags_exportable_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tags_exportable_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tags_exportable_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_tags_exportable_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_tags_exportable_vw TO portal_app;
GRANT SELECT ON TABLE mrs_subject_tags_exportable_vw TO transfer_app;
GRANT ALL ON TABLE mrs_subject_tags_exportable_vw TO node_api;


--
-- Name: mrs_subject_tag_details_exportable_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tag_details_exportable_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tag_details_exportable_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tag_details_exportable_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_tag_details_exportable_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_tag_details_exportable_vw TO transfer_app;
GRANT SELECT ON TABLE mrs_subject_tag_details_exportable_vw TO portal_app;
GRANT ALL ON TABLE mrs_subject_tag_details_exportable_vw TO node_api;


--
-- Name: mrs_subject_tag_details_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tag_details_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tag_details_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tag_details_hist TO ni_developers;
GRANT ALL ON TABLE mrs_subject_tag_details_hist TO node_api;


--
-- Name: mrs_subject_tag_details_subject_tag_details_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_subject_tag_details_subject_tag_details_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_tag_details_subject_tag_details_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_subject_tag_details_subject_tag_details_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_tag_details_subject_tag_details_id_seq TO node_api;


--
-- Name: mrs_subject_tag_details_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tag_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tag_details_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tag_details_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_tag_details_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_tag_details_vw TO transfer_app;
GRANT SELECT ON TABLE mrs_subject_tag_details_vw TO portal_app;
GRANT ALL ON TABLE mrs_subject_tag_details_vw TO node_api;


--
-- Name: mrs_subject_tags_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tags_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tags_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tags_hist TO ni_developers;
GRANT ALL ON TABLE mrs_subject_tags_hist TO node_api;


--
-- Name: mrs_subject_tags_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tags_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tags_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tags_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_tags_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_tags_vw TO portal_app;
GRANT SELECT ON TABLE mrs_subject_tags_vw TO transfer_app;
GRANT ALL ON TABLE mrs_subject_tags_vw TO node_api;


--
-- Name: mrs_subject_tracker_events_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tracker_events_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tracker_events_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tracker_events_hist TO ni_developers;
GRANT ALL ON TABLE mrs_subject_tracker_events_hist TO node_api;


--
-- Name: mrs_subject_tracker_events_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_subject_tracker_events_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_tracker_events_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_subject_tracker_events_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_tracker_events_id_seq TO node_api;


--
-- Name: mrs_subject_tracker_responses_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_tracker_responses_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_tracker_responses_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_tracker_responses_hist TO ni_developers;
GRANT ALL ON TABLE mrs_subject_tracker_responses_hist TO node_api;


--
-- Name: mrs_subject_tracker_responses_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_subject_tracker_responses_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_tracker_responses_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_subject_tracker_responses_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_tracker_responses_id_seq TO node_api;


--
-- Name: mrs_subject_type_details_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_type_details_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_type_details_hist FROM postgres;
GRANT ALL ON TABLE mrs_subject_type_details_hist TO postgres;
GRANT ALL ON TABLE mrs_subject_type_details_hist TO node_api;


--
-- Name: mrs_subject_type_details_subject_type_detail_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_subject_type_details_subject_type_detail_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_type_details_subject_type_detail_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrs_subject_type_details_subject_type_detail_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_type_details_subject_type_detail_id_seq TO node_api;


--
-- Name: mrs_subject_type_group_counter; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_subject_type_group_counter FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_subject_type_group_counter FROM postgres;
GRANT ALL ON SEQUENCE mrs_subject_type_group_counter TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_subject_type_group_counter TO node_api;


--
-- Name: mrs_subject_type_group_link; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_type_group_link FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_type_group_link FROM postgres;
GRANT ALL ON TABLE mrs_subject_type_group_link TO postgres;
GRANT ALL ON TABLE mrs_subject_type_group_link TO node_api;


--
-- Name: mrs_subject_type_group_link_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_type_group_link_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_type_group_link_vw FROM postgres;
GRANT ALL ON TABLE mrs_subject_type_group_link_vw TO postgres;
GRANT SELECT ON TABLE mrs_subject_type_group_link_vw TO p2_app;
GRANT SELECT ON TABLE mrs_subject_type_group_link_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_type_group_link_vw TO portal_app;
GRANT ALL ON TABLE mrs_subject_type_group_link_vw TO node_api;


--
-- Name: mrs_subject_type_groups; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_type_groups FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_type_groups FROM postgres;
GRANT ALL ON TABLE mrs_subject_type_groups TO postgres;
GRANT ALL ON TABLE mrs_subject_type_groups TO node_api;


--
-- Name: mrs_subject_type_groups_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_type_groups_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_type_groups_hist FROM postgres;
GRANT ALL ON TABLE mrs_subject_type_groups_hist TO postgres;
GRANT ALL ON TABLE mrs_subject_type_groups_hist TO node_api;


--
-- Name: mrs_subject_type_groups_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_type_groups_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_type_groups_vw FROM postgres;
GRANT ALL ON TABLE mrs_subject_type_groups_vw TO postgres;
GRANT SELECT ON TABLE mrs_subject_type_groups_vw TO p2_app;
GRANT SELECT ON TABLE mrs_subject_type_groups_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_type_groups_vw TO portal_app;
GRANT ALL ON TABLE mrs_subject_type_groups_vw TO node_api;


--
-- Name: mrs_subject_types_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subject_types_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_types_hist FROM postgres;
GRANT ALL ON TABLE mrs_subject_types_hist TO postgres;
GRANT ALL ON TABLE mrs_subject_types_hist TO node_api;


--
-- Name: mrs_subject_types_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subject_types_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subject_types_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subject_types_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subject_types_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subject_types_vw TO portal_app;
GRANT SELECT ON TABLE mrs_subject_types_vw TO transfer_app;
GRANT ALL ON TABLE mrs_subject_types_vw TO node_api;


--
-- Name: mrs_subjects2_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subjects2_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subjects2_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subjects2_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subjects2_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subjects2_vw TO portal_app;
GRANT ALL ON TABLE mrs_subjects2_vw TO node_api;


--
-- Name: mrs_subjects_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subjects_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subjects_hist FROM postgres;
GRANT ALL ON TABLE mrs_subjects_hist TO postgres;
GRANT ALL ON TABLE mrs_subjects_hist TO node_api;


--
-- Name: mrs_subjects_race_cats_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subjects_race_cats_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subjects_race_cats_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subjects_race_cats_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subjects_race_cats_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subjects_race_cats_vw TO portal_app;
GRANT ALL ON TABLE mrs_subjects_race_cats_vw TO node_api;


--
-- Name: mrs_subjects_racial_categ_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subjects_racial_categ_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subjects_racial_categ_hist FROM postgres;
GRANT ALL ON TABLE mrs_subjects_racial_categ_hist TO postgres;
GRANT ALL ON TABLE mrs_subjects_racial_categ_hist TO node_api;


--
-- Name: mrs_subjects_racial_cats_bak; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subjects_racial_cats_bak FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subjects_racial_cats_bak FROM postgres;
GRANT ALL ON TABLE mrs_subjects_racial_cats_bak TO postgres;
GRANT ALL ON TABLE mrs_subjects_racial_cats_bak TO node_api;


--
-- Name: mrs_subjects_reserved; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subjects_reserved FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subjects_reserved FROM postgres;
GRANT ALL ON TABLE mrs_subjects_reserved TO postgres;
GRANT ALL ON TABLE mrs_subjects_reserved TO node_api;


--
-- Name: mrs_subjects_reserved_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_subjects_reserved_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subjects_reserved_vw FROM postgres;
GRANT ALL ON TABLE mrs_subjects_reserved_vw TO postgres;
GRANT SELECT ON TABLE mrs_subjects_reserved_vw TO micis_app;
GRANT ALL ON TABLE mrs_subjects_reserved_vw TO node_api;


--
-- Name: mrs_subjects_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_subjects_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_subjects_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_subjects_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_subjects_vw TO micis_app;
GRANT SELECT ON TABLE mrs_subjects_vw TO portal_app;
GRANT SELECT ON TABLE mrs_subjects_vw TO p2_app;
GRANT ALL ON TABLE mrs_subjects_vw TO node_api;


--
-- Name: mrs_system_phi_log; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_system_phi_log FROM PUBLIC;
REVOKE ALL ON TABLE mrs_system_phi_log FROM postgres;
GRANT ALL ON TABLE mrs_system_phi_log TO postgres;
GRANT ALL ON TABLE mrs_system_phi_log TO node_api;


--
-- Name: mrs_tabletquery_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_tabletquery_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_tabletquery_vw FROM postgres;
GRANT ALL ON TABLE mrs_tabletquery_vw TO postgres;
GRANT SELECT ON TABLE mrs_tabletquery_vw TO micis_app;
GRANT SELECT ON TABLE mrs_tabletquery_vw TO transfer_app;
GRANT ALL ON TABLE mrs_tabletquery_vw TO node_api;


--
-- Name: mrs_temp_clob; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_temp_clob FROM PUBLIC;
REVOKE ALL ON TABLE mrs_temp_clob FROM postgres;
GRANT ALL ON TABLE mrs_temp_clob TO postgres;
GRANT ALL ON TABLE mrs_temp_clob TO node_api;


--
-- Name: mrs_template_instruments; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_template_instruments FROM PUBLIC;
REVOKE ALL ON TABLE mrs_template_instruments FROM postgres;
GRANT ALL ON TABLE mrs_template_instruments TO postgres;
GRANT ALL ON TABLE mrs_template_instruments TO node_api;


--
-- Name: mrs_template_instruments_hist; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_template_instruments_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_template_instruments_hist FROM postgres;
GRANT ALL ON TABLE mrs_template_instruments_hist TO postgres;
GRANT ALL ON TABLE mrs_template_instruments_hist TO node_api;


--
-- Name: mrs_template_instruments_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_template_instruments_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_template_instruments_vw FROM postgres;
GRANT ALL ON TABLE mrs_template_instruments_vw TO postgres;
GRANT SELECT ON TABLE mrs_template_instruments_vw TO micis_app;
GRANT ALL ON TABLE mrs_template_instruments_vw TO node_api;


--
-- Name: mrs_temporary_sequence; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrs_temporary_sequence FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_temporary_sequence FROM postgres;
GRANT ALL ON SEQUENCE mrs_temporary_sequence TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrs_temporary_sequence TO node_api;


--
-- Name: mrs_trade_names_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_trade_names_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_trade_names_vw FROM postgres;
GRANT ALL ON TABLE mrs_trade_names_vw TO postgres;
GRANT SELECT ON TABLE mrs_trade_names_vw TO micis_app;
GRANT ALL ON TABLE mrs_trade_names_vw TO node_api;


--
-- Name: mrs_trgt_enrllmnt_temp; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_trgt_enrllmnt_temp FROM PUBLIC;
REVOKE ALL ON TABLE mrs_trgt_enrllmnt_temp FROM postgres;
GRANT ALL ON TABLE mrs_trgt_enrllmnt_temp TO postgres;
GRANT ALL ON TABLE mrs_trgt_enrllmnt_temp TO node_api;


--
-- Name: mrs_trgt_enrllmnt_temp_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_trgt_enrllmnt_temp_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_trgt_enrllmnt_temp_vw FROM postgres;
GRANT ALL ON TABLE mrs_trgt_enrllmnt_temp_vw TO postgres;
GRANT SELECT ON TABLE mrs_trgt_enrllmnt_temp_vw TO micis_app;
GRANT ALL ON TABLE mrs_trgt_enrllmnt_temp_vw TO node_api;


--
-- Name: mrs_unlinked_assessments; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_unlinked_assessments FROM PUBLIC;
REVOKE ALL ON TABLE mrs_unlinked_assessments FROM postgres;
GRANT ALL ON TABLE mrs_unlinked_assessments TO postgres;
GRANT ALL ON TABLE mrs_unlinked_assessments TO node_api;


--
-- Name: mrs_ursi_dets_mv; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_ursi_dets_mv FROM PUBLIC;
REVOKE ALL ON TABLE mrs_ursi_dets_mv FROM postgres;
GRANT ALL ON TABLE mrs_ursi_dets_mv TO postgres;
GRANT ALL ON TABLE mrs_ursi_dets_mv TO node_api;


--
-- Name: mrs_user_app_options; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_user_app_options FROM PUBLIC;
REVOKE ALL ON TABLE mrs_user_app_options FROM ni_developers;
GRANT ALL ON TABLE mrs_user_app_options TO ni_developers;
GRANT ALL ON TABLE mrs_user_app_options TO node_api;


--
-- Name: mrs_user_app_options_hist; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_user_app_options_hist FROM PUBLIC;
REVOKE ALL ON TABLE mrs_user_app_options_hist FROM ni_developers;
GRANT ALL ON TABLE mrs_user_app_options_hist TO ni_developers;
GRANT ALL ON TABLE mrs_user_app_options_hist TO node_api;


--
-- Name: mrs_user_app_options_id_seq; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON SEQUENCE mrs_user_app_options_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrs_user_app_options_id_seq FROM ni_developers;
GRANT ALL ON SEQUENCE mrs_user_app_options_id_seq TO ni_developers;
GRANT SELECT,USAGE ON SEQUENCE mrs_user_app_options_id_seq TO node_api;


--
-- Name: mrs_user_app_options_vw; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE mrs_user_app_options_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_user_app_options_vw FROM ni_developers;
GRANT ALL ON TABLE mrs_user_app_options_vw TO ni_developers;
GRANT SELECT ON TABLE mrs_user_app_options_vw TO p2_app;
GRANT SELECT ON TABLE mrs_user_app_options_vw TO micis_app;
GRANT SELECT ON TABLE mrs_user_app_options_vw TO portal_app;
GRANT ALL ON TABLE mrs_user_app_options_vw TO node_api;


--
-- Name: mrs_user_scan_export_options; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_user_scan_export_options FROM PUBLIC;
REVOKE ALL ON TABLE mrs_user_scan_export_options FROM postgres;
GRANT ALL ON TABLE mrs_user_scan_export_options TO postgres;
GRANT ALL ON TABLE mrs_user_scan_export_options TO node_api;


--
-- Name: mrs_user_scan_export_options_vw; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE mrs_user_scan_export_options_vw FROM PUBLIC;
REVOKE ALL ON TABLE mrs_user_scan_export_options_vw FROM postgres;
GRANT ALL ON TABLE mrs_user_scan_export_options_vw TO postgres;
GRANT SELECT ON TABLE mrs_user_scan_export_options_vw TO micis_app;
GRANT ALL ON TABLE mrs_user_scan_export_options_vw TO node_api;


--
-- Name: mrsaddres_addressid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsaddres_addressid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsaddres_addressid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsaddres_addressid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsaddres_addressid_seq TO node_api;


--
-- Name: mrsanareg_anaregid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsanareg_anaregid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsanareg_anaregid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsanareg_anaregid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsanareg_anaregid_seq TO node_api;


--
-- Name: mrsassess_assessmentid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsassess_assessmentid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsassess_assessmentid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsassess_assessmentid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsassess_assessmentid_seq TO node_api;


--
-- Name: mrsdatadom_datadom_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsdatadom_datadom_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsdatadom_datadom_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsdatadom_datadom_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsdatadom_datadom_id_seq TO node_api;


--
-- Name: mrsdattyp_dataentrytypeid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsdattyp_dataentrytypeid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsdattyp_dataentrytypeid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsdattyp_dataentrytypeid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsdattyp_dataentrytypeid_seq TO node_api;


--
-- Name: mrsdoccat_categoryid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsdoccat_categoryid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsdoccat_categoryid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsdoccat_categoryid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsdoccat_categoryid_seq TO node_api;


--
-- Name: mrsdocume_fileid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsdocume_fileid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsdocume_fileid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsdocume_fileid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsdocume_fileid_seq TO node_api;


--
-- Name: mrsdrgcat_cat_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsdrgcat_cat_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsdrgcat_cat_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsdrgcat_cat_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsdrgcat_cat_id_seq TO node_api;


--
-- Name: mrsdrugprop_property_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsdrugprop_property_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsdrugprop_property_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsdrugprop_property_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsdrugprop_property_id_seq TO node_api;


--
-- Name: mrseeg_eegid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrseeg_eegid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrseeg_eegid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrseeg_eegid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrseeg_eegid_seq TO node_api;


--
-- Name: mrseegser_eegseriesid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrseegser_eegseriesid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrseegser_eegseriesid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrseegser_eegseriesid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrseegser_eegseriesid_seq TO node_api;


--
-- Name: mrseegserid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrseegserid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrseegserid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrseegserid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrseegserid_seq TO node_api;


--
-- Name: mrseegsessid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrseegsessid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrseegsessid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrseegsessid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrseegsessid_seq TO node_api;


--
-- Name: mrsextid_extid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsextid_extid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsextid_extid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsextid_extid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsextid_extid_seq TO node_api;


--
-- Name: mrsimages_imageid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsimages_imageid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsimages_imageid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsimages_imageid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsimages_imageid_seq TO node_api;


--
-- Name: mrsinssec_sectionid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsinssec_sectionid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsinssec_sectionid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsinssec_sectionid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsinssec_sectionid_seq TO node_api;


--
-- Name: mrsinstru_instrumentid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsinstru_instrumentid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsinstru_instrumentid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsinstru_instrumentid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsinstru_instrumentid_seq TO node_api;


--
-- Name: mrsmodali_modalityid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsmodali_modalityid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsmodali_modalityid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsmodali_modalityid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsmodali_modalityid_seq TO node_api;


--
-- Name: mrsmodpropid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsmodpropid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsmodpropid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsmodpropid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsmodpropid_seq TO node_api;


--
-- Name: mrsperali_aliasid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsperali_aliasid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsperali_aliasid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsperali_aliasid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsperali_aliasid_seq TO node_api;


--
-- Name: mrsperode_prdid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsperode_prdid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsperode_prdid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsperode_prdid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsperode_prdid_seq TO node_api;


--
-- Name: mrsphones_phoneid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsphones_phoneid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsphones_phoneid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsphones_phoneid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsphones_phoneid_seq TO node_api;


--
-- Name: mrsraccat_raccatid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsraccat_raccatid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsraccat_raccatid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsraccat_raccatid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsraccat_raccatid_seq TO node_api;


--
-- Name: mrsrecscanexp_scanexpid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsrecscanexp_scanexpid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsrecscanexp_scanexpid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsrecscanexp_scanexpid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsrecscanexp_scanexpid_seq TO node_api;


--
-- Name: mrsroles_roleid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsroles_roleid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsroles_roleid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsroles_roleid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsroles_roleid_seq TO node_api;


--
-- Name: mrsscanne_scannerid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsscanne_scannerid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsscanne_scannerid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsscanne_scannerid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsscanne_scannerid_seq TO node_api;


--
-- Name: mrsscanstage_scanid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsscanstage_scanid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsscanstage_scanid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsscanstage_scanid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsscanstage_scanid_seq TO node_api;


--
-- Name: mrsscases_reviewinclude_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsscases_reviewinclude_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsscases_reviewinclude_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsscases_reviewinclude_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsscases_reviewinclude_seq TO node_api;


--
-- Name: mrsscases_scanid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsscases_scanid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsscases_scanid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsscases_scanid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsscases_scanid_seq TO node_api;


--
-- Name: mrsseries_seriesid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsseries_seriesid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsseries_seriesid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsseries_seriesid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsseries_seriesid_seq TO node_api;


--
-- Name: mrsshrrul_excid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsshrrul_excid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsshrrul_excid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsshrrul_excid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsshrrul_excid_seq TO node_api;


--
-- Name: mrsshrrul_ruleid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsshrrul_ruleid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsshrrul_ruleid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsshrrul_ruleid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsshrrul_ruleid_seq TO node_api;


--
-- Name: mrssource_source_type_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrssource_source_type_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrssource_source_type_seq FROM postgres;
GRANT ALL ON SEQUENCE mrssource_source_type_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrssource_source_type_seq TO node_api;


--
-- Name: mrsstdproj_project_id_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsstdproj_project_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsstdproj_project_id_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsstdproj_project_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsstdproj_project_id_seq TO node_api;


--
-- Name: mrsstucod_codeid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsstucod_codeid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsstucod_codeid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsstucod_codeid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsstucod_codeid_seq TO node_api;


--
-- Name: mrsstucon_conditionid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsstucon_conditionid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsstucon_conditionid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsstucon_conditionid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsstucon_conditionid_seq TO node_api;


--
-- Name: mrsstudie_studyid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsstudie_studyid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsstudie_studyid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsstudie_studyid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsstudie_studyid_seq TO node_api;


--
-- Name: mrsstures_studyresareid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsstures_studyresareid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsstures_studyresareid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsstures_studyresareid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsstures_studyresareid_seq TO node_api;


--
-- Name: mrsstures_studyresaresid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsstures_studyresaresid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsstures_studyresaresid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsstures_studyresaresid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsstures_studyresaresid_seq TO node_api;


--
-- Name: mrsstutas_eegtaskid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrsstutas_eegtaskid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrsstutas_eegtaskid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrsstutas_eegtaskid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrsstutas_eegtaskid_seq TO node_api;


--
-- Name: mrssubtyp_subjecttypeid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrssubtyp_subjecttypeid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrssubtyp_subjecttypeid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrssubtyp_subjecttypeid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrssubtyp_subjecttypeid_seq TO node_api;


--
-- Name: mrstrdnm_tradeid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE mrstrdnm_tradeid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE mrstrdnm_tradeid_seq FROM postgres;
GRANT ALL ON SEQUENCE mrstrdnm_tradeid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE mrstrdnm_tradeid_seq TO node_api;


--
-- Name: olin_scanid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE olin_scanid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE olin_scanid_seq FROM postgres;
GRANT ALL ON SEQUENCE olin_scanid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE olin_scanid_seq TO node_api;


--
-- Name: olin_seriesid_seq; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE olin_seriesid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE olin_seriesid_seq FROM postgres;
GRANT ALL ON SEQUENCE olin_seriesid_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE olin_seriesid_seq TO node_api;


--
-- Name: rad_review_report_jody; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE rad_review_report_jody FROM PUBLIC;
REVOKE ALL ON TABLE rad_review_report_jody FROM postgres;
GRANT ALL ON TABLE rad_review_report_jody TO postgres;
GRANT ALL ON TABLE rad_review_report_jody TO node_api;


--
-- Name: rr2; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE rr2 FROM PUBLIC;
REVOKE ALL ON TABLE rr2 FROM postgres;
GRANT ALL ON TABLE rr2 TO postgres;
GRANT ALL ON TABLE rr2 TO node_api;


--
-- Name: rr2good; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE rr2good FROM PUBLIC;
REVOKE ALL ON TABLE rr2good FROM postgres;
GRANT ALL ON TABLE rr2good TO postgres;
GRANT ALL ON TABLE rr2good TO node_api;


--
-- Name: seq_charge_code_id; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE seq_charge_code_id FROM PUBLIC;
REVOKE ALL ON SEQUENCE seq_charge_code_id FROM postgres;
GRANT ALL ON SEQUENCE seq_charge_code_id TO postgres;
GRANT SELECT,USAGE ON SEQUENCE seq_charge_code_id TO node_api;


--
-- Name: seq_site_charge_id; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE seq_site_charge_id FROM PUBLIC;
REVOKE ALL ON SEQUENCE seq_site_charge_id FROM postgres;
GRANT ALL ON SEQUENCE seq_site_charge_id TO postgres;
GRANT SELECT,USAGE ON SEQUENCE seq_site_charge_id TO node_api;


--
-- Name: seq_site_modality_id; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE seq_site_modality_id FROM PUBLIC;
REVOKE ALL ON SEQUENCE seq_site_modality_id FROM postgres;
GRANT ALL ON SEQUENCE seq_site_modality_id TO postgres;
GRANT SELECT,USAGE ON SEQUENCE seq_site_modality_id TO node_api;


--
-- Name: seq_study_charge_id; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE seq_study_charge_id FROM PUBLIC;
REVOKE ALL ON SEQUENCE seq_study_charge_id FROM postgres;
GRANT ALL ON SEQUENCE seq_study_charge_id TO postgres;
GRANT SELECT,USAGE ON SEQUENCE seq_study_charge_id TO node_api;


--
-- Name: seq_study_modality_id; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON SEQUENCE seq_study_modality_id FROM PUBLIC;
REVOKE ALL ON SEQUENCE seq_study_modality_id FROM postgres;
GRANT ALL ON SEQUENCE seq_study_modality_id TO postgres;
GRANT SELECT,USAGE ON SEQUENCE seq_study_modality_id TO node_api;


--
-- Name: tmp_miscalc_values; Type: ACL; Schema: mrsdba; Owner: ni_developers
--

REVOKE ALL ON TABLE tmp_miscalc_values FROM PUBLIC;
REVOKE ALL ON TABLE tmp_miscalc_values FROM ni_developers;
GRANT ALL ON TABLE tmp_miscalc_values TO ni_developers;
GRANT ALL ON TABLE tmp_miscalc_values TO node_api;


--
-- Name: v_max_per_segment; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE v_max_per_segment FROM PUBLIC;
REVOKE ALL ON TABLE v_max_per_segment FROM postgres;
GRANT ALL ON TABLE v_max_per_segment TO postgres;
GRANT ALL ON TABLE v_max_per_segment TO node_api;


--
-- Name: v_site_id; Type: ACL; Schema: mrsdba; Owner: postgres
--

REVOKE ALL ON TABLE v_site_id FROM PUBLIC;
REVOKE ALL ON TABLE v_site_id FROM postgres;
GRANT ALL ON TABLE v_site_id TO postgres;
GRANT ALL ON TABLE v_site_id TO node_api;


SET search_path = nifdba, pg_catalog;

--
-- Name: nif_assessments_vw; Type: ACL; Schema: nifdba; Owner: postgres
--

REVOKE ALL ON TABLE nif_assessments_vw FROM PUBLIC;
REVOKE ALL ON TABLE nif_assessments_vw FROM postgres;
GRANT ALL ON TABLE nif_assessments_vw TO postgres;
GRANT SELECT ON TABLE nif_assessments_vw TO nif_user;


--
-- Name: nif_instrument_questions_vw; Type: ACL; Schema: nifdba; Owner: postgres
--

REVOKE ALL ON TABLE nif_instrument_questions_vw FROM PUBLIC;
REVOKE ALL ON TABLE nif_instrument_questions_vw FROM postgres;
GRANT ALL ON TABLE nif_instrument_questions_vw TO postgres;
GRANT SELECT ON TABLE nif_instrument_questions_vw TO nif_user;


--
-- Name: nif_instrument_section_details_vw; Type: ACL; Schema: nifdba; Owner: postgres
--

REVOKE ALL ON TABLE nif_instrument_section_details_vw FROM PUBLIC;
REVOKE ALL ON TABLE nif_instrument_section_details_vw FROM postgres;
GRANT ALL ON TABLE nif_instrument_section_details_vw TO postgres;
GRANT SELECT ON TABLE nif_instrument_section_details_vw TO nif_user;


--
-- Name: nif_instrument_sections_vw; Type: ACL; Schema: nifdba; Owner: postgres
--

REVOKE ALL ON TABLE nif_instrument_sections_vw FROM PUBLIC;
REVOKE ALL ON TABLE nif_instrument_sections_vw FROM postgres;
GRANT ALL ON TABLE nif_instrument_sections_vw TO postgres;
GRANT SELECT ON TABLE nif_instrument_sections_vw TO nif_user;


--
-- Name: nif_instruments_vw; Type: ACL; Schema: nifdba; Owner: postgres
--

REVOKE ALL ON TABLE nif_instruments_vw FROM PUBLIC;
REVOKE ALL ON TABLE nif_instruments_vw FROM postgres;
GRANT ALL ON TABLE nif_instruments_vw TO postgres;
GRANT SELECT ON TABLE nif_instruments_vw TO nif_user;


--
-- Name: nif_scan_sessions_vw; Type: ACL; Schema: nifdba; Owner: postgres
--

REVOKE ALL ON TABLE nif_scan_sessions_vw FROM PUBLIC;
REVOKE ALL ON TABLE nif_scan_sessions_vw FROM postgres;
GRANT ALL ON TABLE nif_scan_sessions_vw TO postgres;
GRANT SELECT ON TABLE nif_scan_sessions_vw TO nif_user;


--
-- Name: nif_series_vw; Type: ACL; Schema: nifdba; Owner: postgres
--

REVOKE ALL ON TABLE nif_series_vw FROM PUBLIC;
REVOKE ALL ON TABLE nif_series_vw FROM postgres;
GRANT ALL ON TABLE nif_series_vw TO postgres;
GRANT SELECT ON TABLE nif_series_vw TO nif_user;


--
-- Name: nif_sites_vw; Type: ACL; Schema: nifdba; Owner: postgres
--

REVOKE ALL ON TABLE nif_sites_vw FROM PUBLIC;
REVOKE ALL ON TABLE nif_sites_vw FROM postgres;
GRANT ALL ON TABLE nif_sites_vw TO postgres;
GRANT SELECT ON TABLE nif_sites_vw TO nif_user;


--
-- PostgreSQL database dump complete
--

